<template>
    <div class="row">
        <div class="col-sm-6">
            <DataViewPicker v-model="dataView"
                            label="Financial Scheduled Transaction Data View"
                            help="A Data View that provides the set of Financial Scheduled Transactions with which the Person may be connected."
                            :entityTypeGuid="EntityType.FinancialScheduledTransaction"
                            showBlankItem />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <CheckBox v-model="combineGiving"
                      label="Include Individuals in the Same Giving Group"
                      help="Combine individuals in the same giving group when reporting the list of individuals." />
        </div>
    </div>
</template>

<script setup lang="ts">
    import DataViewPicker from "@Obsidian/Controls/dataViewPicker.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ref, watch } from "vue";
    import { dataViewFilterProps } from "@Obsidian/Utility/component";
    import { safeParseJson } from "@Obsidian/Utility/stringUtils";
    import { asBoolean, asTrueOrFalseString } from "@Obsidian/Utility/booleanUtils";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";

    const props = defineProps(dataViewFilterProps);
    const emit = defineEmits<{
        (e: "update:modelValue", value: Record<string, string | null | undefined>): void
    }>();

    const dataView = ref<ListItemBag[]>(safeParseJson(props.modelValue.dataView) ?? []);
    const combineGiving = ref<boolean>(asBoolean(props.modelValue.combineGiving));

    watch([dataView, combineGiving], () => {
        emit("update:modelValue", {
            ...props.modelValue,
            dataView: JSON.stringify(dataView.value),
            combineGiving: asTrueOrFalseString(combineGiving.value),
        });
    });
</script>