<template>
    <StepProgramPicker v-if="filterMode == FilterMode.AdvancedFilter"
                       v-model="stepProgram"
                       label="Step Program"
                       rules="required"
                       showBlankItem />

    <StepTypePicker v-if="filterMode == FilterMode.AdvancedFilter"
                    v-model="stepType"
                    :stepProgramGuid="stepProgram?.value"
                    label="Step Type"
                    rules="required"
                    showBlankItem />

    <div style="margin-right:-10px">
        <FieldFilterRuleRow v-model="filterRule"
                            :sources="sourcesForStepType"
                            :filterMode="filterMode"
                            disableRemoval
                            allowBlankFieldSelection />
    </div>
</template>

<script setup lang="ts">
    import StepProgramPicker from "@Obsidian/Controls/stepProgramPicker.obs";
    import StepTypePicker from "@Obsidian/Controls/stepTypePicker.obs";
    import FieldFilterRuleRow from "@Obsidian/Controls/fieldFilterRuleRow.obs";
    import { dataViewFilterProps } from "@Obsidian/Utility/component";
    import { computed, ref, watch } from "vue";
    import { safeParseJson } from "@Obsidian/Utility/stringUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { Guid } from "@Obsidian/Types";
    import { FieldFilterSourceBag } from "@Obsidian/ViewModels/Reporting/fieldFilterSourceBag";
    import { FieldFilterRuleBag } from "@Obsidian/ViewModels/Reporting/fieldFilterRuleBag";
    import { newGuid } from "@Obsidian/Utility/guid";
    import { FieldFilterSourceType } from "@Obsidian/Enums/Reporting/fieldFilterSourceType";
    import { FilterMode } from "@Obsidian/Enums/Reporting/filterMode";

    const props = defineProps(dataViewFilterProps);

    const emit = defineEmits<{
        (e: "update:modelValue", value: Record<string, string | null | undefined>): void
    }>();

    const stepProgram = ref<ListItemBag | null | undefined>(safeParseJson(props.modelValue.stepProgram));
    const stepType = ref<ListItemBag | null | undefined>(safeParseJson(props.modelValue.stepType));
    const fieldFilterSources = safeParseJson<Record<Guid, FieldFilterSourceBag[]>>(props.modelValue.fieldFilterSources) ?? {};

    const sourcesForStepType = computed(() => {
        return fieldFilterSources[stepType.value?.value ?? ""] ?? [];
    });

    const filterRule = ref<FieldFilterRuleBag>(safeParseJson(props.modelValue.filterRule) ?? createNewFieldRule());

    watch(stepProgram, () => {
        stepType.value = null;
    });

    watch(stepType, () => {
        filterRule.value = createNewFieldRule();
    });

    function createNewFieldRule(): FieldFilterRuleBag {
        return {
            guid: newGuid(),
            comparisonType: 0,
            sourceType: FieldFilterSourceType.Attribute,
        };
    }

    watch([stepProgram, stepType, filterRule], () => {
        emit("update:modelValue", {
            ...props.modelValue,
            stepProgram: JSON.stringify(stepProgram.value),
            stepType: JSON.stringify(stepType.value),
            filterRule: JSON.stringify(filterRule.value),
        });
    });
</script>