//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// Auth View Model
    /// </summary>
    public partial class AuthBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets the name of action that this Auth entity covers (i.e. view, edit, administrate, etc.).
        /// </summary>
        /// <value>
        /// A System.String representing the name of the action that is covered by this Auth entity.
        /// </value>
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if this Auth entity allows or denies this action for the role.
        /// </summary>
        /// <value>
        /// A System.String value that equals A for allow and D for deny.
        /// </value>
        public string AllowOrDeny { get; set; }

        /// <summary>
        /// Gets or sets the EntityId of the entity that this Auth entity applies to.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the EntityId of the entity that this Auth entity applies to.
        /// </value>
        public int? EntityId { get; set; }

        /// <summary>
        /// Gets or sets the EntityTypeId of the Rock.Model.EntityType for the entity that this Auth object applies to.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the EntityTypeId of the Rock.Model.EntityType of the entity that this Auth object applies to.
        /// </value>
        public int EntityTypeId { get; set; }

        /// <summary>
        /// Gets or sets the GroupId of the Security Role Rock.Model.Group that this Auth entity allows or denies access to. This is used for group based authorization.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the GroupId of the Rock.Model.Person that this Auth entity allows or denies access to. This applies to group based authorization.
        /// If group based Authorization is not used this value will be null.
        /// </value>
        public int? GroupId { get; set; }

        /// <summary>
        /// Gets or sets the order or priority of the Auth entity. 
        /// </summary>
        /// <value>
        /// A System.Int32 representing the order of the Auth entity.
        /// </value>
        public int Order { get; set; }

        /// <summary>
        /// Gets or sets the Id of the Rock.Model.PersonAlias that this Auth entity allows or denies access to. This is used for user based authorization
        /// </summary>
        /// <value>
        /// A System.Int32 representing the Id of the Rock.Model.PersonAlias that this Auth entity allows or denies access to. This applies to user/person based authorization.
        /// If user/person based Authorization is not used this value will be null.
        /// </value>
        public int? PersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the special role that this Auth entity applies to.
        /// </summary>
        /// <value>
        /// A Rock.Model.SpecialRole enum indicating the special role that this Auth entity applies to.
        /// If this Auth entity does not apply to any special role then the value will be SpecialRole.None or (0); 
        /// If this Auth entity applies to All Users (authenticated and unauthenticated) then the value will be SpecialRole.AllUsers or 1;
        /// If this Auth entity applies to All Authenticated Users then the value will be SpecialRole.AllAuthenticatedUsers or 2;
        /// If this Auth entity applies to All Un-authenticated Users then this value will be SpecialRole.AllUnAuthenticatedUsers or 3.
        /// </value>
        public int SpecialRole { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
