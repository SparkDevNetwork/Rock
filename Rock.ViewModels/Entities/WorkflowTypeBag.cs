//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// WorkflowType View Model
    /// </summary>
    public partial class WorkflowTypeBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets the CategoryId of the Rock.Model.Category that this WorkflowType belongs to. 
        /// </summary>
        /// <value>
        /// A System.Int32 representing the CategoryId of the Rock.Model.Category that the WorkflowType belongs to. 
        /// If the WorkflowType does not belong to a category, this value will be null.
        /// </value>
        public int? CategoryId { get; set; }

        /// <summary>
        /// Gets or sets the completed workflow retention period in days.
        /// </summary>
        /// <value>
        /// The completed workflow retention period in days.
        /// </value>
        public int? CompletedWorkflowRetentionPeriod { get; set; }

        /// <summary>
        /// Gets or sets a user defined description or summary about the WorkflowType.
        /// </summary>
        /// <value>
        /// A System.String representing a description/summary of the WorkflowType.
        /// </value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the form builder settings json.
        /// </summary>
        /// <value>
        /// The form builder settings json.
        /// </value>
        public string FormBuilderSettingsJson { get; set; }

        /// <summary>
        /// Gets or sets the form builder template identifier.
        /// </summary>
        /// <value>
        /// The form builder template identifier.
        /// </value>
        public int? FormBuilderTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the form end date and time.
        /// </summary>
        /// <value>
        /// The form end date and time.
        /// </value>
        public DateTime? FormEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the form start date and time.
        /// </summary>
        /// <value>
        /// The form start date and time.
        /// </value>
        public DateTime? FormStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the name of the icon CSS class. This property is only used for CSS based icons.
        /// </summary>
        /// <value>
        /// A System.String representing the name of the icon CSS class. This property will be null if a file based icon is being used.
        /// </value>
        public string IconCssClass { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if this WorkflowType is active.
        /// </summary>
        /// <value>
        /// A System.Boolean that is true if the WorkflowType is active; otherwise false.
        /// </value>
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [is form builder].
        /// </summary>
        /// <value>
        ///   true if [is form builder]; otherwise, false.
        /// </value>
        public bool IsFormBuilder { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [is login required].
        /// </summary>
        /// <value>
        ///   true if [is login required]; otherwise, false.
        /// </value>
        public bool IsLoginRequired { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Rock.Model.Workflow instances of this WorkflowType are persisted.
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if Rock.Model.Workflow instances of this WorkflowType are persisted; otherwise false.
        /// </value>
        public bool IsPersisted { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if this WorkflowType is part of the Rock core system/framework.
        /// </summary>
        /// <value>
        /// A System.Boolean that is true if the WorkflowType is part of the Rock core system/framework; otherwise false.
        /// </value>
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or sets the logging level.
        /// Gets or sets the Rock.Model.WorkflowLoggingLevel indicating the level of detail that should be logged when instances of this WorkflowType are executed.
        /// </summary>
        /// <value>
        /// A Rock.Model.WorkflowLoggingLevel value indicating the level of detail that should be logged when instances of this WorkflowType are executed.
        /// When WorkflowLoggingLevel.None no details of the Workflow instance's execution will be logged.
        /// When WorkflowLoggingLevel.Workflow only workflow events will be logged (i.e. begin and end).
        /// When WorkflowLoggingLevel.Activity workflow and activity events will be logged.
        /// When WorkflowLoggingLevel.Action workflow, activity and action events will be logged.
        /// </value>
        public int LoggingLevel { get; set; }

        /// <summary>
        /// Gets or sets the log retention period in days.
        /// </summary>
        /// <value>
        /// The log retention period in days.
        /// </value>
        public int? LogRetentionPeriod { get; set; }

        /// <summary>
        /// Gets or sets the number of days since the creation date after which a workflow would be automatically marked completed.
        /// </summary>
        /// <value>
        /// The number of days since the creation date after which a workflow would be automatically marked completed.
        /// </value>
        public int? MaxWorkflowAgeDays { get; set; }

        /// <summary>
        /// Gets or sets the friendly Name of the WorkflowType. This property is required.
        /// </summary>
        /// <value>
        /// A System.String representing the friendly Name of the WorkflowType.
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the text to be displayed when a workflow of this type workflow is active, but does not have an active form. This field supports Lava.
        /// </summary>
        /// <value>
        /// The summary view text.
        /// </value>
        public string NoActionMessage { get; set; }

        /// <summary>
        /// Gets or sets the display order of the WorkFlowType, the lower the number the higher up that the WorkflowType will display in the workflow list. This
        /// property is required.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the display order of the WorkflowType.  
        /// </value>
        public int Order { get; set; }

        /// <summary>
        /// Gets or sets the minimum length of time, in seconds, before a persisted Rock.Model.Workflow instance that implements this 
        /// WorkflowType can be re-executed.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the minimum length of time, in seconds, that must pass before the same persisted Rock.Model.Workflow instance
        /// that implements this WorkflowType can be re-executed.
        /// </value>
        public int? ProcessingIntervalSeconds { get; set; }

        /// <summary>
        /// Gets or sets the summary view text to be displayed when a workflow of this type has no form or has been completed. This field supports Lava.
        /// </summary>
        /// <value>
        /// The summary view text.
        /// </value>
        public string SummaryViewText { get; set; }

        /// <summary>
        /// Gets or sets the date time when the workflow of this type will no longer be processed.
        /// </summary>
        /// <value>
        /// The workflow expire date time.
        /// </value>
        public DateTime? WorkflowExpireDateTime { get; set; }

        /// <summary>
        /// Gets or sets the workflow identifier prefix.
        /// </summary>
        /// <value>
        /// The workflow identifier prefix.
        /// </value>
        public string WorkflowIdPrefix { get; set; }

        /// <summary>
        /// Gets or sets the work term for the WorkflowType. This is the action that is being performed by this WorkflowType. This property is required.
        /// </summary>
        /// <value>
        /// A System.String representing the WorkItem that is being performed by this WorkflowType
        /// </value>
        public string WorkTerm { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
