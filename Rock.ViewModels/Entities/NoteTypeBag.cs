//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// NoteType View Model
    /// </summary>
    public partial class NoteTypeBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets a value indicating whether attachments are allowed for this note type.
        /// </summary>
        /// <value>
        ///   true if attachments are allowed; otherwise, false.
        /// </value>
        public bool AllowsAttachments { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [allows replies].
        /// </summary>
        /// <value>
        ///   true if [allows replies]; otherwise, false.
        /// </value>
        public bool AllowsReplies { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [allows watching].
        /// </summary>
        /// <value>
        ///   true if [allows watching]; otherwise, false.
        /// </value>
        public bool AllowsWatching { get; set; }

        /// <summary>
        /// A optional Lava Template that can be used to general a URL where Notes of this type can be approved
        /// If this is left blank, the Approval URL will be a URL to the page (including a hash anchor to the note) where the note was originally created
        /// </summary>
        /// <value>
        /// The approval URL template.
        /// </value>
        public string ApprovalUrlTemplate { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [automatic watch authors].
        /// </summary>
        /// <value>
        ///   true if [automatic watch authors]; otherwise, false.
        /// </value>
        public bool AutoWatchAuthors { get; set; }

        /// <summary>
        /// Gets or sets the background color of each note
        /// </summary>
        /// <value>
        /// The color of the background.
        /// </value>
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or sets the binary file type identifier used when saving attachments.
        /// </summary>
        /// <value>
        /// The binary file type identifier used when saving attachments.
        /// </value>
        public int? BinaryFileTypeId { get; set; }

        /// <summary>
        /// Gets or sets the border color of each note
        /// </summary>
        /// <value>
        /// The color of the border.
        /// </value>
        public string BorderColor { get; set; }

        /// <summary>
        /// Gets or sets the Id of the Rock.Model.EntityType that this NoteType is used for.  A NoteType can only be associated with a single Rock.Model.EntityType and will 
        /// only contain notes for entities of this type. This property is required.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the Id of the Rock.Model.EntityType
        /// </value>
        public int EntityTypeId { get; set; }

        /// <summary>
        /// Gets or sets the name of the qualifier column/property on the Rock.Model.EntityType that this NoteType applies to. If this is not 
        /// provided, the note type can be used on all entities of the provided Rock.Model.EntityType.
        /// </summary>
        /// <value>
        /// A System.String representing the name of the qualifier column that this NoteType applies to.
        /// </value>
        public string EntityTypeQualifierColumn { get; set; }

        /// <summary>
        /// Gets or sets the qualifier value in the qualifier column that this note type applies to.  For instance this note type and related notes will only be applicable to entity 
        /// if the value in the EntityTypeQualiferColumn matches this value. This property should not be populated without also populating the EntityTypeQualifierColumn property.
        /// </summary>
        /// <value>
        /// Entity Type Qualifier Value.
        /// </value>
        public string EntityTypeQualifierValue { get; set; }

        /// <summary>
        /// Gets or sets the font color of the note text
        /// </summary>
        /// <value>
        /// The color of the font.
        /// </value>
        public string FontColor { get; set; }

        /// <summary>
        /// Gets or sets the name of an icon CSS class. 
        /// </summary>
        /// <value>
        /// A System.String representing the name of an icon CSS class
        /// </value>
        public string IconCssClass { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating that this NoteType is part of the Rock core system/framework. This property is required.
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if this NoteType is part of the core system/framework, otherwise false.
        /// </value>
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or sets the maximum reply depth.
        /// </summary>
        /// <value>
        /// The maximum reply depth.
        /// </value>
        public int? MaxReplyDepth { get; set; }

        /// <summary>
        /// Gets or sets the Name of the NoteType. This property is required.
        /// </summary>
        /// <value>
        /// A System.String representing the Name of the NoteType.
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the order.
        /// </summary>
        /// <value>
        /// The order.
        /// </value>
        public int Order { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [requires approvals].
        /// </summary>
        /// <value>
        ///   true if [requires approvals]; otherwise, false.
        /// </value>
        public bool RequiresApprovals { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [send approval notifications].
        /// </summary>
        /// <value>
        ///   true if [send approval notifications]; otherwise, false.
        /// </value>
        public bool SendApprovalNotifications { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the type is user selectable.
        /// </summary>
        /// <value>
        ///   true if [user selectable]; otherwise, false.
        /// </value>
        public bool UserSelectable { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
