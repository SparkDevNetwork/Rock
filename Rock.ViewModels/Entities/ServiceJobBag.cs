//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// ServiceJob View Model
    /// </summary>
    public partial class ServiceJobBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets the Assembly name of the .dll file that contains the job class.
        /// Set this to null to have Rock figure out the Assembly automatically.
        /// </summary>
        /// <value>
        /// A System.String that contains the Assembly name of the .dll file that contains the job class.
        /// </value>
        public string Assembly { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified class name with Namespace of the Job class. This property is required.
        /// </summary>
        /// <value>
        /// A System.String containing the fully qualified class name with Namespace of the Job class.
        /// </value>
        public string Class { get; set; }

        /// <summary>
        /// Gets or sets the Cron Expression that is used to schedule the Job. This property is required.
        /// </summary>
        /// <value>
        /// A System.String that contains the Cron expression that is used to determine the schedule for the job.
        /// </value>
        public string CronExpression { get; set; }

        /// <summary>
        /// Gets or sets a user defined description of the Job.
        /// </summary>
        /// <value>
        /// A System.String representing the description of the Job.
        /// </value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether jobs should be logged in ServiceJobHistory
        /// </summary>
        /// <value>
        ///   true if [enable history]; otherwise, false.
        /// </value>
        public bool EnableHistory { get; set; }

        /// <summary>
        /// Gets or sets the history count per job.
        /// </summary>
        /// <value>
        /// The history count per job.
        /// </value>
        public int HistoryCount { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if the Job is active.
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if the Job is active; otherwise false.
        /// </value>
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if this Job is part of the Rock core system/framework
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if the Job is part of the Rock core system/framework;
        /// otherwise false.
        /// </value>
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or sets the date and time that the job last ran.
        /// </summary>
        /// <value>
        /// A System.DateTime that represents the last time that the job ran.
        /// </value>
        public DateTime? LastRunDateTime { get; set; }

        /// <summary>
        /// Gets or set the amount of time, in seconds, that it took the job to run the last time that it ran.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the amount of time, in seconds, that it took the job to run the last time that it ran.
        /// </value>
        public int? LastRunDurationSeconds { get; set; }

        /// <summary>
        /// Gets or sets the name of the scheduler that the job ran under the last time that it ran. In most cases this 
        /// is used to determine if the was run by the IIS or Windows service.
        /// </summary>
        /// <value>
        /// A System.String representing the name of the Scheduler that the job ran under the last time that it was run.
        /// </value>
        public string LastRunSchedulerName { get; set; }

        /// <summary>
        /// Gets or sets the completion status that was returned by the Job the last time that it ran.
        /// </summary>
        /// <value>
        /// A System.String containing the status that was returned by the Job the last time that it ran.
        /// </value>
        public string LastStatus { get; set; }

        /// <summary>
        /// Gets or sets the status message that was returned the last time that the job was run. In most cases this will be used
        /// in the event of an exception to return the exception message.
        /// </summary>
        /// <value>
        /// A System.String representing the Status Message that returned the last time that the job ran.
        /// </value>
        public string LastStatusMessage { get; set; }

        /// <summary>
        /// Gets or sets the date and time that the Job last completed successfully.
        /// </summary>
        /// <value>
        /// A System.DateTime representing the date and time of the last time that the Job completed successfully
        /// </value>
        public DateTime? LastSuccessfulRunDateTime { get; set; }

        /// <summary>
        /// Gets or sets the friendly Name of the Job. This property is required.
        /// </summary>
        /// <value>
        /// A System.String containing the friendly Name of the Job.
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a comma delimited list of email address that should receive notification emails for this job. Notification
        /// emails are sent to these email addresses based on the completion status of the Job and the Rock.Model.ServiceJob.NotificationStatus
        /// property of this job.
        /// </summary>
        /// <value>
        /// A System.String representing a list of email addresses that should receive notifications for this job.
        /// </value>
        public string NotificationEmails { get; set; }

        /// <summary>
        /// Gets or sets the NotificationStatus for this job, this property determines when notification emails should be sent to the Rock.Model.ServiceJob.NotificationEmails
        /// that are associated with this Job
        /// </summary>
        /// <value>
        /// An Rock.Model.JobNotificationStatus that indicates when notification emails should be sent for this job. 
        /// When this value is JobNotificationStatus.All a notification email will be sent when the Job completes with any completion status.
        /// When this value is JobNotificationStatus.Success a notification email will be sent when the Job has completed successfully.
        /// When this value is JobNotificationStatus.Error a notification email will be sent when the Job completes with an error status.
        /// When this value is JobNotificationStatus.None notifications will not be sent when the Job completes with any status.
        /// </value>
        public int NotificationStatus { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
