//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// BinaryFileType View Model
    /// </summary>
    public partial class BinaryFileTypeBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets the cache control header settings.
        /// </summary>
        /// <value>
        /// The cache control header settings.
        /// </value>
        public string CacheControlHeaderSettings { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating whether the file on any Rock.Model.BinaryFile child entities should be cached to the server.
        /// </summary>
        /// <value>
        ///  A System.Boolean value that is true if caching to the server is allowed; otherwise, false.
        /// </value>
        public bool CacheToServerFileSystem { get; set; }

        /// <summary>
        /// Gets or sets a description of the BinaryFileType.
        /// </summary>
        /// <value>
        /// A System.String representing the description of the BinaryFileType.
        /// </value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the CSS class that is used for a vector/CSS icon.
        /// </summary>
        /// <value>
        /// A System.String representing the CSS class that is used for a vector/CSS based icon.
        /// </value>
        public string IconCssClass { get; set; }

        /// <summary>
        /// Gets or sets a flag indicating if this BinaryFileType is part of the Rock core system/framework. This property is required.
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if this is part of the core system/framework; otherwise false.
        /// </value>
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or sets the maximum file size bytes.
        /// </summary>
        /// <value>
        /// The maximum file size bytes.
        /// </value>
        public int? MaxFileSizeBytes { get; set; }

        /// <summary>
        /// Gets or sets a value indicating the maximum height of a file type.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the maximum height in pixels of a file type.
        /// </value>
        public int? MaxHeight { get; set; }

        /// <summary>
        /// Gets or sets a value indicating the maximum width of a file type.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the maximum width in pixels of a file type.
        /// </value>
        public int? MaxWidth { get; set; }

        /// <summary>
        /// Gets or sets the given Name of the BinaryFileType. This value is an alternate key and is required.
        /// </summary>
        /// <value>
        /// A System.String representing the given Name of the BinaryFileType. 
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the preferred color depth of the file type.
        /// </summary>
        /// <value>
        /// A Rock.Model.ColorDepth enum value that represents the preferred color depth of the file type.
        /// </value>
        public int PreferredColorDepth { get; set; }

        /// <summary>
        /// Gets or sets the preferred format of the file type.
        /// </summary>
        /// <value>
        /// A Rock.Model.Format enum value that represents the preferred format of the file type.
        /// </value>
        public int PreferredFormat { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the preferred attributes of the file type are required
        /// </summary>
        /// <value>
        /// A System.Boolean value that is true if the "preferred" attributes are required; otherwise, false.
        /// </value>
        public bool PreferredRequired { get; set; }

        /// <summary>
        /// Gets or sets the preferred resolution of the file type.
        /// </summary>
        /// <value>
        /// A Rock.Model.Resolution enum value that represents the preferred resolution of the file type.
        /// </value>
        public int PreferredResolution { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether security should be checked when displaying files of this type
        /// </summary>
        /// <value>
        /// true if [requires view security]; otherwise, false.
        /// </value>
        public bool RequiresViewSecurity { get; set; }

        /// <summary>
        /// Gets or sets the Id of the storage service Rock.Model.EntityType that is used to store files of this type.
        /// </summary>
        /// <value>
        /// An System.Int32 representing the Id of the storage service Rock.Model.EntityType.
        /// </value>
        public int? StorageEntityTypeId { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
