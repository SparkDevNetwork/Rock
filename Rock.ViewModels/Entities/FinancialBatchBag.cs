//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// FinancialBatch View Model
    /// </summary>
    public partial class FinancialBatchBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets an optional transaction code from an accounting system that batch is associated with
        /// </summary>
        /// <value>
        /// A System.String representing the Accounting System transaction code for the batch.
        /// </value>
        public string AccountingSystemCode { get; set; }

        /// <summary>
        /// Gets or sets end of the posting date and time range for FinancialTransactions that are included in this batch.
        /// Transactions that post before or on this date and time and after the Rock.Model.FinancialBatch.BatchStartDateTime can be included in this batch.
        /// </summary>
        /// <value>
        /// A System.DateTime representing the posting end date for the batch.
        /// </value>
        public DateTime? BatchEndDateTime { get; set; }

        /// <summary>
        /// Gets or sets the start posting date and time range of FinancialTransactions that are included in this batch.  
        /// Transactions that post on or after this date and time and before the Rock.Model.FinancialBatch.BatchEndDateTime can be included in this batch.
        /// </summary>
        /// <value>
        /// A System.DateTime representing the posting start date for the batch.
        /// </value>
        public DateTime? BatchStartDateTime { get; set; }

        /// <summary>
        /// Gets or sets the CampusId of the Rock.Model.Campus that this batch is associated with. If the batch is not linked
        /// to a campus, this value will be null.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the CampusId of the Rock.Model.Campus that this batch is associated with.
        /// </value>
        public int? CampusId { get; set; }

        /// <summary>
        /// Gets or sets the control amount. This should match the total value of all
        /// FinancialTransactions that are included in the batch.
        /// Use Rock.Model.FinancialBatchService.IncrementControlAmount(System.Int32,System.Decimal,Rock.Model.History.HistoryChangeList) if you are incrementing the control amount
        /// based on a transaction amount.
        /// </summary>
        /// <value>
        /// A System.Decimal representing the control amount of the batch.
        /// </value>
        public decimal ControlAmount { get; set; }

        /// <summary>
        /// Gets or sets the control item count.
        /// </summary>
        /// <value>
        /// The control item count.
        /// </value>
        public int? ControlItemCount { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is automated.
        /// If IsAutomated is True, the UI should not allow the status of Pending to be changed to Open or Closed ( an external process will be in change of changing the status )
        /// </summary>
        /// <value>
        ///   true if this instance is automated; otherwise, false.
        /// </value>
        public bool IsAutomated { get; set; }

        /// <summary>
        /// Gets or sets the name of the batch.
        /// </summary>
        /// <value>
        /// A System.String that represents the name of the batch.
        /// </value>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the note.
        /// </summary>
        /// <value>
        /// The note.
        /// </value>
        public string Note { get; set; }

        /// <summary>
        /// Gets or sets the status of the batch.
        /// </summary>
        /// <value>
        /// A Rock.Model.BatchStatus representing the status of the batch.
        /// When this value is BatchStatus.Pending  it means that transactions are still being added to the batch.
        /// When this value is BatchStatus.Open it means that all transactions have been added and are ready to be matched up.
        /// When this value is BatchStatus.Closed it means that the batch has balanced and has been closed.
        /// </value>
        public int Status { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
