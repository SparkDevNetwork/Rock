<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassTransit</name>
    </assembly>
    <members>
        <member name="T:MassTransit.Audit.IMessageAuditStore">
            <summary>
            Used to store message audits that are observed
            </summary>
        </member>
        <member name="M:MassTransit.Audit.IMessageAuditStore.StoreMessage``1(``0,MassTransit.Audit.MessageAuditMetadata)">
            <summary>
            Store the message audit, with associated metadata
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message itself</param>
            <param name="metadata">The message metadata</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Batch`1">
            <summary>
            A batch of messages which are delivered to a consumer all at once
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Batch`1.FirstMessageReceived">
            <summary>
            When the first message in this batch was received
            </summary>
        </member>
        <member name="P:MassTransit.Batch`1.LastMessageReceived">
            <summary>
            When the last message in this batch was received
            </summary>
        </member>
        <member name="P:MassTransit.Batch`1.Item(System.Int32)">
            <summary>
            Returns the message at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:MassTransit.Batch`1.Length">
            <summary>
            The number of messages in this batch
            </summary>
        </member>
        <member name="T:MassTransit.BatchCompletionMode">
            <summary>
            The reason this batch was made ready for consumption
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Time">
            <summary>
            The time limit for receiving messages in the batch was reached
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Size">
            <summary>
            The maximum number of messages in the batch was reached
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Forced">
            <summary>
            A batch was forced, likely due to a previously faulted message being retried
            </summary>
        </member>
        <member name="T:MassTransit.Bus">
            <summary>
            used to get access to the bus factories
            </summary>
        </member>
        <member name="P:MassTransit.Bus.Factory">
            <summary>
            Access a bus factory from this main factory interface (easy extension method support)
            </summary>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Stop(MassTransit.IBusControl)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop.
            It is a wrapper of the async method `StopAsync`
            </summary>
            <param name="busControl">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Start(MassTransit.IBusControl)">
            <summary>
            Starts a bus, throwing an exception if the bus does not start
            It is a wrapper of the async method `StartAsync`
            </summary>
            <param name="busControl">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Stop(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Start(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Start a bus, throwing an exception if the bus does not start in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="startTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.StopAsync(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.DeployAsync(MassTransit.IBusControl,System.Threading.CancellationToken)">
            <summary>
            This can be used to start and stop the bus when configured in a deploy topology only scenario. No messages should be consumed by it.
            
            </summary>
            <param name="bus"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:MassTransit.BusHandle">
            <summary>
            Returned once a bus has been started. Should call Stop or Dispose before the process
            can exit.
            </summary>
        </member>
        <member name="P:MassTransit.BusHandle.Ready">
            <summary>
            A task which can be awaited to know when the bus is ready and all of the receive endpoints have reported ready.
            </summary>
        </member>
        <member name="M:MassTransit.BusHandle.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the bus and all receiving endpoints on the bus. Note that cancelling the Stop
            operation may leave the bus and/or one or more receive endpoints in an indeterminate
            state.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.Stop(MassTransit.BusHandle)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop
            </summary>
            <param name="handle">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.Stop(MassTransit.BusHandle,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="handle">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.StopAsync(MassTransit.BusHandle,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="handle">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="P:MassTransit.BusReady.Hosts">
            <summary>
            The hosts that are part of the bus
            </summary>
        </member>
        <member name="M:MassTransit.CancelScheduledSendExtensions.CancelScheduledSend``1(MassTransit.IMessageScheduler,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message 
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The </param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CancelScheduledSendExtensions.CancelScheduledSend``1(MassTransit.ConsumeContext,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message 
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message scheduler</param>
            <param name="message">The </param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IBus,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="bus">The bus instance</param>
            <param name="destinationAddress">The request service address</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses, and publishing the request versus sending it.
            </summary>
            <param name="bus">The bus instance</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">The bus instance</param>
            <param name="destinationAddress">The request service address</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">The bus instance</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a client factory from the bus, which uses the default bus endpoint for any response messages
            </summary>
            <param name="bus">THe bus instance</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.ReceiveEndpointReady,MassTransit.RequestTimeout)">
            <summary>
            Connects a client factory to a host receive endpoint, using the bus as the send endpoint provider
            </summary>
            <param name="receiveEndpoint"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.HostReceiveEndpointHandle,MassTransit.RequestTimeout)">
            <summary>
            Connects a client factory to a host receive endpoint, using the bus as the send endpoint provider
            </summary>
            <param name="receiveEndpointHandle">A handle to the receive endpoint, which is stopped when the client factory is disposed</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.IHost,MassTransit.RequestTimeout)">
            <summary>
            Connects a new receive endpoint to the host, and creates a <see cref="T:MassTransit.IClientFactory"/>.
            </summary>
            <param name="host">The host to connect the new receive endpoint</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IHost,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Connects a new receive endpoint to the host, and creates a <see cref="T:MassTransit.IClientFactory"/>.
            </summary>
            <param name="host">The host to connect the new receive endpoint</param>
            <param name="destinationAddress">The request service address</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IHost,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, creating a response endpoint, and publishing the request versus sending it.
            </summary>
            <param name="host">The host to connect the new receive endpoint</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Clients.ClientFactoryContext">
            <summary>
            The client factory context, which contains multiple interfaces and properties used by clients
            </summary>
        </member>
        <member name="P:MassTransit.Clients.ClientFactoryContext.DefaultTimeout">
            <summary>
            Default timeout for requests
            </summary>
        </member>
        <member name="P:MassTransit.Clients.ClientFactoryContext.ResponseAddress">
            <summary>
            The address used for responses to messages sent by this client
            </summary>
        </member>
        <member name="P:MassTransit.Clients.ClientFactoryContext.PublishEndpoint">
            <summary>
            Return the publish endpoint for the client factory
            </summary>
            <value></value>
        </member>
        <member name="T:MassTransit.Clients.MessageResponse`1">
            <summary>
            A result from a request
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Clients.ResponseHandlerConfigurator`1">
            <summary>
            Connects a handler to the inbound pipe of the receive endpoint
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:MassTransit.Clients.ResponseHandlerConnectHandle`1">
            <summary>
            A connection to a request which handles a result, and completes the Task when it's received
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:MassTransit.AuditConfigurationExtensions.ConnectSendAuditObservers``1(``0,MassTransit.Audit.IMessageAuditStore,System.Action{MassTransit.IMessageFilterConfigurator},MassTransit.Audit.ISendMetadataFactory)">
            <summary>
            Adds observers that will audit all published and sent messages, sending them to the message audit store after they are sent/published.
            </summary>
            <param name="connector">The bus</param>
            <param name="store">Audit store</param>
            <param name="configureFilter">Filter configuration delegate</param>
            <param name="metadataFactory">Message metadata factory. If omited, the default one will be used.</param>
        </member>
        <member name="M:MassTransit.AuditConfigurationExtensions.ConnectConsumeAuditObserver(MassTransit.Pipeline.IConsumeObserverConnector,MassTransit.Audit.IMessageAuditStore,System.Action{MassTransit.IMessageFilterConfigurator},MassTransit.Audit.IConsumeMetadataFactory)">
            <summary>
            Add an observer that will audit consumed messages, sending them to the message audit store prior to consumption by the consumer
            </summary>
            <param name="connector">The bus or endpoint</param>
            <param name="store">The audit store</param>
            <param name="configureFilter">Filter configuration delegate</param>
            <param name="metadataFactory">Message metadata factory. If omited, the default one will be used.</param>
        </member>
        <member name="M:MassTransit.BatchConsumerExtensions.Batch``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ConsumeConfigurators.IBatchConfigurator{``0}})">
            <summary>
            Configure a Batch&lt;<typeparamref name="TMessage"/>&gt; consumer, which allows messages to be collected into an array and consumed
            at once. This feature is experimental, but often requested. Be sure to configure the transport with sufficient concurrent message
            capacity (prefetch, etc.) so that a batch can actually complete without always reaching the time limit.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BatchConsumerExtensions.Consumer``2(MassTransit.ConsumeConfigurators.IBatchConfigurator{``1},System.Func{``0})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Builders.IBusBuilder">
            <summary>
            Used to build and configure a service bus instance as it is created
            </summary>
        </member>
        <member name="M:MassTransit.BusObserverExtensions.BusObserver(MassTransit.IBusFactoryConfigurator,MassTransit.IBusObserver)">
            <summary>
            Connect an observer to the bus, to observe creation, start, stop, fault events.
            </summary>
            <param name="configurator"></param>
            <param name="observer"></param>
        </member>
        <member name="M:MassTransit.BusObserverExtensions.BusObserver``1(MassTransit.IBusFactoryConfigurator,System.Func{``0})">
            <summary>
            Connect an observer to the bus, to observe creation, start, stop, fault events.
            </summary>
            <param name="configurator"></param>
            <param name="observerFactory">Factory to create the bus observer</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the consumer</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0},System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the consumer</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ISagaConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the saga</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ISagaConfigurator{``0},System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the saga</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the handler.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the handler message type</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0},System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the handler.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the handler message type</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed for the specified message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the message type</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed for the specified message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the message type</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="T:MassTransit.Configuration.IBusConfiguration">
            <summary>
            The configuration of a bus
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IHostCollection`1.Add(`0)">
            <summary>
            Add a host to the collection
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:MassTransit.Configuration.IReadOnlyHostCollection`1.Hosts">
            <summary>
            Return an array of host configurations
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IReadOnlyHostCollection`1.Count">
            <summary>
            The number of hosts configured
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IReadOnlyHostCollection`1.Item(System.Int32)">
            <summary>
            Returns the host at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MassTransit.Configuration.IReadOnlyHostCollection`1.TryGetHost(System.Uri,`0@)">
            <summary>
            Try to get the host, by address
            </summary>
            <param name="address"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReadOnlyHostCollection`1.TryGetHost(MassTransit.IHost,`0@)">
            <summary>
            Try to get the host by reference, returning the host configuration
            </summary>
            <param name="host"></param>
            <param name="hostConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReadOnlyHostCollection.GetBusTopology">
            <summary>
            Return the bus topology, which is the first host's topology
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReadOnlyHostCollection.GetHosts">
            <summary>
            Return the hosts so that they can be controlled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReadOnlyHostCollection.TryGetHost(System.Uri,MassTransit.Configuration.IHostConfiguration@)">
            <summary>
            Try to get the host, by address
            </summary>
            <param name="address"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReceiveEndpointConfiguration.CreateReceivePipe">
            <summary>
            Create the receive pipe, using the endpoint configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IReceiveEndpointConfiguration.Build">
            <summary>
            Builds the receive endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.HandlerConfigurator`1">
            <summary>
            Connects a handler to the inbound pipe of the receive endpoint
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IBatchConfigurator`1">
            <summary>
            Batching is an experimental feature, and may be changed at any time in the future.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.ConsumeConfigurators.IBatchConfigurator`1.TimeLimit">
            <summary>
            Set the maximum time to wait for messages before the batch is automatically completed
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeConfigurators.IBatchConfigurator`1.MessageLimit">
            <summary>
            Set the maximum number of messages which can be added to a single batch
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IBatchConfigurator`1.Consumer``1(MassTransit.IConsumerFactory{``0},System.Action{MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{``0,MassTransit.Batch{`0}}})">
            <summary>
            Specify the consumer factory for the batch message consumer
            </summary>
            <param name="consumerFactory"></param>
            <param name="configure">Configure the consumer pipe</param>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IConsumeConfigurator">
            <summary>
            The base configuration interface for a consumer, handler, or instance that 
            can consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurationObserver.ConsumerConfigured``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0})">
            <summary>
            Called when a consumer is configured
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurationObserver.ConsumerMessageConfigured``2(MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{``0,``1})">
            <summary>
            Called when a consumer/message combination is configured
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurationObserverConnector.ConnectConsumerConfigurationObserver(MassTransit.ConsumeConfigurators.IConsumerConfigurationObserver)">
            <summary>
            Connect a configuration observer to the bus configurator, which is invoked as consumers are configured.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurator`1.Message``1(System.Action{MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{``0}})">
            <summary>
            Add middleware to the message pipeline, which is invoked prior to the consumer factory.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerConfigurator`1.ConsumerMessage``1(System.Action{MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{`0,``0}})">
            <summary>
            Add middleware to the consumer pipeline, for the specified message type, which is invoked
            after the consumer factory.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator`2.Message(System.Action{MassTransit.ConsumeConfigurators.IConsumerMessageConfigurator{`1}})">
            <summary>
            Add middleware to the consumer pipeline, for the specified message type, which is
            invoked after the consumer factory.
            </summary>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IHandlerConfigurationObserver.HandlerConfigured``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0})">
            <summary>
            Called when a consumer/message combination is configured
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IHandlerConfigurationObserverConnector.ConnectHandlerConfigurationObserver(MassTransit.ConsumeConfigurators.IHandlerConfigurationObserver)">
            <summary>
            Connect a configuration observer to the bus configurator, which is invoked as consumers are configured.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IHandlerConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConfigurators.IMessageConfigurationObserver.MessageConfigured``1(MassTransit.IConsumePipeConfigurator)">
            <summary>
            Called when a message pipeline is configured, for the very first time
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IObserverConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConfigurators.IRoutingSlipConfigurator">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.AsyncConsumerMessageConvention`1">
            <summary>
            A default convention that looks for IConsumerOfT message types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.ConsumerConventionCache.GetConventions``1">
            <summary>
            Returns the conventions registered for identifying message consumer types
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.ConsumerInterfaceType">
            <summary>
            A standard asynchronous consumer message type, defined by IConsumer
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.HandlerConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IConsumerConnector">
            <summary>
                Interface implemented by objects that tie an inbound pipeline together with
                consumers (by means of calling a consumer factory).
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IHandlerConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IHandlerConnector`1.ConnectHandler(MassTransit.Pipeline.IConsumePipeConnector,MassTransit.MessageHandler{`0},GreenPipes.IPipeSpecification{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for all messages of type T 
            </summary>
            <param name="consumePipe"></param>
            <param name="handler"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IHandlerConnector`1.ConnectRequestHandler(MassTransit.Pipeline.IRequestPipeConnector,System.Guid,MassTransit.MessageHandler{`0},GreenPipes.IPipeSpecification{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
            <param name="consumePipe"></param>
            <param name="requestId"></param>
            <param name="handler"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.InstanceMessageConnector`2">
            <summary>
            Connects a consumer instance to the inbound pipeline for the specified message type. The actual
            filter that invokes the consume method is passed to allow different types of message bindings,
            including the legacy bindings from v2.x
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.InstanceMessageConnector`2.#ctor(GreenPipes.IFilter{MassTransit.ConsumerConsumeContext{`0,`1}})">
            <summary>
            Constructs the instance connector
            </summary>
            <param name="consumeFilter">The consume method invocation filter</param>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.IObserverConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IObserverConnector`1.ConnectObserver(MassTransit.Pipeline.IConsumePipeConnector,System.IObserver{MassTransit.ConsumeContext{`0}},GreenPipes.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for all messages of type T 
            </summary>
            <param name="consumePipe"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeConnectors.IObserverConnector`1.ConnectRequestObserver(MassTransit.Pipeline.IRequestPipeConnector,System.Guid,System.IObserver{MassTransit.ConsumeContext{`0}},GreenPipes.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
            <param name="consumePipe"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.LegacyConsumerInterfaceType">
            <summary>
            A legacy message-only consumer
            </summary>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.LegacyConsumerMessageConvention`1">
            <summary>
            A default convention that looks legacy message interface types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.ConsumeConnectors.MessageObserverConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ConsumePipeSpecifications.IConsumePipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumePipeSpecifications.IConsumePipeSpecification.BuildConsumePipe">
            <summary>
            Build the consume pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumePipeSpecifications.IMessageConsumePipeConfigurator`1">
            <summary>
            Configures the Consumeing of a message type, allowing filters to be applied
            on Consume.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ConsumePipeSpecifications.IMessageConsumePipeSpecification`1.BuildMessagePipe">
            <summary>
            Build the pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumePipeSpecifications.IMessageConsumePipeSpecification.Connect(GreenPipes.IPipeConnector)">
            <summary>
            Connect the pipe for the specification to the specified connector
            </summary>
            <param name="connector"></param>
        </member>
        <member name="T:MassTransit.ConsumerConvention">
            <summary>
            Used to register conventions for consumer message types
            </summary>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1(``0)">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Remove``1">
            <summary>
            Remove a consumer convention used for finding message types
            </summary>
            <typeparam name="T">The convention type to remove</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.IConsumerFactory{``0},System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer to the receiving endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactory"></param>
            <param name="configure">Optional, configure the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.Pipeline.IConsumePipeConnector,MassTransit.IConsumerFactory{``0},GreenPipes.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Connect a consumer to the bus instance's default endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="consumerFactory"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Subscribes a consumer with a default constructor to the endpoint
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.Pipeline.IConsumePipeConnector,GreenPipes.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Subscribe a consumer with a default constructor to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Func{``0},System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactoryMethod"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.Pipeline.IConsumePipeConnector,System.Func{``0},GreenPipes.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Subscribe a consumer with a consumer factor method to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="consumerFactoryMethod"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer(MassTransit.IReceiveEndpointConfigurator,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer (used by containers mostly)
            </summary>
            <param name="configurator"></param>
            <param name="consumerType"></param>
            <param name="consumerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer(MassTransit.Pipeline.IConsumePipeConnector,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer
            </summary>
            <param name="connector"></param>
            <param name="consumerType"></param>
            <param name="objectFactory"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumerSpecifications.ConsumerMessageSpecification`2">
            <summary>
            Configures the pipe for a consumer/message combination within a consumer configuration
            block. Does not add any handlers to the message pipe standalone, everything is within
            the consumer pipe segment.
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ConsumerSpecifications.IConsumerMessageSpecification`2.BuildMessagePipe(System.Action{GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{`1}}})">
            <summary>
            Configure the message pipe as it is built. Any previously configured filters will preceed
            the configuration applied by the <paramref name="configure"/> callback.
            </summary>
            <param name="configure">Configure the message pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ConsumerSpecifications.IConsumerSpecification`1">
            <summary>
            A consumer specification, that can be modified
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="T:MassTransit.ControlEndpointDefinition">
            <summary>
            Specifies a temporary endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.Topology.IMessageSendTopologyConfigurator{``0},System.Func{``0,System.Guid})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.Topology.IMessageSendTopologyConfigurator{``0},System.Func{``0,System.Nullable{System.Guid}})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.Topology.ISendTopology,System.Func{``0,System.Guid})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.Topology.ISendTopology,System.Func{``0,System.Nullable{System.Guid}})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.DeadLetterExtensions.UseDeadLetter(GreenPipes.IPipeConfigurator{MassTransit.ReceiveContext},GreenPipes.IPipe{MassTransit.ReceiveContext})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
        </member>
        <member name="P:MassTransit.Definition.ActivityDefinition`3.CompensateEndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured. Setting to null will use the supplied <see cref="T:MassTransit.IEndpointNameFormatter"/> to generate the
            endpoint name.
            </summary>
        </member>
        <member name="M:MassTransit.Definition.ActivityDefinition`3.ConfigureCompensateActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.ICompensateActivityConfigurator{`0,`2})">
            <summary>
            Called when the compensate activity is being configured on the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="compensateActivityConfigurator"></param>
        </member>
        <member name="T:MassTransit.Definition.ConsumerDefinition`1">
            <summary>
            A consumer definition defines the configuration for a consumer, which can be used by the automatic registration code to
            configure the consumer on a receive endpoint.
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="P:MassTransit.Definition.ConsumerDefinition`1.EndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the consumer
            should be configured.
            </summary>
        </member>
        <member name="P:MassTransit.Definition.ConsumerDefinition`1.ConcurrentMessageLimit">
            Set the concurrent message limit for the consumer, which limits how many consumers are able to concurrently
            consume messages. 
        </member>
        <member name="M:MassTransit.Definition.ConsumerDefinition`1.Message``1(System.Action{MassTransit.Definition.IConsumerMessageDefinitionConfigurator{`0,``0}})">
            <summary>
            Define a message handled by the consumer
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Definition.ConsumerDefinition`1.Request``1(System.Action{MassTransit.Definition.IConsumerRequestDefinitionConfigurator{`0,``0}})">
            <summary>
            Define the request message handled by the consumer
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Definition.ConsumerDefinition`1.ConfigureConsumer(MassTransit.IReceiveEndpointConfigurator,MassTransit.ConsumeConfigurators.IConsumerConfigurator{`0})">
            <summary>
            Called when the consumer is being configured on the endpoint. Configuration only applies to this consumer, and does not apply to
            the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="consumerConfigurator">The consumer configurator</param>
        </member>
        <member name="T:MassTransit.Definition.DefaultConsumerDefinition`1">
            <summary>
            A default consumer definition, used if no definition is found for the consumer type
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="T:MassTransit.Definition.DefaultEndpointDefinition">
            <summary>
            Base/Default endpoint definition, not used apparently
            </summary>
        </member>
        <member name="T:MassTransit.Definition.DefaultEndpointNameFormatter">
            <summary>
            The default endpoint name formatter, which simply trims the words Consumer, Activity, and Saga
            from the type name. If you need something more readable, consider the <see cref="T:MassTransit.Definition.SnakeCaseEndpointNameFormatter"/>
            or the <see cref="T:MassTransit.Definition.KebabCaseEndpointNameFormatter"/>.
            </summary>
        </member>
        <member name="P:MassTransit.Definition.ExecuteActivityDefinition`2.ExecuteEndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured. Setting to null will use the supplied <see cref="T:MassTransit.IEndpointNameFormatter"/> to generate the
            endpoint name.
            </summary>
        </member>
        <member name="P:MassTransit.Definition.ExecuteActivityDefinition`2.ConcurrentMessageLimit">
            <summary>
            Specify a concurrency limit, which is applied to the entire consumer, saga, or activity, regardless of message type.
            </summary>
        </member>
        <member name="M:MassTransit.Definition.ExecuteActivityDefinition`2.ConfigureExecuteActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.IExecuteActivityConfigurator{`0,`1})">
            <summary>
            Called when the compensate activity is being configured on the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="executeActivityConfigurator"></param>
        </member>
        <member name="P:MassTransit.Definition.IActivityDefinition.LogType">
            <summary>
            The log type
            </summary>
        </member>
        <member name="M:MassTransit.Definition.IActivityDefinition.GetCompensateEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the compensate activity
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.IActivityDefinition`3.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ICompensateActivityConfigurator{`0,`2})">
            <summary>
            Configure the compensate activity
            </summary>
            <param name="endpointConfigurator"></param>
            <param name="compensateActivityConfigurator"></param>
        </member>
        <member name="P:MassTransit.Definition.IConsumerDefinition.ConsumerType">
            <summary>
            The consumer type
            </summary>
        </member>
        <member name="M:MassTransit.Definition.IConsumerDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.IConsumerDefinition`1.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ConsumeConfigurators.IConsumerConfigurator{`0})">
            <summary>
            Configure the consumer on the receive endpoint
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="consumerConfigurator">The consumer configurator</param>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.Publishes``1">
            <summary>
            Defines a message type which may be published while consuming the message
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.Sends``1">
            <summary>
            Defines a message type which may be sent while consuming the message
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.Facet``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Action{MassTransit.Definition.IConsumerMessagePropertyDefinitionConfigurator{`0,`1,``0}})">
            <summary>
            Defines a message property by which availability and success/failure can be distinguished. Dimension might be a better term.
            </summary>
            <param name="propertyExpression"></param>
            <param name="configure"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.PartitionBy(System.Linq.Expressions.Expression{System.Func{`1,System.Guid}})">
            <summary>
            Messages delivered to the consumer should be partitioned by the specified message property
            </summary>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.PartitionBy(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.Text.Encoding)">
            <summary>
            Messages delivered to the consumer should be partitioned by the specified message property
            </summary>
            <param name="propertyExpression"></param>
            <param name="encoding">The text encoding to use for the string</param>
        </member>
        <member name="M:MassTransit.Definition.IConsumerMessageDefinitionConfigurator`2.Resource(System.Linq.Expressions.Expression{System.Func{`1,System.Uri}},System.Action{MassTransit.Definition.IConsumerMessagePropertyDefinitionConfigurator{`0,`1,System.Uri}})">
            <summary>
            Defines a message property as a resource, which may have availability concerns tracked by an external entity
            </summary>
            <param name="propertyExpression"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.Definition.IConsumerRequestDefinitionConfigurator`2.Responds``1">
            <summary>
            Defines a message type which may be sent in response to the request
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Definition.IExecuteActivityDefinition.ActivityType">
            <summary>
            The Activity type
            </summary>
        </member>
        <member name="P:MassTransit.Definition.IExecuteActivityDefinition.ArgumentType">
            <summary>
            The argument type
            </summary>
        </member>
        <member name="M:MassTransit.Definition.IExecuteActivityDefinition.GetExecuteEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the execute activity
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.IExecuteActivityDefinition`2.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.IExecuteActivityConfigurator{`0,`1})">
            <summary>
            Configure the execute activity
            </summary>
            <param name="endpointConfigurator"></param>
            <param name="executeActivityConfigurator"></param>
        </member>
        <member name="P:MassTransit.Definition.ISagaDefinition.SagaType">
            <summary>
            The saga type
            </summary>
        </member>
        <member name="M:MassTransit.Definition.ISagaDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Definition.ISagaDefinition`1.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{`0})">
            <summary>
            Configure the consumer on the receive endpoint
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The consumer configurator</param>
        </member>
        <member name="T:MassTransit.Definition.KebabCaseEndpointNameFormatter">
             <summary>
             Formats the endpoint names using kebab-case (dashed snake case)
            
             SubmitOrderConsumer -> submit-order
             OrderState -> order-state
             UpdateCustomerActivity -> update-customer-execute, update-customer-compensate
            
             </summary>
        </member>
        <member name="T:MassTransit.Definition.SagaDefinition`1">
            <summary>
            A saga definition defines the configuration for a saga, which can be used by the automatic registration code to
            configure the consumer on a receive endpoint.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.Definition.SagaDefinition`1.EndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured.
            </summary>
        </member>
        <member name="P:MassTransit.Definition.SagaDefinition`1.ConcurrentMessageLimit">
            <summary>
            Set the concurrent message limit for the saga, which limits how many saga instances are able to concurrently
            consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.Definition.SagaDefinition`1.ConfigureSaga(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{`0})">
            <summary>
            Called when the saga is being configured on the endpoint. Configuration only applies to this saga, and does not apply to
            the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The saga configurator</param>
        </member>
        <member name="T:MassTransit.Definition.SnakeCaseEndpointNameFormatter">
             <summary>
             Formats the endpoint name using snake case. For example,
            
             SubmitOrderConsumer -> submit_order
             OrderState -> order_state
             UpdateCustomerActivity -> update_customer_execute, update_customer_compensate
            
             </summary>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync``1(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.EndpointConfigurators.IEndpointConfigurationObserver.EndpointConfigured``1(``0)">
            <summary>
            Called when an endpoint is configured
            </summary>
            <typeparam name="T">The receive endpoint configurator type</typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.EndpointConfigurators.IEndpointConfigurationObserverConnector.ConnectEndpointConfigurationObserver(MassTransit.EndpointConfigurators.IEndpointConfigurationObserver)">
            <summary>
            Connect a configuration observer to the bus configurator, which is invoked as consumers are configured.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.EndpointConfigurators.ManagementEndpointConfigurator">
            <summary>
            This is simply a delegate to the endpoint configurator for a management endpoint.
            A management endpoint is just a type of receive endpoint that can be used to communicate
            with middleware, etc.
            </summary>
        </member>
        <member name="M:MassTransit.FilterConfiguratorExtensions.UseSendFilter``1(MassTransit.ISendPipeConfigurator,GreenPipes.IFilter{MassTransit.SendContext{``0}})">
            <summary>
            Adds a filter to the send pipeline
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.FilterConfiguratorExtensions.UseSendFilter(MassTransit.ISendPipeConfigurator,GreenPipes.IFilter{MassTransit.SendContext})">
            <summary>
            Adds a filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.Handler``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.MessageHandler{``0},System.Action{MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0}})">
            <summary>
            Adds a handler to the receive endpoint with additional configuration specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="handler"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectHandler``1(MassTransit.Pipeline.IConsumePipeConnector,MassTransit.MessageHandler{``0},GreenPipes.IPipeSpecification{MassTransit.ConsumeContext{``0}}[])">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="connector"></param>
            <param name="handler">The callback to invoke when messages of the specified type arrive on the service bus</param>
            <param name="specifications"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectRequestHandler``1(MassTransit.Pipeline.IRequestPipeConnector,System.Guid,MassTransit.MessageHandler{``0},GreenPipes.IPipeSpecification{MassTransit.ConsumeContext{``0}}[])">
            <summary>
            Subscribe a request handler to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="requestId"></param>
            <param name="handler"></param>
            <param name="specifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusFactory.CreateBus">
            <summary>
            Create the bus, returning the bus control interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ConnectBusObserver(MassTransit.IBusObserver)">
            <summary>
            Connects a bus observer to the bus to observe lifecycle events on the bus
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Message``1(System.Action{MassTransit.Topology.IMessageTopologyConfigurator{``0}})">
            <summary>
            Configure the message topology for the message type (global across all bus instances of the same transport type)
            </summary>
            <param name="configureTopology"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Send``1(System.Action{MassTransit.Topology.IMessageSendTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Publish``1(System.Action{MassTransit.Topology.IMessagePublishTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.SetMessageSerializer(MassTransit.SerializerFactory)">
            <summary>
            Sets the outbound message serializer
            </summary>
            <param name="serializerFactory">The factory to create the message serializer</param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.AddMessageDeserializer(System.Net.Mime.ContentType,MassTransit.DeserializerFactory)">
            <summary>
            Adds an inbound message deserializer to the available deserializers
            </summary>
            <param name="contentType">The content type of the deserializer</param>
            <param name="deserializerFactory">The factory to create the deserializer</param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ClearMessageDeserializers">
            <summary>
            Clears all message deserializers
            </summary>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, using an endpoint definition
            </summary>
            <param name="definition">An endpoint definition, which abstracts specific endpoint behaviors from the transport</param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ReceiveEndpoint(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, with the specified queue name
            </summary>
            <param name="queueName">The queue name for the receiving endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="T:MassTransit.ICompensateActivityConfigurator`2">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="M:MassTransit.ICompensateActivityConfigurator`2.Log(System.Action{MassTransit.ICompensateActivityLogConfigurator{`1}})">
            <summary>
            Configure the arguments separate from the activity
            </summary>
        </member>
        <member name="M:MassTransit.ICompensateActivityConfigurator`2.RoutingSlip(System.Action{MassTransit.ConsumeConfigurators.IRoutingSlipConfigurator})">
            <summary>
            Configure the routing slip pipe
            </summary>
        </member>
        <member name="T:MassTransit.ICompensateActivityLogConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="M:MassTransit.IConsumePipeConfigurator.AddPipeSpecification``1(GreenPipes.IPipeSpecification{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IConsumePipeConfigurator.AddPrePipeSpecification(GreenPipes.IPipeSpecification{MassTransit.ConsumeContext})">
            <summary>
            Adds a pipe specification prior to the <see cref="T:GreenPipes.Filters.DynamicFilter`1"/> so that a single
            instance is used for all message types
            </summary>
            <param name="specification"></param>
        </member>
        <member name="T:MassTransit.IConsumerConvention">
            <summary>
            A consumer convention is used to find message types inside a consumer class.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerConvention.GetConsumerMessageConvention``1">
            <summary>
            Returns the message convention for the type of T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumerMessageConvention">
            <summary>
            A convention that returns connectors for message types that are defined in the consumer
            type.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerMessageConvention.GetMessageTypes">
            <summary>
            Returns the message types handled by the consumer class
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IEndpointDefinition">
            <summary>
            Defines an endpoint in a transport-independent way
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.IsTemporary">
            <summary>
            True if the endpoint is temporary, and should be removed when the bus/endpoint is stopped. Temporary queues
            should be configured as auto-delete, non-durable, express, whatever creates the least impact and fastest performance.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.PrefetchCount">
            <summary>
            The number of messages to fetch in advance from the broker, if applicable. This should <b>only</b> be set when
            necessary, use the <see cref="P:MassTransit.IEndpointDefinition.ConcurrentMessageLimit"/> initially.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.ConcurrentMessageLimit">
            <summary>
            The maximum number of concurrent messages which can be delivered at any one time. This should be set by an
            endpoint before modifying the prefetch count. If this is specified, and <see cref="P:MassTransit.IEndpointDefinition.PrefetchCount"/> is left default,
            it will calculate an effective prefetch count automatically when supported.
            </summary>
        </member>
        <member name="M:MassTransit.IEndpointDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEndpointDefinition.Configure``1(``0)">
            <summary>
            Configure the endpoint, as provided by the transport-specific receive endpoint configurator
            </summary>
            <param name="configurator"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IEndpointNameFormatter.TemporaryEndpoint(System.String)">
            <summary>
            Generate a temporary endpoint name, containing the specified tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IExecuteActivityArgumentsConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.IExecuteActivityConfigurator`2">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.IExecuteActivityConfigurator`2.Arguments(System.Action{MassTransit.IExecuteActivityArgumentsConfigurator{`1}})">
            <summary>
            Configure the arguments separate from the activity
            </summary>
        </member>
        <member name="M:MassTransit.IExecuteActivityConfigurator`2.RoutingSlip(System.Action{MassTransit.ConsumeConfigurators.IRoutingSlipConfigurator})">
            <summary>
            Configure the routing slip pipe
            </summary>
        </member>
        <member name="P:MassTransit.IInMemoryBusFactoryConfigurator.TransportConcurrencyLimit">
            <summary>
            Sets the maximum number of threads used by an in-memory transport, for partitioning
            the input queue. This setting also specifies how many threads will be used for dispatching
            messages to consumers. 
            </summary>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.Publish``1(System.Action{MassTransit.Transports.InMemory.Topology.Configurators.IInMemoryMessagePublishTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.ReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IInMemoryReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, using an endpoint definition
            </summary>
            <param name="definition">An endpoint definition, which abstracts specific endpoint behaviors from the transport</param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.ReceiveEndpoint(System.String,System.Action{MassTransit.IInMemoryReceiveEndpointConfigurator})">
            <summary>
            Specify a receive endpoint for the bus, with the specified queue name
            </summary>
            <param name="queueName">The queue name for the receiving endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="P:MassTransit.IInMemoryReceiveEndpointConfigurator.ConcurrencyLimit">
            <summary>
            Sets the concurrency message limit, as should be received
            </summary>
        </member>
        <member name="T:MassTransit.IManagementEndpointConfigurator">
            <summary>
            Used to configure the management endpoint, and to denote the configurator as for that 
            purpose to be usable by middleware components wanting to connect to it.
            </summary>
        </member>
        <member name="T:MassTransit.IMessageFilterConfigurator">
            <summary>
            Configures a message filter, for including and excluding message types
            </summary>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Include(System.Type[])">
            <summary>
            Include the message if it is any of the specified message types
            </summary>
            <param name="messageTypes"></param>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Include``1">
            <summary>
            Include the message if it is the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Include``1(System.Func{``0,System.Boolean})">
            <summary>
            Include the message if it is the specified message type and matches the specified filter expression
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">The filter expression</param>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Exclude(System.Type[])">
            <summary>
            Exclude the message if it is any of the specified message types
            </summary>
            <param name="messageTypes"></param>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Exclude``1">
            <summary>
            Exclude the message if it is the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Exclude``1(System.Func{``0,System.Boolean})">
            <summary>
            Exclude the message if it is the specified message type and matches the specified filter expression
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">The filter expression</param>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.CreateUsingInMemory(MassTransit.IBusFactorySelector,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="selector">Hang off the selector interface for visibility</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.CreateUsingInMemory(MassTransit.IBusFactorySelector,System.Uri,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="selector">Hang off the selector interface for visibility</param>
            <param name="baseAddress">Override the default base address</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator">The pipe configurator</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox(MassTransit.IConsumePipeConfigurator)">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator">The pipe configurator</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox``1(MassTransit.ISagaConfigurator{``0})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfiguratorExtensions.UseInMemoryOutbox``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.InstanceExtensions">
            <summary>
            Extensions for subscribing object instances.
            </summary>
        </member>
        <member name="M:MassTransit.InstanceExtensions.Instance(MassTransit.IReceiveEndpointConfigurator,System.Object)">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
                - the item that is passed as a parameter to
                the action that is calling the configurator.</param>
            <param name="instance">The instance to subscribe.</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance(MassTransit.Pipeline.IConsumePipeConnector,System.Object)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <param name="connector">The service bus to configure</param>
            <param name="instance"></param>
            <returns>The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.Instance``1(MassTransit.IReceiveEndpointConfigurator,``0,System.Action{MassTransit.ConsumeConfigurators.IInstanceConfigurator{``0}})">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
                - the item that is passed as a parameter to
                the action that is calling the configurator.</param>
            <param name="instance">The instance to subscribe.</param>
            <param name="configure">Configure the instance</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance``1(MassTransit.Pipeline.IConsumePipeConnector,``0)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <param name="connector">The service bus instance to call this method on.</param>
            <param name="instance">The instance to subscribe.</param>
            <returns>The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.</returns>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification(GreenPipes.IPipeSpecification{MassTransit.SendContext})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification``1(GreenPipes.IPipeSpecification{MassTransit.SendContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification``1(GreenPipes.IPipeSpecification{MassTransit.PublishContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipelineConfigurator.ConfigurePublish(System.Action{MassTransit.IPublishPipeConfigurator})">
            <summary>
            Configure the Send pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.IReceiveEndpointConfigurator">
            <summary>
            Configure a receiving endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.InputAddress">
            <summary>
            Returns the input address of the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.SetMessageSerializer(MassTransit.SerializerFactory)">
            <summary>
            Sets the outbound message serializer
            </summary>
            <param name="serializerFactory">The factory to create the message serializer</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.AddMessageDeserializer(System.Net.Mime.ContentType,MassTransit.DeserializerFactory)">
            <summary>
            Adds an inbound message deserializer to the available deserializers
            </summary>
            <param name="contentType">The content type of the deserializer</param>
            <param name="deserializerFactory">The factory to create the deserializer</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.ClearMessageDeserializers">
            <summary>
            Clears all message deserializers
            </summary>
        </member>
        <member name="T:MassTransit.IReceiveEndpointSpecification">
            <summary>
            Specification for configuring a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureReceive(System.Action{MassTransit.IReceivePipeConfigurator})">
            <summary>
            Configure the Receive pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureDeadLetter(System.Action{GreenPipes.IPipeConfigurator{MassTransit.ReceiveContext}})">
            <summary>
            Configure the dead letter pipeline, which is called if the message is not consumed
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureError(System.Action{GreenPipes.IPipeConfigurator{MassTransit.ExceptionReceiveContext}})">
            <summary>
            Configure the exception pipeline, which is called if there are uncaught consumer exceptions
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.IRegistration">
            <summary>
            Registration contains the consumers and sagas that have been registered, allowing them to be configured on one or more
            receive endpoints.
            </summary>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureConsumer(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a consumer on the receive endpoint
            </summary>
            <param name="consumerType">The consumer type</param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureConsumer``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Configure a consumer on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureConsumers(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure all registered consumers on the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureSaga(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a saga on the receive endpoint
            </summary>
            <param name="sagaType">The saga type</param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureSaga``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureSagas(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure all registered sagas on the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureExecuteActivity(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the specified execute activity type
            </summary>
            <param name="activityType"></param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureActivity(System.Type,MassTransit.IReceiveEndpointConfigurator,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the specified  activity type
            </summary>
            <param name="activityType"></param>
            <param name="executeEndpointConfigurator">The configurator for the execute activity endpoint</param>
            <param name="compensateEndpointConfigurator">The configurator for the compensate activity endpoint</param>
        </member>
        <member name="M:MassTransit.IRegistration.ConfigureEndpoints``1(``0,MassTransit.IEndpointNameFormatter)">
            <summary>
            Configure the endpoints for all defined consumer, saga, and activity types using an optional
            endpoint name formatter. If no endpoint name formatter is specified and an <see cref="T:MassTransit.IEndpointNameFormatter"/>
            is registered in the container, it is resolved from the container. Otherwise, the <see cref="T:MassTransit.Definition.DefaultEndpointNameFormatter"/>
            is used.
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator"/> for the bus being configured</param>
            <param name="endpointNameFormatter">Optional, the endpoint name formatter</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConsumer``1(System.Action{MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0}})">
            <summary>
            Adds the consumer, allowing configuration when it is configured on an endpoint
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConsumer(System.Type,System.Type)">
            <summary>
            Adds the consumer, along with an optional consumer definition
            </summary>
            <param name="consumerType">The consumer type</param>
            <param name="consumerDefinitionType">The consumer definition type</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSaga``1(System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Adds the saga, allowing configuration when it is configured on the endpoint. This should not
            be used for state machine (Automatonymous) sagas.
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSaga``1(MassTransit.SagaRegistrationFactory{``0},System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Adds the saga, using the specified factory, allowing configuration when it is configured on the endpoint. This is used
            to add advanced sagas, such as state machines, to the standard saga registration.
            </summary>
            <param name="factory">The saga registration factory</param>
            <param name="configure"></param>
            <typeparam name="T">The saga type (or instance type, if it's a state machine)</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSaga(System.Type,System.Type)">
            <summary>
            Adds the saga, along with an optional saga definition
            </summary>
            <param name="sagaType">The saga type</param>
            <param name="sagaDefinitionType">The saga definition type</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddExecuteActivity``2(System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}})">
            <summary>
            Adds an execute activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configure"></param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddExecuteActivity(System.Type,System.Type)">
            <summary>
            Adds an execute activity (Courier), along with an optional activity definition
            </summary>
            <param name="activityType"></param>
            <param name="activityDefinitionType"></param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddActivity``3(System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}},System.Action{MassTransit.ICompensateActivityConfigurator{``0,``2}})">
            <summary>
            Adds an activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configureExecute">The execute configuration callback</param>
            <param name="configureCompensate">The compensate configuration callback</param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <typeparam name="TLog">The log type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddActivity(System.Type,System.Type)">
            <summary>
            Adds an activity (Courier), along with an optional activity definition
            </summary>
            <param name="activityType"></param>
            <param name="activityDefinitionType"></param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddEndpoint(System.Type)">
            <summary>
            Adds an endpoint definition, which will to used for consumers, sagas, etc. that are on that same endpoint. If a consumer, etc.
            specifies an endpoint without a definition, the default endpoint definition is used if one cannot be resolved from the configuration
            service provider (via generic registration).
            </summary>
            <param name="endpointDefinition">The endpoint definition to add</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient``1(MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext"/> if present, otherwise
            uses the <see cref="T:MassTransit.IBus"/>. The request is published, unless an endpoint convention is specified for the
            request type.
            </summary>
            <param name="timeout">The request timeout</param>
            <typeparam name="T">The request message type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient``1(System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext"/> if present, otherwise
            uses the <see cref="T:MassTransit.IBus"/>.
            </summary>
            <param name="destinationAddress">The destination address for the request</param>
            <param name="timeout">The request timeout</param>
            <typeparam name="T">The request message type</typeparam>
        </member>
        <member name="M:MassTransit.ISagaConfigurator`1.ConfigureMessage``1(System.Action{MassTransit.ISagaMessageConfigurator{``0}})">
            <summary>
            Configure a message type for the consumer, such as adding middleware to the pipeline for
            the message type.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaConfigurator`1.Message``1(System.Action{MassTransit.ISagaMessageConfigurator{``0}})">
            <summary>
            Add middleware to the message pipeline, which is invoked prior to the saga repository.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaConfigurator`1.SagaMessage``1(System.Action{MassTransit.ISagaMessageConfigurator{`0,``0}})">
            <summary>
            Add middleware to the saga pipeline, for the specified message type, which is invoked
            after the saga repository.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaMessageConfigurator`2.Message(System.Action{MassTransit.ISagaMessageConfigurator{`1}})">
            <summary>
            Add middleware to the saga pipeline, for the specified message type, which is
            invoked after the saga repository.
            </summary>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaMessageSpecification`2.BuildConsumerPipe(GreenPipes.IFilter{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Build the consumer pipe, using the consume filter specified.
            </summary>
            <param name="consumeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISagaMessageSpecification`2.BuildMessagePipe(System.Action{GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{`1}}})">
            <summary>
            Configure the message pipe as it is built. Any previously configured filters will preceed
            the configuration applied by the <paramref name="configure"/> callback.
            </summary>
            <param name="configure">Configure the message pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISagaSpecification`1">
            <summary>
            A consumer specification, that can be modified
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.ISendPipeConfigurator.AddPipeSpecification``1(GreenPipes.IPipeSpecification{MassTransit.SendContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.ISendPipelineConfigurator.ConfigureSend(System.Action{MassTransit.ISendPipeConfigurator})">
            <summary>
            Configure the Send pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.Timeout">
            <summary>
            Sets the transaction timeout
            </summary>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.IsolationLevel">
            <summary>
            Sets the isolation level of the transaction
            </summary>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy the specified message property from the input to the result (all properties are copied by default).
            Only use this to copy specific properties, ignoring others. This is really just for completeness, it's
            not necessary to use it.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Default``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified message property to the default value (ignoring the input value)
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.Transformation.SourceContext{``0,`0},``0})">
            <summary>
            Replace the value on the input with the specified value
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
            <param name="valueProvider">The method to return the property</param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Replace``1(System.Reflection.PropertyInfo,MassTransit.Transformation.IPropertyProvider{``0,`0})">
            <summary>
            Replace the value on the input with the specified value
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.Transformation.SourceContext{``0,`0},``0})">
            <summary>
            Set the property to the value, using the source context to create/select the value
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">The property select expression</param>
            <param name="valueProvider">The method to return the property</param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Reflection.PropertyInfo,MassTransit.Transformation.IPropertyProvider{``0,`0})">
            <summary>
            Set the property to the value, using the source context to create/select the value
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="T:MassTransit.ManagementEndpointDefinition">
            <summary>
            Specifies a management endpoint, with the prefix "manage"
            </summary>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IConsumePipeConfigurator,MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="repository">The message data repository</param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(MassTransit.IConsumePipeConfigurator,MassTransit.MessageData.IMessageDataRepository,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
            <param name="configureCallback"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.MessageData.IMessageDataRepository,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Enable the loading of message data for the specified message type. Message data is large data that is
            stored outside of the messaging system.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="repository"></param>
            <param name="configureCallback"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.LoadMessageData``2(MassTransit.ITransformConfigurator{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},MassTransit.MessageData.IMessageDataRepository)">
            <summary>
            Load the message data as part of the transform (replaces the property on the original message, to avoid multiple
            loads of the same data).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="configurator"></param>
            <param name="propertyExpression"></param>
            <param name="repository"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry(MassTransit.IConsumePipeConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            For all configured messages type (handlers, consumers, and sagas), configures message retry using the retry configuration specified.
            Retry is configured once for each message type, and is added prior to the consumer factory or saga repository in the pipeline.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry(MassTransit.IConsumePipeConfigurator,MassTransit.IBusFactoryConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            For all configured messages type (handlers, consumers, and sagas), configures message retry using the retry configuration specified.
            Retry is configured once for each message type, and is added prior to the consumer factory or saga repository in the pipeline.
            </summary>
            <param name="configurator"></param>
            <param name="connector">The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ISagaConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ISagaConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerExtensions.UseMessageScheduler(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext},System.Uri)">
            <summary>
            Specify an endpoint to use for message scheduling
            </summary>
            <param name="configurator"></param>
            <param name="schedulerAddress"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerExtensions.UsePublishMessageScheduler(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext})">
            <summary>
            Uses Publish (instead of Send) to schedule messages via the Quartz message scheduler. For this to work, a single 
            queue should be used to schedule all messages. If multiple instances are running, they should be on the same Quartz
            cluster.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.Metadata.IImplementedMessageTypeCache`1.EnumerateImplementedTypes(MassTransit.Metadata.IImplementedMessageType,System.Boolean)">
            <summary>
            Invokes the interface for each implemented type of the message
            </summary>
            <param name="implementedMessageType"></param>
            <param name="includeActualType"></param>
        </member>
        <member name="M:MassTransit.Metadata.ImplementedMessageTypeCache`1.EnumerateImplementedTypes(MassTransit.Metadata.IImplementedMessageType,System.Boolean)">
            <summary>
            Enumerate the implemented message types
            </summary>
            <param name="implementedMessageType">The interface reference to invoke for each type</param>
            <param name="includeActualType">Include the actual message type first, before any implemented types</param>
        </member>
        <member name="F:MassTransit.Metadata.ImplementedMessageTypeCache`1.ImplementedType.Type">
            <summary>
            The implemented type
            </summary>
        </member>
        <member name="F:MassTransit.Metadata.ImplementedMessageTypeCache`1.ImplementedType.Direct">
            <summary>
            True if the interface is directly implemented by the type
            </summary>
        </member>
        <member name="M:MassTransit.Metadata.SagaMetadataCache`1.GenerateFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the 
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Metadata.SagaMetadataCache`1.GeneratePropertyFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the 
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverExtensions.Observer``1(MassTransit.IReceiveEndpointConfigurator,System.IObserver{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ConsumeConfigurators.IObserverConfigurator{``0}})">
            <summary>
            Subscribes an observer instance to the bus
            </summary>
            <param name="configurator">Service Bus Service Configurator 
            - the item that is passed as a parameter to
            the action that is calling the configurator.</param>
            <param name="observer">The observer to connect to the endpoint</param>
            <param name="configureCallback"></param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectObserver``1(MassTransit.IBus,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a message observer to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="bus"></param>
            <param name="observer">The callback to invoke when messages of the specified type arrive on the service bus</param>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectRequestObserver``1(MassTransit.IBus,System.Guid,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Subscribe a request observer to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PerformanceCounterExtensions.EnablePerformanceCounters(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Enable performance counters on the bus to emit performance data for use by performance
            monitor.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="P:MassTransit.PipeBuilders.ISpecificationPipeBuilder`1.IsDelegated">
            <summary>
            If true, this is a delegated builder, and implemented message types
            and/or topology items should not be applied
            </summary>
        </member>
        <member name="P:MassTransit.PipeBuilders.ISpecificationPipeBuilder`1.IsImplemented">
            <summary>
            If true, this is a builder for implemented types, so don't go down
            the rabbit hole twice.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitConfigurationObserver">
            <summary>
            Adds a concurrency limit filter for each message type configured on the consume pipe
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitConsumePipeSpecification`1">
            <summary>
            Adds a concurrency limit filter to the message pipe.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitConsumerConfigurationObserver`1">
            <summary>
            Configures a concurrency limit for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitHandlerConfigurationObserver">
            <summary>
            Configures a concurrency limit for a handler, on the handler configurator, which is constrained to
            the message type for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConcurrencyLimitSagaConfigurationObserver`1">
            <summary>
            Configures a concurrency limit for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ConfigurationObserver">
            <summary>
            Combines the separate configuration observers into a single observer that is for each message type, called once, to configure each
            message pipeline only once. Only outputs the individual message events for configuring the pipeline.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.HandlerPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.InMemoryOutboxHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRedeliveryConsumerConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRedeliveryHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRedeliverySagaConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a saga, on the saga configurator, which is constrained to
            the message types for that saga, and only applies to the saga prior to the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRetryConsumerConfigurationObserver`1">
            <summary>
            Configures a message retry for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRetryHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.PipeConfigurators.MessageRetrySagaConfigurationObserver`1">
            <summary>
            Configures a message retry for a saga, on the saga configurator, which is constrained to
            the message types for that saga, and only applies to the saga prior to the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.PipeConfigurators.ObserverPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.PublishPipeSpecifications.IMessagePublishPipeConfigurator`1">
            <summary>
            Configures the Publishing of a message type, allowing filters to be applied
            on Publish.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.PublishPipeSpecifications.IMessagePublishPipeSpecification`1.BuildMessagePipe">
            <summary>
            Build the pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PublishPipeSpecifications.IMessagePublishPipeSpecification.Connect(GreenPipes.IPipeConnector)">
            <summary>
            Connect the pipe for the specfication to the specified connector
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:MassTransit.PublishPipeSpecifications.IPublishPipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ReceiveEndpoint(MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ReceiveEndpoint(MassTransit.IBusFactoryConfigurator,MassTransit.IEndpointDefinition,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="configurator"></param>
            <param name="definition"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ManagementEndpoint(MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ManagementEndpoint(MassTransit.IBusFactoryConfigurator,MassTransit.IHost,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="configurator"></param>
            <param name="host"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ManagementEndpoint(MassTransit.IHost,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="host"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all consumers in the specified assemblies
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumersFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all consumers from the assembly containing the specified type that are in the same (or deeper) namespace.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <typeparam name="T">The anchor type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumersFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all consumers in the specified assemblies matching the namespace
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified consumer types
            </summary>
            <param name="configurator"></param>ˆ
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all sagas in the specified assemblies. If using state machine sagas, they should be added first using AddSagaStateMachines.
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagasFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all sagas in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagaStateMachinesFromNamespaceContaining prior to calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagasFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all sagas in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagaStateMachinesFromNamespaceContaining prior to calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified saga types
            </summary>
            <param name="configurator"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivities(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies.
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivitiesFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies matching the namespace.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivitiesFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies matching the namespace.
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivities(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified activity types
            </summary>
            <param name="configurator"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="T:MassTransit.Registration.ConsumerRegistration`1">
            <summary>
            A consumer registration represents a single consumer, which will be resolved from the container using the scope
            provider. The consumer definition, if present, is loaded from the container and used to configure the consumer
            within the receive endpoint.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Registration.IActivityRegistration">
            <summary>
            An activity, which must be configured on two separate receive endpoints
            </summary>
        </member>
        <member name="T:MassTransit.Registration.IConfigurationServiceProvider">
            <summary>
            Supports retrieval of services used by the ConfigurationRegistry 
            </summary>
        </member>
        <member name="M:MassTransit.Registration.IConfigurationServiceProvider.GetRequiredService``1">
            <summary>
            Get the requested service or throw an exception that it wasn't available
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Registration.IConfigurationServiceProvider.GetService``1">
            <summary>
            Returns the service, if available, otherwise returns null
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Registration.IExecuteActivityRegistration">
            <summary>
            An execute activity, which doesn't have compensation
            </summary>
        </member>
        <member name="T:MassTransit.Registration.RegistrationConfigurator">
            <summary>
            Used for registration of consumers and sagas
            </summary>
        </member>
        <member name="T:MassTransit.Registration.SagaRegistration`1">
            <summary>
            A saga registration represents a single saga, which will use the container for the scope provider, as well as
            to resolve the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.Registration.SagaRegistrationCache.DoNotRegister(System.Type)">
            <summary>
            Sets a saga type so that it will not be registered. This is used to allow state machines to register without a conflicting
            standard saga from also being registered.
            </summary>
            <param name="sagaType"></param>
        </member>
        <member name="T:MassTransit.ResponseEndpointDefinition">
            <summary>
            Specifies a temporary endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="M:MassTransit.SagaConfigurators.ISagaConfigurationObserver.SagaConfigured``1(MassTransit.ISagaConfigurator{``0})">
            <summary>
            Called immediately after the saga configuration is completed, but before the saga pipeline is built.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SagaConfigurators.ISagaConfigurationObserver.SagaMessageConfigured``2(MassTransit.ISagaMessageConfigurator{``0,``1})">
            <summary>
            Called after the saga/message configuration is completed, but before the saga/message pipeline is built.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SagaConfigurators.ISagaConfigurationObserverConnector.ConnectSagaConfigurationObserver(MassTransit.SagaConfigurators.ISagaConfigurationObserver)">
            <summary>
            Connect a configuration observer to the bus configurator, which is invoked as sagas are configured.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaExtensions.Saga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.Saga.ISagaRepository{``0},System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga subscription
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="sagaRepository"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaExtensions.ConnectSaga``1(MassTransit.Pipeline.IConsumePipeConnector,MassTransit.Saga.ISagaRepository{``0},GreenPipes.IPipeSpecification{MassTransit.SagaConsumeContext{``0}}[])">
            <summary>
            Connects the saga to the bus
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <param name="bus">The bus to which the saga is to be connected</param>
            <param name="sagaRepository">The saga repository</param>
            <param name="pipeSpecifications"></param>
        </member>
        <member name="T:MassTransit.SagaSpecifications.SagaMessageSpecification`2">
            <summary>
            Configures the pipe for a Saga/message combination within a Saga configuration
            block. Does not add any handlers to the message pipe standalone, everything is within
            the Saga pipe segment.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery(MassTransit.IConsumePipeConfigurator,System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for all message types
            </summary>
            <param name="configurator"></param>
            <param name="configureRetry"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.ConsumeConfigurators.IConsumerConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.ISagaConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.ConsumeConfigurators.IHandlerConfigurator{``0},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Configures the message retry for the handler, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRetryExtensions.UseScheduledRedelivery``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},GreenPipes.IRetryPolicy)">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy.
            </summary>
            <param name="configurator"></param>
            <param name="retryPolicy"></param>
        </member>
        <member name="M:MassTransit.ScheduledRetryExtensions.UseScheduledRedelivery``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{GreenPipes.Configurators.IRetryConfigurator})">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.SendPipeSpecifications.IMessageSendPipeConfigurator`1">
            <summary>
            Configures the sending of a message type, allowing filters to be applied
            on send.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.SendPipeSpecifications.IMessageSendPipeSpecification`1.BuildMessagePipe">
            <summary>
            Build the pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendPipeSpecifications.IMessageSendPipeSpecification.Connect(GreenPipes.IPipeConnector)">
            <summary>
            Connect the pipe for the specfication to the specified connector
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:MassTransit.SendPipeSpecifications.ISendPipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseJsonSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the JSON serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseJsonSerializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Serialize messages using the JSON serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.ConfigureJsonSerializer(MassTransit.IBusFactoryConfigurator,System.Func{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Configure the serialization settings used to create the message serializer
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.ConfigureJsonDeserializer(MassTransit.IBusFactoryConfigurator,System.Func{Newtonsoft.Json.JsonSerializerSettings,Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Configure the serialization settings used to create the message deserializer
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBsonSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the BSON message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBsonSerializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Serialize messages using the BSON message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryption(MassTransit.IBusFactoryConfigurator,System.Byte[])">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="symmetricKey">Cryptographic key for both encryption of plaintext message and decryption of ciphertext message</param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryption(MassTransit.IReceiveEndpointConfigurator,System.Byte[])">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="symmetricKey">Cryptographic key for both encryption of plaintext message and decryption of ciphertext message</param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryption(MassTransit.IBusFactoryConfigurator,MassTransit.Serialization.ISecureKeyProvider)">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="keyProvider">The custom key provider to provide the symmetric key for encryption of plaintext message and decryption of ciphertext message</param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryption(MassTransit.IReceiveEndpointConfigurator,MassTransit.Serialization.ISecureKeyProvider)">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="keyProvider">The custom key provider to provide the symmetric key for encryption of plaintext message and decryption of ciphertext message</param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryptedSerializerV2(MassTransit.IBusFactoryConfigurator,MassTransit.Serialization.ICryptoStreamProviderV2)">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="streamProvider"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseEncryptedSerializerV2(MassTransit.IReceiveEndpointConfigurator,MassTransit.Serialization.ICryptoStreamProviderV2)">
            <summary>
            Serialize messages using the BSON message serializer with AES Encryption
            </summary>
            <param name="configurator"></param>
            <param name="streamProvider"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseXmlSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the XML message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseXmlSerializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Serialize messages using the XML message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBinarySerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize message using the .NET binary formatter (also adds support for the binary deserializer)
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.UseBinarySerializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Serialize message using the .NET binary formatter (also adds support for the binary deserializer)
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.SupportBinaryMessageDeserializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Add support for the binary message deserializer to the bus. This serializer is not supported
            by default.
            </summary>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SerializerConfigurationExtensions.SupportBinaryMessageDeserializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Add support for the binary message deserializer to the bus. This serializer is not supported
            by default.
            </summary>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.TemporaryEndpointDefinition">
            <summary>
            Specifies a temporary endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="M:MassTransit.TransactionConfiguratorExtensions.UseTransaction``1(GreenPipes.IPipeConfigurator{``0},System.Action{MassTransit.ITransactionConfigurator})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure the transaction pipe</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Func{MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator{``0},MassTransit.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Func{MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator{``0},MassTransit.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a transform on send to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfiguratorExtensions.UseTransform``1(MassTransit.IPublishPipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a transform on send to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="T:MassTransit.TurnoutEndpointDefinition">
            <summary>
            Specifies a turnout endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.ReceiveContext">
            <summary>
            The original receive context
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.ConsumeCompleted">
            <summary>
            An awaitable task that is completed once the consume context is completed
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.SupportedMessageTypes">
            <summary>
            Returns the supported message types from the message
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeContext.HasMessageType(System.Type)">
            <summary>
                Returns true if the specified message type is contained in the serialized message
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.TryGetMessage``1(MassTransit.ConsumeContext{``0}@)">
            <summary>
                Returns the specified message type if available, otherwise returns false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="consumeContext"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.AddConsumeTask(System.Threading.Tasks.Task)">
            <summary>
            Add a task that must complete before the consume is completed
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.Respond``1(``0)">
            <summary>
            Adds a response to the message being consumed, which will be sent once the consumer
            has completed. The message is not acknowledged until the response is acknowledged.
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer.
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer has faulted -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The message consumer type</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyConsumed(System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyFaulted(System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a fault occurred during message consumption -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.Forward``1(MassTransit.ConsumeContext,MassTransit.ISendEndpoint,``0)">
            <summary>
            Forward the message to another consumer
            </summary>
            <param name="context"></param>
            <param name="endpoint">The endpoint to forward the message tosaq</param>
            <param name="message"></param>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.CreateCopyContextPipe(MassTransit.ConsumeContext,System.Func{MassTransit.ConsumeContext,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
            <summary>
            Create a send pipe that copies the source message headers to the message being sent
            </summary>
            <param name="context"></param>
            <param name="additionalHeaders">Returns additional headers for the pipe that should be added to the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextExtensions.CreateCopyContextPipe(MassTransit.ConsumeContext,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Create a send pipe that copies the source message headers to the message being sent
            </summary>
            <param name="context"></param>
            <param name="callback">A callback to modify the send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ConsumerConsumeContext`2">
            <summary>
            A consumer and consume context mixed together, carrying both a consumer and the message
            consume context.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.ConsumerConsumeContext`1.Consumer">
            <summary>
            The consumer which will handle the message
            </summary>
        </member>
        <member name="T:MassTransit.Consumes`1">
            <summary>
                API-oriented class.
            </summary>
            <typeparam name="TMessage">The message type to consume.</typeparam>
        </member>
        <member name="T:MassTransit.Consumes`1.All">
            <summary>
                Declares a Consume method for the message type TMessage which is called
                whenever a a message is received of the specified type.
            </summary>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy`1">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ConsumerConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Context.ConsumeRetryContext.RetryAttempt">
            <summary>
            The retry attempt in progress, or zero if this is the first time through
            </summary>
        </member>
        <member name="P:MassTransit.Context.ConsumeRetryContext.RetryCount">
            <summary>
            The number of retries that have already been attempted, note that this is zero
            on the first retry attempt
            </summary>
        </member>
        <member name="T:MassTransit.Context.ConsumeSendEndpoint">
            <summary>
            Intercepts the ISendEndpoint and makes it part of the current consume context
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.ConsumeObserverConverter`1">
            <summary>
            Converts the object message type to the generic type T and publishes it on the endpoint specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.Converters.ConsumeObserverConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.IConsumeObserverConverter">
            <summary>
            Calls the generic version of the IPublishEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.IPublishEndpointConverter">
            <summary>
            Calls the generic version of the IPublishEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.ISendEndpointConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.PublishEndpointConverter`1">
            <summary>
            Converts the object message type to the generic type T and publishes it on the endpoint specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.Converters.PublishEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.Converters.SendEndpointConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.Converters.SendEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.CorrelationIdConsumeContextProxy`1">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.IHeaderProvider">
            <summary>
            Used to read a header from a transport message
            </summary>
        </member>
        <member name="M:MassTransit.Context.IScheduleTokenIdCache`1.TryGetTokenId(`0,System.Guid@)">
            <summary>
            Try to get the tokenId for the scheduler from the message
            </summary>
            <param name="message"></param>
            <param name="tokenId"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Context.JsonHeaders">
            <summary>
            The context headers are sourced from the IContextHeaderProvider, with the use of a Json deserializer
            to convert data types to objects as required. If the original headers are Json objects, those headers
            are deserialized as well
            </summary>
        </member>
        <member name="T:MassTransit.Context.NewSagaConsumeContext`2">
            <summary>
            A new saga that was created
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.OutboxContext">
            <summary>
            The context for an outbox instance as part of consume context. Used to signal the completion of
            the consume, and store any Task factories that should be created.
            </summary>
        </member>
        <member name="P:MassTransit.Context.OutboxContext.ClearToSend">
            <summary>
            Returns an awaitable task that is completed when it is clear to send messages
            </summary>
        </member>
        <member name="M:MassTransit.Context.OutboxContext.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a method to be invoked once the outbox is ready to be sent
            </summary>
            <param name="method"></param>
        </member>
        <member name="T:MassTransit.Context.ReceiveEndpointContext">
            <summary>
            The context of a receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Context.ReceiveEndpointContext.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Context.SagaConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.SagaQueryConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ScheduleMessageRedeliveryContext`1">
            <summary>
            Used to schedule message redelivery using the message scheduler
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Context.ScheduleTokenIdCache`1">
            <summary>
            A cache of convention-based CorrelationId mappers, used unless overridden by some mystical force
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Contracts.ConcurrencyLimitUpdated">
            <summary>
            Published when the concurrency limit of a filter is updated.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Timestamp">
            <summary>
            The actual time at which the adjustment was applied
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Id">
            <summary>
            The identifier that was adjusted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.ConcurrencyLimit">
            <summary>
            The current concurrency limit value
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.SetConcurrencyLimit">
            <summary>
            Sets the concurrency limit of a concurrency limit filter
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Timestamp">
            <summary>
            The timestamp at which the adjustment command was sent
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Id">
            <summary>
            The identifier of the concurrency limit to set (optional)
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.ConcurrencyLimit">
            <summary>
            The new concurrency limit for the filter
            </summary>
        </member>
        <member name="T:MassTransit.CorrelatedBy`1">
            <summary>
              Used to identify a message as correlated so that the CorrelationId can be returned
            </summary>
            <typeparam name = "TKey">The type of the CorrelationId used</typeparam>
        </member>
        <member name="P:MassTransit.CorrelatedBy`1.CorrelationId">
            <summary>
              Returns the CorrelationId for the message
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Activity`2">
            <summary>
            An Activity implements the execute and compensate methods for an activity
            </summary>
            <typeparam name="TArguments">The activity argument type</typeparam>
            <typeparam name="TLog">The activity log argument type</typeparam>
        </member>
        <member name="T:MassTransit.Courier.ActivityFactory">
            <summary>
            Should be implemented by containers that support generic object resolution in order to 
            provide a common lifetime management policy for all activities
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactory.Execute``2(MassTransit.Courier.ExecuteContext{``1},GreenPipes.IRequestPipe{MassTransit.Courier.ExecuteActivityContext{``0,``1},MassTransit.Courier.ExecutionResult})">
            <summary>
            Create and execute the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactory.Compensate``2(MassTransit.Courier.CompensateContext{``1},GreenPipes.IRequestPipe{MassTransit.Courier.CompensateActivityContext{``0,``1},MassTransit.Courier.CompensationResult})">
            <summary>
            Create and compensate the activity
            </summary>
            <param name="compensateContext"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ActivityFactoryExtensions.CreateActivityFactory``3(MassTransit.Courier.ActivityFactory)">
            <summary>
            Created an activity factory for the specified activity type
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="activityFactory"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.Argument.HasValue">
            <summary>
            True if the argument has a value, false if the value is null in the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Argument.IsPresent">
            <summary>
            True if the argument was present in the intinerary
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Argument`1">
            <summary>
            An argument that may have a domain-specific implementation that goes beyond simple
            type usage. For instance, encrypted values maybe mapped
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Courier.Argument`1.Value">
            <summary>
            The argument value
            </summary>
        </member>
        <member name="M:MassTransit.Courier.CompensateActivity`1.Compensate(MassTransit.Courier.CompensateContext{`0})">
            <summary>
            Compensate the activity and return the remaining compensation items
            </summary>
            <param name="context">The compensation information for the activity</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.CompensateActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.TrackingNumber">
            <summary>
            The tracking number for this routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ExecutionId">
            <summary>
            The tracking number for this activity within the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.Host">
            <summary>
            The host performing the compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.StartTimestamp">
            <summary>
            The start time for the activity compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ElapsedTime">
            <summary>
            The time elapsed for the compensation operation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.Timestamp">
            <summary>
            The start time for the activity compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.Elapsed">
            <summary>
            The time elapsed for the compensation operation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ConsumeContext">
            <summary>
            The consume context of the compensation routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext.ActivityName">
            <summary>
            The name of the activity being compensated
            </summary>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated">
            <summary>
            The compensation was successful
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated(System.Object)">
            <summary>
            The compenstation was successful
            </summary>
            <param name="values">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Compensated(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The compensation was successful
            </summary>
            <param name="variables">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Failed">
            <summary>
            The compensation failed
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.CompensateContext.Failed(System.Exception)">
            <summary>
            The compensation failed with the specified exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.CompensateContext`1.Log">
            <summary>
            The execution log from the activity execution
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityException">
            <summary>
            Capture the exception information thrown by an activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExecutionId">
            <summary>
            The tracking number of the activity that threw the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Timestamp">
            <summary>
            The point in time when the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Elapsed">
            <summary>
            The time from when the routing slip was created until the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Name">
            <summary>
            The name of the activity that caused the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Host">
            <summary>
            The host where the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExceptionInfo">
            <summary>
            The exception details
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityLog">
            <summary>
            Message contract for storing activity log data
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Name">
            <summary>
            The name of the activity that was completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Timestamp">
            <summary>
            The timestamp when the activity started
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Address">
            <summary>
            The compensation address where the routing slip should be sent for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlip">
            <summary>
            A RoutingSlip is the transport-level interface that is used to carry the details
            of a message routing slip over the network.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.TrackingNumber">
            <summary>
            The unique tracking number for this routing slip, used to correlate events
            and activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CreateTimestamp">
            <summary>
            The time when the routing slip was created
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Itinerary">
            <summary>
            The list of activities that are remaining
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityLogs">
            <summary>
            The logs of activities that have already been executed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CompensateLogs">
            <summary>
            The logs of activities that can be compensated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Variables">
            <summary>
            Variables that are carried with the routing slip for use by any activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityExceptions">
            <summary>
            A list of exceptions that have occurred during routing slip execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Subscriptions">
            <summary>
            Subscriptions to routing slip events
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ActivityName">
            <summary>
            The name of the activity that failed to compensate
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Arguments">
            <summary>
            The arguments that were specified for the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Data">
            <summary>
            The results saved as the CompensateLog by the Activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExecutionId">
            <summary>
            The tracking number of this activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Arguments">
            <summary>
            The arguments that were specified for the activity at execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipCompleted">
            <summary>
            Published when a routing slip completes
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipEventContents">
            <summary>
            Specifies the specific contents of routing slip events to be included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.All">
            <summary>
            Include all event contents
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.None">
            <summary>
            Do not include any contents with the routing slip events
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Variables">
            <summary>
            The routing slip variables after the activity was executed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Arguments">
            <summary>
            The arguments provided to the activity
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Data">
            <summary>
            The data logged by an activity when completed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Itinerary">
            <summary>
            The itinerary that was added/removed from the routing slip when revised
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.SkipEncrypted">
            <summary>
            If specified, encrypted content is excluded from the event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.All">
            <summary>
            By default, all routing slip events are included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Completed">
            <summary>
            Send the RoutingSlipCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Faulted">
            <summary>
            Send the RoutingSlipFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.CompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Terminated">
            <summary>
            Send the routing slip terminated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Revised">
            <summary>
            Send the routing slip revised event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompleted">
            <summary>
            Send the RoutingSlipActivityCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityFaulted">
            <summary>
            Send the RoutingSlipActivityFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensated">
            <summary>
            Send the RoutingSlipActivityCompensated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFailed event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.EventMask">
            <summary>
            Used to mask the events so that upper-level flags don't conflict
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Supplemental">
            <summary>
            If specified, the event subscription is supplemental and should not prevent
            the publishing of existing routing slip events. By default, any subscription
            suppresses publishing of events.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipFaulted">
            <summary>
            Published when a routing slip faults (after compensation)
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Timestamp">
            <summary>
            The date/time when the routing slip faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Duration">
            <summary>
            The time from when the routing slip was created until the fault occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.ActivityExceptions">
            <summary>
            The exception information from the faulting activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipRevised">
            <summary>
            Published when a routing slip is revised during execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.ExecutionId">
            <summary>
            The execution that modified the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.ActivityName">
            <summary>
            The name of the activity that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Itinerary">
            <summary>
            The new itinerary for the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.DiscardedItinerary">
            <summary>
            The previous itinerary of the routing slip that is no longer included
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipTerminated">
            <summary>
            Published when a routing slip is terminated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.ExecutionId">
            <summary>
            The execution that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.ActivityName">
            <summary>
            The name of the activity that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.DiscardedItinerary">
            <summary>
            The remainder of the itinerary that will not be executed by the routing slip engine.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.Subscription">
            <summary>
            A routing slip subscription defines a specific endpoint where routing
            slip events should be sent (not published). If specified, events are not published.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Address">
            <summary>
            The address where events should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Events">
            <summary>
            The events that are subscribed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Include">
            <summary>
            The event contents to include when published
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.ActivityName">
            <summary>
            If specified, events are only used in this subscription if the activity name matches
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Message">
            <summary>
            The message sent as part of the subscription
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteActivity`1.Execute(MassTransit.Courier.ExecuteContext{`0})">
            <summary>
            Execute the activity
            </summary>
            <param name="context">The execution context</param>
            <returns>An execution result, created from the execution passed to the activity</returns>
        </member>
        <member name="T:MassTransit.Courier.ExecuteActivityContext`2">
            <summary>
            An activity and execution context combined into a single container from the factory
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="P:MassTransit.Courier.ExecuteActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this execution
            </summary>
        </member>
        <member name="T:MassTransit.Courier.ExecuteActivityFactory`2">
            <summary>
            A factory that creates an execute activity and thenn invokes the pipe for the activity context
            </summary>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="M:MassTransit.Courier.ExecuteActivityFactory`2.Execute(MassTransit.Courier.ExecuteContext{`1},GreenPipes.IRequestPipe{MassTransit.Courier.ExecuteActivityContext{`0,`1},MassTransit.Courier.ExecutionResult})">
            <summary>
            Executes the activity context by passing it to the activity factory, which creates the activity
            and then invokes the next pipe with the combined activity context
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.TrackingNumber">
            <summary>
            The tracking number for this routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.ExecutionId">
            <summary>
            The tracking number for this activity within the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.Host">
            <summary>
            The host performing the execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.Timestamp">
            <summary>
            The start time for the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.Elapsed">
            <summary>
            The time elapsed for the execution operation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.ConsumeContext">
            <summary>
            The consume context of the execution routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext.ActivityName">
            <summary>
            The name of the activity being executed
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Completed">
            <summary>
            Completes the execution, without passing a compensating log entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables(System.Object)">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Completed``1(``0)">
            <summary>
            Completes the activity, passing a compensation log entry
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Completed``1(System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="logValues">An object to initialize the log properties</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables``1(``0,System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on 
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables``1(System.Object,System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="logValues"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.CompletedWithVariables``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on 
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate(System.Object)">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Terminate(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Faulted">
            <summary>
            The activity Faulted for an unknown reason, but compensation should be triggered
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ExecuteContext.Faulted(System.Exception)">
            <summary>
            The activity Faulted, and compensation should be triggered
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Courier.ExecuteContext`1.Arguments">
            <summary>
            The arguments from the routing slip for this activity
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Hosts.SanitizedRoutingSlip">
            <summary>
            A sanitized routing slip is one that has been read from and ensured to be safe for use, cleaning up any
            missing or null properties, as well as making it safe to avoid excessive validity checks across the solution
            </summary>
        </member>
        <member name="T:MassTransit.Courier.IActivity">
            <summary>
                Marker interface used to assist identification in IoC containers.
                Not to be used directly as it does not contain the message type of the
                consumer
            </summary>
            <remarks>
                Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.Courier.ICompensateActivity">
            <summary>
                Marker interface used to assist identification in IoC containers.
                Not to be used directly as it does not contain the message type of the
                consumer
            </summary>
            <remarks>
                Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.Courier.IExecuteActivity">
            <summary>
                Marker interface used to assist identification in IoC containers.
                Not to be used directly as it does not contain the message type of the
                consumer
            </summary>
            <remarks>
                Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="M:MassTransit.Courier.IRoutingSlipSendEndpointTarget.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,MassTransit.Serialization.MessageEnvelope)">
            <summary>
            Adds a custom subscription message to the routing slip which is sent at the specified events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName"></param>
            <param name="message">The custom message to be sent</param>
        </member>
        <member name="P:MassTransit.Courier.ItineraryBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.SetVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Set multiple variables (from a dictionary, for example) on the routing slip
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Add the original itinerary to the routing slip (if present)
            </summary>
            <returns>The number of activities added to the itinerary</returns>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName">Only send events for the specified activity</param>
        </member>
        <member name="M:MassTransit.Courier.ItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="activityName">Only send events for the specified activity</param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.CompensateActivityFilter`2">
            <summary>
            Compensates an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TLog"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.CompensateActivityMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the pipe
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.CompensateActivitySplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.ExecuteActivityFilter`2">
            <summary>
            Executes an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.ExecuteActivityMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the pipe
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Pipeline.ExecuteActivitySplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.RoutingSlipBuilder">
            <summary>
            A RoutingSlipBuilder is used to create a routing slip with proper validation that the resulting RoutingSlip
            is valid.
            </summary>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.MassTransit#Courier#IRoutingSlipSendEndpointTarget#AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,MassTransit.Serialization.MessageEnvelope)">
            <summary>
            Adds a custom subscription message to the routing slip which is sent at the specified events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName"></param>
            <param name="message">The custom message to be sent</param>
        </member>
        <member name="P:MassTransit.Courier.RoutingSlipBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a string value to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add an object variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Adds the activities from the source itinerary to the new routing slip and removes them from the
            source itinerary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName">Only send events for the specified activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="activityName">Only send events for the specified activity</param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.Build">
            <summary>
            Builds the routing slip using the current state of the builder
            </summary>
            <returns>The RoutingSlip</returns>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,System.Exception)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exception">The exception thrown by the activity</param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,MassTransit.ExceptionInfo)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exceptionInfo"></param>
        </member>
        <member name="M:MassTransit.Courier.RoutingSlipExtensions.RanToCompletion(MassTransit.Courier.Contracts.RoutingSlip)">
            <summary>
            Returns true if there are no remaining activities to be executed
            </summary>
            <param name="routingSlip"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Courier.Serialization.DefaultJsonTypeConverter`1">
            <summary>
            Default conversion of properties using standard serialization approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Courier.Serialization.EnvelopeMessageSerializer">
            <summary>
            Serializes an already existing message envelope to the transport, rather than using the message in the SendContext,
            setting the headers to the headers in the envelope, and transferring over headers from the context as well.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Serialization.JsonTypeConverter`1">
            <summary>
            Converts from a JToken to the requested type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetEncryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.SendContext)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetEncryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.Transformation.TransformContext)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetDecryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.ReceiveContext)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.GetDecryptStream(MassTransit.Serialization.ICryptoStreamProvider,System.IO.Stream,MassTransit.Transformation.TransformContext)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="provider">The crypto stream provider</param>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="context">The second context of the message</param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.SetEncryptionKeyId``1(GreenPipes.IPipeConfigurator{MassTransit.SendContext{``0}},System.String)">
            <summary>
            Set the encryption key name on the header so that it can be applied by the crypto stream provider
            </summary>
            <param name="configurator"></param>
            <param name="keyName"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.CryptoStreamProviderExtensions.SetEncryptionKeyId``1(MassTransit.SendContext{``0},System.String)">
            <summary>
            Set the encryption key name on the header so that it can be applied by the crypto stream provider
            </summary>
            <param name="sendContext"></param>
            <param name="keyName"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.EndpointAddressProvider`1">
            <summary>
            Returns the address for the message provided
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EndpointConvention.Map``1(System.Uri)">
            <summary>
            Map the message type to the specified address
            </summary>
            <typeparam name="T"></typeparam>
            <param name="destinationAddress"></param>
        </member>
        <member name="M:MassTransit.EndpointConvention.Map``1(MassTransit.EndpointAddressProvider{``0})">
            <summary>
            Map the message type to the endpoint returned by the specified method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="endpointAddressProvider"></param>
        </member>
        <member name="T:MassTransit.EndpointConventionCache`1">
            <summary>
            A cache of convention-based CorrelationId mappers, used unless overridden by some mystical force
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumerConsumeContext`1.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumerConsumeContext`1.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="T:MassTransit.ExceptionInfo">
            <summary>
            An exception information that is serializable
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.ExceptionType">
            <summary>
            The type name of the exception
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.InnerException">
            <summary>
            The inner exception if present (also converted to ExceptionInfo)
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.StackTrace">
            <summary>
            The stack trace of the exception site
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Message">
            <summary>
            The exception message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Source">
            <summary>
            The exception source
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionTimestamp">
            <summary>
            The time at which the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionSagaConsumeContext`1.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionSagaConsumeContext`1.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="T:MassTransit.Fault">
            <summary>
            Published (or sent, if part of a request/response conversation) when a fault occurs during message
            processing
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultId">
            <summary>
            Identifies the fault that was generated
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultedMessageId">
            <summary>
            The messageId that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Timestamp">
            <summary>
            When the fault was produced
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Exceptions">
            <summary>
            The exception information that occurred
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Host">
            <summary>
            The host information was the fault occurred
            </summary>
        </member>
        <member name="T:MassTransit.Fault`1">
            <summary>
            A faulted message, published when a message consumer fails to process the message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Fault`1.Message">
            <summary>
            The message that faulted
            </summary>
        </member>
        <member name="T:MassTransit.Headers">
            <summary>
            Headers are used to store value outside of a message body that are transported with 
            the message content.
            </summary>
        </member>
        <member name="M:MassTransit.Headers.GetAll">
            <summary>
            Returns all available headers
            </summary>
        </member>
        <member name="M:MassTransit.Headers.TryGetHeader(System.String,System.Object@)">
            <summary>
            If the specified header name is found, returns the value of the header as an object
            </summary>
            <param name="key">The header name</param>
            <param name="value">The output header value</param>
            <returns>True if the header was found, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,``0)">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,System.Nullable{``0})">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="M:MassTransit.HostConnectReceiveEndpointExtensions.ConnectResponseEndpoint(MassTransit.IHost,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect a response endpoint for the host
            </summary>
            <param name="host">The host to connect</param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.HostConnectReceiveEndpointExtensions.ConnectReceiveEndpoint(MassTransit.IHost,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect an endpoint for the host
            </summary>
            <param name="host">The host to connect</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="T:MassTransit.HostInfo">
            <summary>
            The host where an event or otherwise was produced
            a routing slip
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MachineName">
            <summary>
            The machine name (or role instance name) of the local machine
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessName">
            <summary>
            The process name hosting the routing slip activity
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessId">
            <summary>
            The processId of the hosting process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.Assembly">
            <summary>
            The assembly where the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.AssemblyVersion">
            <summary>
            The assembly version
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.FrameworkVersion">
            <summary>
            The .NET framework version
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MassTransitVersion">
            <summary>
            The version of MassTransit used by the process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.OperatingSystemVersion">
            <summary>
            The operating system version hosting the application
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.EndpointSettings">
            <summary>
            These endpoint settings are loaded from the app.config of the assembly to override
            the default values. By default, the queue name is derived from the endpoint specification
            class name.
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.EndpointSettings.QueueName">
            <summary>
            The queue name for the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.EndpointSettings.ConsumerLimit">
            <summary>
            The consumer limit for the endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.IActivityQueueNameProvider">
            <summary>
            A queue name provider for Courier activities, built based on the activity name
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IActivityQueueNameProvider.GetExecuteActivityQueueName(System.String)">
            <summary>
            Returns the queue name for execution 
            </summary>
            <param name="activityName">The activity name</param>
            <returns>The name of the queue</returns>
        </member>
        <member name="M:MassTransit.Hosting.IActivityQueueNameProvider.GetCompensateActivityQueueName(System.String)">
            <summary>
            Returns the queue name for compensation
            </summary>
            <param name="activityName"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Hosting.IConnectionStringProvider">
            <summary>
            A connection string source used to build out connection strings
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IConnectionStringProvider.TryGetConnectionString(System.String,System.String@,System.String@,System.String,System.String)">
            <summary>
            Returns the requested connection string, optionally replacing the server or catalog
            </summary>
            <param name="connectionName">The name of the connection string</param>
            <param name="connectionString"></param>
            <param name="providerName"></param>
            <param name="serverName">Optional, the server name to use instead of the name in the setting source</param>
            <param name="databaseName">Optional, the catalog name to use instead of the name in the setting source</param>
            <returns>A properly formatted connection string</returns>
        </member>
        <member name="P:MassTransit.Hosting.IEndpointSpecification.QueueName">
            <summary>
            The queue name to which the consumer should be connected
            </summary>
        </member>
        <member name="P:MassTransit.Hosting.IEndpointSpecification.ConsumerLimit">
            <summary>
            Limits the number of concurrent consumers
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.IEndpointSpecification.Configure(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configures the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.Hosting.IServiceConfigurator">
            <summary>
            Passed to a service bootstrapper to allow configuration of receive endpoints
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.IServiceSpecification">
            <summary>
            Used to configure the service that is hosting the endpoints
            </summary>
        </member>
        <member name="T:MassTransit.Hosting.ISettings">
            <summary>
            Settings are a collection of configuration values that are explictly declared
            so that they can be provided to a class at runtime from any source
            </summary>
        </member>
        <member name="M:MassTransit.Hosting.ISettingsProvider.TryGetSettings``1(System.String,``0@)">
            <summary>
            Try to get the settings of the specified type, using the specified prefix
            </summary>
            <typeparam name="T">The settings type to return</typeparam>
            <param name="prefix">The prefix to use when resolving configuration values from the property names</param>
            <param name="settings">The output settings value</param>
            <returns>True if the settings could be resolved</returns>
        </member>
        <member name="M:MassTransit.Hosting.ISettingsProvider.TryGetSettings``1(``0@)">
            <summary>
            Try to get the settings of the specified type, using the specified prefix
            </summary>
            <typeparam name="T">The settings type to return</typeparam>
            <param name="settings">The output settings value</param>
            <returns>True if the settings could be resolved</returns>
        </member>
        <member name="P:MassTransit.HostReady.HostAddress">
            <summary>
            The Host address
            </summary>
        </member>
        <member name="P:MassTransit.HostReady.ReceiveEndpoints">
            <summary>
            The receive endpoints that were started on the host
            </summary>
        </member>
        <member name="T:MassTransit.HostReceiveEndpointHandle">
            <summary>
            Returned when a receive endpoint is added to a host
            </summary>
        </member>
        <member name="P:MassTransit.HostReceiveEndpointHandle.Ready">
            <summary>
            A task which can be awaited to know when the receive endpoint is ready
            </summary>
        </member>
        <member name="M:MassTransit.HostReceiveEndpointHandle.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the receive endpoint.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="T:MassTransit.IBus">
            <summary>
            A bus is a logical element that includes a local endpoint and zero or more receive endpoints
            </summary>
        </member>
        <member name="P:MassTransit.IBus.Address">
            <summary>
            The InputAddress of the default bus endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IBus.Topology">
            <summary>
            The bus topology
            </summary>
        </member>
        <member name="M:MassTransit.IBusControl.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the bus (assuming the battery isn't dead). Once the bus has been started, it cannot be started again, even after is has been stopped.
            </summary>
            <returns>The BusHandle for the started bus. This is no longer needed, as calling Stop on the IBusControl will stop the bus equally well.</returns>
        </member>
        <member name="M:MassTransit.IBusControl.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the bus if it has been started. If the bus hasn't been started, the method returns without any warning.
            </summary>
        </member>
        <member name="T:MassTransit.IBusFactorySelector">
            <summary>
            Use one of the selector extension methods to create a bus instance for the
            selected transport.
            </summary>
        </member>
        <member name="T:MassTransit.IBusObserver">
            <summary>
            Used to observe events produced by the bus
            </summary>
        </member>
        <member name="M:MassTransit.IBusObserver.PostCreate(MassTransit.IBus)">
            <summary>
            Called after the bus has been created.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.CreateFaulted(System.Exception)">
            <summary>
            Called when the bus fails to be created
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStart(MassTransit.IBus)">
            <summary>
            Called when the bus is being started, before the actual Start commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStart(MassTransit.IBus,System.Threading.Tasks.Task{MassTransit.BusReady})">
            <summary>
            Called once the bus has started and is running
            </summary>
            <param name="bus"></param>
            <param name="busReady">A task which is completed once the bus is ready and all receive endpoints are ready.</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StartFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus fails to start
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStop(MassTransit.IBus)">
            <summary>
            Called when the bus is being stopped, before the actual Stop commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStop(MassTransit.IBus)">
            <summary>
            Called when the bus has been stopped.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StopFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus failed to Stop.
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IClientFactory">
            <summary>
            A client factory supports the creation of smart clients that use the
            smart endpoint aspects of Conductor to intelligently route messages.
            </summary>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="destinationAddress">The destination service address</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.RequestTimeout)">
            <summary>
            Create a request client for the specified message type
            </summary>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.RequestTimeout)">
            <summary>
            Create a request client for the specified message type
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.ConsumeContext,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumeMessageObserver`1">
            <summary>
            Intercepts the ConsumeContext
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.PreConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.PostConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.ConsumeFault(MassTransit.ConsumeContext{`0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumeObserver">
            <summary>
            Intercepts the ConsumeContext
            </summary>
        </member>
        <member name="M:MassTransit.IConsumeObserver.PreConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeObserver.PostConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumer`1">
            <summary>
                Defines a class that is a consumer of a message. The message is wrapped in an IConsumeContext
                interface to allow access to details surrounding the inbound message, including headers.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.IConsumer">
            <summary>
                Marker interface used to assist identification in IoC containers.
                Not to be used directly as it does not contain the message type of the
                consumer
            </summary>
            <remarks>
                Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.IConsumerFactory`1">
            <summary>
            Maps an instance of a consumer to one or more Consume methods for the specified message type
            
            The whole purpose for this interface is to allow the creator of the consumer to manage the lifecycle
            of the consumer, along with anything else that needs to be managed by the factory, container, etc.
            </summary>
            <typeparam name="TConsumer">The Consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IEndpointConventionCache`1.TryGetEndpointAddress(System.Uri@)">
            <summary>
            Returns the endpoint address for the message
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IFault.FaultType">
            <summary>
            The type of fault that occurred
            </summary>
        </member>
        <member name="P:MassTransit.IFault.Messages">
            <summary>
            Messages associated with the exception
            </summary>
        </member>
        <member name="P:MassTransit.IFault.OccurredAt">
            <summary>
            When the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.IFault.StackTrace">
            <summary>
            A stack trace related to the exception
            </summary>
        </member>
        <member name="T:MassTransit.IHost">
            <summary>
            A Bus Host is a transport-neutral reference to a host
            </summary>
        </member>
        <member name="P:MassTransit.IHost.Address">
            <summary>
            An address that identifies the host
            </summary>
        </member>
        <member name="M:MassTransit.IHost.ConnectReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect a receive endpoint for the host, using an endpoint definition
            </summary>
            <param name="definition">An endpoint definition, which abstracts specific endpoint behaviors from the transport</param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IHost.ConnectReceiveEndpoint(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect a receive endpoint to the host, with the specified queue name
            </summary>
            <param name="queueName">The queue name for the receiving endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="T:MassTransit.IMessageConsumer`1">
            <summary>
                Defines a class as a consumer of messages which implement T, either as a class or interface
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IMessageConsumer`1.Consume(`0)">
            <summary>
                Called by the framework when a message is available to be consumed. This
                is called by a framework thread, so care should be used when accessing
                any shared objects.
            </summary>
            <param name="message">The message to consume.</param>
        </member>
        <member name="P:MassTransit.IMessageData.Address">
            <summary>
            Returns the address of the message data
            </summary>
        </member>
        <member name="P:MassTransit.IMessageData.HasValue">
            <summary>
            True if the value is present in the message, and not null
            </summary>
        </member>
        <member name="T:MassTransit.IMessageScheduler">
            <summary>
            A message scheduler is able to schedule a message for delivery.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.CancelScheduledSend(System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.IMessageScheduler.CancelScheduledSend(System.Uri,System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="destinationAddress">The destination address of the scheduled message</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.IMessageSerializer">
            <summary>
            A message serializer is responsible for serializing a message. Shocking, I know.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageSerializer.Serialize``1(System.IO.Stream,MassTransit.SendContext{``0})">
            <summary>
            Serialize the message to the stream provided.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="context"></param>
        </member>
        <member name="T:MassTransit.Initializers.Conventions.IConventionTypeCache`1">
            <summary>
            A convention cache for type specified, which converts to the generic type requested
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.Conventions.IConventionTypeCache`1.GetOrAdd``2">
            <summary>
            Returns the cached item for the specified type key, creating a new value
            if one has not yet been created.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.Conventions.InitializerConvention">
            <summary>
            Looks for a property that can be used as a CorrelationId message header, and
            applies a filter to set it on message send if available
            </summary>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.CopyHeaderInitializer`3">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="THeader">The header type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.ProviderHeaderInitializer`3">
            <summary>
            Set a message property using the property provider for the property value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.SetHeaderInitializer`3">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="THeader">The header type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.SetStringHeaderInitializer`2">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IHeaderInitializer`2">
            <summary>
            Initialize a message header
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IHeaderInitializer`1">
            <summary>
            Initialize a message header
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IMessageFactory`1">
            <summary>
            Creates the message type
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IMessageInitializer`1">
            <summary>
            A message initializer that doesn't use the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Create(GreenPipes.PipeContext)">
            <summary>
            Create a message context, using <paramref name="context"/> as a base for payloads, etc.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Initialize(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initialize the message, using the input
            </summary>
            <param name="input"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Initialize(MassTransit.Initializers.InitializeContext{`0},System.Object)">
            <summary>
            Initialize the message, using the input
            </summary>
            <param name="context">An existing initialize message context</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="input">The input object</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object)">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="context"></param>
            <param name="input">The input object</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="context">An existing context</param>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,System.Object,GreenPipes.IPipe{MassTransit.SendContext{`0}},System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Send(MassTransit.ISendEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object,GreenPipes.IPipe{MassTransit.SendContext{`0}})">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="context">An existing context</param>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,System.Object,System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="input"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object)">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="context"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,System.Object,GreenPipes.IPipe{MassTransit.PublishContext{`0}},System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="input"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object,GreenPipes.IPipe{MassTransit.PublishContext{`0}})">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="context"></param>
            <param name="input"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,System.Object,GreenPipes.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="input"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Publish(MassTransit.IPublishEndpoint,MassTransit.Initializers.InitializeContext{`0},System.Object,GreenPipes.IPipe{MassTransit.PublishContext})">
            <summary>
            Initialize the message using the input and publish it
            </summary>
            <param name="endpoint"></param>
            <param name="context"></param>
            <param name="input"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.InitializeContext`2">
            <summary>
            Message initialization context, which includes the message being initialized and the input
            being used to initialize the message properties.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext`2.HasInput">
            <summary>
            If true, the input is present, otherwise it equals <i>default</i>.
            </summary>
        </member>
        <member name="T:MassTransit.Initializers.InitializeContext`1">
            <summary>
            The context of the message being initialized
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext`1.Message">
            <summary>
            The message being initialized
            </summary>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyConverter`2">
            <summary>
            A message property converter, which is async, and has access to the context
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TInputProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IPropertyConverter`2.Convert``1(MassTransit.Initializers.InitializeContext{``0},`1)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyInitializer`2">
            <summary>
            A message initializer that uses the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyInitializer`1">
            <summary>
            A message initializer that doesn't use the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IPropertyInitializer`1.Apply(MassTransit.Initializers.InitializeContext{`0})">
            <summary>
            Apply the initializer to the message
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.ITypeConverter`2">
            <summary>
            A synchronous property type conversion, which may or may not succeed.
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.ITypeConverter`2.TryConvert(`1,`0@)">
            <summary>
            Convert the input to the result type
            </summary>
            <param name="input">The input value</param>
            <param name="result">The result value</param>
            <returns>True if the value was converted, otherwise false</returns>
        </member>
        <member name="T:MassTransit.Initializers.MessageInitializer`2">
            <summary>
            Initializes a message using the input, which can include message properties, headers, etc.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.MessageInitializerCache`1.GetInitializer(System.Type)">
            <summary>
            Returns the initializer for the message/input type combination
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.AsyncConvertPropertyConverter`2">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1"/> to {T} by awaiting the result and then applying a subsequent conversion
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.AsyncPropertyConverter`2">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1"/> to {T} by awaiting the result and then applying a subsequent conversion
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.ConvertPropertyConverter`2">
            <summary>
            Calls the property type converter, returning either the result or default.
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.TaskPropertyConverter`1">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1"/> to {T} by awaiting the result
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyInitializers.CopyPropertyInitializer`3">
            <summary>
            Set a message property by copying the input property (of the same type), regardless of whether
            the input property value is null, etc.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.PropertyInitializers.PropertyInitializerCache.TryGetFactory``1(System.Type,MassTransit.Initializers.PropertyInitializers.IPropertyInitializerFactory{``0}@)">
            <summary>
            Returns the factory to convert the <paramref name="sourceType"/> to the <typeparamref name="T"/>.
            </summary>
            <param name="sourceType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.PropertyInitializers.ProviderPropertyInitializer`3">
            <summary>
            Set a message property using the property provider for the property value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.ConstantPropertyProvider`2">
            <summary>
            Returns a constant value for the property
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.InputValuePropertyProvider`2">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.InputVariablePropertyProvider`3">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.IPropertyProvider`2">
            <summary>
            Returns the property from the input
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.Func{System.String})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},``1)">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},``1)">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},System.Func{``1})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.Variables.TimestampVariable">
            <summary>
            Used to set timestamp(s) in a message, which is the same regardless of how many times it is
            used within the same initialize message context
            </summary>
        </member>
        <member name="M:MassTransit.InMemoryBus.Create(System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryBus.Create(System.Uri,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="baseAddress">Override the default base address</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryHostRequestClientExtensions.CreateRequestClient``2(MassTransit.Transports.InMemory.IInMemoryHost,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to retrieve the endpoint and send the request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="host"></param>
            <param name="destinationAddress">The service address that handles the request</param>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="timeToLive">THe time to live for the request message</param>
            <param name="callback">Callback when the request is sent</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryHostRequestClientExtensions.CreatePublishRequestClient``2(MassTransit.Transports.InMemory.IInMemoryHost,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to publish a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="callback">Callback when the request is sent</param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryHostRequestClientExtensions.CreateRequestClientFactory``2(MassTransit.Transports.InMemory.IInMemoryHost,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client factory which can be used to create a request client per message within a consume context.
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="host">The host for the response endpoint</param>
            <param name="destinationAddress">The service address</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The request time to live</param>
            <param name="callback">Customize the send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryHostRequestClientExtensions.CreatePublishRequestClientFactory``2(MassTransit.Transports.InMemory.IInMemoryHost,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client factory which can be used to create a request client per message within a consume context.
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="host">The host for the response endpoint</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The request time to live</param>
            <param name="callback">Customize the send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <typeparam name="TMember">The type of the member referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcrete(System.Type)">
            <summary>
            Determines if a type is neither abstract nor an interface and can be constructed.
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type can be constructed, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcreteAndAssignableTo(System.Type,System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <param name="assignableType">The type to which the subject type should be checked against</param>
            <returns>True if the type is concrete and can be assigned to the assignableType, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsConcreteAndAssignableTo``1(System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <typeparam name="T">The type to which the subject type should be checked against</typeparam>
            <returns>True if the type is concrete and can be assigned to the assignableType, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines if the type is a nullable type
            </summary>
            <param name="type">The type</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsNullable(System.Type,System.Type@)">
            <summary>
            Determines if the type is a nullable type
            </summary>
            <param name="type">The type</param>
            <param name="underlyingType">The underlying type of the nullable</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsOpenGeneric(System.Type)">
            <summary>
            Determines if the type is an open generic with at least one unspecified generic argument
            </summary>
            <param name="type">The type</param>
            <returns>True if the type is an open generic</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsOpenGeneric(System.Reflection.TypeInfo)">
            <summary>
            Determines if the TypeInfo is an open generic with at least one unspecified generic argument
            </summary>
            <param name="typeInfo">The TypeInfo</param>
            <returns>True if the TypeInfo is an open generic</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.CanBeNull(System.Type)">
            <summary>
            Determines if a type can be null
            </summary>
            <param name="type">The type</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.GetTypeName(System.Type)">
            <summary>
            Returns an easy-to-read type name from the specified Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the first attribute of the specified type for the object specified
            </summary>
            <typeparam name="T">The type of attribute</typeparam>
            <param name="provider">An attribute provider, which can be a MethodInfo, PropertyInfo, Type, etc.</param>
            <returns>The attribute instance if found, or null</returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determines if the target has the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Returns true if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsAnonymousType(System.Reflection.TypeInfo)">
            <summary>
            Returns true if the TypeInfo is an anonymous type
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Returns true if the type is contained within the namespace
            </summary>
            <param name="type"></param>
            <param name="nameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.Extensions.TypeExtensions.IsValueTypeOrObject(System.Type)">
            <summary>
            True if the type is a value type, or an object type that is treated as a value by MassTransit
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Internals.Reflection.ExpressionCompiler">
            <summary>Compiles expression to delegate ~20 times faster than Expression.Compile.
            Partial to extend with your things when used as source file.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast(System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileSys``1(System.Linq.Expressions.Expression{``0})">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileSys(System.Linq.Expressions.LambdaExpression)">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{``0},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast(System.Linq.Expressions.Expression{System.Action},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Action{``0,``1}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}},System.Boolean)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/></summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.TryCompileWithPreCreatedClosure``1(System.Linq.Expressions.LambdaExpression,System.Object,System.Linq.Expressions.ConstantExpression[])">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/> 
            with the provided closure object and constant expressions (or lack there of) -
            Constant expression should be the in order of Fields in closure object!
            Note 1: Use it on your own risk - FEC won't verify the expression is compile-able with passed closure, it is up to you!
            Note 2: The expression with NESTED LAMBDA IS NOT SUPPORTED!
            Note 3: `Label` and `GoTo` are not supported in this case, because they need first round to collect out-of-order labels</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.TryCompileWithoutClosure``1(System.Linq.Expressions.LambdaExpression)">
            <summary>Tries to compile expression to "static" delegate, skipping the step of collecting the closure object.</summary>
        </member>
        <member name="M:MassTransit.Internals.Reflection.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Type[],System.Type)">
            <summary>Compiles expression to delegate by emitting the IL. 
            If sub-expressions are not supported by emitter, then the method returns null.
            The usage should be calling the method, if result is null then calling the Expression.Compile.</summary>
        </member>
        <member name="T:MassTransit.Internals.Reflection.ExpressionCompiler.EmittingVisitor">
            <summary>Supports emitting of selected expressions, e.g. lambdaExpr are not supported yet.
            When emitter find not supported expression it will return false from <see cref="M:MassTransit.Internals.Reflection.ExpressionCompiler.EmittingVisitor.TryEmit(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Reflection.Emit.ILGenerator,MassTransit.Internals.Reflection.ExpressionCompiler.ClosureInfo@,MassTransit.Internals.Reflection.ExpressionCompiler.ParentFlags,System.Int32)"/>, so I could fallback
            to normal and slow Expression.Compile.</summary>
        </member>
        <member name="T:MassTransit.InVar">
            <summary>
            Variables, which can be used for message initialization
            </summary>
        </member>
        <member name="P:MassTransit.InVar.Timestamp">
            <summary>
            Generates the current timestamp, in UTC, which can be used to initialize properties
            in the message with a consistent value
            </summary>
        </member>
        <member name="P:MassTransit.InVar.Id">
            <summary>
            Generates a new identifier, and maintains that identifier for the entire message initializer lifetime,
            so that subsequent uses of the identifier return the same value. There are multiple aliases for the same
            identifier, so that property names are automatically inferred (Id, CorrelationId, etc.).
            </summary>
        </member>
        <member name="P:MassTransit.InVar.CorrelationId">
            <summary>
            Generates a new identifier, and maintains that identifier for the entire message initializer lifetime,
            so that subsequent uses of the identifier return the same value. There are multiple aliases for the same
            identifier, so that property names are automatically inferred (Id, CorrelationId, etc.).
            </summary>
        </member>
        <member name="T:MassTransit.IPublishEndpoint">
            <summary>
            A publish endpoint lets the underlying transport determine the actual endpoint to which
            the message is sent. For example, an exchange on RabbitMQ and a topic on Azure Service bus.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,GreenPipes.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,GreenPipes.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.</para>
            
            <para>
            Read up on publishing: http://readthedocs.org/docs/masstransit/en/latest/overview/publishing.html
            </para>
            </summary>
            <typeparam name = "T">The type of the message</typeparam>
            <param name = "message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,GreenPipes.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,GreenPipes.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)"/>: this is a "dynamically"
            typed overload - give it an interface as its type parameter,
            and a loosely typed dictionary of values and the MassTransit
            underlying infrastructure will populate an object instance
            with the passed values. It actually does this with DynamicProxy
            in the background.
            </summary>
            <typeparam name="T">The type of the interface or
            non-sealed class with all-virtual members.</typeparam>
            <param name="values">The dictionary of values to place in the
            object instance to implement the interface.</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,GreenPipes.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)"/>: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext"/>
            meta-data. Also <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)"/>.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">The dictionary of values to become hydrated and
            published under the type of the interface.</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,GreenPipes.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)"/>: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext"/>
            meta-data. Also <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)"/>.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">The dictionary of values to become hydrated and
            published under the type of the interface.</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpointProvider.CreatePublishEndpoint(System.Uri,MassTransit.ConsumeContext)">
            <summary>
            Creates a publish endpoint, using the optional <see cref="T:MassTransit.ConsumeContext"/> for the correlation identifiers
            </summary>
            <param name="sourceAddress"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishEndpointProvider.GetPublishSendEndpoint``1(``0)">
            <summary>
            Return the SendEndpoint used for publishing the specified message
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPublishMessageObserver`1">
            <summary>
            Observes messages as they are published via a publish endpoint. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishMessageObserver`1.PrePublish(MassTransit.PublishContext{`0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishMessageObserver`1.PostPublish(MassTransit.PublishContext{`0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishMessageObserver`1.PublishFault(MassTransit.PublishContext{`0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPublishObserver">
            <summary>
            Observes messages as they are published via a publish endpoint. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishObserver.PrePublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishObserver.PostPublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishObserver.PublishFault``1(MassTransit.PublishContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPublishObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.IReceiveEndpoint">
            <summary>
            A service endpoint has a inbound transport that pushes messages to consumers
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointControl.Start">
            <summary>
            Starts receiving from the inbound transport.
            </summary>
            <returns>A handle to the receiving endpoint, which is used to stop it</returns>
        </member>
        <member name="T:MassTransit.IReceiveEndpointObserver">
            <summary>
            Used to observe the events signaled by a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Ready(MassTransit.ReceiveEndpointReady)">
            <summary>
            Called when the receive endpoint is ready to receive messages
            </summary>
            <param name="ready"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Completed(MassTransit.ReceiveEndpointCompleted)">
            <summary>
            Called when the receive endpoint has completed
            </summary>
            <param name="completed"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Faulted(MassTransit.ReceiveEndpointFaulted)">
            <summary>
            Called when the receive endpoint faults
            </summary>
            <param name="faulted"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveObserver">
            <summary>
            An observer that can monitor a receive endpoint to track message consumption at the 
            endpoint level.
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PreReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when a message has been delivered by the transport is about to be received by the endpoint
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when the message has been received and acknowledged on the transport
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostConsume``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Called when a message has been consumed by a consumer
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Called when a message being consumed produced a fault
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <param name="exception">The exception from the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ReceiveFault(MassTransit.ReceiveContext,System.Exception)">
            <summary>
            Called when the transport receive faults
            </summary>
            <param name="context">The receive context of the message</param>
            <param name="exception">The exception that was thrown</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveTransportObserver">
            <summary>
            Used to observe the events signaled by a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Ready(MassTransit.ReceiveTransportReady)">
            <summary>
            Called when the receive endpoint is ready to receive messages
            </summary>
            <param name="ready"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Completed(MassTransit.ReceiveTransportCompleted)">
            <summary>
            Called when the receive endpoint has completed
            </summary>
            <param name="completed"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Faulted(MassTransit.ReceiveTransportFaulted)">
            <summary>
            Called when the receive endpoint faults
            </summary>
            <param name="faulted"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IRecurringMessageScheduler">
            <summary>
                A message scheduler is able to schedule a message for delivery.
            </summary>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
                Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.CancelScheduledRecurringSend(System.String,System.String)">
            <summary>
                Cancel a scheduled message by TokenId
            </summary>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="T:MassTransit.IRequestClient`1">
            <summary>
            A request client, which is used to send a request, as well as get one or more response types from that request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.IRequestClient`1.Create(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, returning a <see cref="T:MassTransit.RequestHandle`1"/>, which is then used to get responses, and ultimately
            send the request.
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <returns>A <see cref="T:MassTransit.RequestHandle`1"/> for the request</returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.Create(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, returning a <see cref="T:MassTransit.RequestHandle`1"/>, which is then used to get responses, and ultimately
            send the request.
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <returns>A <see cref="T:MassTransit.RequestHandle`1"/> for the request</returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">An optional timeout, to automatically cancel the request after the specified timeout period</param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IRequestClient`2">
            <summary>
            The legacy request client interface, which combines the request and response type into a single interface. This will eventually
            be marked obsolete.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
        </member>
        <member name="M:MassTransit.IRequestClient`2.Request(`0,System.Threading.CancellationToken)">
            <summary>
            Send the request, and complete the response task when the response is received. If
            the request times out, a RequestTimeoutException is thrown. If the remote service 
            returns a fault, the task is set to exception status.
            </summary>
            <param name="request">The request message</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns>The response Task</returns>
        </member>
        <member name="T:MassTransit.IRequestClientFactory`2">
            <summary>
            A request client factory which is unique to each consume, but uses a return path specified
            by the creation of the factory
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ISendEndpointProvider">
            <summary>
            The Send Endpoint Provider is used to retrieve endpoints using addresses. The interface is
            available both at the bus and within the context of most message receive handlers, including
            the consume context, saga context, consumer context, etc. The most local provider should be
            used to ensure message continuity is maintained.
            </summary>
        </member>
        <member name="M:MassTransit.ISendEndpointProvider.GetSendEndpoint(System.Uri)">
            <summary>
            Return the send endpoint for the specified address
            </summary>
            <param name="address">The endpoint address</param>
            <returns>The send endpoint</returns>
        </member>
        <member name="T:MassTransit.ISendMessageObserver`1">
            <summary>
            Observes messages as they are sent to transports. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.ISendMessageObserver`1.PreSend(MassTransit.SendContext{`0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendMessageObserver`1.PostSend(MassTransit.SendContext{`0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendMessageObserver`1.SendFault(MassTransit.SendContext{`0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISendObserver">
            <summary>
            Observes messages as they are sent to transports. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.ISendObserver.PreSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendObserver.PostSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendObserver.SendFault``1(MassTransit.SendContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISendObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Logging.ILog">
            <summary>
            Implementers handle logging and filtering based on logging levels.
            </summary>
        </member>
        <member name="T:MassTransit.Logging.LogOutputProvider">
            <summary>
            Delegate to provide the log output if the log level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Debug(System.Object)">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Info(System.Object)">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Info(System.Object,System.Exception)">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Warn(System.Object)">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Error(System.Object)">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Error(System.Object,System.Exception)">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Fatal(System.Object)">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.DebugFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a debug message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.InfoFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an info message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.WarnFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a warn message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.ErrorFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs an error message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="M:MassTransit.Logging.Tracing.TraceLog.FatalFormat(System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a fatal message.
            
            </summary>
            <param name="exception">The exception to log</param>
            <param name="formatProvider">The format provider to use</param>
            <param name="format">Format string for the message to log</param>
            <param name="args">Format arguments for the message to log</param>
        </member>
        <member name="T:MassTransit.MessageContext">
            <summary>
            The message context includes the headers that are transferred with the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.MessageId">
            <summary>
            The messageId assigned to the message when it was initially Sent. This is different
            than the transport MessageId, which is only for the Transport.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.RequestId">
            <summary>
            If the message is a request, or related to a request, such as a response or a fault,
            this contains the requestId.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.CorrelationId">
            <summary>
            If the message implements the CorrelatedBy(Guid) interface, this field should be 
            populated by default to match that value. It can, of course, be overwritten with
            something else.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ConversationId">
            <summary>
            The conversationId of the message, which is copied and carried throughout the message
            flow by the infrastructure.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.InitiatorId">
            <summary>
            If this message was produced within the context of a previous message, the CorrelationId
            of the message is contained in this property. If the message was produced from a saga
            instance, the CorrelationId of the saga is used.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ExpirationTime">
            <summary>
            The expiration time of the message if it is not intended to last forever.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.SourceAddress">
            <summary>
            The address of the message producer that sent the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.DestinationAddress">
            <summary>
            The destination address of the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ResponseAddress">
            <summary>
            The response address to which responses to the request should be sent
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.FaultAddress">
            <summary>
            The fault address to which fault events should be sent if the message consumer faults
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.SentTime">
            <summary>
            When the message was originally sent
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Headers">
            <summary>
            Additional application-specific headers that are added to the message by the application
            or by features within MassTransit, such as when a message is moved to an error queue.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Host">
            <summary>
            The host information of the message producer. This may not be present if the message was sent
            from an earlier version of MassTransit.
            </summary>
        </member>
        <member name="T:MassTransit.MessageData`1">
            <summary>
            A big property is a message property that is stored outside the message transport
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.MessageData`1.Value">
            <summary>
            Returns the value of the property, which may be loaded asynchronously from the big storage
            </summary>
        </member>
        <member name="M:MassTransit.MessageData.EncryptedMessageDataRepository.#ctor(MassTransit.MessageData.IMessageDataRepository,MassTransit.Serialization.ICryptoStreamProvider)">
            <summary>
            Provides encrypted stream support to ensure that message data is encrypted at rest.
            </summary>
            <param name="repository">The original message data repository where message data is stored.</param>
            <param name="streamProvider">The encrypted stream provider</param>
        </member>
        <member name="T:MassTransit.MessageData.IMessageDataRepository">
            <summary>
            Storage of large message data that can be stored and retrieved separate of the message body. 
            Implemented as a claim-check pattern when an identifier is stored in the message body which
            is used to retrieve the message data separately.
            </summary>
        </member>
        <member name="M:MassTransit.MessageData.IMessageDataRepository.Get(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Returns a stream to read the message data for the specified address.
            </summary>
            <param name="address">The data address</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageData.IMessageDataRepository.Put(System.IO.Stream,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Puts message data into the repository
            </summary>
            <param name="stream">The stream of data for the message</param>
            <param name="timeToLive"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageData.LoadMessageData`1">
            <summary>
            Loads the message data when accessed via Value, using the specified repository and converter.
            </summary>
            <typeparam name="T">The message data property type</typeparam>
        </member>
        <member name="T:MassTransit.MessageHandler`1">
            <summary>
            A message handler is a delegate type that asynchronously consumes the message
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The consume context</param>
            <returns>An awaitable task that is completed once the message has been consumed</returns>
        </member>
        <member name="F:MassTransit.MessageHeaders.Reason">
            <summary>
            The reason for a message action being taken 
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultExceptionType">
            <summary>
            The type of exception from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultMessage">
            <summary>
            The exception message from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultMessageType">
            <summary>
            The message type from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultConsumerType">
            <summary>
            The consumer type which faulted
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultTimestamp">
            <summary>
            The timestamp when the fault occurred
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultStackTrace">
            <summary>
            The stack trace from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ForwarderAddress">
            <summary>
            The endpoint that forwarded the message to the new destination
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.DeliveredAddress">
            <summary>
            The address where the message was originally delivered before being rescheduled
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.SchedulingTokenId">
            <summary>
            The tokenId for the message that was registered with the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.RedeliveryCount">
            <summary>
            The number of times the message has been redelivered (zero if never)
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.QuartzTriggerKey">
            <summary>
            The trigger key that was used when the scheduled message was trigger
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ClientId">
            <summary>
            Identifies the client from which the request is being sent
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.EndpointId">
            <summary>
            Identifies the endpoint that handled the request
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.Scheduled">
            <summary>
            The time when the message was scheduled
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.Sent">
            <summary>
            When the event for this message was fired by Quartz
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.NextScheduled">
            <summary>
            When the next message is scheduled to be sent
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.PreviousSent">
            <summary>
            When the previous message was sent
            </summary>
        </member>
        <member name="M:MassTransit.MessageInitializerExtensions.Init``1(MassTransit.ConsumeContext,System.Object)">
            <summary>
            Initialize a message using the specified input values (via an anonymous object, or an actual object)
            </summary>
            <param name="context"></param>
            <param name="values"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageRedeliveryContext">
            <summary>
            Used to reschedule delivery of the current message
            </summary>
        </member>
        <member name="M:MassTransit.MessageRedeliveryContext.ScheduleRedelivery(System.TimeSpan,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Schedule the message to be redelivered after the specified delay with given operation.
            </summary>
            <param name="delay">The minimum delay before the message will be redelivered to the queue</param>
            <param name="callback">Operation which perform during message redeliver to queue</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageRequestClient`2">
            <summary>
            Implements a request client that uses specified endpoint to send the request and return the
            response task.
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
        </member>
        <member name="M:MassTransit.MessageRequestClient`2.#ctor(MassTransit.IBus,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="bus">The bus instance</param>
            <param name="serviceAddress">The service endpoint address</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.MessageRequestClient`2.#ctor(MassTransit.IRequestClient{`0},System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="requestClient"></param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Consumed(System.TimeSpan)">
            <summary>
            A message was consumed, including the consume duration
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.ConsumeFaulted(System.TimeSpan)">
            <summary>
            A message faulted while being consumed
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Sent">
            <summary>
            A message was sent
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Published">
            <summary>
            A message was published
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.PublishFaulted">
            <summary>
            A publish faulted
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.SendFaulted">
            <summary>
            A send faulted
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterPublishObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterReceiveObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterSendObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.Windows.ConsumerPerformanceCounter">
            <summary>
            Tracks the consumption and failure of a consumer processing messages. The message types
            in this case are not included in the counter, only the consumer itself.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.ConsumerFactories.InstanceConsumerFactory`1">
            <summary>
            Retains a reference to an existing message consumer, and uses it to send consumable messages for
            processing.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConcurrencyLimiter">
            <summary>
            A concurrency limiter (using a semaphore) which can be shared, and adjusted using a management
            endpoint.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConcurrencyLimitFilterManagementConsumer">
            <summary>
            Consumer which when connected to a management endpoint can control the concurrency
            limit.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConcurrencyLimit.ConsumeConcurrencyLimitFilter`1">
            <summary>
            A concurrency limit filter that is shared by multiple message types, so that a consumer
            accepting those various types can be limited to a specific number of consumer instances.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConsumerMessageFilter`2">
            <summary>
            Consumes a message via Consumer, resolved through the consumer factory and notifies
            the context that the message was consumed.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ConsumerSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.DeadLetterFilter">
            <summary>
            If a message was neither delivered to a consumer nor caused a fault (which was notified already)
            then this filter will send the message to the dead letter pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.DeadLetterTransportFilter">
            <summary>
            Moves a message received to a transport without any deserialization
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.DeserializeFilter">
            <summary>
            Performs the deserialization of a message ReceiveContext and passes the resulting
            ConsumeContext to the output pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ErrorTransportFilter">
            <summary>
            In the case of an exception, the message is moved to the destination transport. If the receive had not yet been
            faulted, a fault is generated.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.GenerateFaultFilter">
            <summary>
            Generates and publishes a <see cref="T:MassTransit.Fault"/> event for the exception
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.HandlerMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.InstanceMessageFilter`2">
            <summary>
            Consumes a message via an existing class instance
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.LegacyMethodConsumerMessageFilter`2">
            <summary>
                Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessageSchedulerFilter">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MessageSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.MethodConsumerMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ObserverMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.Filters.Outbox.OutboxSendEndpoint.#ctor(MassTransit.Context.OutboxContext,MassTransit.ISendEndpoint)">
            <summary>
            Creates an send endpoint on the outbox
            </summary>
            <param name="outboxContext">The outbox context for this consume operation</param>
            <param name="endpoint">The actual endpoint returned by the transport</param>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.PublishMessageSchedulerFilter">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.RedeliveryRetryFilter`1">
            <summary>
            Uses the message redelivery mechanism, if available, to delay a retry without blocking message delivery
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.ScheduleMessageRedeliveryFilter`1">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Filters.TransformFilter`1">
            <summary>
            Applies a transform to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeMessageObserverConnector">
            <summary>
            Supports connection of a message observer to the pipeline
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumeObserverConnector">
            <summary>
            Supports connection of a consume observer
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.IConsumerMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.IRequestPipeConnector">
            <summary>
            Connect a request pipe to the pipeline
            </summary>
        </member>
        <member name="M:MassTransit.Pipeline.IRequestPipeConnector.ConnectRequestPipe``1(System.Guid,GreenPipes.IPipe{MassTransit.ConsumeContext{``0}})">
            <summary>
            Connect the consume pipe to the pipeline for messages with the specified RequestId header
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestId"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.IRequestPipeConnector`1">
            <summary>
            A connector for a pipe by request id
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Pipeline.IRequestPipeConnector`1.ConnectRequestPipe(System.Guid,GreenPipes.IPipe{MassTransit.ConsumeContext{`0}})">
            <summary>
            Connect the consume pipe to the pipeline for messages with the specified RequestId header
            </summary>
            <param name="requestId"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.ConsumerMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the pipe
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.ConsumerMessageMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.IManagementPipe">
            <summary>
            A management pipe is used by filters to communicate with the outside world, for management
            purposes such as configuring the acceptance of command and request/response messages.
            </summary>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.MessagePublishPipe`1">
            <summary>
            Converts an inbound context type to a pipe context type post-dispatch
            </summary>
            <typeparam name="TMessage">The subsequent pipe context type</typeparam>
        </member>
        <member name="T:MassTransit.Pipeline.Pipes.MessageSendPipe`1">
            <summary>
            Converts an inbound context type to a pipe context type post-dispatch
            </summary>
            <typeparam name="TOutput">The subsequent pipe context type</typeparam>
        </member>
        <member name="P:MassTransit.PublishContext.Mandatory">
            <summary>
            True if the message must be delivered to a subscriber
            </summary>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishContextExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledRecurringMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
            Cancel a scheduled message using the scheduleId and scheduleGroup that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.IPublishEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.CancelScheduledSend``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.PublishEndpointSchedulerExtensions.CancelScheduledSend(MassTransit.IPublishEndpoint,System.Guid)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.PublishRequestClient`2">
            <summary>
            Implements a request client that allows a message to be published, versus sending to a specific endpoint
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
        </member>
        <member name="M:MassTransit.PublishRequestClient`2.#ctor(MassTransit.IBus,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="bus">The bus instance</param>
            <param name="timeout">The request timeout</param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.PublishRequestClient`2.#ctor(MassTransit.IRequestClient{`0},System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{`0}})">
            <summary>
            Creates a message request client for the bus and endpoint specified
            </summary>
            <param name="client"></param>
            <param name="timeToLive">The time that the request will live for</param>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.ReceiveContext">
            <summary>
            The receive context is sent from the transport when a message is ready to be processed
            from the transport.
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.InputAddress">
            <summary>
            The address on which the message was received
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.ContentType">
            <summary>
            The content type of the message, as determined by the available headers
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.Redelivered">
            <summary>
            If True, the message is being redelivered by the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.TransportHeaders">
            <summary>
            Headers specific to the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.ReceiveCompleted">
            <summary>
            The task that is completed once all pending tasks are completed
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsDelivered">
            <summary>
            Returns true if the message was successfully consumed by at least one consumer
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsFaulted">
            <summary>
            Returns true if a fault occurred during the message delivery
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContext.GetBodyStream">
            <summary>
            Returns the message body as a stream that can be deserialized. The stream
            must be disposed by the caller, a reference is not retained
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContext.GetBody">
            <summary>
            Returns the body as a byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that a message has been consumed from the received context
            </summary>
            <param name="context">The consume context of the message</param>
            <param name="duration">The time spent by the consumer</param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer faulted
            </summary>
            <param name="context">The consume context of the message</param>
            <param name="duration">The time spent by the consumer</param>
            <param name="consumerType">The message consumer type that faulted</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted(System.Exception)">
            <summary>
            Notify that a message receive faulted outside of the message consumer
            </summary>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.AddReceiveTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a pending Task to the completion of the message receiver
            </summary>
            <param name="task"></param>
        </member>
        <member name="P:MassTransit.ReceiveContext.SendEndpointProvider">
            <summary>
            The send endpoint provider from the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.PublishEndpointProvider">
            <summary>
            The publish endpoint provider from the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.PublishTopology">
            <summary>
            The publish topology of the underlying transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.DeliveryCount">
            <summary>
            The number of messages delivered to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.ConcurrentDeliveryCount">
            <summary>
            The maximum concurrent messages delivery to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointEvent.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointEvent.ReceiveEndpoint">
            <summary>
            The receive endpoint upon which the event occurred
            </summary>
        </member>
        <member name="T:MassTransit.ReceiveFault">
            <summary>
            Published when a message fails to deserialize at the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveFault.ContentType">
            <summary>
            The specified content type of the message by the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportCompleted.DeliveryCount">
            <summary>
            The number of messages delivered to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportCompleted.ConcurrentDeliveryCount">
            <summary>
            The maximum concurrent messages delivery to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportEvent.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.RedeliverExtensions.Redeliver``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Redeliver uses the message scheduler to deliver the message to the queue at a future
            time. The delivery count is incremented. Moreover, if you give custom callback action, it perform before sending message to queueu.
            A message scheduler must be configured on the bus for redelivery to be enabled.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context of the message</param>
            <param name="delay">The delay before the message is delivered. It may take longer to receive the message if the queue is not empty.</param>
            <param name="callback">Operation which is executed before the message is delivered.</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Request`1">
            <summary>
            A sent request, that may be in-process until the request task is completed
            </summary>
            <typeparam name="TRequest">The request message type</typeparam>
        </member>
        <member name="P:MassTransit.Request`1.Task">
            <summary>
            An awaitable Task that is completed when the request is completed, or faulted
            in the case of an error or timeout
            </summary>
        </member>
        <member name="M:MassTransit.RequestClientExtensions.Request``2(MassTransit.IRequestClient{``0,``1},System.Object,System.Threading.CancellationToken)">
            <summary>
            Send the request, and complete the response task when the response is received. If
            the request times out, a RequestTimeoutException is thrown. If the remote service 
            returns a fault, the task is set to exception status.
            </summary>
            <param name="client">The request client</param>
            <param name="values">The values to initialize the request object, anonymously</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns>The response Task</returns>
        </member>
        <member name="M:MassTransit.RequestClientExtensions.CreateRequestClient``2(MassTransit.IBus,System.Uri,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to retrieve the endpoint and send the request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="bus">The bus on which the client is created</param>
            <param name="address">The service address that handles the request</param>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="ttl">THe time to live for the request message</param>
            <param name="callback">Callback when the request is sent</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestClientExtensions.CreatePublishRequestClient``2(MassTransit.IBus,System.TimeSpan,System.Nullable{System.TimeSpan},System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Creates a request client that uses the bus to publish a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="bus">The bus on which the client is created</param>
            <param name="timeout">The timeout before the request is cancelled</param>
            <param name="callback">Callback when the request is sent</param>
            <param name="timeToLive">The time that the request will live for</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext"/> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.RequestHandle`1">
            <summary>
            A request handle manages the client-side request, and allows the request to be configured, response types added, etc. The handle
            should be disposed once it is no longer in-use, and the request has been completed (successfully, or otherwise).
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="P:MassTransit.RequestHandle`1.Message">
            <summary>
            The request message that was/will be sent.
            </summary>
        </member>
        <member name="P:MassTransit.RequestHandle.RequestId">
            <summary>
            The RequestId assigned to the request, and used in the header for the outgoing request message
            </summary>
        </member>
        <member name="P:MassTransit.RequestHandle.TimeToLive">
            <summary>
            Set the request message time to live, which by default is equal to the request timeout. Clearing this value
            will prevent any TimeToLive value from being specified.
            </summary>
        </member>
        <member name="M:MassTransit.RequestHandle.GetResponse``1(System.Boolean)">
            <summary>
            If the specified result type is present, it is returned.
            </summary>
            <param name="readyToSend">If true, sets the request as ready to send and sends it</param>
            <typeparam name="T">The result type</typeparam>
            <returns>True if the result type specified is present, otherwise false</returns>
        </member>
        <member name="M:MassTransit.RequestHandle.Cancel">
            <summary>
            Cancel the request
            </summary>
        </member>
        <member name="T:MassTransit.RequestTimeout">
            <summary>
            A timeout, which can be a default (none) or a valid TimeSpan > 0, includes factory methods to make it "cute"
            </summary>
        </member>
        <member name="P:MassTransit.RequestTimeout.Value">
             <summary>
            
             </summary>
             <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MassTransit.RequestTimeout.Or(MassTransit.RequestTimeout)">
            <summary>
            If this timeout has a value, return it, otherwise, return the other timeout
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestTimeout.After(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create a timeout using optional arguments to build it up
            </summary>
            <param name="d">days</param>
            <param name="h">hours</param>
            <param name="m">minutes</param>
            <param name="s">seconds</param>
            <param name="ms">milliseconds</param>
            <returns>The timeout value</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext{``0},``0,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext{``0},``0,System.Action{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext{``0},``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext{``0},``0,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Action{MassTransit.SendContext})">
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Type,System.Action{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,System.Object,System.Action{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or 
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.Response`1">
            <summary>
            A request's response, which is of the specified type
            </summary>
            <typeparam name="TResponse">The response type</typeparam>
        </member>
        <member name="P:MassTransit.Response`1.Message">
            <summary>
            The response message that was received
            </summary>
        </member>
        <member name="P:MassTransit.Retry.None">
            <summary>
            Create a policy that does not retry any messages
            </summary>
        </member>
        <member name="M:MassTransit.Retry.Immediate(System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Immediate(GreenPipes.IExceptionFilter,System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(GreenPipes.IExceptionFilter,System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(GreenPipes.IExceptionFilter,System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.Int32)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(GreenPipes.IExceptionFilter,System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="filter"></param>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy that never gives up
            intervals
            </summary>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(GreenPipes.IExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="filter"></param>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(GreenPipes.IExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except(System.Type[])">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``1">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``2">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``3">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected(System.Type[])">
            <summary>
            Retry only the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``1">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``2">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``3">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.All">
            <summary>
            Retry all exceptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Filter``1(System.Func{``0,System.Boolean})">
            <summary>
            Filter an exception type
            </summary>
            <typeparam name="T">The exception type</typeparam>
            <param name="filter">The filter expression</param>
            <returns>True if the exception should be retried, otherwise false</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRetryAttempt(MassTransit.ConsumeContext)">
            <summary>
            If within a retry attempt, the return value is greater than zero and indicates the number of retry attempts
            that have occurred.
            </summary>
            <param name="context"></param>
            <returns>The retry attempt number, 0 = first time, >= 1 = retry</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRetryCount(MassTransit.ConsumeContext)">
            <summary>
            If within a retry attempt, the return value is greater than zero and indicates the number of retry attempts
            that have occurred.
            </summary>
            <param name="context"></param>
            <returns>The retry attempt number, 0 = first time, >= 1 = retry</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRedeliveryCount(MassTransit.ConsumeContext)">
            <summary>
            If the message is being redelivered, returns the redelivery attempt
            </summary>
            <param name="context"></param>
            <returns>The retry attempt number, 0 = first time, >= 1 = retry</returns>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`2">
            <summary>
            Consume context including the saga instance consuming the message
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`1">
            <summary>
            Consume context including the saga instance consuming the message. Note
            this does not expose the message type, for filters that do not care about message type.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.Saga">
            <summary>
            The saga instance for the current consume operation
            </summary>
        </member>
        <member name="M:MassTransit.SagaConsumeContext`1.SetCompleted">
            <summary>
            Mark the saga instance as completed, which may remove it from the repository or archive it, etc.
            Once completed, a saga instance should never again be visible, even if the same CorrelationId is
            specified.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.IsCompleted">
            <summary>
            True if the saga has been completed, signaling that the repository may remove it.
            </summary>
        </member>
        <member name="M:MassTransit.SagaPipeConfiguratorExtensions.Filter``2(GreenPipes.IPipeConfigurator{MassTransit.SagaConsumeContext{``0,``1}},GreenPipes.IFilter{MassTransit.SagaConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="T:MassTransit.Saga.Connectors.CorrelatedSagaMessageConnector`2">
            <summary>
            Connects a message that has an exact CorrelationId to the saga instance
            to the saga repository.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Connectors.SagaConnectorCache`1">
            <summary>
            Caches the saga connectors for the saga
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.Saga.Connectors.SagaMessageConnector`2.ConfigureMessagePipe(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{`1}},MassTransit.Saga.ISagaRepository{`0},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Configure the message pipe that is prior to the saga repository
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="repository"></param>
            <param name="sagaPipe"></param>
        </member>
        <member name="T:MassTransit.Saga.Factories.ConstructorSagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Factories.DefaultSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Factories.FactoryMethodSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Factories.PropertySagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.InitiatedBy`1">
            <summary>
            Specifies that the message type TMessage starts a new saga. 
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.InMemorySagaRepository`1.Add(MassTransit.Util.SagaInstance{`0},System.Threading.CancellationToken)">
            <summary>
            Add an instance to the saga repository
            </summary>
            <param name="instance"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.InMemorySagaRepository`1.AddWithinLock(MassTransit.Util.SagaInstance{`0})">
            <summary>
            Adds the saga within an existing lock
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:MassTransit.Saga.InMemorySagaRepository`1.MissingPipe`1">
            <summary>
            Once the message pipe has processed the saga instance, add it to the saga repository
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.ISaga">
            <summary>
            Interface that specifies a class is usable as a saga instance, including
            the ability to get and set the CorrelationId on the saga instance.
            </summary>
        </member>
        <member name="P:MassTransit.Saga.ISaga.CorrelationId">
            <summary>
            Identifies the saga instance uniquely, and is the primary correlation
            for the instance. While the setter is not typically called, it is there
            to support persistence consistently across implementations.
            </summary>
        </member>
        <member name="T:MassTransit.Saga.ISagaFactory`2">
            <summary>
            Creates a saga instance when an existing saga instance is missing
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaFactory`2.Create(MassTransit.ConsumeContext{`1})">
            <summary>
            Create a new saga instance using the supplied consume context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaFactory`2.Send(MassTransit.ConsumeContext{`1},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Send the context through the factory, with the proper decorations
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.PreInsertInstance(MassTransit.ConsumeContext{`1},`0@)">
            <summary>
            If true, the instance returned should be used to try and insert as a new saga instance, ignoring any failures
            </summary>
            <param name="context"></param>
            <param name="instance"></param>
            <returns>True if the instance should be inserted before invoking the message logic</returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.Existing(MassTransit.SagaConsumeContext{`0,`1},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            The method invoked when an existing saga instance is present
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaPolicy`2.Missing(MassTransit.ConsumeContext{`1},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Invoked when there is not an existing saga instance available
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaQuery`1">
            <summary>
            A saga query is used when a LINQ expression is accepted to query
            the saga repository storage to get zero or more saga instances
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.Saga.ISagaQuery`1.FilterExpression">
            <summary>
            The query expression that returns true if the saga
            matches the query.
            </summary>
        </member>
        <member name="M:MassTransit.Saga.ISagaQuery`1.GetFilter">
            <summary>
            Compiles a function that can be used to programatically
            compare a saga instance to the filter expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaQueryFactory`2">
            <summary>
            Used to create a saga query from the message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaQueryFactory`2.CreateQuery(MassTransit.ConsumeContext{`1})">
            <summary>
            Creates a saga query from the specified message context
            </summary>
            <param name="context">The message context</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaRepository`1">
            <summary>
            A saga repository is used by the service bus to dispatch messages to sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepository`1.Send``1(MassTransit.ConsumeContext{``0},MassTransit.Saga.ISagaPolicy{`0,``0},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the context.CorrelationId has the CorrelationId
            of the saga instance.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepository`1.SendQuery``1(MassTransit.Saga.SagaQueryConsumeContext{`0,``0},MassTransit.Saga.ISagaPolicy{`0,``0},GreenPipes.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the query is used to find matching saga instances,
            which are invoked concurrently.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The saga query consume context</param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.Orchestrates`1">
            <summary>
            Specifies that a class implementing ISaga consumes TMessage as part of the saga
            </summary>
            <typeparam name="TMessage">The type of message to consume</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.CorrelatedSagaFilter`2">
            <summary>
            Sends the message through the repository using the specified saga policy.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.CorrelationIdMessageFilter`1">
            <summary>
            Extracts the CorrelationId from the message where there is a one-to-one correlation
            identifier in the message (such as CorrelationId) and sets it in the header for use
            by the saga repository.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.InitiatedBySagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.ISagaMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.ObservesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.OrchestratesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.QuerySagaFilter`2">
            <summary>
            Creates a send a query to the saga repository using the query factory and saga policy provided.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.SagaMessageSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Filters.SagaSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Pipes.SagaMergePipe`2">
            <summary>
            Merges the out-of-band message back into the pipe
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Pipeline.Pipes.SagaMessageMergePipe`2">
            <summary>
            Merges the out-of-band Saga back into the context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.AnyExistingSagaPolicy`2">
            <summary>
            Sends the message to any existing saga instances, failing silently if no saga instances are found.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.NewOrExistingSagaPolicy`2">
            <summary>
            Creates a new or uses an existing saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.Policies.NewSagaPolicy`2">
            <summary>
            Accepts a message to a saga that does not already exist, throwing an exception if an existing
            saga instance is specified.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.QueryFactories.ExpressionSagaQueryFactory`2">
            <summary>
            Creates a saga query using the specified filter expression
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.SagaFactoryMethod`2">
            <summary>
            Used to create the saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The message consume context</param>
            <returns>A newly created saga instance</returns>
        </member>
        <member name="T:MassTransit.Saga.SagaQueryConsumeContext`2">
            <summary>
            Used to pass a query to the saga repository.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Saga.SagaQueryConsumeContext`2.Query">
            <summary>
            The saga query to find saga instances
            </summary>
        </member>
        <member name="T:MassTransit.ScheduleMessageExtensions">
            <summary>
            Extensions for scheduling publish/send message 
            </summary>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0)">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="pipe">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IPublishEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="pipe">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IBus,System.DateTime,``0)">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IBus,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
             /// <param name="pipe">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.IBus,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="pipe">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.DateTime,``0)">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="pipe">A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0)">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="destinationAddress"></param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.ScheduleMessage``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Schedules a message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="context">The bus from which the scheduled message command should be published and delivered</param>
            <param name="destinationAddress"></param>
            <param name="scheduledTime">The time when the message should be sent to the endpoint</param>
            <param name="message">The message to send</param>
            <param name="pipe">A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledMessage``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="publishEndpoint"></param>
            <param name="message"> </param>
        </member>
        <member name="M:MassTransit.ScheduleMessageExtensions.CancelScheduledMessage(MassTransit.IPublishEndpoint,System.Guid)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="publishEndpoint"></param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.ScheduleRecurringMessage``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleRecurringMessage{``0}}})">
            <summary>
            Schedules a recurring message to be sent to the bus using a Publish, which should only be used when
            the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="publishEndpoint">The bus from which the scheduled message command should be published</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The recurring schedule instance</param>
            <param name="message">The message to send</param>
            <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.ScheduleRecurringMessage``1(MassTransit.IBus,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.PublishContext{MassTransit.Scheduling.ScheduleRecurringMessage{``0}}})">
            <summary>
                Schedules a message to be sent to the bus using a Publish, which should only be used when
                the quartz service is on a single shared queue or behind a distributor
            </summary>
            <typeparam name="T">The scheduled message type</typeparam>
            <param name="bus">The bus from which the scheduled message command should be published</param>
            <param name="schedule">An instance of IRecurringSchedule that defines this schedule</param>
            <param name="message">The message to send</param>
            <param name="contextCallback">Optional: A callback that gives the caller access to the publish context.</param>
            <returns>A handled to the scheduled message</returns>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage``1(MassTransit.IPublishEndpoint,MassTransit.Scheduling.ScheduledRecurringMessage{``0})">
            <summary>
                Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="bus"></param>
            <param name="message"> </param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage(MassTransit.IPublishEndpoint,MassTransit.Scheduling.RecurringSchedule)">
            <summary>
                Cancel a scheduled recurring message using the id and group of the schedule class.
            </summary>
            <param name="bus"></param>
            <param name="schedule"></param>
        </member>
        <member name="M:MassTransit.ScheduleRecurringMessageExtensions.CancelScheduledRecurringMessage(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
                Cancel a scheduled recurring message using the id and group of the schedule.
            </summary>
            <param name="bus"></param>
            <param name="scheduleId"></param>
            <param name="scheduleGroup"></param>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.TokenId">
            <summary>
            The token of the scheduled message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.IMessageSchedulerConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="M:MassTransit.Scheduling.IScheduleMessageProvider.ScheduleSend``1(System.Uri,System.DateTime,System.Threading.Tasks.Task{``0},GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message to be sent
            </summary>
            <param name="destinationAddress"></param>
            <param name="scheduledTime"></param>
            <param name="message"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Scheduling.IScheduleMessageProvider.CancelScheduledSend(System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.Scheduling.IScheduleMessageProvider.CancelScheduledSend(System.Uri,System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="destinationAddress">The destination address of the scheduled message</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.Scheduling.MessageSchedulerConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Scheduling.MessageSchedulerConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.MissedEventPolicy">
            <summary>
            If the scheduler is offline and comes back online, the policy determines how
            a missed scheduled message is handled.
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Default">
            <summary>
            use the default handling of the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Skip">
            <summary>
            Skip the event, waiting for the next scheduled interval
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Send">
            <summary>
            Send the message immediately and then continue the schedule as planned
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.TimeZoneId">
            <summary>
            The timezone of the schedule
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.StartTime">
            <summary>
            The time the recurring schedule is enabled
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.EndTime">
            <summary>
            The time the recurring schedule is disabled
            If null then the job is repeated forever
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleId">
            <summary>
            A unique name that idenifies this schedule.
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleGroup">
            <summary>
            A
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.CronExpression">
            <summary>
            The Cron Schedule Expression in Cron Syntax
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.Description">
            <summary>
            Schedule description
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.ScheduledTime">
            <summary>
            The time at which the message should be published, should be in UTC
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage`1.Payload">
            <summary>
            The message to be published 
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage`1.Payload">
            <summary>
            The message to be published 
            </summary>
        </member>
        <member name="T:MassTransit.Scoping.IConsumerScopeProvider">
            <summary>
            Provides container scope for the consumer, either at the general level or the message-specific level.
            </summary>
        </member>
        <member name="T:MassTransit.Scoping.ScopeCompensateActivityFactory`2">
            <summary>
            A factory to create an activity from Autofac, that manages the lifetime scope of the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.Scoping.ScopedConsumeContextProvider">
            <summary>
            Captures the <see cref="T:MassTransit.ConsumeContext"/> for the current message as a scoped provider, so that it can be resolved
            by components at runtime (since MS DI doesn't support runtime configuration of scopes)
            </summary>
        </member>
        <member name="T:MassTransit.Scoping.ScopeExecuteActivityFactory`2">
            <summary>
            A factory to create an activity from Autofac, that manages the lifetime scope of the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.Scoping.ScopeSagaRepository`1">
            <summary>
            A generic scoped saga repository, which can be leveraged by any container
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.SendContext`1">
            <summary>
            The SendContext is used to tweak the send to the endpoint
            </summary>
            <typeparam name="T">The message type being sent</typeparam>
        </member>
        <member name="P:MassTransit.SendContext`1.Message">
            <summary>
            The message being sent
            </summary>
        </member>
        <member name="T:MassTransit.SendContext">
            <summary>
            Unlike the old world, the send context is returned from the endpoint and used to configure the message sending.
            That way the message is captured by the endpoint and then any configuration is done at the higher level.
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Durable">
            <summary>
            True if the message should be persisted to disk to survive a broker restart
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Serializer">
            <summary>
            The serializer to use when serializing the message to the transport
            </summary>
        </member>
        <member name="M:MassTransit.SendContext.CreateProxy``1(``0)">
            <summary>
            Create a send context proxy with the new message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetHostHeaders(MassTransit.SendHeaders)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetExceptionHeaders(MassTransit.SendHeaders,MassTransit.ExceptionReceiveContext)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="headers"></param>
            <param name="exceptionContext"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.TransferConsumeContextHeaders(MassTransit.SendContext,MassTransit.ConsumeContext)">
            <summary>
            Transfer the header information from the ConsumeContext to the SendContext, including any non-MT headers.
            </summary>
            <param name="sendContext"></param>
            <param name="consumeContext"></param>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,GreenPipes.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend``1(MassTransit.ISendEndpoint,MassTransit.Scheduling.ScheduledRecurringMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend(MassTransit.ISendEndpoint,System.String,System.String)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.DateTime,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.ScheduleSend``1(MassTransit.ISendEndpoint,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.CancelScheduledSend``1(MassTransit.ISendEndpoint,MassTransit.Scheduling.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.SendEndpointSchedulerExtensions.CancelScheduledSend(MassTransit.ISendEndpoint,System.Guid)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.Serialization.BinaryMessageSerializer">
            <summary>
            The binary message serializer used the .NET BinaryFormatter to serialize
            message content. 
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.BodySerializer">
            <summary>
            A body serializer takes a byte array message body and just streams it out to the message
            unmodified.
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.CopyBodySerializer">
            <summary>
            Copies the body of the receive context to the send context unmodified
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.ICryptoStreamProvider">
            <summary>
            Provides a crypto stream for the purpose of encrypting or decrypting 
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetEncryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetDecryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="stream">The input stream of the encrypted message</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for deserializing the encrypted message</returns>
        </member>
        <member name="T:MassTransit.Serialization.ISymmetricKeyProvider">
            <summary>
            Returns the symmetric key used to encrypt or decrypt messages
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ISymmetricKeyProvider.TryGetKey(System.String,MassTransit.Serialization.SymmetricKey@)">
            <summary>
            Return the specified key, if found. When using Symmetric key encryption, the default key is used
            unless the transport header contains a specific key identifier for the message.
            </summary>
            <param name="id">The key id</param>
            <param name="key">The symmetric key</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.JsonConsumeContext.ConvertIdToGuid(System.String)">
            <summary>
                Converts a string identifier to a Guid, if it's actually a Guid. Can throw a FormatException
                if things are not right
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.JsonConsumeContext.ConvertToUri(System.String)">
            <summary>
                Convert the string to a Uri, or return null if it's empty
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Serialization.SerializedMessage">
            <summary>
            The content of a serialized message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.SerializedMessage.Destination">
            <summary>
            The destination for the serialized message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.SerializedMessage.ContentType">
            <summary>
            The content type of the serializer used
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.StaticConsumeContext">
            <summary>
            A static consume context from the Binary serializer
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.StringMessageSerializer">
            <summary>
            A body serializer takes a byte array message body and just streams it out to the message
            unmodified.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.Activity``3(MassTransit.Testing.BusTestHarness)">
            <summary>
            Creates an activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="harness"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.Activity``3(MassTransit.Testing.BusTestHarness,System.Func{``1,``0},System.Func{``2,``0})">
            <summary>
            Creates an activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="harness"></param>
            <param name="executeFactoryMethod"></param>
            <param name="compensateFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.ExecuteActivity``2(MassTransit.Testing.BusTestHarness)">
            <summary>
            Creates an execute-only activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="harness"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.ExecuteActivity``2(MassTransit.Testing.BusTestHarness,System.Func{``1,``0})">
            <summary>
            Creates an execute-only activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="harness"></param>
            <param name="executeFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestCancelledTask">
            <summary>
            Task that is canceled when the test is aborted, for continueWith usage
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestCancellationToken">
            <summary>
            CancellationToken that is canceled when the test is being aborted
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestTimeout">
            <summary>
            Timeout for the test, used for any delay timers
            </summary>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.CancelTest">
            <summary>
            Forces the test to be cancelled, aborting any awaiting tasks
            </summary>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.GetTask``1">
            <summary>
            Returns a task completion that is automatically canceled when the test is canceled
            </summary>
            <typeparam name="T">The task type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.Await(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Await a task in a test method that is not asynchronous, such as a test fixture setup
            </summary>
            <param name="taskFactory"></param>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.Await(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Await a task in a test method that is not asynchronous, such as a test fixture setup
            </summary>
            <param name="taskFactory"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.Await``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Await a task in a test method that is not asynchronous, such as a test fixture setup
            </summary>
            <param name="taskFactory"></param>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.Await``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Await a task in a test method that is not asynchronous, such as a test fixture setup
            </summary>
            <param name="taskFactory"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:MassTransit.Testing.BusTestHarness">
            <summary>
            A bus text fixture includes a single bus instance with one or more receiving endpoints.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.BusAddress">
            <summary>
            The address of the default bus endpoint, used as the SourceAddress for requests and published messages
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueName">
            <summary>
            The name of the input queue (for the default receive endpoint)
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueAddress">
            <summary>
            The address of the input queue receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.BusSendEndpoint">
            <summary>
            The send endpoint for the default bus endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueSendEndpoint">
            <summary>
            The send endpoint for the input queue receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.SubscribeHandler``1">
            <summary>
            Subscribes a message handler to the bus, which is disconnected after the message
            is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns>An awaitable task completed when the message is received</returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.SubscribeHandler``1(System.Func{MassTransit.ConsumeContext{``0},System.Boolean})">
            <summary>
            Subscribes a message handler to the bus, which is disconnected after the message
            is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">A filter that only completes the task if filter is true</param>
            <returns>An awaitable task completed when the message is received</returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator,System.Func{MassTransit.ConsumeContext{``0},System.Boolean})">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <param name="filter">Filter the messages based on the handled consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator,System.Int32)">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <param name="expectedCount">The expected number of messages</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handler``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.MessageHandler{``0})">
            <summary>
            Registers a handler on the receive endpoint that is completed after the specified handler is 
            executed and canceled if the test is canceled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.HandledByConsumer``1(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Registers a consumer on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ExtensionMethodsForBuses.CreateBusActivityMonitor(MassTransit.IBus)">
            <summary>
            Creates a bus activity monitor
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ExtensionMethodsForBuses.CreateBusActivityMonitor(MassTransit.IBus,System.TimeSpan)">
            <summary>
            Creates a bus activity monitor
            </summary>
            <param name="bus"></param>
            <param name="inactivityTimeout">minimum time to wait to presume bus inactivity</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Testing.Indicators.BusActivityMonitor">
            <summary>
            Signalable resource which monitors bus activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.BusActivityPublishIndicator">
            <summary>
            An activity indicator for publish endpoints. Utilizes a timer that restarts on publish activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.BusActivityReceiveIndicator">
            <summary>
            An activity indicator for receive endpoint queues. Utilizes a timer that restarts on receive activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.BusActivitySendIndicator">
            <summary>
            An activity indicator for send endpoints. Utilizes a timer that restarts on send activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.ConditionExpression">
            <summary>
            A collection of blocks of conditions that must occur to signal a resource.
            Each condition block in the list is logically OR'd with the other condition blocks.
            Each condition within a condition block is logically AND'd with the other conditions in the same block.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.Indicators.ConditionExpression.AddConditionBlock(MassTransit.Testing.Indicators.IObservableCondition[])">
            <summary>
            Adds a condition block where all conditions in the array must be logically ANDed together to succeed.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.IBusActivityMonitor">
            <summary>
            Represents a monitor for bus activity, allowing awaiting an inactive bus state.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.ICondition">
            <summary>
            Represents a boolean condition
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.IConditionObserver">
            <summary>
            Represents an observer on a change in boolean condition state.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.IObservableCondition">
            <summary>
            Represents a boolean condition which may be observed.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Indicators.ISignalResource">
            <summary>
            Represents a resource which may be signaled.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Observers.TestSendObserver">
            <summary>
            Observes sent messages for test fixtures
            </summary>
        </member>
        <member name="M:MassTransit.Testing.SagaTestHarness`1.Exists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId
            </summary>
            <param name="sagaId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.SagaTestHarness`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until at least one saga exists matching the specified filter
            </summary>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.SagaTestHarness`1.NotExists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the saga matching the specified correlationId does NOT exist
            </summary>
            <param name="sagaId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an object as a message, using the message type specified. If the object cannot be cast
                to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,GreenPipes.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
                Sends an interface message, initializing the properties of the interface using the anonymous
                object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.Topology.IConsumeTopologyConfigurator.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IConsumeTopologyConfigurator.AddConvention(MassTransit.Topology.IConsumeTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The Consume topology convention</param>
        </member>
        <member name="M:MassTransit.Topology.IConsumeTopologyConfigurator.AddMessageConsumeTopology``1(MassTransit.Topology.IMessageConsumeTopology{``0})">
            <summary>
            Add a Consume topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="T:MassTransit.Topology.IMessageConsumeTopologyConfigurator`1">
            <summary>
            Configures the Consuming of a message type, allowing filters to be applied
            on Consume.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Topology.IMessageConsumeTopologyConfigurator`1.AddDelegate(MassTransit.Topology.IMessageConsumeTopology{`0})">
            <summary>
            Adds a delegated configuration to the Consume topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageConsumeTopologyConfigurator`1.AddConvention(MassTransit.Topology.IMessageConsumeTopologyConvention{`0})">
            <summary>
            Adds a convention to the message Consume topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageConsumeTopologyConfigurator`1.UpdateConvention``1(System.Func{``0,``0})">
            <summary>
            Update a convention if available, otherwise, throw an exception
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IMessageConsumeTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IMessagePublishTopologyConfigurator`1">
            <summary>
            Configures the Publishing of a message type, allowing filters to be applied
            on Publish.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Topology.IMessagePublishTopologyConfigurator`1.AddDelegate(MassTransit.Topology.IMessagePublishTopology{`0})">
            <summary>
            Adds a delegated configuration to the Publish topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessagePublishTopologyConfigurator`1.AddConvention(MassTransit.Topology.IMessagePublishTopologyConvention{`0})">
            <summary>
            Adds a convention to the message Publish topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessagePublishTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IMessageSendTopologyConfigurator`1">
            <summary>
            Configures the sending of a message type, allowing filters to be applied
            on send.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Topology.IMessageSendTopologyConfigurator`1.AddDelegate(MassTransit.Topology.IMessageSendTopology{`0})">
            <summary>
            Adds a delegated configuration to the send topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageSendTopologyConfigurator`1.AddConvention(MassTransit.Topology.IMessageSendTopologyConvention{`0})">
            <summary>
            Adds a convention to the message send topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageSendTopologyConfigurator`1.UpdateConvention``1(System.Func{``0,``0})">
            <summary>
            Update a convention if available, otherwise, throw an exception
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IMessageSendTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IMessageTopologyConfigurationObserver">
            <summary>
            Observes the configuration of message-specific topology
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IMessageTopologyConfigurator`1.SetEntityNameFormatter(MassTransit.Topology.IMessageEntityNameFormatter{`0})">
            <summary>
            Sets the entity name formatter used for this message type
            </summary>
            <param name="entityNameFormatter"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageTopologyConfigurator`1.SetEntityName(System.String)">
            <summary>
            Sets the entity name for this message type
            </summary>
            <param name="entityName">The entity name</param>
        </member>
        <member name="M:MassTransit.Topology.IMessageTopologyConfigurator`1.CorrelateBy(System.Linq.Expressions.Expression{System.Func{`0,System.Guid}})">
            <summary>
            Specify the property which should be used for the message CorrelationId
            </summary>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.Topology.IMessageTopologyConfigurator.SetEntityNameFormatter(MassTransit.Topology.IEntityNameFormatter)">
            <summary>
            Replace the default entity name formatter
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IPublishTopologyConfigurator.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IPublishTopologyConfigurator.AddConvention(MassTransit.Topology.IPublishTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The Publish topology convention</param>
        </member>
        <member name="M:MassTransit.Topology.IPublishTopologyConfigurator.AddMessagePublishTopology``1(MassTransit.Topology.IMessagePublishTopology{``0})">
            <summary>
            Add a Publish topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="M:MassTransit.Topology.ISendTopologyConfigurator.AddConvention(MassTransit.Topology.ISendTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The send topology convention</param>
        </member>
        <member name="M:MassTransit.Topology.ISendTopologyConfigurator.AddMessageSendTopology``1(MassTransit.Topology.IMessageSendTopology{``0})">
            <summary>
            Add a send topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="T:MassTransit.Topology.Conventions.CorrelationIdSendTopologyConvention">
            <summary>
            Looks for a property that can be used as a CorrelationId message header, and
            applies a filter to set it on message send if available
            </summary>
        </member>
        <member name="T:MassTransit.Topology.Conventions.IConventionTypeCache`1">
            <summary>
            A convention cache for type specified, which converts to the generic type requested
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Topology.Conventions.IConventionTypeCache`1.GetOrAdd``2">
            <summary>
            Returns the cached item for the specified type key, creating a new value
            if one has not yet been created.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.EntityNameFormatters.MessageEntityNameFormatter`1.FormatEntityName">
            <summary>
            Not sure it ever makes sense to pass the actual message, but many, someday.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.EntityNameFormatters.MessageUrnEntityNameFormatter">
            <summary>
            This is the simplest thing, it uses the built-in URN for a message type
            as the entity name, which can include illegal characters for most message
            brokers. It's nice for in-memory though, which doesn't give a hoot about the
            string.
            </summary>
        </member>
        <member name="T:MassTransit.Topology.Filters.SetCorrelationIdFilter`1">
            <summary>
            Sets the CorrelationId header uses the supplied implementation.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Topology.IBusTopology.Publish``1">
            <summary>
            Returns the publish topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IBusTopology.Send``1">
            <summary>
            Returns the send topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IBusTopology.Message``1">
            <summary>
            Returns the message topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IConsumeTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IConsumeTopology.CreateTemporaryQueueName(System.String)">
            <summary>
            Create a temporary endpoint name, using the specified tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IConsumeTopologyConvention">
            <summary>
            A convention that is applies to a message type on Consume, if applicable to
            the message type.
            </summary>
        </member>
        <member name="T:MassTransit.Topology.IEntityNameFormatter">
            <summary>
            Used to build entity names for the publish topology
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IEntityNameFormatter.FormatEntityName``1">
            <summary>
            Formats the entity name for the given message type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IGlobalTopology.SeparatePublishFromSend">
            <summary>
            This must be called early, methinks
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IHostTopology.CreateTemporaryQueueName(System.String)">
            <summary>
            Returns a unique temporary queue name for the host/topology.
            </summary>
            <param name="prefix">A prefix to distinguish the queue for the purpose</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IMessageConsumeTopology`1">
            <summary>
            The message-specific Consume topology, which may be configured or otherwise
            setup for use with the Consume specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Topology.IMessageEntityNameFormatter`1">
            <summary>
            Used to build entity names for the publish topology
            <typeparam name="TMessage"></typeparam>
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IMessageEntityNameFormatter`1.FormatEntityName">
            <summary>
            Formats the entity name for the given message
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.IMessagePublishTopology`1">
            <summary>
            The message-specific publish topology, which may be configured or otherwise
            setup for use with the publish specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Topology.IMessagePublishTopology.TryGetPublishAddress(System.Uri,System.Uri@)">
            <summary>
            Returns the publish address for the message, using the topology rules. This cannot use
            a PublishContext because the transport isn't available yet.
            </summary>
            <param name="baseAddress">The host base address, used to build out the exchange address</param>
            <param name="publishAddress">The address where the publish endpoint should send the message</param>
            <returns>true if the address was available, otherwise false</returns>
        </member>
        <member name="T:MassTransit.Topology.IMessageSendTopology`1">
            <summary>
            The message-specific send topology, which may be configured or otherwise
            setup for use with the send specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Topology.IMessageTopology`1.EntityNameFormatter">
            <summary>
            The entity name formatter for this message type
            </summary>
        </member>
        <member name="P:MassTransit.Topology.IMessageTopology`1.EntityName">
            <summary>
            The formatted entity name for this message type
            </summary>
        </member>
        <member name="P:MassTransit.Topology.IMessageTopology.EntityNameFormatter">
            <summary>
            The entity name formatter used to format message names
            </summary>
        </member>
        <member name="M:MassTransit.Topology.IMessageTopology.GetMessageTopology``1">
            <summary>
            Returns the message topology for the specified message type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IPublishTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Topology.IPublishTopology.TryGetPublishAddress(System.Type,System.Uri,System.Uri@)">
            <summary>
            Returns the publish address for the message, using the topology rules. This cannot use
            a PublishContext because the transport isn't available yet.
            </summary>
            <param name="messageType">The message type</param>
            <param name="baseAddress">The host base address, used to build out the exchange address</param>
            <param name="publishAddress">The address where the publish endpoint should send the message</param>
            <returns>true if the address was available, otherwise false</returns>
        </member>
        <member name="T:MassTransit.Topology.IPublishTopologyConvention">
            <summary>
            A convention that is applies to a message type on Publish, if applicable to
            the message type.
            </summary>
        </member>
        <member name="M:MassTransit.Topology.ISendTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.ISendTopologyConvention">
            <summary>
            A convention that is applies to a message type on send, if applicable to
            the message type.
            </summary>
        </member>
        <member name="T:MassTransit.Topology.ITopologyPipeBuilder`1">
            <summary>
            A pipe builder used by topologies, which indicates whether the message type
            is either delegated (called from a sub-specification) or implemented (being called
            when the actual type is a subtype and this is an implemented type).
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
        </member>
        <member name="P:MassTransit.Topology.ITopologyPipeBuilder`1.IsDelegated">
            <summary>
            If true, this is a delegated builder, and implemented message types
            and/or topology items should not be applied
            </summary>
        </member>
        <member name="P:MassTransit.Topology.ITopologyPipeBuilder`1.IsImplemented">
            <summary>
            If true, this is a builder for implemented types, so don't go down
            the rabbit hole twice.
            </summary>
        </member>
        <member name="M:MassTransit.Topology.ITopologyPipeBuilder`1.CreateDelegatedBuilder">
            <summary>
            Creates a new builder where the Delegated flag is true
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Topology.Topologies.GlobalTopology">
            <summary>
            This represents the global topology configuration, which is delegated to by
            all topology instances, unless for some radical reason a bus is configured
            without any topology delegation.
            
            YES, I hate globals, but they are serving a purpose in that these are really
            just defining the default behavior of message types, rather than actually
            behaving like the nasty evil global variables.
            </summary>
        </member>
        <member name="M:MassTransit.Topology.Topologies.GlobalTopology.SeparatePublishFromSend">
            <summary>
            Call before configuring any topology, so that publish is handled separately
            from send. Note, this can cause some really bad things to happen with internal
            types so use with caution...
            </summary>
        </member>
        <member name="P:MassTransit.TransactionContext.Transaction">
            <summary>
            Returns the current transaction scope, creating a dependent scope if a thread switch
            occurred
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Commit">
            <summary>
            Complete the transaction scope
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback(System.Exception)">
            <summary>
            Rollback the transaction
            </summary>
            <param name="exception">The exception that caused the rollback</param>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(GreenPipes.PipeContext)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(GreenPipes.PipeContext,System.TimeSpan)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <param name="scopeTimeout">The timespan after which the scope times out and aborts the transaction</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(GreenPipes.PipeContext,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <param name="scopeTimeout">The timespan after which the scope times out and aborts the transaction</param>
            <param name="asyncFlowOptions">Specifies whether transaction flow across thread continuations is enabled.</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.Contexts.ConsumeTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be 
            transformed.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.Contexts.SendTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be 
            transformed.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.IPropertyTransform`1">
            <summary>
            A property transform that is not dependent upon the input type
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.IPropertyTransform`2">
            <summary>
            A property transform that uses the input type
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.PropertyTransforms.InputPropertyTransform`2">
            <summary>
            A transform that writes to the input model, instead of the result model
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.PropertyTransforms.ResultPropertyTransform`3">
            <summary>
            A property transform that writes to the result model
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.SourceContext`2">
            <summary>
            Provides the context for a property transform
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.SourceContext`2.HasValue">
            <summary>
            True if the value is present from the source
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.SourceContext`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.Set(System.String,MassTransit.Transformation.IPropertyTransform{`0,`0})">
            <summary>
            Add a property transform that transforms the input instead of the result
            </summary>
            <param name="propertyName"></param>
            <param name="propertyTransform"></param>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.DefaultAll">
            <summary>
            Set all properties on the resulting object to the default value
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`1.RemoveAll">
            <summary>
            Remove all existing transforms, which will do a 1:1 copy of the source to the target
            without any modifications
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformBuilders.ITransformBuilder`2.Set(System.String,MassTransit.Transformation.IPropertyTransform{`0,`1})">
            <summary>
            Add a property transform for the specified property. If a transform for the property
            already exists, an exception is thrown.
            </summary>
            <param name="propertyName">The property name</param>
            <param name="propertyTransform">The property transform</param>
        </member>
        <member name="M:MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator`1.Get``1">
            <summary>
            Get a transform specification using the default constructor
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformConfigurators.ITransformSpecificationConfigurator`1.Get``1(System.Func{``0})">
            <summary>
            Get a transform specification using the factory method
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <param name="transformFactory">The transform specification factory method</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.TransformContext">
            <summary>
            Context used by a message transform
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.CancellationToken">
            <summary>
            Used to cancel the execution of the context
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.MessageId">
            <summary>
            The messageId assigned to the message when it was initially Sent. This is different
            than the transport MessageId, which is only for the Transport.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.RequestId">
            <summary>
            If the message is a request, or related to a request, such as a response or a fault,
            this contains the requestId.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.CorrelationId">
            <summary>
            If the message implements the CorrelatedBy(Guid) interface, this field should be 
            populated by default to match that value. It can, of course, be overwritten with
            something else.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.ConversationId">
            <summary>
            The conversationId of the message, which is copied and carried throughout the message
            flow by the infrastructure.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.InitiatorId">
            <summary>
            If this message was produced within the context of a previous message, the CorrelationId
            of the message is contained in this property. If the message was produced from a saga
            instance, the CorrelationId of the saga is used.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.SourceAddress">
            <summary>
            The address of the message producer that sent the message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.DestinationAddress">
            <summary>
            The destination address of the message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.Headers">
            <summary>
            Additional application-specific headers that are added to the message by the application
            or by features within MassTransit, such as when a message is moved to an error queue.
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext.Host">
            <summary>
            The host information of the message producer. This may not be present if the message was sent
            from an earlier version of MassTransit.
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.HasPayloadType(System.Type)">
            <summary>
            Checks if a payload is present in the context
            </summary>
            <param name="contextType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.TryGetPayload``1(``0@)">
            <summary>
            Retrieves a payload from the pipe context
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transformation.TransformContext.GetOrAddPayload``1(GreenPipes.PayloadFactory{``0})">
            <summary>
            Returns an existing payload or creates the payload using the factory method provided
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="payloadFactory">The payload factory is the payload is not present</param>
            <returns>The payload</returns>
        </member>
        <member name="T:MassTransit.Transformation.TransformContext`1">
            <summary>
            Context used by a message transform
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext`1.Input">
            <summary>
            The input message to be transformed
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformContext`1.HasInput">
            <summary>
            True if the input is present, otherwise false
            </summary>
        </member>
        <member name="M:MassTransit.Transformation.TransformContextExtensions.Return``1(MassTransit.Transformation.TransformContext,``0,System.Boolean)">
            <summary>
            Returns the original message as a transform result
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="isNewValue"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.TransformResult`1">
            <summary>
            The result of a message transformation
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.TransformResult`1.Value">
            <summary>
            The transformed message
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformResult`1.IsNewValue">
            <summary>
            True if the transform has returned a new value, otherwise false. Some transforms
            actually apply to the original message, versus creating a new message leaving the
            original message unmodified.
            </summary>
        </member>
        <member name="T:MassTransit.Transformation.Transforms.ResultTransform`2">
            <summary>
            Transforms the message by creating a new message and copying/setting/ignoring the original properties
            </summary>
            <typeparam name="TResult">The message type</typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transports.DictionaryHeaderProvider">
            <summary>
            A simple in-memory header collection for use with the in memory transport
            </summary>
        </member>
        <member name="P:MassTransit.Transports.HostHandle.Ready">
            <summary>
            A task which can be awaited to know when the host is ready
            </summary>
        </member>
        <member name="M:MassTransit.Transports.HostHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Close the Host, shutting it down for good.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IBusHostCollection.GetHosts``1">
            <summary>
            Return the hosts of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IBusHostControl.Start(System.Threading.CancellationToken)">
            <summary>
            Starts the Host, which begins the connection asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IDeadLetterTransport">
            <summary>
            If present, can be used to move the <see cref="T:MassTransit.ReceiveContext"/> to the dead letter queue
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IDeadLetterTransport.Send(MassTransit.ReceiveContext,System.String)">
            <summary>
            Writes the message to the dead letter queue, adding the reason as a transport header
            </summary>
            <param name="context"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IErrorTransport">
            <summary>
            If present, can be used to move the <see cref="T:MassTransit.ReceiveContext"/> to the error queue
            </summary>
        </member>
        <member name="T:MassTransit.Transports.IMessageNameFormatter">
            <summary>
            Used to format a message type into a MessageName, which can be used as a valid
            queue name on the transport
            </summary>
        </member>
        <member name="T:MassTransit.Transports.IMessageReceiver">
            <summary>
            A message receiver delivers a transport message to the <see cref="T:MassTransit.Pipeline.IReceivePipe"/>.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.Builders.IInMemoryConsumeTopologyBuilder">
            <summary>
            A unique builder context should be created for each specification, so that the items added
            by it can be combined together into a group - so that if a subsequent specification yanks 
            something that conflicts, the system can yank the group or warn that it's impacted.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Configuration.IInMemoryBusConfiguration.CreateHostConfiguration(System.Uri,System.Int32)">
            <summary>
            Create a host configuration, by adding a host to the bus
            </summary>
            <param name="baseAddress"></param>
            <param name="transportConcurrencyLimit"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Configuration.IInMemoryBusConfiguration.CreateEndpointConfiguration">
            <summary>
            Create an endpoint configuration on the bus, which can later be turned into a receive endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Configuration.IInMemoryBusConfiguration.CreateReceiveEndpointConfiguration(System.String,MassTransit.Transports.InMemory.Configuration.IInMemoryEndpointConfiguration)">
            <summary>
            Create a receive endpoint configuration for the default host
            </summary>
            <param name="queueName"></param>
            <param name="endpointConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Configuration.IInMemoryHostConfiguration.CreateReceiveEndpointConfiguration(System.String)">
            <summary>
            Create a receive endpoint configuration using the specified host
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Fabric.DeliveryContext`1.WasAlreadyDelivered(MassTransit.Transports.InMemory.Fabric.IMessageSink{`0})">
            <summary>
            Should this delivery occur, or has is already been delievered
            </summary>
            <param name="sink"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Fabric.DeliveryContext`1.Delivered(MassTransit.Transports.InMemory.Fabric.IMessageSink{`0})">
            <summary>
            Marks the sink as delivered for this dispatch
            </summary>
            <param name="sink"></param>
        </member>
        <member name="P:MassTransit.Transports.InMemory.Fabric.DeliveryContext`1.Package">
            <summary>
            The package being delivered
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.GraphValidation.NodeList`2">
            <summary>
            Maintains a list of nodes for a given set of instances of T
            </summary>
            <typeparam name="T">The type encapsulated in the node</typeparam>
            <typeparam name="TNode">The type of node contained in the list</typeparam>
        </member>
        <member name="P:MassTransit.Transports.InMemory.GraphValidation.NodeList`2.Item(`0)">
            <summary>
            Retrieves the node for the given key
            </summary>
            <param name="key">The key</param>
            <returns>The unique node that relates to the specified key</returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.GraphValidation.NodeList`2.Index(`0)">
            <summary>
            Retrieve the index for a given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="T:MassTransit.Transports.InMemory.GraphValidation.NodeTable`1">
            <summary>
            Maintains an index of nodes so that regular ints can be used to execute algorithms
            against objects with int-compare speed vs. .Equals() speed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Transports.InMemory.GraphValidation.NodeTable`1.Item(`0)">
            <summary>
            Returns the index for the specified key, which can be any type that supports
            equality comparison
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>The index that uniquely relates to the specified key</returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.IInMemoryHost.ConnectReceiveEndpoint(System.String,System.Action{MassTransit.IInMemoryReceiveEndpointConfigurator})">
            <summary>
            Create a receive endpoint on the host, with a separate handle for stopping/removing the endpoint
            </summary>
            <param name="queueName"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.InMemory.InMemoryEndpointDefinitionExtensions.Apply(MassTransit.IInMemoryReceiveEndpointConfigurator,MassTransit.IEndpointDefinition,System.Action{MassTransit.IInMemoryReceiveEndpointConfigurator})">
            <summary>
            We may want to have a builder/endpoint context that could store things like management endpoint, etc. to configure
            filters and add configuration interfaces for things like concurrency limit and prefetch count
            </summary>
            <param name="configurator"></param>
            <param name="definition"></param>
            <param name="configure">The callback to invoke after the definition configuration has been applied</param>
        </member>
        <member name="T:MassTransit.Transports.InMemory.InMemoryHost">
            <summary>
                Caches InMemory transport instances so that they are only created and used once
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.InMemoryReceiveTransport">
            <summary>
            Support in-memory message queue that is not durable, but supports parallel delivery of messages
            based on TPL usage.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.InMemorySendTransport">
            <summary>
            Support in-memory message queue that is not durable, but supports parallel delivery of messages
            based on TPL usage.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.InMemory.Topology.Builders.IInMemoryPublishTopologyBuilder">
            <summary>
            A builder for creating the topology when publishing a message
            </summary>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Topology.Configurators.IInMemoryMessageConsumeTopologyConfigurator`1.Bind">
            <summary>
            Adds the exchange bindings for this message type
            </summary>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Topology.Configurators.IInMemoryMessageConsumeTopologyConfigurator.Apply(MassTransit.Transports.InMemory.Builders.IInMemoryConsumeTopologyBuilder)">
            <summary>
            Apply the message topology to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Topology.IInMemoryConsumeTopology.Apply(MassTransit.Transports.InMemory.Builders.IInMemoryConsumeTopologyBuilder)">
            <summary>
            Apply the entire topology to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MassTransit.Transports.InMemory.Topology.IInMemoryMessagePublishTopology.Apply(MassTransit.Transports.InMemory.Topology.Builders.IInMemoryPublishTopologyBuilder)">
            <summary>
            Apply the message topology to the builder, including any implemented types
            </summary>
            <param name="builder">The topology builder</param>
        </member>
        <member name="T:MassTransit.Transports.InMemory.Topology.Specifications.ExchangeBindingConsumeTopologySpecification">
            <summary>
            Used to bind an exchange to the consuming queue's exchange
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.Add(System.String,MassTransit.IReceiveEndpointControl)">
            <summary>
            Add an endpoint to the collection
            </summary>
            <param name="endpointName"></param>
            <param name="endpoint"></param>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.StartEndpoints(System.Threading.CancellationToken)">
            <summary>
            Start all endpoints in the collection which have not been started, and return the handles
            for those endpoints.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.Start(System.String,System.Threading.CancellationToken)">
            <summary>
            Start a new receive endpoint
            </summary>
            <param name="endpointName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveObserverConnector.ConnectReceiveObserver(MassTransit.IReceiveObserver)">
            <summary>
            Connect an observer to the receiving endpoint
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveTransport.Start">
            <summary>
            Start receiving on a transport, sending messages to the specified pipe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ISendEndpointCache`1.GetSendEndpoint(`0,MassTransit.Transports.SendEndpointFactory{`0})">
            <summary>
            Return a SendEndpoint from the cache, using the factory to create it if it doesn't exist in the cache.
            </summary>
            <param name="key">The key for the endpoint</param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ISendTransport.Send``1(``0,GreenPipes.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
                Send a message to the transport. The transport creates the OldSendContext, and calls back to
                allow the context to be modified to customize the message delivery.
                The transport specifies the defaults for the message as configured, and then allows the
                caller to modify the send context to include the required settings (durable, mandatory, etc.).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe">The pipe invoked when sending a message, to do extra stuff</param>
            <param name="cancellationToken">Cancel the send operation (if possible)</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.Transports.MessageName">
            <summary>
            Class encapsulating naming strategies for exchanges corresponding
            to message types.
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Metrics.DeliveryMetrics.DeliveryCount">
            <summary>
            The number of messages consumed by the consumer
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Metrics.DeliveryMetrics.ConcurrentDeliveryCount">
            <summary>
            The highest concurrent message count that was received by the consumer
            </summary>
        </member>
        <member name="T:MassTransit.Transports.PublishEndpoint">
            <summary>
            The publish endpoint delivers messages to the topic/exchange/whatever based upon the publish topology of the broker, by message type.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpoint">
            <summary>
            A receive endpoint is called by the receive transport to push messages to consumers.
            The receive endpoint is where the initial deserialization occurs, as well as any additional
            filters on the receive context. 
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpointHandle">
            <summary>
            A handle to an active endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the endpoint, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointLoggingExtensions.LogSkipped(MassTransit.ReceiveContext)">
            <summary>
            Log that a message was skipped, and moved to the dead letter queue
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointLoggingExtensions.LogMoved(MassTransit.ReceiveContext,System.String,System.String)">
            <summary>
            Log that a message was moved from one endpoint to the destination endpoint address
            </summary>
            <param name="context"></param>
            <param name="destination"></param>
            <param name="reason"> </param>
        </member>
        <member name="T:MassTransit.Transports.ReceiveTransportHandle">
            <summary>
            A handle to an active transport
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveTransportHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the transport, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointCache`1">
            <summary>
            Caches SendEndpoint instances by address (ignoring the query string entirely, case insensitive)
            </summary>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointFactory`1">
            <summary>
            Factory method for a send endpoint
            </summary>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:MassTransit.TurnoutConfigurationExtensions.SetJobFactory``1(MassTransit.Turnout.Configuration.ITurnoutServiceConfigurator{``0},System.Func{MassTransit.Turnout.JobContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Sets the job factory to the specified delegate
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The turnout configurator</param>
            <param name="jobFactory">A function that returns a Task for the job</param>
        </member>
        <member name="M:MassTransit.TurnoutEventExtensions.GetArguments``1(MassTransit.Turnout.Contracts.JobStarted)">
            <summary>
            Returns the arguments from the JobCompleted event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TurnoutEventExtensions.GetArguments``1(MassTransit.Turnout.Contracts.JobCompleted)">
            <summary>
            Returns the arguments from the JobCompleted event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TurnoutEventExtensions.GetResult``1(MassTransit.Turnout.Contracts.JobCompleted)">
            <summary>
            Returns the result from the JobCompleted event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Turnout.Configuration.ITurnoutServiceConfigurator`1.PartitionCount">
            <summary>
            Sets the number of partitions which can be used to process job commands
            concurrently. Note that this does not set the maximum number of jobs 
            executing, but just defines the concurrency for the consumers.
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.ConsumerJobContext`1">
            <summary>
            A job context created from a consumer's consume context
            </summary>
            <typeparam name="TCommand">The input type for the job</typeparam>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.CancelJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.CancelJob.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.CancelJob.Reason">
            <summary>
            The reason for cancelling the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCanceled`1">
            <summary>
            Published when a job faults
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCanceled`1.Input">
            <summary>
            The job input
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCanceled">
            <summary>
            Published when a job faults
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCanceled.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCanceled.Timestamp">
            <summary>
            The time the job was cancelled
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCompleted">
            <summary>
            Published when a job completes
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.Timestamp">
            <summary>
            The time the job completed
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.Arguments">
            <summary>
            The arguments used to start the job
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted.Results">
            <summary>
            The results of the job, serialized
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobCompleted`1">
            <summary>
            Published when a job completes with a result
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobCompleted`1.Result">
            <summary>
            The result of the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobFaulted">
            <summary>
            Published when a job faults
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.Timestamp">
            <summary>
            The time the job faulted
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted.Exceptions">
            <summary>
            The exceptions that were thrown by the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobFaulted`1">
            <summary>
            Published when a job faults
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobFaulted`1.Input">
            <summary>
            The job input
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobStarted">
            <summary>
            Published when a job is started
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.RetryCount">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.ManagementAddress">
            <summary>
            The management address on which this job was started
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.JobStarted.Arguments">
            <summary>
            The arguments used to create the job (The job message type serialized)
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.JobStatus">
            <summary>
            The status of a job
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SubmitJob`1.JobId">
            <summary>
            The jobId for this job, preassigned by the submittor
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SubmitJob`1.Command">
            <summary>
            The job to submit
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.Contracts.SuperviseJob`1">
            <summary>
            Supervise an active job
            Sent to the node where the job is executing so that it can check the status
            of the job. Sent at an interval until the job is completed.
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob`1.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob`1.LastUpdated">
            <summary>
            The time of the last job status check
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob`1.LastStatus">
            <summary>
            The previous job status
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.Contracts.SuperviseJob`1.Command">
            <summary>
            The job command, which initiated the job
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.IJobFactory`1.Execute(MassTransit.Turnout.JobContext{`0},GreenPipes.IPipe{MassTransit.Turnout.JobContext{`0}})">
            <summary>
            Executes the activity context by passing it to the activity factory, which creates the activity
            and then invokes the next pipe with the combined activity context
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Turnout.IJobFactory`2.Execute(MassTransit.Turnout.JobContext{`0,`1},GreenPipes.IPipe{MassTransit.Turnout.JobResultContext{`0,`1}})">
            <summary>
            Execute the job, invoking next with the result of the job once it completed
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.IJobRegistry">
            <summary>
            Contains the active jobs for the receive endpoint which have not been acknowledged
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.IJobRegistry.Add(MassTransit.Turnout.JobHandle)">
            <summary>
            Add a job to the registry
            </summary>
            <param name="jobReference"></param>
        </member>
        <member name="M:MassTransit.Turnout.IJobRegistry.TryRemoveJob(System.Guid,MassTransit.Turnout.JobHandle@)">
            <summary>
            Remove the job from the roster
            </summary>
            <param name="jobId"></param>
            <param name="jobHandle"></param>
        </member>
        <member name="M:MassTransit.Turnout.IJobRegistry.GetAll">
            <summary>
            Return all pending jobs from the registry
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.IJobService">
            <summary>
            A turnout is a lane where buses can pull aside to wait for passengers. In that style, the
            turnout service allows message consumers to run asynchronous tasks and continue once the background job
            is completed.
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.IJobService.InputAddress">
            <summary>
            The input address of the job scheduler
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.IJobService.CreateJob``1(MassTransit.ConsumeContext,System.Guid,``0,MassTransit.Turnout.IJobFactory{``0})">
            <summary>
            Creates a job and schedules it for execution.
            </summary>
            <typeparam name="T">The message type that is used to initiate the job</typeparam>
            <param name="context">The context of the message being consumed</param>
            <param name="command">The job command</param>
            <param name="jobFactory">The factory to create the job Task</param>
            <param name="jobId">Identifier for the job</param>
            <returns>The newly created job's handle</returns>
        </member>
        <member name="M:MassTransit.Turnout.IJobService.ScheduleSupervision``1(MassTransit.ConsumeContext,``0,MassTransit.Turnout.JobHandle)">
            <summary>
            Schedules a supervision message for the job, on the job service endpoint, which
            will expire if not serviced within the expected timeframe.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <param name="job"></param>
            <param name="jobHandle"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Turnout.IJobService.Stop">
            <summary>
            Shut town the job service, cancelling any pending jobs
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobContext.JobId">
            <summary>
            Identifies the job execution
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobContext.ElapsedTime">
            <summary>
            The elapsed time of the job
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobContext`1.Command">
            <summary>
            The message that initiated the job
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.JobContext`2.FromResult(`1)">
            <summary>
            Create a result context from the job context to pass to the next pipe
            </summary>
            <param name="result">The job's result</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle`1.Command">
            <summary>
            The command that initiated the job
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.JobHandle">
            <summary>
            A JobHandle contains the JobContext, Task, and provides access to the job control
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.JobId">
            <summary>
            The unique job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.ElapsedTime">
            <summary>
            The time the job has been active
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobHandle.Status">
            <summary>
            The job's status, derived from the underlying Task status
            </summary>
        </member>
        <member name="M:MassTransit.Turnout.JobHandle.Cancel">
            <summary>
            Cancel the job task
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Turnout.JobProducer`1">
            <summary>
            The consumer that creates the job using the turnout host
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Turnout.JobRegistry">
            <summary>
            Maintains the jobs for a turnout
            </summary>
        </member>
        <member name="P:MassTransit.Turnout.JobResultContext`2.Result">
            <summary>
            The result of the job once it has completed
            </summary>
        </member>
        <member name="T:MassTransit.Turnout.JobSupervisor`1">
            <summary>
            Consumer that handles the SuperviseJob message to check the status of the job
            </summary>
        </member>
        <member name="T:MassTransit.Util.AssemblyTypeCache">
            <summary>
            Caches assemblies and assembly types to avoid repeated assembly scanning
            </summary>
        </member>
        <member name="M:MassTransit.Util.AssemblyTypeCache.Clear">
            <summary>
            Remove all cached assemblies, essentially forcing a reload of any new assembly scans
            </summary>
        </member>
        <member name="M:MassTransit.Util.AssemblyTypeCache.ThrowIfAnyTypeScanFailures">
            <summary>
            Use to assert that there were no failures in type scanning when trying to find the exported types
            from any Assembly
            </summary>
        </member>
        <member name="T:MassTransit.Util.IndexedSagaProperty`1">
            <summary>
            For the in-memory saga repository, this maintains an index of saga properties
            for fast searching
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.Util.IndexedSagaProperty`1.Item(System.Object)">
            <summary>
            Returns the saga with the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Add(MassTransit.Util.SagaInstance{`0})">
            <summary>
            Adds a new saga to the index
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Remove(MassTransit.Util.SagaInstance{`0})">
            <summary>
            Removes a saga from the index
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Where(System.Object,System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function where the key also matches
            </summary>
            <param name="key"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`1.Select``1(System.Func{`0,``0})">
            <summary>
            Selects sagas from the index, running the transformation function and returning the output type
            </summary>
            <param name="transformer"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.IndexedSagaProperty`2">
            <summary>
            A dictionary index of the sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Util.IndexedSagaProperty`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an index for the specified property of a saga
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.HasConsumerInterfaces">
            <summary>
            True if the type implements any known saga interfaces
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.HasSagaInterfaces">
            <summary>
            True if the type implements any known saga interfaces
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.IsValidMessageType">
            <summary>
            True if the message type is a valid message type
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.InvalidMessageTypeReason">
            <summary>
            Once checked, the reason why the message type is invalid
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.IsTemporaryMessageType">
            <summary>
            True if this message is not a public type
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.MessageTypes">
            <summary>
            Returns all valid message types that are contained within the s
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.MessageTypeNames">
            <summary>
            The names of all the message types supported by the message type
            </summary>
        </member>
        <member name="P:MassTransit.Util.ITypeMetadataCache`1.ImplementationType">
            <summary>
            The implementation type for the type, if it's an interface
            </summary>
        </member>
        <member name="T:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler">
            <summary> 
            Provides a task scheduler that ensures a maximum concurrency level while 
            running on top of the ThreadPool. 
            </summary> 
        </member>
        <member name="F:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler._currentThreadIsProcessingItems">
            <summary>Whether the current thread is processing work items.</summary> 
        </member>
        <member name="F:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler._maxDegreeOfParallelism">
            <summary>The maximum concurrency level allowed by this scheduler.</summary> 
        </member>
        <member name="F:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler._tasks">
            <summary>The list of tasks to be executed.</summary> 
        </member>
        <member name="F:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler._delegatesQueuedOrRunning">
            <summary>Whether the scheduler is currently processing work items.</summary> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary> 
            Initializes an instance of the LimitedConcurrencyLevelTaskScheduler class with the 
            specified degree of parallelism. 
            </summary> 
            <param name="maxDegreeOfParallelism">The maximum degree of parallelism provided by this scheduler.</param> 
        </member>
        <member name="P:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary> 
            <param name="task">The task to be queued.</param> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary> 
            Informs the ThreadPool that there's work to be executed for this scheduler. 
            </summary> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Attempts to execute the specified task on the current thread.</summary> 
            <param name="task">The task to be executed.</param> 
            <param name="taskWasPreviouslyQueued"></param> 
            <returns>Whether the task could be executed on the current thread.</returns> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>Attempts to remove a previously scheduled task from the scheduler.</summary> 
            <param name="task">The task to be removed.</param> 
            <returns>Whether the task could be found and removed.</returns> 
        </member>
        <member name="M:MassTransit.Util.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of the tasks currently scheduled on this scheduler.</summary> 
            <returns>An enumerable of the tasks currently scheduled.</returns> 
        </member>
        <member name="T:MassTransit.Util.ObjectTypeDeserializer">
            <summary>
            Support deserialization of 'objects' from messages into actual types. Objects should have been
            serialized with JSON.NET (or some similar serializer).
            </summary>
        </member>
        <member name="T:MassTransit.Util.RollingTimer">
            <summary>
            Thread safe timer that allows efficient restarts by rolling the due time further into the future.
            Will roll over once every 43~ days of continuous runtime without a restart.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Start">
            <summary>
            Creates a new timer and starts it.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Restart">
            <summary>
            Restarts the existing timer, creates and starts a new timer if it does not exist.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Stop">
            <summary>
            Stops and disposes the existing timer.
            </summary>
        </member>
        <member name="P:MassTransit.Util.Scanning.IAssemblyScanner.Description">
            <summary>
            Optional user-supplied diagnostic description of this scanning operation
            </summary>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Assembly(System.Reflection.Assembly)">
            <summary>
            Add an Assembly to the scanning operation
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Assembly(System.String)">
            <summary>
            Add an Assembly by name to the scanning operation
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.AssemblyContainingType``1">
            <summary>
            Add the Assembly that contains type T to the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.AssemblyContainingType(System.Type)">
            <summary>
            Add the Assembly that contains type to the scanning operation
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Exclude(System.Func{System.Type,System.Boolean})">
            <summary>
            Exclude types that match the Predicate from being scanned
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeNamespace(System.String)">
            <summary>
            Exclude all types in this nameSpace or its children from the scanning operation
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeNamespaceContainingType``1">
            <summary>
            Exclude all types in this nameSpace or its children from the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Include(System.Func{System.Type,System.Boolean})">
            <summary>
            Only include types matching the Predicate in the scanning operation. You can 
            use multiple Include() calls in a single scanning operation
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.IncludeNamespace(System.String)">
            <summary>
            Only include types from this nameSpace or its children in the scanning operation.  You can 
            use multiple Include() calls in a single scanning operation
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.IncludeNamespaceContainingType``1">
            <summary>
            Only include types from this nameSpace or its children in the scanning operation.  You can 
            use multiple Include() calls in a single scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeType``1">
            <summary>
            Exclude this specific type from the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.TrySetResultWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Sets the result of the continuation source and forces the continuations to run on the background threadpool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="result"></param>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.TrySetExceptionWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Exception)">
            <summary>
            Sets the result of the continuation source and forces the continuations to run on the background threadpool
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.Util.TypeMetadataCache`1.CheckIfValidMessageType">
            <summary>
            Returns true if the specified type is an allowed message type, i.e.
            that it doesn't come from the .Net core assemblies or is without a namespace,
            amongst others.
            </summary>
            <returns>True if the message can be sent, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Util.TypeMetadataCache`1.GetMessageTypes">
            <summary>
            Returns all the message types that are available for the specified type. This will
            return any base classes or interfaces implemented by the type that are allowed
            message types.
            </summary>
            <returns>An enumeration of valid message types implemented by the specified type</returns>
        </member>
        <member name="T:MassTransit.Util.TypeSet">
            <summary>
            Access to a set of exported .Net Type's as defined in a scanning operation
            </summary>
        </member>
        <member name="P:MassTransit.Util.TypeSet.Records">
            <summary>
            For diagnostic purposes, explains which assemblies were
            scanned as part of this TypeSet, including failures
            </summary>
        </member>
        <member name="M:MassTransit.Util.TypeSet.FindTypes(MassTransit.Util.TypeClassification)">
            <summary>
            Find any types in this TypeSet that match any combination of the TypeClassification enumeration values
            </summary>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TypeSet.AllTypes">
            <summary>
            Returns all the types in this TypeSet
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreenPipes.CompensateActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.CompensateActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.Courier.CompensateActivityContext{``0,``1},System.Guid})">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:GreenPipes.CompensateActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.CompensateActivityContext{``0,``1}},GreenPipes.Partitioning.IPartitioner,System.Func{MassTransit.Courier.CompensateActivityContext{``0,``1},System.Guid})">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:GreenPipes.CompensateActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.CompensateActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.Courier.CompensateActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:GreenPipes.CompensateActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.CompensateActivityContext{``0,``1}},GreenPipes.Partitioning.IPartitioner,System.Func{MassTransit.Courier.CompensateActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:GreenPipes.ConcurrencyLimitExtensions.UseConcurrencyLimit(MassTransit.IConsumePipeConfigurator,System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed on the receive endpoint, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrency limit for the subsequent filters in the pipeline</param>
        </member>
        <member name="M:GreenPipes.ConcurrencyLimitExtensions.UseConcurrencyLimit(MassTransit.IConsumePipeConfigurator,System.Int32,MassTransit.IManagementEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed on the receive endpoint, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrency limit for the subsequent filters in the pipeline</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:GreenPipes.ConsumerPipeConfiguratorExtensions.UseFilter``2(GreenPipes.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0,``1}},GreenPipes.IFilter{MassTransit.ConsumerConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="M:GreenPipes.ExecuteActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.ExecuteActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.Courier.ExecuteActivityContext{``0,``1},System.Guid})">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:GreenPipes.ExecuteActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.ExecuteActivityContext{``0,``1}},GreenPipes.Partitioning.IPartitioner,System.Func{MassTransit.Courier.ExecuteActivityContext{``0,``1},System.Guid})">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:GreenPipes.ExecuteActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.ExecuteActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.Courier.ExecuteActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:GreenPipes.ExecuteActivityPartitionerExtensions.UsePartitioner``2(GreenPipes.IPipeConfigurator{MassTransit.Courier.ExecuteActivityContext{``0,``1}},GreenPipes.Partitioning.IPartitioner,System.Func{MassTransit.Courier.ExecuteActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:GreenPipes.RescueFilterConfiguratorExtensions.UseRescue(GreenPipes.IPipeConfigurator{MassTransit.ReceiveContext},GreenPipes.IPipe{MassTransit.ExceptionReceiveContext},System.Action{GreenPipes.Configurators.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:GreenPipes.RescueFilterConfiguratorExtensions.UseRescue(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext},GreenPipes.IPipe{MassTransit.ExceptionConsumeContext},System.Action{GreenPipes.Configurators.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:GreenPipes.RescueFilterConfiguratorExtensions.UseRescue``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumeContext{``0}},GreenPipes.IPipe{MassTransit.ExceptionConsumeContext{``0}},System.Action{GreenPipes.Configurators.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:GreenPipes.RescueFilterConfiguratorExtensions.UseRescue``1(GreenPipes.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0}},GreenPipes.IPipe{MassTransit.ExceptionConsumerConsumeContext{``0}},System.Action{GreenPipes.Configurators.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:GreenPipes.RescueFilterConfiguratorExtensions.UseRescue``1(GreenPipes.IPipeConfigurator{MassTransit.SagaConsumeContext{``0}},GreenPipes.IPipe{MassTransit.ExceptionSagaConsumeContext{``0}},System.Action{GreenPipes.Configurators.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
    </members>
</doc>
