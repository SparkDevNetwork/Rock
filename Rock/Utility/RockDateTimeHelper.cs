// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using Rock.Data;

namespace Rock
{
    /// <summary>
    /// Helper methods for working with dates in Rock.
    /// </summary>
    public class RockDateTimeHelper
    {
        /// <summary>
        /// CodeGens the SQL and updates the [dbo].[ufnUtility_GetSundayDate] database function after the FirstDayOfWeek setting is modified
        /// </summary>
        private static void CodeGen_ufnUtility_GetSundayDate()
        {
            var alterFunctionSQL = $@"
/*
<doc>
	<summary>
 		This function returns the Sunday date of a given date.
	</summary>

	<returns>
		The Sunday of the date given with Sunday being the SundayDate that is associated with the specified date, depending on the FirstDayOfWeek that is configured in Rock
	</returns>
	<code>
		SELECT [dbo].[ufnUtility_GetSundayDate](getdate())
	</code>
</doc>
*/
/* This is code generated by RockDateTime.CodeGen_ufnUtility_GetSundayDate() */
ALTER FUNCTION [dbo].[ufnUtility_GetSundayDate] (@InputDate DATETIME)
RETURNS DATE
AS
BEGIN
	DECLARE @InputDOW INT
	DECLARE @sundayDiff INT
	DECLARE @lastDayOfWeek INT
	DECLARE @sundayDate DATE

	-- Configured StartDOW where (using .NET DOW standard)  0 = Sunday and 6 = Saturday. Default is 1 (Monday)
    -- NOTE: This function ([ufnUtility_GetSundayDate]) is code generated so that @FirstDayOfWeek matches what is configured in Rock
	DECLARE @FirstDayOfWeek INT = {( int ) RockDateTime.FirstDayOfWeek}

	-- Sql DOW is 1 based (1 = Sunday, 7 = Saturday )
	-- So, lets convert it to the .NET standard of 0 = Sunday 
	-- from http://stackoverflow.com/a/5109557/1755417 to get the day of week deterministically, but convert to .NET DOW
	SET @InputDOW = ((datediff(day, convert(DATETIME, '18991231', 112), @inputDate) % 7))
	
    -- Get the number of days until the next Sunday date
	SET @sundayDiff = 7 - @InputDOW;
	
    -- Figure out which DayOfWeek would be the lastDayOfWeek
	-- which would be the DayOfWeek before the startDayOfWeek
	-- If the First DOW is Sunday, then the Last DOW is Saturday. Otherwise, the Last DOW is the First DOW - 1
	SET @lastDayOfWeek = CASE 
			WHEN @FirstDayOfWeek = 0
				THEN 6
			ELSE @FirstDayOfWeek - 1
			END
	
    -- There are 3 cases to deal with, and it can get confusing if Sunday isn't the last day of the week
	-- 1) The input date's DOW is Sunday. Today is the Sunday, so the Sunday Date is today
	-- 2) The input date's DOW is after the Last DOW (Today is Thursday, and the week ends next week on Tuesday).
	-- 3) The input date's DOW is before the Last DOW (Today is Monday, but the week ends this week on Tuesday)
	SET @sundayDate = CASE 
			WHEN (@InputDOW = 0)
				THEN @InputDate
			WHEN (@lastDayOfWeek < @InputDOW)
				THEN dateadd(day, @sundayDiff, @InputDate)
			ELSE dateadd(day, @sundayDiff - 7, @InputDate)
			END

	RETURN @sundayDate
END";

            // Do a safe Create or Alter (see https://stackoverflow.com/a/27970943/1755417 )
            string createFunctionIfNotExists = @"IF OBJECT_ID('[dbo].[ufnUtility_GetSundayDate]') IS NULL
    EXEC('CREATE FUNCTION [dbo].[ufnUtility_GetSundayDate] AS SET NOCOUNT ON;')";

            DbService.ExecuteCommand( createFunctionIfNotExists, System.Data.CommandType.Text );

            DbService.ExecuteCommand( alterFunctionSQL, System.Data.CommandType.Text );
        }

        /// <summary>
        /// Updates the Sunday date data.
        /// </summary>
        public static void UpdateSundayDateData()
        {
            CodeGen_ufnUtility_GetSundayDate();

            // set timeout to 2 hours, just in case it takes a long time
            int commandTimeoutSeconds = ( int ) new TimeSpan( 2, 0, 0 ).TotalSeconds;

            using ( var rockContext = new Rock.Data.RockContext() )
            {
                rockContext.Database.CommandTimeout = commandTimeoutSeconds;
                rockContext.Database.ExecuteSqlCommand( @"
UPDATE FinancialTransaction
SET SundayDate = dbo.ufnUtility_GetSundayDate(TransactionDateTime)
WHERE SundayDate IS NULL
	OR SundayDate != dbo.ufnUtility_GetSundayDate(TransactionDateTime)
" );

                rockContext.Database.ExecuteSqlCommand( @"
UPDATE AttendanceOccurrence
SET SundayDate = dbo.ufnUtility_GetSundayDate(OccurrenceDate)
WHERE SundayDate IS NULL
	OR SundayDate != dbo.ufnUtility_GetSundayDate(OccurrenceDate)
" );

                //// NOTE:
                ////  - [spAnalytics_ETL_Attendance] will take care of updating existing SundayDate data in the [AnalyticsSourceAttendance] table
                ////  - [AnalyticsSourceFinancialTransaction determines] SundayDate from looking up [SundayDate] in [AnalyticsSourceDate] using [AnalyticsSourceFinancialTransaction].[TransactionDateKey]

                // Rebuild the data in the [AnalyticsSourceDate] table
                var analyticsStartDate = new DateTime( RockDateTime.Today.AddYears( -150 ).Year, 1, 1 );
                var analyticsEndDate = new DateTime( RockDateTime.Today.AddYears( 101 ).Year, 1, 1 ).AddDays( -1 );
                Rock.Model.AnalyticsSourceDate.GenerateAnalyticsSourceDateData( 1, false, analyticsStartDate, analyticsEndDate );
            }
        }
    }
}
