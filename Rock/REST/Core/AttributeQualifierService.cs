//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.Core
{
	/// <summary>
	/// REST WCF service for AttributeQualifiers
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "Core/AttributeQualifier")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class AttributeQualifierService : IAttributeQualifierService, IService
    {
		/// <summary>
		/// Gets a AttributeQualifier object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.Core.DTO.AttributeQualifier Get( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
				Rock.Core.AttributeQualifier AttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
				if ( AttributeQualifier.IsAuthorized( "View", currentUser ) )
					return AttributeQualifier.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a AttributeQualifier object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.Core.DTO.AttributeQualifier ApiGet( string id, string apiKey )
        {
            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
					Rock.Core.AttributeQualifier AttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
					if ( AttributeQualifier.IsAuthorized( "View", user ) )
						return AttributeQualifier.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateAttributeQualifier( string id, Rock.Core.DTO.AttributeQualifier AttributeQualifier )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
				Rock.Core.AttributeQualifier existingAttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
				if ( existingAttributeQualifier.IsAuthorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingAttributeQualifier).CurrentValues.SetValues(AttributeQualifier);
					
					if (existingAttributeQualifier.IsValid)
						AttributeQualifierService.Save( existingAttributeQualifier, currentUser.PersonId );
					else
						throw new WebFaultException<string>( existingAttributeQualifier.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateAttributeQualifier( string id, string apiKey, Rock.Core.DTO.AttributeQualifier AttributeQualifier )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
					Rock.Core.AttributeQualifier existingAttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
					if ( existingAttributeQualifier.IsAuthorized( "Edit", user ) )
					{
						uow.objectContext.Entry(existingAttributeQualifier).CurrentValues.SetValues(AttributeQualifier);
					
						if (existingAttributeQualifier.IsValid)
							AttributeQualifierService.Save( existingAttributeQualifier, user.PersonId );
						else
							throw new WebFaultException<string>( existingAttributeQualifier.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateAttributeQualifier( Rock.Core.DTO.AttributeQualifier AttributeQualifier )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
				Rock.Core.AttributeQualifier existingAttributeQualifier = new Rock.Core.AttributeQualifier();
				AttributeQualifierService.Add( existingAttributeQualifier, currentUser.PersonId );
				uow.objectContext.Entry(existingAttributeQualifier).CurrentValues.SetValues(AttributeQualifier);

				if (existingAttributeQualifier.IsValid)
					AttributeQualifierService.Save( existingAttributeQualifier, currentUser.PersonId );
				else
					throw new WebFaultException<string>( existingAttributeQualifier.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
            }
        }

		/// <summary>
		/// Creates a new AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateAttributeQualifier( string apiKey, Rock.Core.DTO.AttributeQualifier AttributeQualifier )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
					Rock.Core.AttributeQualifier existingAttributeQualifier = new Rock.Core.AttributeQualifier();
					AttributeQualifierService.Add( existingAttributeQualifier, user.PersonId );
					uow.objectContext.Entry(existingAttributeQualifier).CurrentValues.SetValues(AttributeQualifier);

					if (existingAttributeQualifier.IsValid)
						AttributeQualifierService.Save( existingAttributeQualifier, user.PersonId );
					else
						throw new WebFaultException<string>( existingAttributeQualifier.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteAttributeQualifier( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
				Rock.Core.AttributeQualifier AttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
				if ( AttributeQualifier.IsAuthorized( "Edit", currentUser ) )
				{
					AttributeQualifierService.Delete( AttributeQualifier, currentUser.PersonId );
					AttributeQualifierService.Save( AttributeQualifier, currentUser.PersonId );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a AttributeQualifier object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteAttributeQualifier( string id, string apiKey )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Core.AttributeQualifierService AttributeQualifierService = new Rock.Core.AttributeQualifierService();
					Rock.Core.AttributeQualifier AttributeQualifier = AttributeQualifierService.Get( int.Parse( id ) );
					if ( AttributeQualifier.IsAuthorized( "Edit", user ) )
					{
						AttributeQualifierService.Delete( AttributeQualifier, user.PersonId );
						AttributeQualifierService.Save( AttributeQualifier, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this AttributeQualifier", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
