//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.Groups
{
	/// <summary>
	/// REST WCF service for Groups
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "Groups/Group")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class GroupService : IGroupService, IService
    {
		/// <summary>
		/// Gets a Group object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.Groups.DTO.Group Get( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
				Rock.Groups.Group Group = GroupService.Get( int.Parse( id ) );
				if ( Group.IsAuthorized( "View", currentUser ) )
					return Group.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this Group", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a Group object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.Groups.DTO.Group ApiGet( string id, string apiKey )
        {
            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
					Rock.Groups.Group Group = GroupService.Get( int.Parse( id ) );
					if ( Group.IsAuthorized( "View", user ) )
						return Group.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this Group", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a Group object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateGroup( string id, Rock.Groups.DTO.Group Group )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
				Rock.Groups.Group existingGroup = GroupService.Get( int.Parse( id ) );
				if ( existingGroup.IsAuthorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingGroup).CurrentValues.SetValues(Group);
					
					if (existingGroup.IsValid)
						GroupService.Save( existingGroup, currentUser.PersonId );
					else
						throw new WebFaultException<string>( existingGroup.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Group", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a Group object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateGroup( string id, string apiKey, Rock.Groups.DTO.Group Group )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
					Rock.Groups.Group existingGroup = GroupService.Get( int.Parse( id ) );
					if ( existingGroup.IsAuthorized( "Edit", user ) )
					{
						uow.objectContext.Entry(existingGroup).CurrentValues.SetValues(Group);
					
						if (existingGroup.IsValid)
							GroupService.Save( existingGroup, user.PersonId );
						else
							throw new WebFaultException<string>( existingGroup.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Group", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new Group object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateGroup( Rock.Groups.DTO.Group Group )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
				Rock.Groups.Group existingGroup = new Rock.Groups.Group();
				GroupService.Add( existingGroup, currentUser.PersonId );
				uow.objectContext.Entry(existingGroup).CurrentValues.SetValues(Group);

				if (existingGroup.IsValid)
					GroupService.Save( existingGroup, currentUser.PersonId );
				else
					throw new WebFaultException<string>( existingGroup.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
            }
        }

		/// <summary>
		/// Creates a new Group object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateGroup( string apiKey, Rock.Groups.DTO.Group Group )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
					Rock.Groups.Group existingGroup = new Rock.Groups.Group();
					GroupService.Add( existingGroup, user.PersonId );
					uow.objectContext.Entry(existingGroup).CurrentValues.SetValues(Group);

					if (existingGroup.IsValid)
						GroupService.Save( existingGroup, user.PersonId );
					else
						throw new WebFaultException<string>( existingGroup.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Group object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteGroup( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
				Rock.Groups.Group Group = GroupService.Get( int.Parse( id ) );
				if ( Group.IsAuthorized( "Edit", currentUser ) )
				{
					GroupService.Delete( Group, currentUser.PersonId );
					GroupService.Save( Group, currentUser.PersonId );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Group", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Group object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteGroup( string id, string apiKey )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Groups.GroupService GroupService = new Rock.Groups.GroupService();
					Rock.Groups.Group Group = GroupService.Get( int.Parse( id ) );
					if ( Group.IsAuthorized( "Edit", user ) )
					{
						GroupService.Delete( Group, user.PersonId );
						GroupService.Save( Group, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Group", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
