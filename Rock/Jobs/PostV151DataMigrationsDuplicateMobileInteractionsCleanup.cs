// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using Rock.Attribute;
using Rock.Data;
using Rock.Model;

namespace Rock.Jobs
{
    /// <summary>
    /// Deletes duplicate interactions generated by the mobile shell.
    /// Implements the <see cref="Rock.Jobs.RockJob" />
    /// </summary>
    /// <seealso cref="Rock.Jobs.RockJob" />
    [IntegerField( "Command Timeout",
    Key = AttributeKey.CommandTimeout,
    Description = "Maximum amount of time (in seconds) to wait for each SQL command to complete. On a large database with lots of transactions, this could take several minutes or more.",
    IsRequired = false,
    DefaultIntegerValue = 14400 )]
    public class PostV151DataMigrationsDuplicateMobileInteractionsCleanup : RockJob
    {
        private static class AttributeKey
        {
            public const string CommandTimeout = "CommandTimeout";
        }

        /// <inheritdoc />
        public override void Execute()
        {
            // Get the configured timeout, or default to 240 minutes if it is blank.
            var commandTimeout = GetAttributeValue( AttributeKey.CommandTimeout ).AsIntegerOrNull() ?? 14400;
            var jobMigration = new JobMigration( commandTimeout );

            // Delete duplicate mobile interaction entries.
            DeleteDuplicateMobileInteractions( jobMigration );

            // Delete the service job once finished.
            DeleteJob();
        }

        /// <summary>
        /// Deletes the duplicate mobile interactions.
        /// </summary>
        /// <param name="jobMigration">The job migration.</param>
        private void DeleteDuplicateMobileInteractions( JobMigration jobMigration )
        {
            // The SQL used to remove duplicate mobile interaction entries.
            // Matching on duplicate InteractionDateTime, InteractionComponentId & PersonAliasId,
            // and then limiting to mobile sites. We also leave the original interaction in tact.
            var removeDuplicateSql = @"DELETE FROM Interaction
WHERE Id IN (
	SELECT x.[Id]
	FROM (
		SELECT i.[InteractionDateTime], i.[InteractionComponentId], i.[PersonAliasId], i.[Id], 
		ROW_NUMBER() OVER(PARTITION BY i.[InteractionComponentId], i.[PersonAliasId], i.[InteractionDateTime]
		ORDER BY i.[InteractionDateTime]) AS [RowNumber] 
		FROM [Interaction] i 
			INNER JOIN [InteractionSession] ise ON ise.[Id] = i.[InteractionSessionId]
			INNER JOIN [InteractionComponent] icom ON icom.[Id] = i.[InteractionComponentId]
			INNER JOIN [InteractionChannel] ich ON ich.[Id] = icom.[InteractionChannelId]
			INNER JOIN [Site] s ON s.[Id] = ich.[ChannelEntityId]
		WHERE s.[SiteType] = 1  
	) x 
	WHERE x.[RowNumber] > 1
);";

            jobMigration.Sql( removeDuplicateSql );
        }


        /// <summary>
        /// Deletes the job.
        /// </summary>
        private void DeleteJob()
        {
            using ( var rockContext = new RockContext() )
            {
                var jobService = new ServiceJobService( rockContext );
                var job = jobService.Get( GetJobId() );

                if ( job != null )
                {
                    jobService.Delete( job );
                    rockContext.SaveChanges();
                }
            }
        }
    }
}
