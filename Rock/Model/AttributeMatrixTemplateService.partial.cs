//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System.Linq;

using Rock.Data;
using Rock.Field.Types;
using Rock.Web.Cache;

namespace Rock.Model
{
    /// <summary>
    /// AttributeMatrixTemplate Service class
    /// </summary>
    public partial class AttributeMatrixTemplateService : Service<AttributeMatrixTemplate>
    {
        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="checkAttributeUsage">if set to <c>true</c> [check attribute usage].</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( AttributeMatrixTemplate item, bool checkAttributeUsage, out string errorMessage )
        {
            if ( !this.CanDelete( item, out errorMessage ) )
            {
                return false;
            }
            else
            {
                if ( checkAttributeUsage )
                {
                    // check if any MatrixAttributes are using this AttributeMatrixTemplate
                    var matrixFieldTypeId = FieldTypeCache.Get<MatrixFieldType>().Id;
                    var qualifierKey = MatrixFieldType.ATTRIBUTE_MATRIX_TEMPLATE;
                    var qualifierValue = item.Id.ToString();
                    var usedAsMatrixTemplate = new AttributeService( new RockContext() ).Queryable()
                        .Where( a => a.FieldTypeId == matrixFieldTypeId )
                        .Any( a => a.AttributeQualifiers.Any( q => q.Key == qualifierKey && q.Value == qualifierValue ) );
                    if ( usedAsMatrixTemplate )
                    {
                        errorMessage = string.Format( "This {0} is assigned to an {1}.", AttributeMatrixTemplate.FriendlyTypeName, Rock.Model.Attribute.FriendlyTypeName );
                        return false;
                    }
                }
            }

            return true;
        }
    }
}
