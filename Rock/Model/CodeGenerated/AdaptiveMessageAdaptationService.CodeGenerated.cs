//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

using System;
using System.Collections.Generic;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// AdaptiveMessageAdaptation Service class
    /// </summary>
    public partial class AdaptiveMessageAdaptationService : Service<AdaptiveMessageAdaptation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdaptiveMessageAdaptationService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public AdaptiveMessageAdaptationService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( AdaptiveMessageAdaptation item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    [HasQueryableAttributes( typeof( AdaptiveMessageAdaptation.AdaptiveMessageAdaptationQueryableAttributeValue ), nameof( AdaptiveMessageAdaptationAttributeValues ) )]
    public partial class AdaptiveMessageAdaptation
    {
        /// <summary>
        /// Gets the entity attribute values. This should only be used inside
        /// LINQ statements when building a where clause for the query. This
        /// property should only be used inside LINQ statements for filtering
        /// or selecting values. Do <b>not</b> use it for accessing the
        /// attributes after the entity has been loaded.
        /// </summary>
        public virtual ICollection<AdaptiveMessageAdaptationQueryableAttributeValue> AdaptiveMessageAdaptationAttributeValues { get; set; } 

        /// <inheritdoc/>
        public class AdaptiveMessageAdaptationQueryableAttributeValue : QueryableAttributeValue
        {
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class AdaptiveMessageAdaptationExtensionMethods
    {
        /// <summary>
        /// Clones this AdaptiveMessageAdaptation object to a new AdaptiveMessageAdaptation object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static AdaptiveMessageAdaptation Clone( this AdaptiveMessageAdaptation source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as AdaptiveMessageAdaptation;
            }
            else
            {
                var target = new AdaptiveMessageAdaptation();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Clones this AdaptiveMessageAdaptation object to a new AdaptiveMessageAdaptation object with default values for the properties in the Entity and Model base classes.
        /// </summary>
        /// <param name="source">The source.</param>
        /// <returns></returns>
        public static AdaptiveMessageAdaptation CloneWithoutIdentity( this AdaptiveMessageAdaptation source )
        {
            var target = new AdaptiveMessageAdaptation();
            target.CopyPropertiesFrom( source );

            target.Id = 0;
            target.Guid = Guid.NewGuid();
            target.ForeignKey = null;
            target.ForeignId = null;
            target.ForeignGuid = null;
            target.CreatedByPersonAliasId = null;
            target.CreatedDateTime = RockDateTime.Now;
            target.ModifiedByPersonAliasId = null;
            target.ModifiedDateTime = RockDateTime.Now;

            return target;
        }

        /// <summary>
        /// Copies the properties from another AdaptiveMessageAdaptation object to this AdaptiveMessageAdaptation object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this AdaptiveMessageAdaptation target, AdaptiveMessageAdaptation source )
        {
            target.Id = source.Id;
            target.AdaptiveMessageId = source.AdaptiveMessageId;
            target.Description = source.Description;
            target.EndDate = source.EndDate;
            target.ForeignGuid = source.ForeignGuid;
            target.ForeignKey = source.ForeignKey;
            target.IsActive = source.IsActive;
            target.Name = source.Name;
            target.Order = source.Order;
            target.StartDate = source.StartDate;
            target.ViewSaturationCount = source.ViewSaturationCount;
            target.ViewSaturationInDays = source.ViewSaturationInDays;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;
            target.Guid = source.Guid;
            target.ForeignId = source.ForeignId;

        }
    }
}
