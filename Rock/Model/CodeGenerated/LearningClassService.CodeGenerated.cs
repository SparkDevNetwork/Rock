//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// LearningClass Service class
    /// </summary>
    public partial class LearningClassService : Service<LearningClass>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LearningClassService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public LearningClassService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( LearningClass item, out string errorMessage )
        {
            errorMessage = string.Empty;

            if ( new Service<LearningActivity>( Context ).Queryable().Any( a => a.LearningClassId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", LearningClass.FriendlyTypeName, LearningActivity.FriendlyTypeName );
                return false;
            }

            if ( new Service<LearningClassAnnouncement>( Context ).Queryable().Any( a => a.LearningClassId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", LearningClass.FriendlyTypeName, LearningClassAnnouncement.FriendlyTypeName );
                return false;
            }

            if ( new Service<LearningClassContentPage>( Context ).Queryable().Any( a => a.LearningClassId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", LearningClass.FriendlyTypeName, LearningClassContentPage.FriendlyTypeName );
                return false;
            }

            if ( new Service<LearningParticipant>( Context ).Queryable().Any( a => a.LearningClassId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", LearningClass.FriendlyTypeName, LearningParticipant.FriendlyTypeName );
                return false;
            }
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class LearningClassExtensionMethods
    {
        /// <summary>
        /// Clones this LearningClass object to a new LearningClass object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static LearningClass Clone( this LearningClass source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as LearningClass;
            }
            else
            {
                var target = new LearningClass();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Clones this LearningClass object to a new LearningClass object with default values for the properties in the Entity and Model base classes.
        /// </summary>
        /// <param name="source">The source.</param>
        /// <returns></returns>
        public static LearningClass CloneWithoutIdentity( this LearningClass source )
        {
            var target = new LearningClass();
            target.CopyPropertiesFrom( source );

            target.Id = 0;
            target.Guid = Guid.NewGuid();
            target.ForeignKey = null;
            target.ForeignId = null;
            target.ForeignGuid = null;

            return target;
        }

        /// <summary>
        /// Copies the properties from another LearningClass object to this LearningClass object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this LearningClass target, LearningClass source )
        {
            target.Id = source.Id;
            target.AllowGuests = source.AllowGuests;
            target.ArchivedByPersonAliasId = source.ArchivedByPersonAliasId;
            target.ArchivedDateTime = source.ArchivedDateTime;
            target.AttendanceRecordRequiredForCheckIn = source.AttendanceRecordRequiredForCheckIn;
            target.CampusId = source.CampusId;
            target.ConfirmationAdditionalDetails = source.ConfirmationAdditionalDetails;
            target.Description = source.Description;
            target.DisableScheduleToolboxAccess = source.DisableScheduleToolboxAccess;
            target.DisableScheduling = source.DisableScheduling;
            target.ElevatedSecurityLevel = source.ElevatedSecurityLevel;
            target.ForeignGuid = source.ForeignGuid;
            target.ForeignKey = source.ForeignKey;
            target.GroupCapacity = source.GroupCapacity;
            target.GroupSalutation = source.GroupSalutation;
            target.GroupSalutationFull = source.GroupSalutationFull;
            target.GroupTypeId = source.GroupTypeId;
            target.InactiveDateTime = source.InactiveDateTime;
            target.InactiveReasonNote = source.InactiveReasonNote;
            target.InactiveReasonValueId = source.InactiveReasonValueId;
            target.IsActive = source.IsActive;
            target.IsArchived = source.IsArchived;
            target.IsPublic = source.IsPublic;
            target.IsSecurityRole = source.IsSecurityRole;
            target.IsSpecialNeeds = source.IsSpecialNeeds;
            target.IsSystem = source.IsSystem;
            target.LeaderToLeaderRelationshipMultiplierOverride = source.LeaderToLeaderRelationshipMultiplierOverride;
            target.LeaderToNonLeaderRelationshipMultiplierOverride = source.LeaderToNonLeaderRelationshipMultiplierOverride;
            target.LearningCourseId = source.LearningCourseId;
            target.LearningGradingSystemId = source.LearningGradingSystemId;
            target.LearningSemesterId = source.LearningSemesterId;
            target.Name = source.Name;
            target.NonLeaderToLeaderRelationshipMultiplierOverride = source.NonLeaderToLeaderRelationshipMultiplierOverride;
            target.NonLeaderToNonLeaderRelationshipMultiplierOverride = source.NonLeaderToNonLeaderRelationshipMultiplierOverride;
            target.Order = source.Order;
            target.ParentGroupId = source.ParentGroupId;
            target.RelationshipGrowthEnabledOverride = source.RelationshipGrowthEnabledOverride;
            target.RelationshipStrengthOverride = source.RelationshipStrengthOverride;
            target.ReminderAdditionalDetails = source.ReminderAdditionalDetails;
            target.ReminderOffsetDays = source.ReminderOffsetDays;
            target.ReminderSystemCommunicationId = source.ReminderSystemCommunicationId;
            target.RequiredSignatureDocumentTemplateId = source.RequiredSignatureDocumentTemplateId;
            target.RSVPReminderOffsetDays = source.RSVPReminderOffsetDays;
            target.RSVPReminderSystemCommunicationId = source.RSVPReminderSystemCommunicationId;
            target.ScheduleCancellationPersonAliasId = source.ScheduleCancellationPersonAliasId;
            target.ScheduleConfirmationLogic = source.ScheduleConfirmationLogic;
            target.ScheduleId = source.ScheduleId;
            target.SchedulingMustMeetRequirements = source.SchedulingMustMeetRequirements;
            target.StatusValueId = source.StatusValueId;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;
            target.Guid = source.Guid;
            target.ForeignId = source.ForeignId;

        }
    }
}
