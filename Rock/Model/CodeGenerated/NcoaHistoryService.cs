//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// NcoaHistory Service class
    /// </summary>
    public partial class NcoaHistoryService : Service<NcoaHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NcoaHistoryService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public NcoaHistoryService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( NcoaHistory item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class NcoaHistoryExtensionMethods
    {
        /// <summary>
        /// Clones this NcoaHistory object to a new NcoaHistory object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static NcoaHistory Clone( this NcoaHistory source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as NcoaHistory;
            }
            else
            {
                var target = new NcoaHistory();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another NcoaHistory object to this NcoaHistory object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this NcoaHistory target, NcoaHistory source )
        {
            target.Id = source.Id;
            target.AddressInvalidReason = source.AddressInvalidReason;
            target.AddressStatus = source.AddressStatus;
            target.FamilyId = source.FamilyId;
            target.ForeignGuid = source.ForeignGuid;
            target.ForeignKey = source.ForeignKey;
            target.LocationId = source.LocationId;
            target.MatchFlag = source.MatchFlag;
            target.MoveDate = source.MoveDate;
            target.MoveDistance = source.MoveDistance;
            target.MoveType = source.MoveType;
            target.NcoaNote = source.NcoaNote;
            target.NcoaRunDateTime = source.NcoaRunDateTime;
            target.NcoaType = source.NcoaType;
            target.OriginalCity = source.OriginalCity;
            target.OriginalPostalCode = source.OriginalPostalCode;
            target.OriginalState = source.OriginalState;
            target.OriginalStreet1 = source.OriginalStreet1;
            target.OriginalStreet2 = source.OriginalStreet2;
            target.PersonAliasId = source.PersonAliasId;
            target.Processed = source.Processed;
            target.UpdatedAddressType = source.UpdatedAddressType;
            target.UpdatedBarcode = source.UpdatedBarcode;
            target.UpdatedCity = source.UpdatedCity;
            target.UpdatedCountry = source.UpdatedCountry;
            target.UpdatedPostalCode = source.UpdatedPostalCode;
            target.UpdatedState = source.UpdatedState;
            target.UpdatedStreet1 = source.UpdatedStreet1;
            target.UpdatedStreet2 = source.UpdatedStreet2;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;
            target.Guid = source.Guid;
            target.ForeignId = source.ForeignId;

        }
    }
}
