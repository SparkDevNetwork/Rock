//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Collections.Generic;


namespace Rock.Client
{
    /// <summary>
    /// Base client model for PeerNetwork that only includes the non-virtual fields. Use this for PUT/POSTs
    /// </summary>
    public partial class PeerNetworkEntity
    {
        /// <summary />
        public long Id { get; set; }

        /// <summary />
        public string Caption { get; set; }

        /// <summary />
        public int? ClassificationEntityId { get; set; }

        /// <summary />
        public DateTime LastUpdateDateTime { get; set; }

        /// <summary />
        public int? RelatedEntityId { get; set; }

        /// <summary />
        public DateTime? RelationshipEndDate { get; set; }

        /// <summary />
        public decimal RelationshipScore { get; set; }

        /// <summary />
        public decimal RelationshipScoreLastUpdateValue { get; set; }

        /// <summary />
        public DateTime RelationshipStartDate { get; set; }

        /// <summary />
        public Rock.Client.Enums.Group.RelationshipTrend RelationshipTrend { get; set; }

        /// <summary />
        public int RelationshipTypeValueId { get; set; }

        /// <summary />
        public int SourcePersonId { get; set; }

        /// <summary />
        public int TargetPersonId { get; set; }

        /// <summary>
        /// Copies the base properties from a source PeerNetwork object
        /// </summary>
        /// <param name="source">The source.</param>
        public void CopyPropertiesFrom( PeerNetwork source )
        {
            this.Id = source.Id;
            this.Caption = source.Caption;
            this.ClassificationEntityId = source.ClassificationEntityId;
            this.LastUpdateDateTime = source.LastUpdateDateTime;
            this.RelatedEntityId = source.RelatedEntityId;
            this.RelationshipEndDate = source.RelationshipEndDate;
            this.RelationshipScore = source.RelationshipScore;
            this.RelationshipScoreLastUpdateValue = source.RelationshipScoreLastUpdateValue;
            this.RelationshipStartDate = source.RelationshipStartDate;
            this.RelationshipTrend = source.RelationshipTrend;
            this.RelationshipTypeValueId = source.RelationshipTypeValueId;
            this.SourcePersonId = source.SourcePersonId;
            this.TargetPersonId = source.TargetPersonId;

        }
    }

    /// <summary>
    /// Client model for PeerNetwork that includes all the fields that are available for GETs. Use this for GETs (use PeerNetworkEntity for POST/PUTs)
    /// </summary>
    public partial class PeerNetwork : PeerNetworkEntity
    {
        /// <summary />
        public DefinedValue RelationshipTypeValue { get; set; }

        /// <summary />
        public Person SourcePerson { get; set; }

        /// <summary />
        public Person TargetPerson { get; set; }

    }
}
