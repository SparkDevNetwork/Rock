// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;

using Rock.Attribute;
using Rock.Constants;
using Rock.Data;
using Rock.Model;
using Rock.ViewModels.Blocks;
using Rock.ViewModels.Blocks.Core.{{ EntityName }}Detail;

namespace Rock.Blocks.{{ Domain }}
{
    /// <summary>
    /// Displays the details of a particular {{ EntityName | SplitCase | Downcase }}.
    /// </summary>
    /// <seealso cref="Rock.Blocks.RockObsidianDetailBlockType" />

    [DisplayName( "{{ EntityName | SplitCase }} Detail" )]
    [Category( "Obsidian > {{ Domain }}" )]
    [Description( "Displays the details of a particular {{ EntityName | SplitCase | Downcase }}." )]
    [IconCssClass( "fa fa-building" )]

    #region Block Attributes

    #endregion

    public class {{ EntityName }}Detail : RockObsidianDetailBlockType
    {
        #region Keys

        private static class PageParameterKey
        {
            public const string {{ EntityName }}Id = "{{ EntityName }}Id";
        }

        private static class NavigationUrlKey
        {
            public const string ParentPage = "ParentPage";
        }

        #endregion Keys

        #region Methods

        /// <inheritdoc/>
        public override object GetObsidianBlockInitialization()
        {
            using ( var rockContext = new RockContext() )
            {
                var box = new DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag>();

                SetBagInitialEntityState( box, {% if UseAttributeValues == true %}true{% else %}false{% endif %}, rockContext );

                box.NavigationUrls = GetBoxNavigationUrls();
                box.Options = GetBoxOptions( box.IsEditable );

                return box;
            }
        }

        /// <summary>
        /// Gets the box options required for the component to render the view
        /// or edit the entity.
        /// </summary>
        /// <param name="isEditable"><c>true</c> if the entity is editable; otherwise <c>false</c>.</param>
        /// <returns>The options that provide additional details to the block.</returns>
        private {{ EntityName }}DetailOptionsBag GetBoxOptions( bool isEditable )
        {
            var options = new {{ EntityName }}DetailOptionsBag();

            return options;
        }

        /// <summary>
        /// Validates the {{ EntityName }} for any final information that might not be
        /// valid after storing all the data from the client.
        /// </summary>
        /// <param name="{{ EntityName | CamelCase }}">The {{ EntityName }} to be validated.</param>
        /// <param name="rockContext">The rock context.</param>
        /// <param name="errorMessage">On <c>false</c> return, contains the error message.</param>
        /// <returns><c>true</c> if the {{ EntityName }} is valid, <c>false</c> otherwise.</returns>
        private bool Validate{{ EntityName }}( {{ EntityName }} {{ EntityName | CamelCase }}, RockContext rockContext, out string errorMessage )
        {
            errorMessage = null;

            return true;
        }

        /// <summary>
        /// Sets the initial entity state of the box. Populates the Entity or
        /// ErrorMessage properties depending on the entity and permissions.
        /// </summary>
        /// <param name="box">The box to be populated.</param>
        /// <param name="loadAttributes"><c>true</c> if attributes and values should be loaded; otherwise <c>false</c>.</param>
        /// <param name="rockContext">The rock context.</param>
        private void SetBagInitialEntityState( DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag> box, bool loadAttributes, RockContext rockContext )
        {
            var entity = GetInitialEntity( rockContext );

            if ( entity != null )
            {
                var isViewable = {% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Security.Authorization.VIEW, RequestContext.CurrentPerson );
                box.IsEditable = {% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Security.Authorization.EDIT, RequestContext.CurrentPerson );

                if ( loadAttributes )
                {
                    entity.LoadAttributes( rockContext );
                }

                if ( entity.Id != 0 )
                {
                    // Existing entity was found, prepare for view mode by default.
                    if ( isViewable )
                    {
                        box.Entity = GetEntityBagForView( entity, loadAttributes );
                    }
                    else
                    {
                        box.ErrorMessage = EditModeMessage.NotAuthorizedToView( {{ EntityName }}.FriendlyTypeName );
                    }
                }
                else
                {
                    // New entity is being created, prepare for edit mode by default.
                    if ( box.IsEditable )
                    {
                        box.Entity = GetEntityBagForEdit( entity, loadAttributes );
                    }
                    else
                    {
                        box.ErrorMessage = EditModeMessage.NotAuthorizedToEdit( {{ EntityName }}.FriendlyTypeName );
                    }
                }
            }
            else
            {
                box.ErrorMessage = $"The {{'{'}}{{ EntityName }}.FriendlyTypeName} was not found.";
            }
        }

        /// <summary>
        /// Gets the entity bag that is common between both view and edit modes.
        /// </summary>
        /// <param name="entity">The entity to be represented as a bag.</param>
        /// <returns>A <see cref="{{ EntityName }}Bag"/> that represents the entity.</returns>
        private {{ EntityName }}Bag GetCommonEntityBag( {{ EntityName }} entity )
        {
            if ( entity == null )
            {
                return null;
            }

            return new {{ EntityName }}Bag
            {
                Guid = entity.Guid,
                Id = entity.Id,
                IdKey = entity.IdKey{% for property in Properties %},
                {{ property.Name }} = entity.{{ property.ConvertToBagCode }}{% endfor %}
            };
        }

        /// <summary>
        /// Gets the bag for viewing the specied entity.
        /// </summary>
        /// <param name="entity">The entity to be represented for view purposes.</param>
        /// <param name="loadAttributes"><c>true</c> if attributes and values should be loaded; otherwise <c>false</c>.</param>
        /// <returns>A <see cref="{{ EntityName }}Bag"/> that represents the entity.</returns>
        private {{ EntityName }}Bag GetEntityBagForView( {{ EntityName }} entity, bool loadAttributes )
        {
            if ( entity == null )
            {
                return null;
            }

            var bag = GetCommonEntityBag( entity );

            if ( loadAttributes )
            {
                bag.LoadAttributesAndValuesForPublicView( entity, RequestContext.CurrentPerson );
            }

            return bag;
        }

        /// <summary>
        /// Gets the bag for editing the specied entity.
        /// </summary>
        /// <param name="entity">The entity to be represented for edit purposes.</param>
        /// <param name="loadAttributes"><c>true</c> if attributes and values should be loaded; otherwise <c>false</c>.</param>
        /// <returns>A <see cref="{{ EntityName }}Bag"/> that represents the entity.</returns>
        private {{ EntityName }}Bag GetEntityBagForEdit( {{ EntityName }} entity, bool loadAttributes )
        {
            if ( entity == null )
            {
                return null;
            }

            var bag = GetCommonEntityBag( entity );

            if ( loadAttributes )
            {
                bag.LoadAttributesAndValuesForPublicEdit( entity, RequestContext.CurrentPerson );
            }

            return bag;
        }

        /// <summary>
        /// Updates the entity from the data in the save box.
        /// </summary>
        /// <param name="entity">The entity to be updated.</param>
        /// <param name="box">The box containing the information to be updated.</param>
        /// <param name="rockContext">The rock context.</param>
        /// <returns><c>true</c> if the box was valid and the entity was updated, <c>false</c> otherwise.</returns>
        private bool UpdateEntityFromBox( {{ EntityName }} entity, DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag> box, RockContext rockContext )
        {
            if ( box.ValidProperties == null )
            {
                return false;
            }{% for property in Properties %}

            box.IfValidProperty( nameof( box.Entity.{{ property.Name }} ),
                () => entity.{{ property.Name }}{% if property.IsEntity == true %}Id{% endif %} = box.Entity.{{ property.ConvertFromBagCode }} );{% endfor %}

            {% if UseAttributeValues == true %}box.IfValidProperty( nameof( box.Entity.AttributeValues ),
                () =>
                {
                    entity.LoadAttributes( rockContext );

                    entity.SetPublicAttributeValues( box.Entity.AttributeValues, RequestContext.CurrentPerson );
                } );

            {% endif %}return true;
        }

        /// <summary>
        /// Gets the initial entity from page parameters or creates a new entity
        /// if page parameters requested creation.
        /// </summary>
        /// <param name="rockContext">The rock context.</param>
        /// <returns>The <see cref="{{ EntityName }}"/> to be viewed or edited on the page.</returns>
        private {{ EntityName }} GetInitialEntity( RockContext rockContext )
        {
            return GetInitialEntity<{{ EntityName }}, {{ ServiceName }}>( rockContext, PageParameterKey.{{ EntityName }}Id );
        }

        /// <summary>
        /// Gets the box navigation URLs required for the page to operate.
        /// </summary>
        /// <returns>A dictionary of key names and URL values.</returns>
        private Dictionary<string, string> GetBoxNavigationUrls()
        {
            return new Dictionary<string, string>
            {
                [NavigationUrlKey.ParentPage] = this.GetParentPageUrl()
            };
        }

        #endregion

        #region Block Actions

        /// <summary>
        /// Gets the box that will contain all the information needed to begin
        /// the edit operation.
        /// </summary>
        /// <param name="key">The identifier of the entity to be edited.</param>
        /// <returns>A box that contains the entity and any other information required.</returns>
        [BlockAction]
        public BlockActionResult Edit( string key )
        {
            using ( var rockContext = new RockContext() )
            {
                var entity = new {{ ServiceName }}( rockContext ).Get( key, !PageCache.Layout.Site.DisablePredictableIds );

                if ( entity == null || !{% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Security.Authorization.EDIT, RequestContext.CurrentPerson ) )
                {
                    return ActionBadRequest();
                }{% if UseAttributeValues == true %}

                entity.LoadAttributes( rockContext );{% endif %}

                var box = new DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag>
                {
                    Entity = GetEntityBagForEdit( entity, true )
                };

                return ActionOk( box );
            }
        }

        /// <summary>
        /// Saves the entity contained in the box.
        /// </summary>
        /// <param name="box">The box that contains all the information required to save.</param>
        /// <returns>A new entity bag to be used when returning to view mode, or the URL to redirect to after creating a new entity.</returns>
        [BlockAction]
        public BlockActionResult Save( DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag> box )
        {
            using ( var rockContext = new RockContext() )
            {
                var entityService = new {{ ServiceName }}( rockContext );
                {{ EntityName }} entity;

                // Determine if we are editing an existing entity or creating a new one.
                if ( box.Entity.Id != 0 )
                {
                    // If editing an existing entity then load it and make sure it
                    // was found and can still be edited.
                    entity = entityService.Get( box.Entity.IdKey, !PageCache.Layout.Site.DisablePredictableIds );

                    if ( entity == null )
                    {
                        return ActionBadRequest( $"{{'{'}}{{ EntityName }}.FriendlyTypeName} not found." );
                    }

                    if ( !{% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Security.Authorization.EDIT, RequestContext.CurrentPerson ) )
                    {
                        return ActionBadRequest( $"Not authorized to edit ${{'{'}}{{ EntityName }}.FriendlyTypeName}." );
                    }
                }
                else
                {
                    // Create a new entity.
                    entity = new {{ EntityName }}();
                    entityService.Add( entity );

                    var maxOrder = entityService.Queryable()
                        .Select( t => ( int? ) t.Order )
                        .Max();

                    entity.Order = maxOrder.HasValue ? maxOrder.Value + 1 : 0;
                }

                // Update the entity instance from the information in the bag.
                if ( !UpdateEntityFromBox( entity, box, rockContext ) )
                {
                    return ActionBadRequest( "Invalid data." );
                }

                // Ensure everything is valid before saving.
                if ( !Validate{{ EntityName }}( entity, rockContext, out var validationMessage ) )
                {
                    return ActionBadRequest( validationMessage );
                }

                var isNew = entity.Id == 0;

                rockContext.WrapTransaction( () =>
                {
                    rockContext.SaveChanges();{% if UseAttributeValues == true %}
                    entity.SaveAttributeValues( rockContext );{% endif %}
                } );

                if ( isNew )
                {
                    return ActionContent( System.Net.HttpStatusCode.Created, this.GetCurrentPageUrl( new Dictionary<string, string>
                    {
                        [PageParameterKey.{{ EntityName }}Id] = entity.Id.ToString()
                    } ) );
                }

                // Ensure navigation properties will work now.
                entity = entityService.Get( entity.Id );{% if UseAttributeValues == true %}
                entity.LoadAttributes( rockContext );{% endif %}

                return ActionOk( GetEntityBagForView( entity, true ) );
            }
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="key">The identifier of the entity to be deleted.</param>
        /// <returns>A string that contains the URL to be redirected to on success.</returns>
        [BlockAction]
        public BlockActionResult Delete( string key )
        {
            using ( var rockContext = new RockContext() )
            {
                var entityService = new {{ ServiceName }}( rockContext );
                var entity = entityService.Get( key, !PageCache.Layout.Site.DisablePredictableIds );

                if ( entity == null )
                {
                    return ActionBadRequest( $"{{'{'}}{{ EntityName }}.FriendlyTypeName} was not found." );
                }

                if ( !{% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Security.Authorization.EDIT, RequestContext.CurrentPerson ) )
                {
                    return ActionBadRequest( $"Not authorized to delete this ${{'{'}}{{ EntityName }}.FriendlyTypeName}." );
                }

                if ( !entityService.CanDelete( entity, out var errorMessage ) )
                {
                    return ActionBadRequest( errorMessage );
                }

                entityService.Delete( entity );
                rockContext.SaveChanges();

                return ActionOk( this.GetParentPageUrl() );
            }
        }

        #endregion
    }
}
