<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="row">
        <div class="col-md-12">
            <a class="btn btn-default btn-sm margin-b-md pull-right" href="#" @click.prevent="onSelectScopes">
                OpenID Connect Scopes
            </a>
        </div>
    </div>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          title="OpenID Connect Clients"
          itemTerm="Authentication Client"
          :entityTypeGuid="EntityType.AuthClient"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false"
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onGridSettingsClick"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="clientId"
                    title="Client Id"
                    field="clientId"
                    :filter="textValueFilter"
                    visiblePriority="md"
                    width="50%" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       width="120"
                       :filter="booleanValueFilter"
                       visiblePriority="xs" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { BooleanColumn, TextColumn, textValueFilter, booleanValueFilter, DeleteColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { AuthClientListOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/AuthClientList/authClientListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, PreferenceKey, GridSettingsOptions } from "./AuthClientList/types.partial";
    import { computed, reactive, ref, watch } from "vue";
    import GridSettingsModal from "./AuthClientList/gridSettingsModal.partial.obs";

    const config = useConfigurationValues<ListBlockBox<AuthClientListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        name: preferences.getValue(PreferenceKey.FilterName),
        isActive: preferences.getValue(PreferenceKey.FilterActiveStatus),
    });

    // #endregion

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.name
            || !!gridSettings.value.isActive;
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete auth client.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
    * Called when the grid setting icon is clicked, displays the block filters.
    */
    function onGridSettingsClick(): void {
        isGridSettingsVisible.value = true;
    }

    /**
    * Called when the scopes button is clicked.
    */
    function onSelectScopes(): void {
        if (config.navigationUrls?.[NavigationUrlKey.ScopePage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.ScopePage];
        }
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(PreferenceKey.FilterName, gridSettings.value.name ?? "");
        preferences.setValue(PreferenceKey.FilterActiveStatus, gridSettings.value.isActive ?? "");

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
