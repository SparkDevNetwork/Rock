<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <PasswordlessLoginStartStep v-if="passwordlessLoginStep.isStart"
                                v-model="passwordlessLoginStartRequest"
                                :disabled="disabled"
                                :isMobileForced="isMobileForced"
                                @start="onStartPasswordlessLogin" />

    <PasswordlessLoginVerifyStep v-else-if="passwordlessLoginStep.isVerify"
                                 v-model="passwordlessLoginVerifyOptions"
                                 v-model:submitPasswordlessLoginVerification="submitPasswordlessLoginVerification"
                                 :communicationType="communicationType"
                                 :disabled="disabled"
                                 :isMobileForced="isMobileForced"
                                 @resendCode="onResendCode"
                                 @verify="onVerifyPasswordlessLogin" />
</template>

<script setup lang="ts">
    import { computed, onMounted, onUnmounted, PropType, ref, watch } from "vue";
    import { PasswordlessCommunicationType } from "./types.partial";
    import PasswordlessLoginStartStep from "./passwordlessLoginStartStep.partial.obs";
    import PasswordlessLoginVerifyStep from "./passwordlessLoginVerifyStep.partial.obs";
    import { PasswordlessLoginStep } from "@Obsidian/Enums/Blocks/Security/Login/passwordlessLoginStep";
    import { LoginInitializationBox } from "@Obsidian/ViewModels/Blocks/Security/Login/loginInitializationBox";
    import { PasswordlessLoginOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginOptionsBag";
    import { PasswordlessLoginStartRequestBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginStartRequestBag";
    import { PasswordlessLoginVerifyOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginVerifyOptionsBag";
    import { PasswordlessLoginVerifyRequestBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginVerifyRequestBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PasswordlessLoginOptionsBag>,
            required: true
        },
        config: {
            type: Object as PropType<LoginInitializationBox>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "start", value: PasswordlessLoginStartRequestBag): void,
        (e: "update:modelValue", value: PasswordlessLoginOptionsBag): void,
        (e: "verify", value: PasswordlessLoginVerifyRequestBag): void,
    }>();

    // #region Values

    const passwordlessLoginStartRequest = ref<PasswordlessLoginStartRequestBag>({
        shouldSendEmailCode: false,
        shouldSendEmailLink: false,
        shouldSendSmsCode: false,
        email: null,
        phoneNumber: null
    });

    const passwordlessLoginVerifyOptions = ref<PasswordlessLoginVerifyOptionsBag>({
        code: props.modelValue?.code,
        isPersonSelectionRequired: props.modelValue?.isPersonSelectionRequired,
        matchingPeople: props.modelValue?.matchingPeople,
        matchingPersonValue: null,
        state: props.modelValue?.state
    });

    /**
     * Enables programmatic submission of the Passwordless Login Verify form.
     */
    const submitPasswordlessLoginVerification = ref(false);

    /**
     * Initialize with Start step unless we need to automatically submit the verification code.
     */
    const passwordlessLoginStep = computed(() => ({
        isStart: internalStep.value === PasswordlessLoginStep.Start,
        isVerify: internalStep.value === PasswordlessLoginStep.Verify
    }));

    // #endregion

    // #region Computed Values

    const internalCode = computed<string>({
        get() {
            return props.modelValue.code ?? "";
        },
        set(newValue) {
            emit("update:modelValue", {
                ...props.modelValue,
                code: newValue
            });
        }
    });

    const internalState = computed<string>({
        get() {
            return props.modelValue.state ?? "";
        },
        set(newValue) {
            emit("update:modelValue", {
                ...props.modelValue,
                state: newValue
            });
        }
    });

    const internalStep = computed<PasswordlessLoginStep>({
        get() {
            return props.modelValue.step;
        },
        set(newValue: PasswordlessLoginStep) {
            emit("update:modelValue", {
                ...props.modelValue,
                step: newValue
            });
        }
    });

    const communicationType = computed<PasswordlessCommunicationType>(() => passwordlessLoginStartRequest.value.email ? "email" : passwordlessLoginStartRequest.value.phoneNumber ? "phone number" : "data");

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the "Resend code" button being clicked.
     *
     * @param passwordlessLoginStepValue
     */
    function onResendCode(): void {
        internalCode.value = "";
        passwordlessLoginVerifyOptions.value.code = "";
        internalStep.value = PasswordlessLoginStep.Start;
    }

    /**
     * Event handler for the Passwordless Login Start form being submitted.
     */
    function onStartPasswordlessLogin(): void {
        // Make sure the code and state are cleared before starting a new passwordless authentication session.
        internalCode.value = "";
        passwordlessLoginVerifyOptions.value.code = "";
        internalState.value = "";

        emit("start", passwordlessLoginStartRequest.value);
    }

    /**
     * Event handler for the Passwordless Login Verify form being submitted.
     * Handles the redirect to the return URL if authentication is successful.
     */
    async function onVerifyPasswordlessLogin(): Promise<void> {
        emit("verify", {
            code: passwordlessLoginVerifyOptions.value.code,
            matchingPersonValue: passwordlessLoginVerifyOptions.value.matchingPersonValue,
            state: passwordlessLoginVerifyOptions.value.state,
        });
    }

    // #endregion

    // #region Watchers

    // Update the child passwordless verify options when the parent passwordless options are updated.
    watch(() => props.modelValue, (newPasswordlessLoginOptions, oldPasswordlessLoginOptions) => {
        // Only update the fields that were changed so we don't overwrite everything on the child options.
        if (newPasswordlessLoginOptions.code !== oldPasswordlessLoginOptions.code) {
            passwordlessLoginVerifyOptions.value.code = newPasswordlessLoginOptions.code;
        }

        if (newPasswordlessLoginOptions.isPersonSelectionRequired !== oldPasswordlessLoginOptions.isPersonSelectionRequired) {
            passwordlessLoginVerifyOptions.value.isPersonSelectionRequired = newPasswordlessLoginOptions.isPersonSelectionRequired;
        }

        if (newPasswordlessLoginOptions.matchingPeople !== oldPasswordlessLoginOptions.matchingPeople) {
            passwordlessLoginVerifyOptions.value.matchingPeople = newPasswordlessLoginOptions.matchingPeople;
        }

        if (newPasswordlessLoginOptions.state !== oldPasswordlessLoginOptions.state) {
            passwordlessLoginVerifyOptions.value.state = newPasswordlessLoginOptions.state;
        }
    });

    // #endregion

    // If the page was loaded as a result of clicking a passwordless login link,
    // then automatically submit the form.
    onMounted(() => {
        if (props.modelValue.isAutomaticVerificationRequired) {
            submitPasswordlessLoginVerification.value = true;
        }
    });

    onUnmounted(() => {
        // Reset to the start step when this component is unmounted.
        // We don't want to do this after mounting because the
        // step can be externally overridden.
        internalStep.value = PasswordlessLoginStep.Start;
    });
</script>