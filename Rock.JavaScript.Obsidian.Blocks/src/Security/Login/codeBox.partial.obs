<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField
        v-model="internalModelValue"
        name="codebox"
        :rules="rules">
        <template #default="{uniqueId, field}">
            <div :class="['form-group rock-code-box', isRequired ? 'required' : '']">
                <div class="control-wrapper">
                    <div class="d-flex" ref="codeContainer">
                        <input
                            v-for="(character, index) in characters"
                            v-model="characters[index]"
                            autocomplete="one-time-code"
                            :autofocus="index === 0"
                            :class="`form-control flex-grow-1 flex-sm-grow-0 flex-shrink-1 ${index > 0 ? 'ml-1' : ''}`"
                            :disabled="disabled"
                            :id="`${uniqueId}-${index}`"
                            :key="index"
                            :maxlength="maxLength"
                            type="text"
                            @input="onInput($event, index)"
                            @focus="onFocus(index)" />
                    </div>
                </div>
            </div>
        </template>
    </RockFormField>
</template>

<style scoped>
.rock-code-box input {
    width: 47px;
    height: 64px;
    text-align: center;
    font-size: 24px;
}
</style>

<script setup lang="ts">
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { normalizeRules, rulesPropType } from "@Obsidian/ValidationRules";
    import { computed, nextTick, ref, reactive, PropType, VNodeRef, watch } from "vue";

    type CodeBoxModelModifiers = {
        capitalize?: unknown
    };

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: false,
            default: null
        },

        allowedChars: {
            type: Object as PropType<RegExp>,
            required: false,
            default: /^[a-zA-Z0-9]$/
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },

        maxLength: {
            type: Number as PropType<number>,
            required: true
        },

        modelModifiers: {
            type: Object as PropType<CodeBoxModelModifiers>,
            required: false,
            default: null
        },

        rules: rulesPropType,

        updateOnComplete: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void,
        (e: "complete", value: string): void
    }>();

    //#region Values

    const internalModelValue = useVModelPassthrough(props, "modelValue", emit);

    const codeContainer = ref<VNodeRef | undefined>(undefined);

    const characters = reactive<(string | null | undefined)[]>([]);

    setCharactersFromModelValue();

    //#endregion

    //#region Computed Values

    /** The internal rules we will be used for calculations. */
    const internalRules = computed(() => normalizeRules(props.rules));

    /** Determines if this field is marked as required. */
    const isRequired = computed(() => internalRules.value.includes("required"));

    //#endregion

    //#region Event Handlers

    /**
     * Event handler for an input receiving input.
     *
     * @param event The input event.
     * @param index The code character input index.
     */
    function onInput(event: Event, index: number): void {
        if (!isInputEvent(event)) {
            return;
        }

        const input = getCodeInputAt(index);

        if (!input || input !== event.target) {
            return;
        }

        const modifiedString = applyModifications(input.value);
        const modifiedCharacters = modifiedString.split("");

        let lastFilledIndex = -1;
        for (let i = 0; i < modifiedCharacters.length; i++) {
            if (index + i < props.maxLength) {
                lastFilledIndex = index + i;
                characters[lastFilledIndex] = modifiedCharacters[i];
            }
        }

        // Emit first, then focus on the next tick.
        tryEmitCode();

        nextTick(() => {
            if (lastFilledIndex !== -1) {
                // Focus on the next input.
                const nextInput = lastFilledIndex < props.maxLength - 2 ? getCodeInputAt(lastFilledIndex + 1) : getCodeInputAt(lastFilledIndex);
                if (nextInput) {
                    nextInput.focus();
                }
            }
            else if (event.inputType === "deleteContentBackward") {
                // Focus on the previous input.
                const prevInput = index === 0 ? getCodeInputAt(index) : getCodeInputAt(index - 1);
                if (prevInput) {
                    prevInput.focus();
                }
            }
        });
    }

    /**
     * Event handler for an input being focused.
     *
     * @param index The input index.
     */
    function onFocus(index: number): void {
        const input = getCodeInputAt(index);

        if (input) {
            input.select();
        }
    }

    //#endregion

    //#region Functions

    /**
     * Applies model modifications to a single code character.
     *
     * @param codeCharacter The code character to which to apply modifications.
     */
    function applyModifications(codeCharacter: string): string {
        if (codeCharacter && props.modelModifiers?.capitalize) {
            return codeCharacter.toUpperCase();
        }

        return codeCharacter;
    }

    /**
     * Gets the code character input element at a given index.
     *
     * @param index The code character input index.
     */
    function getCodeInputAt(index: number): HTMLInputElement {
        return (codeContainer.value.children)[index];
    }

    /**
     * Determines whether every character in the code is complete.
     */
    function isCodeComplete(): boolean {
        for (const character of characters) {
            if (character == null || character == undefined) {
                return false;
            }
        }
        return true;
    }

    /**
     * Determines whether the event is an InputEvent.
     *
     * @param event The event to check.
     */
    function isInputEvent(event: unknown): event is InputEvent {
        return !!event && typeof event === "object" && "inputType" in event;
    }

    /**
     * Sets characters from props.modelValue if different than current value.
     *
     * If applying modifications to props.modelValue results in a different value,
     * then this method will emit the new value.
     */
    function setCharactersFromModelValue(): void {
        if (!characters.length || props.modelValue != characters.join("")) {
            if (props.modelValue) {
                for (let index = 0; index < props.maxLength; index++) {
                    characters[index] = applyModifications(props.modelValue.charAt(index));
                }

                const newModelValue = characters.join("");
                if (props.modelValue != newModelValue) {
                    nextTick(() => {
                        tryEmitCode();
                    });
                }
            }
            else {
                for (let index = 0; index < props.maxLength; index++) {
                    characters[index] = null;
                }
            }
        }
    }

    /**
     * Tries to emit "update:modelValue" and "complete" events if code is valid.
     */
    function tryEmitCode(): boolean {
        const isComplete = isCodeComplete();
        if (!props.updateOnComplete || isComplete) {
            const code = characters.join("");
            emit("update:modelValue", code);

            if (isComplete) {
                emit("complete", code);
            }

            return true;
        }

        return false;
    }

    //#endregion

    //#region Watchers

    watch(() => props.modelValue, () => {
        setCharactersFromModelValue();
    });

    //#endregion
</script>
