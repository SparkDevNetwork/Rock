<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm @submit="onCredentialLoginSubmitted">
        <div v-if="config.promptMessage" v-html="config.promptMessage"></div>

        <TextBox
            v-model="username"
            :disabled="disabled"
            :isRequiredIndicatorHidden="true"
            :label="usernameFieldLabel"
            rules="required"
            type="text"
            ></TextBox>
        <TextBox
            v-model="password"
            :disabled="disabled"
            :isRequiredIndicatorHidden="true"
            label="Password"
            rules="required"
            type="password"></TextBox>
        <InlineCheckBox
            v-model="rememberMe"
            :disabled="disabled"
            label="Keep me logged in"></InlineCheckBox>

        <RockButton
            autoDisable
            :btnType="BtnType.Primary"
            :class="isMobileForced? 'btn-block' : 'btn-block d-sm-none'"
            :disabled="disabled"
            type="submit">Log In</RockButton>
        <RockButton
            v-if="!isMobileForced"
            autoDisable
            :btnType="BtnType.Primary"
            class="d-none d-sm-inline-block"
            :disabled="disabled"
            type="submit">Log In</RockButton>

        <RockButton
            v-if="!config.hideNewAccountOption"
            autoDisable
            :btnType="BtnType.Action"
            :class="isMobileForced ? 'btn-block mt-2' : 'btn-block mt-2 d-sm-none'"
            :disabled="disabled"
            type="button"
            @click="onRegisterClicked">{{ newAccountButtonText }}</RockButton>
        <RockButton
            v-if="!isMobileForced && !config.hideNewAccountOption"
            autoDisable
            :btnType="BtnType.Action"
            class="ml-1 d-none d-sm-inline-block"
            :disabled="disabled"
            type="button"
            @click="onRegisterClicked">{{ newAccountButtonText }}</RockButton>

        <RockButton
            autoDisable
            :btnType="BtnType.Link"
            :class="isMobileForced ? 'btn-block mt-2' : 'btn-block mt-2 d-sm-none'"
            :disabled="disabled"
            type="button"
            @click="onForgotAccountClicked">Forgot Account</RockButton>
        <RockButton
            v-if="!isMobileForced"
            autoDisable
            :btnType="BtnType.Link"
            class="d-none d-sm-inline-block ml-1"
            :disabled="disabled"
            type="button"
            @click="onForgotAccountClicked">Forgot Account</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { CredentialLoginRequestBag } from "@Obsidian/ViewModels/Blocks/Security/Login/credentialLoginRequestBag";
    import { LoginInitializationBox } from "@Obsidian/ViewModels/Blocks/Security/Login/loginInitializationBox";

    const props = defineProps({
        config: {
            type: Object as PropType<LoginInitializationBox>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "forgotAccount"): void,
        (e: "login", _value: CredentialLoginRequestBag): void,
        (e: "register"): void
    }>();

    // #region Values

    const username = ref<string>("");
    const password = ref<string>("");
    const rememberMe = ref<boolean>(false);

    // #endregion

    // #region Computed Values

    const usernameFieldLabel = computed(() => props.config.usernameFieldLabel || "Username");
    const newAccountButtonText = computed(() => props.config.newAccountButtonText || "Register");

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the credential login form being submitted.
     */
    function onCredentialLoginSubmitted(): void {
        emit("login", {
            username: username.value,
            password: password.value,
            rememberMe: rememberMe.value
        });
    }

    /**
     * Event handler for the Forgot Account button being clicked.
     */
    function onForgotAccountClicked(): void {
        emit("forgotAccount");
    }

    /**
     * Event handler for the Register button being clicked.
     */
    function onRegisterClicked(): void {
        emit("register");
    }

    // #endregion
</script>