<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm @submit="onCredentialLoginSubmitted">
        <div v-if="promptMessage" v-html="promptMessage"></div>

        <TextBox v-model="username"
                 :disabled="disabled"
                 :isRequiredIndicatorHidden="true"
                 :label="usernameFieldLabel"
                 rules="required"
                 type="text" />

        <TextBox v-model="password"
                 :disabled="disabled"
                 :isRequiredIndicatorHidden="true"
                 label="Password"
                 rules="required"
                 type="password" />

        <InlineCheckBox v-if="!isRememberMeHidden"
                        v-model="rememberMe"
                        :disabled="disabled"
                        label="Keep me logged in" />

        <RockButton autoDisable
                    :btnType="BtnType.Primary"
                    :class="isMobile ? 'btn-block' : 'd-inline-block'"
                    :disabled="disabled"
                    type="submit">Log In</RockButton>

        <RockButton v-if="!isNewAccountHidden"
                    autoDisable
                    :btnType="BtnType.Action"
                    :class="isMobile ? 'btn-block mt-2' : 'ml-1 d-inline-block'"
                    :disabled="disabled"
                    type="button"
                    @click="onRegisterClicked">{{ newAccountButtonText }}</RockButton>

        <RockButton autoDisable
                    :btnType="BtnType.Link"
                    :class="isMobile ? 'btn-block mt-2' : 'ml-1 d-inline-block'"
                    :disabled="disabled"
                    type="button"
                    @click="onForgotAccountClicked">Forgot Account</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import { useBreakpoint } from "../types.partial";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { CredentialLoginRequestBag } from "@Obsidian/ViewModels/Blocks/Security/Login/credentialLoginRequestBag";

    const props = defineProps({
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isNewAccountHidden: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isRememberMeHidden: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        newAccountButtonText: {
            type: String as PropType<string | null | undefined>,
            required: false
        },
        promptMessage: {
            type: String as PropType<string | null | undefined>,
            required: false
        },
        usernameFieldLabel: {
            type: String as PropType<string | null | undefined>,
            required: false
        }
    });

    const emit = defineEmits<{
        (e: "forgotAccount"): void,
        (e: "login", _value: CredentialLoginRequestBag): void,
        (e: "register"): void
    }>();

    // #region Values

    const breakpoint = useBreakpoint();
    const username = ref<string>("");
    const password = ref<string>("");
    const rememberMe = ref<boolean>(false);

    // #endregion

    // #region Computed Values

    const usernameFieldLabel = computed(() => props.usernameFieldLabel || "Username");
    const newAccountButtonText = computed(() => props.newAccountButtonText || "Register");
    const isMobile = computed<boolean>(() => props.isMobileForced || breakpoint.value === "xs");

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the credential login form being submitted.
     */
    function onCredentialLoginSubmitted(): void {
        emit("login", {
            username: username.value,
            password: password.value,
            rememberMe: rememberMe.value
        });
    }

    /**
     * Event handler for the Forgot Account button being clicked.
     */
    function onForgotAccountClicked(): void {
        emit("forgotAccount");
    }

    /**
     * Event handler for the Register button being clicked.
     */
    function onRegisterClicked(): void {
        emit("register");
    }

    // #endregion
</script>