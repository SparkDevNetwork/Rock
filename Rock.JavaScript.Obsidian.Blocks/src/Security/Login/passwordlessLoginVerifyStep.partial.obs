<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm v-model:submit="internalSubmitPasswordlessLoginVerification"
              @submit="onPasswordlessLoginVerifySubmitted">

        <div class="mb-2" ref="instructionsDiv">Please enter your confirmation code below.</div>

        <CodeBox v-model.capitalize="internalCode"
                 :disabled="disabled"
                 :maxLength="6"
                 rules="required"
                 validationTitle="Code"
                 @complete="onCodeCompleted" />

        <template v-if="modelValue.isPersonSelectionRequired">
            <p>The {{ internalCommunicationType }} you provided is matched to several different individuals. Please select the one that is you.</p>
            <RadioButtonList v-model="internalMatchingPersonValue"
                             v-model:items="internalMatchingPeople" />
        </template>

        <RockButton :btnType="BtnType.Primary"
                    :class="['complete-sign-in-btn', isMobile ? 'btn-block' : '']"
                    :disabled="disabled"
                    type="submit">Complete Sign In</RockButton>

        <RockButton autoDisable
                    :btnType="BtnType.Action"
                    :class="isMobile ? 'btn-block mt-2' : 'ml-1'"
                    :disabled="disabled"
                    type="button"
                    @click="onResendCodeClicked">Resend code</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import { PasswordlessCommunicationType } from "./types.partial";
    import CodeBox from "../codeBox.obs";
    import { useBreakpoint } from "../types.partial";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { PasswordlessLoginVerifyOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginVerifyOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PasswordlessLoginVerifyOptionsBag>,
            required: true
        },
        communicationType: {
            type: String as PropType<PasswordlessCommunicationType>,
            required: false,
            default: "data"
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        submitPasswordlessLoginVerification: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "resendCode"): void,
        (e: "update:submitPasswordlessLoginVerification", _value: boolean): void
        (e: "update:modelValue", _value: PasswordlessLoginVerifyOptionsBag),
        (e: "verify"): void,
    }>();

    //#region Values

    const internalSubmitPasswordlessLoginVerification = useVModelPassthrough(props, "submitPasswordlessLoginVerification", emit);
    const instructionsDiv = ref<HTMLElement | undefined>();
    const breakpoint = useBreakpoint();

    //#endregion

    //#region Computed Values

    const internalCode = computed({
        get() {
            return props.modelValue.code || "";
        },
        set(newValue: string) {
            emit("update:modelValue", {
                ...props.modelValue,
                code: newValue
            });
        }
    });

    const internalCommunicationType = computed(() => props.communicationType || "data");

    const internalMatchingPeople = computed({
        get() {
            return props.modelValue.matchingPeople ?? [];
        },
        set(newValue: ListItemBag[]) {
            emit("update:modelValue", {
                ...props.modelValue,
                matchingPeople: newValue
            });
        }
    });

    const internalMatchingPersonValue = computed({
        get() {
            return props.modelValue.matchingPersonValue || "";
        },
        set(newValue: string) {
            emit("update:modelValue", {
                ...props.modelValue,
                matchingPersonValue: newValue
            });
        }
    });

    const isMobile = computed<boolean>(() => props.isMobileForced || breakpoint.value === "xs");

    //#endregion

    //#region Event Handlers

    function onPasswordlessLoginVerifySubmitted(): void {
        emit("verify");
    }

    function onResendCodeClicked(): void {
        internalCode.value = "";
        internalMatchingPersonValue.value = "";
        internalMatchingPeople.value = [];
        emit("resendCode");
    }

    function onCodeCompleted(): void {
        const signInButton = instructionsDiv.value?.parentElement?.querySelector<HTMLButtonElement>("button.complete-sign-in-btn");

        if (signInButton) {
            signInButton.focus();
        }
    }

    //#endregion
</script>