<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockValidation :errors="validationErrors" />

    <RockForm @submit="onPasswordlessLoginStartSubmitted" >
        <TextBox
            v-model="emailOrPhoneNumber"
            :disabled="disabled"
            :isRequiredIndicatorHidden="true"
            :label="label"
            :rules="['required']"></TextBox>

        <RockButton
            :btnType="BtnType.Primary"
            :class="isMobileForced ? 'btn-block' : 'btn-block d-sm-none'"
            :disabled="disabled"
            type="submit">Continue</RockButton>
        <RockButton
            v-if="!isMobileForced"
            :btnType="BtnType.Primary"
            class="d-none d-sm-inline-block"
            :disabled="disabled"
            type="submit">Continue</RockButton>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import RockValidation from "@Obsidian/Controls/rockValidation.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { isEmail } from "@Obsidian/Utility/email";
    import { FormError } from "@Obsidian/Utility/form";
    import { formatPhoneNumber, getPhoneNumberConfiguration, stripPhoneNumber } from "@Obsidian/Utility/phone";
    import { validateValue } from "@Obsidian/ValidationRules";
    import { PasswordlessLoginStartRequestBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginStartRequestBag";
    import { PhoneNumberBoxGetConfigurationResultsBag } from "@Obsidian/ViewModels/Rest/Controls/phoneNumberBoxGetConfigurationResultsBag";
    import { PhoneNumberCountryCodeRulesConfigurationBag } from "@Obsidian/ViewModels/Rest/Controls/phoneNumberCountryCodeRulesConfigurationBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PasswordlessLoginStartRequestBag>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        isMobileForced: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "start"): void,
        (e: "update:modelValue", _value: PasswordlessLoginStartRequestBag): void
    }>();

    //#region Values

    const label = "Email or Phone";
    const validationErrors = ref<FormError[]>([]);
    const phoneNumberConfig = ref<PhoneNumberBoxGetConfigurationResultsBag>();
    const emailOrPhoneNumberRaw = ref<string>("");

    //#endregion

    //#region Computed Values

    const emailOrPhoneNumber = computed<string>({
        get() {
            return emailOrPhoneNumberRaw.value;
        },
        set(newValue: string) {
            emailOrPhoneNumberRaw.value = newValue;
            validateEmailOrPhoneNumber(newValue);
        }
    });

    //#endregion

    //#region Event Handlers

    /**
     * Handles the event where the passwordless login start form is submitted.
     */
    function onPasswordlessLoginStartSubmitted(): void {
        validateForm();

        if (validationErrors.value.length === 0) {
            emit("start");
        }
    }

    //#endregion

    //#region Functions

    /** Get all rules for any country code */
    function getConfiguredRules(): PhoneNumberCountryCodeRulesConfigurationBag[] {
        const rules = phoneNumberConfig.value?.rules;
        const configuredRules: PhoneNumberCountryCodeRulesConfigurationBag[] = [];
        if (rules) {
            for (const key in rules) {
                const bag = rules[key];
                configuredRules.push(...bag);
            }
        }
        return configuredRules;
    }

    /**
     * Loads the phone number configuration for validation.
     */
    async function loadPhoneNumberConfig(): Promise<void> {
        phoneNumberConfig.value = await getPhoneNumberConfiguration();
    }

    /**
     *
     */
    function validateForm(): void {
        const errorMessages = validateValue(emailOrPhoneNumber.value, validateEmailOrPhoneNumber);

        if (errorMessages && errorMessages.length) {
            validationErrors.value = errorMessages.map(
                errorMessage => ({
                    name: label,
                    text: errorMessage
                })
            );
        }
        else {
            validationErrors.value = [];
        }
    }

    /**
     * Validates the "Email or Phone" field and emits modelValue updates depending on validity.
     *
     * @param value the value to validate.
     */
    function validateEmailOrPhoneNumber(value: unknown): string | boolean {
        if (!value) {
            return true;
        }

        let errors = validateEmail(value);
        if (errors === "") {
            emit("update:modelValue", {
                ...props.modelValue,
                email: value as string,
                phoneNumber: null,
                shouldSendEmailCode: true,
                shouldSendEmailLink: true,
                shouldSendSmsCode: false
            });
            return true;
        }

        const formattedNumber = formatPhoneNumber(stripPhoneNumber(value as string));
        if (formattedNumber) {
            errors = validatePhoneNumber(stripPhoneNumber(formattedNumber));
            if (errors === "") {
                emailOrPhoneNumberRaw.value = formattedNumber;
                emit("update:modelValue", {
                    ...props.modelValue,
                    email: null,
                    phoneNumber: formattedNumber,
                    shouldSendEmailCode: false,
                    shouldSendEmailLink: false,
                    shouldSendSmsCode: true
                });
                return true;
            }
        }

        // Clear modelValue when invalid.
        emit("update:modelValue", {
            ...props.modelValue,
            email: null,
            phoneNumber: null,
            shouldSendEmailCode: false,
            shouldSendEmailLink: false,
            shouldSendSmsCode: false
        });
        return "must be a valid email or phone number";
    }

    /**
     * Validates a value as an email address.
     *
     * @param value The value to validate.
     */
    function validateEmail(value: unknown): string {
        if (!value) {
            return "";
        }

        if (isEmail(value)) {
            return "";
        }

        return "Email must be a valid email address.";
    }

    /**
     * Validates a value as a phone number using the configuration retrieved from the server.
     *
     * @param value The value to validate.
     */
    function validatePhoneNumber(value: string): string {
        const rules = getConfiguredRules();

        if (!value) {
            return "";
        }

        if (rules.length === 0) {
            return "";
        }

        for (let rule of rules) {
            const regex = new RegExp(rule.match ?? "");

            if (regex.test(value)) {
                return "";
            }
        }

        return `Phone number '${value}' must be a valid phone number.`;
    }

    //#endregion

    loadPhoneNumberConfig();
</script>