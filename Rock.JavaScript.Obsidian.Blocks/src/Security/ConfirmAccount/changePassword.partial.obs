<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div>
        <NotificationBox v-if="options.errorCaption" alertType="danger">{{ options.errorCaption }}</NotificationBox>

        <div v-html="options.viewCaption"></div>

        <RockForm :hideErrors="true" @submit="onChangePasswordSubmitted">
            <fieldset>
                <legend>Enter New Password</legend>

                <TextBox v-model="password"
                    :disabled="disabled"
                    :label="newPasswordLabel"
                    rules="required"
                    type="password"></TextBox>
                <TextBox v-model="passwordConfirm"
                    :disabled="disabled"
                    label="Confirm Password"
                    :rules="['required', passwordMatchRule]"
                    type="password"></TextBox>
            </fieldset>

            <div class="actions">
                <RockButton :btnType="BtnType.Primary"
                    :disabled="disabled"
                    type="submit">Change Password</RockButton>
            </div>
        </RockForm>
    </div>
</template>

<script setup lang="ts">
    import { PropType, ref } from "vue";
    import { ChangePasswordEvent } from "./events";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { ConfirmAccountChangePasswordViewOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/ConfirmAccount/confirmAccountChangePasswordViewOptionsBag";
    import { ValidationResult } from "@Obsidian/ValidationRules";

    const props = defineProps({
        options: {
            type: Object as PropType<ConfirmAccountChangePasswordViewOptionsBag>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        }
    });

    const emit = defineEmits<{
        (e: "changePassword", value: ChangePasswordEvent): void,
    }>();

    //#region Values

    const newPasswordLabel = "New Password";
    const password = ref<string>("");
    const passwordConfirm = ref<string>("");

    //#endregion

    //#region Event Handlers

    function onChangePasswordSubmitted(): void {
        emit("changePassword", {
            code: props.options.code || "",
            password: password.value
        });
    }

    //#endregion

    //#region Functions

    /**
     * Validates that the password confirm value matches the password value.
     *
     * @param _value: The password confirm value.
     * @param _params
     */
    function passwordMatchRule(value: unknown, _params?: unknown[]): ValidationResult {
        if (value === password.value) {
            return true;
        }

        return `and ${newPasswordLabel} do not match`;
    }

    //#endregion
</script>