<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <TextBox label="Username"
                         v-model="username" />
            </div>

            <div class="col-md-4">
                <ComponentPicker label="Authentication Provider"
                                 v-model="authenticationProvider"
                                 containerType="Rock.Security.AuthenticationContainer"
                                 :showBlankItem="true" />
            </div>

            <div class="col-md-4">
                <DateRangePicker label="Created"
                                 v-model="createdDate" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <DateRangePicker label="Last Login"
                                 v-model="lastLoginDate" />
            </div>

            <div class="col-md-4">
                <DropDownList label="Is Confirmed"
                              v-model="isConfirmed"
                              :items="yesNoOptions"
                              :showBlankItem="true" />
            </div>

            <div class="col-md-4">
                <DropDownList label="Is Locked Out"
                              v-model="isLockedOut"
                              :items="yesNoOptions"
                              :showBlankItem="true" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import ComponentPicker from "@Obsidian/Controls/componentPicker.obs";
    import DateRangePicker from "@Obsidian/Controls/dateRangePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { DateRangeParts } from "@Obsidian/Types/Controls/dateRangePicker";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const username = ref(props.modelValue.username ?? "");
    const authenticationProvider = ref(props.modelValue.authenticationProvider);
    const createdDate = ref({
        lowerValue: props.modelValue.dateCreatedLowerValue,
        upperValue: props.modelValue.dateCreatedUpperValue
    } as DateRangeParts);
    const lastLoginDate = ref({
        lowerValue: props.modelValue.lastLoginDateLowerValue,
        upperValue: props.modelValue.lastLoginDateUpperValue
    } as DateRangeParts);
    const isConfirmed = ref(props.modelValue.isConfirmed ?? "");
    const isLockedOut = ref(props.modelValue.isLockedOut ?? "");
    const isVisible = useVModelPassthrough(props, "visible", emit);
    const yesNoOptions = [
        {
            text: "Yes",
            value: "Yes"
        },
        {
            text: "No",
            value: "No"
        }
    ] as ListItemBag[];

    function onSave(): void {
        const value: GridSettingsOptions = {
            username: username.value,
            authenticationProvider: authenticationProvider.value,
            dateCreatedLowerValue: createdDate.value?.lowerValue,
            dateCreatedUpperValue: createdDate.value?.upperValue,
            lastLoginDateLowerValue: lastLoginDate.value?.lowerValue,
            lastLoginDateUpperValue: lastLoginDate.value?.upperValue,
            isConfirmed: isConfirmed.value,
            isLockedOut: isLockedOut.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        username.value = props.modelValue.username ?? "";
        authenticationProvider.value = props.modelValue.authenticationProvider;
        createdDate.value = {
            lowerValue: props.modelValue.dateCreatedLowerValue,
            upperValue: props.modelValue.dateCreatedUpperValue
        } as DateRangeParts;
        lastLoginDate.value = {
            lowerValue: props.modelValue.lastLoginDateLowerValue,
            upperValue: props.modelValue.lastLoginDateUpperValue
        } as DateRangeParts;
        isConfirmed.value = props.modelValue.isConfirmed ?? "";
        isLockedOut.value = props.modelValue.isLockedOut ?? "";
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
