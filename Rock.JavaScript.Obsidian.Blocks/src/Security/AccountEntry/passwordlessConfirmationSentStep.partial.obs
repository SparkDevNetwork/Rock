<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="options.caption" alertType="warning">{{ options.caption }}</NotificationBox>
    <RockForm @submit="onFormSubmitted">
        <CodeBox v-model.capitalize="internalValue"
                 :disabled="disabled"
                 :maxLength="6"
                 rules="required"
                 validationTitle="Code" />

        <div class="actions d-flex d-sm-block flex-column-reverse">
            <RockButton :btnType="BtnType.Link" :class="breakpoint === 'xs' ? 'btn-block' : ''" :disabled="disabled" type="button" @click="onPreviousClicked">Previous</RockButton>
            <RockButton :btnType="BtnType.Primary" :class="breakpoint === 'xs' ? 'btn-block' : ''" :disabled="disabled" type="submit">Complete Sign In</RockButton>
        </div>
    </RockForm>
</template>

<script setup lang="ts">
    import { PropType } from "vue";
    import CodeBox from "../codeBox.obs";
    import { useBreakpoint } from "../types.partial";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { AccountEntryPasswordlessConfirmationSentStepBag } from "@Obsidian/ViewModels/Blocks/Security/AccountEntry/accountEntryPasswordlessConfirmationSentStepBag";

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },
        options: {
            type: Object as PropType<AccountEntryPasswordlessConfirmationSentStepBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "movePrevious"): void,
        (e: "submit"): void,
        (e: "update:modelValue", value: string): void,
    }>();

    //#region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const breakpoint = useBreakpoint();

    //#endregion

    //#region Event Handlers

    /**
     * Event handler for the previous button being clicked.
     */
    function onPreviousClicked(): void {
        emit("movePrevious");
    }

    /**
     * Event handler for the form being submitted.
     */
    function onFormSubmitted(): void {
        emit("submit");
    }

    //#endregion
</script>