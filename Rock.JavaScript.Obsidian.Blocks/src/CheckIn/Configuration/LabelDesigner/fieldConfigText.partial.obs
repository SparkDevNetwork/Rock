<template>
    <TextBox v-if="props.showPlaceholder"
             label="Placeholder Text"
             v-model="placeholderText" />

    <NumberBox label="Font Size"
               v-model.lazy="fontSize" />

    <div class="form-group" style="display: flex;">
        <div style="flex-grow: 1;">
            <div class="btn-group">
                <RockButton v-for="item in alignmentItems"
                            :btnType="alignment === item.value ? 'primary' : 'default'"
                            btnSize="sm"
                            @click="onAlignmentClick(item.value)">
                    <i :class="item.text"></i>
                </RockButton>
            </div>
        </div>

        <RockButton v-if="showAdaptiveFontSize"
                    :btnType="adaptiveFontSize.length > 0 ? 'primary' : 'default'"
                    btnSize="sm"
                    @click="onAdaptiveFontSizeClick">
            <i class="fa fa-text-width"></i>
        </RockButton>

        <slot name="iconButtons" />
    </div>

    <div class="form-group">
        <RockLabel>Options</RockLabel>

        <div class="control-wrapper">
            <InlineCheckBox label="Bold"
                            v-model="isBold" />

            <InlineCheckBox label="Invert Colors"
                            v-model="isColorInverted" />

            <InlineCheckBox label="Condensed Text"
                            v-model="isCondensed" />
        </div>
    </div>

    <NumberBox label="Max Length"
               v-model="maxLength"
               :minimumValue="0" />

    <Modal v-model="isAdaptiveFontSizeVisible" title="Adaptive Font Size" saveText="Save" @save="onAdaptiveFontSizeSave">
        <div>
            <KeyValueList v-model="editableAdaptiveFontSize"
                          label="Font Sizes"
                          help="If the string length is equal to or greater than the value of the key then the associated value will be used as the font size. The highest matching key will be used."
                          keyPlaceholder="Length"
                          valuePlaceholder="Font size" />
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import KeyValueList from "@Obsidian/Controls/keyValueList.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { HorizontalTextAlignment } from "@Obsidian/Enums/CheckIn/Labels/horizontalTextAlignment";
    import { TextFieldConfigurationBag } from "@Obsidian/ViewModels/CheckIn/Labels/textFieldConfigurationBag";
    import { asBoolean } from "@Obsidian/Utility/booleanUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { PropType, ref, watch } from "vue";
    import { LabelUndoManager } from "./undoManager.partial";
    import { KeyValueItem } from "@Obsidian/Types/Controls/keyValueItem";

    const props = defineProps({
        labelManager: {
            type: Object as PropType<LabelUndoManager>,
            required: true
        },

        showPlaceholder: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        showAdaptiveFontSize: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const placeholderText = ref("");
    const fontSize = ref<number | null>(12);
    const alignment = ref<string>(`${HorizontalTextAlignment.Left}`);
    const isBold = ref(false);
    const isColorInverted = ref(false);
    const isCondensed = ref(false);
    const maxLength = ref<number | null>(null);

    const adaptiveFontSize = ref<KeyValueItem[]>([]);
    const editableAdaptiveFontSize = ref<KeyValueItem[]>([]);
    const isAdaptiveFontSizeVisible = ref(false);

    const alignmentItems: ListItemBag[] = [
        {
            value: `${HorizontalTextAlignment.Left}`,
            text: "fa fa-align-left"
        },
        {
            value: `${HorizontalTextAlignment.Center}`,
            text: "fa fa-align-center"
        },
        {
            value: `${HorizontalTextAlignment.Right}`,
            text: "fa fa-align-right"
        }
    ];

    /**
     * Set the internal values to match those from the selected field.
     */
    function setInternalValues(): void {
        const configuration = (props.labelManager.selectedField.value
            ?.configurationValues ?? {}) as TextFieldConfigurationBag;

        placeholderText.value = configuration.placeholderText ?? "";
        fontSize.value = toNumberOrNull(configuration.fontSize) ?? 12;
        alignment.value = getAlignment(configuration.horizontalAlignment);
        isBold.value = asBoolean(configuration.isBold);
        isColorInverted.value = asBoolean(configuration.isColorInverted);
        isCondensed.value = asBoolean(configuration.isCondensed);
        maxLength.value = toNumberOrNull(configuration.maxLength);
        adaptiveFontSize.value = decodeAdaptiveFontSize(configuration.adaptiveFontSize);
    }

    /**
     * Gets the alignment value representation used in the UI control.
     *
     * @param value The value stored in the configuration.
     *
     * @returns The value for the UI control.
     */
    function getAlignment(value: string | null | undefined): string {
        const align = toNumberOrNull(value) as HorizontalTextAlignment | undefined ?? HorizontalTextAlignment.Left;

        return `${align}`;
    }

    /**
     * Converts the configuration value into the an array of KeyValueItem pairs.
     *
     * @param configValue The raw configuration value to be converted.
     */
    function decodeAdaptiveFontSize(configValue: string | null | undefined): KeyValueItem[] {
        if (!configValue) {
            return [];
        }

        return configValue.split(";").map(value => {
            const segments = value.split("=");

            return {
                key: segments[0],
                value: segments.length >= 2 ? segments[1] : ""
            };
        });
    }

    /**
     * Encodes the adaptive font size pairs into a string representation that
     * can be saved in the configuration values.
     *
     * @param sizes The KeyValueItem pairs that need to be encoded.
     */
    function encodeAdaptiveFontSize(sizes: KeyValueItem[]): string {
        if (sizes.length === 0) {
            return "";
        }

        const pairs: string[] = [];

        for (const size of sizes) {
            const key = toNumberOrNull(size.key);
            const value = toNumberOrNull(size.value);

            if (key !== null && value !== null) {
                pairs.push(`${key}=${value}`);
            }
        }

        return pairs.join(";");
    }

    /**
     * Event handler for the text alignment buttons.
     *
     * @param value The value that was selected.
     */
    function onAlignmentClick(value: string | undefined | null): void {
        alignment.value = value as string;
    }

    /**
     * Event handler for when the Adaptive Font Size button is clicked.
     */
    function onAdaptiveFontSizeClick(): void {
        editableAdaptiveFontSize.value = [...adaptiveFontSize.value];
        isAdaptiveFontSizeVisible.value = true;
    }

    /**
     * Event handler for when the Adaptive Font Size Save button is clicked.
     */
    function onAdaptiveFontSizeSave(): void {
        adaptiveFontSize.value = [...editableAdaptiveFontSize.value];
        isAdaptiveFontSizeVisible.value = false;
    }

    // Watch for changes in the UI that require an update to the label.
    watch([placeholderText, fontSize, alignment, isBold, isColorInverted, isCondensed, maxLength, adaptiveFontSize], () => {
        props.labelManager.mutateSelectedField(field => {
            field.configurationValues = field.configurationValues ?? {};

            const fieldConfig = field.configurationValues as TextFieldConfigurationBag;

            fieldConfig.placeholderText = placeholderText.value;
            fieldConfig.fontSize = `${fontSize.value}`;
            fieldConfig.horizontalAlignment = alignment.value.toString();
            fieldConfig.isBold = isBold.value ? "true" : "false";
            fieldConfig.isColorInverted = isColorInverted.value ? "true" : "false";
            fieldConfig.isCondensed = isCondensed.value ? "true" : "false";
            fieldConfig.maxLength = `${maxLength.value}`;
            fieldConfig.adaptiveFontSize = encodeAdaptiveFontSize(adaptiveFontSize.value);
        });
    });

    // Watch for changes on the label that need to be reflected in the UI.
    watch(props.labelManager.selectedField, () => {
        setInternalValues();
    });

    setInternalValues();
</script>
