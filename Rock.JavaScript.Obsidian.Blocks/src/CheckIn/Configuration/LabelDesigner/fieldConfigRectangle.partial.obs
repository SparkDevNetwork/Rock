<template>
    <RadioButtonList label="Color"
                     v-model="color"
                     horizontal
                     :repeatColumns="2"
                     :items="colorItems" />

    <RadioButtonList label="Type"
                     v-model="type"
                     horizontal
                     :repeatColumns="2"
                     :items="typeItems" />

    <NumberBox v-if="type === 'outline'"
               label="Border Thickness"
               v-model="borderThickness"
               :minimumValue="0" />

    <NumberBox label="Corner Radius"
               help="test"
               v-model="cornerRadius"
               :minimumValue="0"
               :maximumValue="8" />
</template>

<script setup lang="ts">
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import { asBoolean } from "@Obsidian/Utility/booleanUtils";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, ref, watch } from "vue";
    import { RectangleFieldConfigurationBag } from "@Obsidian/ViewModels/CheckIn/Labels/rectangleFieldConfigurationBag";
    import { LabelUndoManager } from "./undoManager.partial";

    const props = defineProps({
        labelManager: {
            type: Object as PropType<LabelUndoManager>,
            required: true
        }
    });

    const color = ref<"black" | "white">("black");
    const type = ref<"filled" | "outline">("filled");
    const borderThickness = ref<number | null>(null);
    const cornerRadius = ref<number | null>(null);

    const colorItems: ListItemBag[] = [
        {
            value: "black",
            text: "Black"
        },
        {
            value: "white",
            text: "White"
        }
    ];

    const typeItems: ListItemBag[] = [
        {
            value: "filled",
            text: "Filled"
        },
        {
            value: "outline",
            text: "Outline"
        }
    ];

    /**
     * Set the internal values to match those from the selected field.
     */
     function setInternalValues(): void {
        const configuration = (props.labelManager.selectedField.value
            ?.configurationValues ?? {}) as RectangleFieldConfigurationBag;

        color.value = asBoolean(configuration.isBlack) ? "black" : "white";
        type.value = asBoolean(configuration.isFilled) ? "filled" : "outline";
        borderThickness.value = toNumberOrNull(configuration.borderThickness);
        cornerRadius.value = toNumberOrNull(configuration.cornerRadius);
    }

    watch([color, type, borderThickness, cornerRadius], () => {
        props.labelManager.mutateSelectedField(field => {
            field.configurationValues = field.configurationValues ?? {};

            const fieldConfig = field.configurationValues as RectangleFieldConfigurationBag;

            fieldConfig.isBlack = color.value === "black" ? "true" : "false";
            fieldConfig.isFilled = type.value === "filled" ? "true" : "false";
            fieldConfig.borderThickness = borderThickness.value?.toString();
            fieldConfig.cornerRadius = cornerRadius.value?.toString();
        });
    });

    watch(props.labelManager.selectedField, () => {
        setInternalValues();
    });

    setInternalValues();
</script>
