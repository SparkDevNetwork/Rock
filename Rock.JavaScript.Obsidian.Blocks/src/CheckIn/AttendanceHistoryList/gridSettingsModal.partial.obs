<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <DateRangePicker v-model="dateRange"
                                 label="Date Range"
                                 :disallowPastDateSelection="false" />
            </div>

            <div class="col-md-4">
                <DropDownList v-model="attended"
                              label="Attended"
                              :items="attendedItems"
                              :showBlankItem="false" />
            </div>

            <div class="col-md-4">
                <SchedulePicker v-model="schedule"
                                label="Schedule"
                                :multiple="false" />
            </div>
        </div>

        <div class="row">
            <div v-if="showPersonPicker" class="col-md-4">
                <PersonPicker v-model="person" label="Person" />
            </div>

            <div v-if="showGroupPicker" class="col-md-4">
                <DropDownList v-model="group"
                              label="Group"
                              :items="groupItems"
                              :showBlankItem="true" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { DateRangeParts } from "@Obsidian/Types/Controls/dateRangePicker";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import DateRangePicker from "@Obsidian/Controls/dateRangePicker.obs";
    import SchedulePicker from "@Obsidian/Controls/schedulePicker.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        groupItems: {
            type: Array as PropType<ListItemBag[]>,
            required: true
        },

        showPersonPicker: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        showGroupPicker: {
            type: Boolean as PropType<boolean>,
            default: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const dateRange = ref<DateRangeParts | undefined>({
        lowerValue: props.modelValue.startDate,
        upperValue: props.modelValue.endDate
    });
    const person = ref(props.modelValue.person);
    const group = ref(props.modelValue.group ?? "");
    const schedule = ref(props.modelValue.schedule ?? null);
    const attended = ref(props.modelValue.attended ?? "");

    const isVisible = useVModelPassthrough(props, "visible", emit);
    const attendedItems = [
        {
            text: "[All]",
            value: ""
        },
        {
            text: "Did Attend",
            value: "true"
        },
        {
            text: "Did Not Attend",
            value: "false"
        },
    ] as ListItemBag[];

    function onSave(): void {
        const value: GridSettingsOptions = {
            startDate: dateRange.value?.lowerValue,
            endDate: dateRange.value?.upperValue,
            person: person.value,
            group: group.value,
            schedule: schedule.value,
            attended: attended.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        dateRange.value = {
            lowerValue: props.modelValue.startDate,
            upperValue: props.modelValue.endDate
        };
        person.value = props.modelValue.person ?? undefined;
        group.value = props.modelValue.group ?? "";
        schedule.value = props.modelValue.schedule ?? null;
        attended.value = props.modelValue.attended ?? "";
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
