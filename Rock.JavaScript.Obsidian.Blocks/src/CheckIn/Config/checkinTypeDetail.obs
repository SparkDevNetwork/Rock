<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock v-if="!blockError && !hidePanel"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :title="panelName"
                 :labels="blockLabels"
                 :entityKey="entityKey"
                 :entityTypeGuid="entityTypeGuid"
                 entityTypeName="Check-in Configuration"
                 :isAuditHidden="false"
                 :isBadgesVisible="true"
                 :isDeleteVisible="isEditable"
                 :isEditVisible="isEditable"
                 :isFollowVisible="false"
                 :isSecurityHidden="true"
                 :footerSecondaryActions="footerSecondaryActions"
                 @cancelEdit="onCancelEdit"
                 @delete="onDelete"
                 @edit="onEdit"
                 @save="onSave">
        <template #view>
            <ViewPanel :modelValue="groupTypeViewBag" :options="options" />
        </template>

        <template #edit>
            <EditPanel v-model="groupTypeEditBag" :options="options" @propertyChanged="onPropertyChanged" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./CheckinTypeDetail/editPanel.partial.obs";
    import ViewPanel from "./CheckinTypeDetail/viewPanel.partial.obs";
    import { getSecurityGrant, provideSecurityGrant, refreshDetailAttributes, useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { debounce } from "@Obsidian/Utility/util";
    import { NavigationUrlKey } from "./CheckinTypeDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { CheckinTypeBag } from "@Obsidian/ViewModels/Blocks/Checkin/Config/CheckinTypeDetail/checkinTypeBag";
    import { CheckinTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Checkin/Config/CheckinTypeDetail/checkinTypeDetailOptionsBag";
import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";

    const config = useConfigurationValues<DetailBlockBox<CheckinTypeBag, CheckinTypeDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const securityGrant = getSecurityGrant(config.securityGrantToken);

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const groupTypeViewBag = ref(config.entity);
    const groupTypeEditBag = ref<CheckinTypeBag>({} as CheckinTypeBag);

    const entityTypeGuid = EntityType.GroupType;

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    // The properties that are being edited in the UI. This is used to
    // inform the server which incoming values have valid data in them.
    const validProperties = [
        "attributeValues",
        "description",
        "iconCssClass",
        "name",

        // AdvancedSettings
        "abilityLevelDetermination",
        "ageRequired",
        "displayLocCount",
        "gradeRequired",
        "refreshInterval",
        "searchRegex",

        // BarcodeSettings
        "codeAlphaLength",
        "codeAlphaNumericLength",
        "codeNumericLength",
        "codeRandom",
        "reuseCode",

        // DisplaySettings
        "familySelectTemplate",
        "hidePhotos",
        "personSelectTemplate",
        "startTemplate",
        "successTemplate",
        "successTemplateOverrideDisplayMode",

        // GeneralSettings
        "checkInType",
        "allowCheckoutAtKiosk",
        "allowCheckoutInManager",
        "enablePresence",
        "enableManager",
        "enableOverride",
        "achievementTypes",
        "autoSelectDaysBack",
        "autoSelectOptions",
        "useSameOptions",
        "preventInactivePeople",
        "preventDuplicateCheckin",

        // HeaderText
        "actionSelectHeaderTemplate",
        "checkoutPersonSelectHeaderTemplate",
        "personSelectHeaderTemplate",
        "multiPersonSelectHeaderTemplate",
        "groupTypeSelectHeaderTemplate",
        "timeSelectHeaderTemplate",
        "abilityLevelSelectHeaderTemplate",
        "locationSelectHeaderTemplate",
        "groupSelectHeaderTemplate",

        // Registration Settings
        "registrationDefaultPersonConnectionStatus",
        "registrationDisplayAlternateIdFieldForAdults",
        "registrationDisplayAlternateIdFieldForChildren",
        "registrationDisplaySmsEnabled",
        "registrationSmsEnabledByDefault",
        "enableCheckInAfterRegistration",
        "knownRelationshipTypes",
        "sameFamilyKnownRelationshipTypes",
        "canCheckInKnownRelationshipTypes",
        "registrationAddFamilyWorkflowTypes",
        "registrationAddPersonWorkflowTypes",
        "registrationRequiredAttributesForAdults",
        "registrationOptionalAttributesForAdults",
        "registrationRequiredAttributesForChildren",
        "registrationOptionalAttributesForChildren",
        "registrationRequiredAttributesForFamilies",
        "registrationOptionalAttributesForFamilies",
        "registrationDisplayBirthdateOnAdults",
        "registrationDisplayBirthdateOnChildren",
        "registrationDisplayGradeOnChildren",
        "registrationDisplayRaceOnAdults",
        "registrationDisplayRaceOnChildren",
        "registrationDisplayEthnicityOnAdults",
        "registrationDisplayEthnicityOnChildren",

        // Search Settings
        "searchType",
        "maxResults",
        "minPhoneLength",
        "maxPhoneLength",
        "phoneSearchType",
    ];

    const refreshAttributesDebounce = debounce(() => refreshDetailAttributes(groupTypeEditBag, validProperties, invokeBlockAction), undefined, true);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return panelMode.value == DetailPanelMode.Add ? "Add Check-in Configuration" : groupTypeViewBag.value?.name ?? "";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return groupTypeViewBag.value?.idKey ?? "";
    });

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        return labels;
    });

    const footerSecondaryActions = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        labels.push({
            type: "default",
            iconCssClass: "fa fa-calendar",
            title: "Schedule",
            handler: onScheduleClick
            });

        return labels;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): CheckinTypeDetailOptionsBag => {
        return config.options ?? {} as CheckinTypeDetailOptionsBag;
    });

    const hidePanel = computed((): boolean => {
        return config.options?.hidePanel ?? false;
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    function onScheduleClick(): void {
        if (config.navigationUrls?.[NavigationUrlKey.LinkedPage]) {
            window.location.href = makeUrlRedirectSafe(config.navigationUrls[NavigationUrlKey.LinkedPage]);
        }
    }

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        if (!groupTypeEditBag.value?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                return config.navigationUrls[NavigationUrlKey.ParentPage];
            }

            return false;
        }

        return true;
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<false | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<string>("Delete", {
            key: groupTypeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete group type.";

            return false;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<DetailBlockBox<CheckinTypeBag, CheckinTypeDetailOptionsBag>>("Edit", {
            key: groupTypeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.entity) {
            groupTypeEditBag.value = result.data.entity;

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for when a value has changed that has an associated
     * C# property name. This is used to detect changes to values that
     * might cause qualified attributes to either show up or not show up.
     *
     * @param propertyName The name of the C# property that was changed.
     */
    function onPropertyChanged(propertyName: string): void {
        // If we don't have any qualified attribute properties or this property
        // is not one of them then do nothing.
        if (!config.qualifiedAttributeProperties || !config.qualifiedAttributeProperties.some(n => n.toLowerCase() === propertyName.toLowerCase())) {
            return;
        }

        refreshAttributesDebounce();
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const data: DetailBlockBox<CheckinTypeBag, CheckinTypeDetailOptionsBag> = {
            entity: groupTypeEditBag.value,
            isEditable: true,
            validProperties: validProperties
        };

        const result = await invokeBlockAction<CheckinTypeBag | string>("Save", {
            box: data
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                groupTypeViewBag.value = result.data;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save group type.";

        return false;
    }

    // #endregion

    provideSecurityGrant(securityGrant);

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified group type could not be viewed.";
    }
    else if (!config.entity.idKey) {
        groupTypeEditBag.value = config.entity;
        panelMode.value = DetailPanelMode.Add;
    }
</script>
