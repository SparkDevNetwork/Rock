<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <footer class="check-in-panel page-footer">
        <RockButton v-if="!hideConfigure"
                    btnType="link"
                    class="configure-button"
                    @click="onConfigureClick">
            <i class="fa fa-cog"></i>
        </RockButton>

        <div class="title">{{ props.title }}</div>

        <div class="actions">
            <NativeViewTransition>
                <RockButton v-for="action in actions"
                            :key="action.key"
                            :btnType="action.type"
                            :class="action.class"
                            :disabled="action.disabled"
                            autoDisable
                            @click="onActionClick(action)">
                    {{ action.title }}
                </RockButton>
            </NativeViewTransition>
        </div>
    </footer>
</template>

<script setup lang="ts">
    import NativeViewTransition from "./nativeViewTransition.partial";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { PropType } from "vue";
    import { KioskButton } from "./types.partial";

    const props = defineProps({
        /** The text to display in the footer. */
        title: {
            type: String as PropType<string>,
            required: true
        },

        /**
         * Hides the configure gear button so it is not visible.
         */
        hideConfigure: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * The custom actions to display in the footer. These are fed from
         * the current screen.
         */
        actions: {
            type: Array as PropType<KioskButton[]>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "configure"): void;
    }>();

    /**
     * Event handler for when the configure button is pressed.
     */
    function onConfigureClick(): void {
        emit("configure");
    }

    /**
     * Handles the click event for an action.
     *
     * @param action The action that was clicked.
     * @param event The event generated by the button.
     */
    async function onActionClick(action: KioskButton): Promise<void> {
        if (!action.handler) {
            return;
        }

        const result = action.handler();

        if (isPromise(result)) {
            await result;
        }
    }
</script>
