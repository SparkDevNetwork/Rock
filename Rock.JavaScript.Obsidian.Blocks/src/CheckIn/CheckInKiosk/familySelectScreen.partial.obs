<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="family-select-screen">
        <MainPanel :title="title"
                   :subtitle="subtitle">
            <div class="button-list">
                <RockButton v-for="family in props.session.families"
                            btnType="primary"
                            class="family-button"
                            :disabled="isProcessing"
                            @click="onFamilyClick(family)">
                    <span class="title">{{ family.name }}</span>
                    <span class="subtitle">{{ getFamilyMemberNames(family) }}</span>
                </RockButton>
            </div>
        </MainPanel>
    </div>
</template>

<script setup lang="ts">
    import MainPanel from "./mainPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { onBeforeUnmount, PropType, ref } from "vue";
    import { KioskConfigurationBag } from "@Obsidian/ViewModels/Blocks/CheckIn/CheckInKiosk/kioskConfigurationBag";
    import { CancellationTokenSource } from "@Obsidian/Utility/cancellation";
    import { CheckInSession } from "./checkInSession.partial";
    import { alert, UnexpectedErrorMessage } from "./utils.partial";
    import { KioskButton, RegistrationScreenData } from "./types.partial";
    import { FamilyBag } from "@Obsidian/ViewModels/CheckIn/familyBag";
    import { asCommaAnd } from "@Obsidian/Utility/stringUtils";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EditFamilyResponseBag } from "@Obsidian/ViewModels/Blocks/CheckIn/CheckInKiosk/editFamilyResponseBag";

    const props = defineProps({
        configuration: {
            type: Object as PropType<KioskConfigurationBag>,
            required: true
        },

        session: {
            type: Object as PropType<CheckInSession>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "next", session: CheckInSession): void;
        (event: "updateActions", actions: KioskButton[]): void;
        (event: "editFamily", data: RegistrationScreenData): void;
    }>();

    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const title = ref("Family Selection");
    const subtitle = ref("Select your family from the list below");
    const isProcessing = ref(false);
    const cancellationTokenSource = new CancellationTokenSource();

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    /**
     * Update the actions supported by this screen.
     */
    function updateActions(): void {
        const actions: KioskButton[] = [];

        if (props.configuration.kiosk?.isRegistrationModeEnabled) {
            actions.push({
                type: "default",
                title: "Add Family",
                key: "add-family",
                class: "add-family-button",
                disabled: false,
                handler: onNewFamilyClick
            });
        }

        emit("updateActions", actions);
    }

    /**
     * Gets the family member names in a friendly format like "Ted, Cindy, Noah & Alex".
     *
     * @param family The family whose member names are retrieved.
     *
     * @returns A string that represents the family members.
     */
    function getFamilyMemberNames(family: FamilyBag): string {
        if (!family.members) {
            return "";
        }

        const names = family.members
            .filter(m => !!m.person?.nickName)
            .map(m => m.person?.nickName as string);

        return asCommaAnd(names, "&");
    }

    /**
     * Handles the click event for a family button.
     *
     * @param family The family that was selected.
     */
    async function onFamilyClick(family: FamilyBag): Promise<void> {
        if (!family.id) {
            return;
        }

        try {
            isProcessing.value = true;

            const newSession = await props.session.withFamily(family.id);

            if (!newSession.attendees || newSession.attendees.length === 0) {
                await alert("There were not any family members in this family.", cancellationTokenSource.token);
                return;
            }

            emit("next", await newSession.withNextScreen());
        }
        catch (error) {
            await alert(error instanceof Error ? error.message : UnexpectedErrorMessage, cancellationTokenSource.token);
        }
        finally {
            isProcessing.value = false;
        }
    }

    /**
     * Event handler to start the process of adding a new family to the system.
     */
    async function onNewFamilyClick(): Promise<void> {
        const data = {
            familyId: null,
            kioskId: props.configuration.kiosk?.id,
            templateId: props.session.configuration?.template?.id
        };

        const response = await invokeBlockAction<EditFamilyResponseBag>("EditFamily", data);

        if (response.isSuccess && response.data) {
            const registrationData: RegistrationScreenData = {
                ...response.data,
                family: {
                    bag: {},
                    validProperties: ["id"]
                },
                people: []
            };

            emit("editFamily", registrationData);
        }
        else {
            await alert(response.errorMessage || UnexpectedErrorMessage, cancellationTokenSource.token);
        }
    }

    // #endregion

    onBeforeUnmount(() => cancellationTokenSource.cancel());

    updateActions();
</script>
