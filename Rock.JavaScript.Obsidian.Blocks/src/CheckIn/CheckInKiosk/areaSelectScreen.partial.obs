<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="area-select-screen">
        <MainPanel :title="title"
                   :subtitle="subtitle"
                   :person="session.getCurrentAttendee()?.person">
            <NotificationBox v-if="skipMessage"
                             alertType="warning">
                {{ skipMessage }}
            </NotificationBox>

            <div v-else
                 class="button-list">
                <RockButton v-for="area in areas"
                            btnType="primary"
                            class="area-button"
                            :disabled="isProcessing"
                            @click="onAreaClick(area)">
                    <span class="title">{{ area.name }}</span>
                </RockButton>
            </div>
        </MainPanel>
    </div>
</template>

<script setup lang="ts">
    import MainPanel from "./mainPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { computed, onBeforeUnmount, PropType, ref, watch } from "vue";
    import { KioskConfigurationBag } from "@Obsidian/ViewModels/Blocks/CheckIn/CheckInKiosk/kioskConfigurationBag";
    import { CancellationTokenSource } from "@Obsidian/Utility/cancellation";
    import { CheckInSession } from "./checkInSession.partial";
    import { alert, UnexpectedErrorMessage } from "./utils.partial";
    import { KioskButton } from "./types.partial";
    import { AreaOpportunityBag } from "@Obsidian/ViewModels/CheckIn/areaOpportunityBag";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { KioskCheckInMode } from "@Obsidian/Enums/CheckIn/kioskCheckInMode";

    const props = defineProps({
        configuration: {
            type: Object as PropType<KioskConfigurationBag>,
            required: true
        },

        session: {
            type: Object as PropType<CheckInSession>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "next", session: CheckInSession): void;
        (event: "updateActions", actions: KioskButton[]): void;
    }>();

    // #region Values

    const isProcessing = ref(false);
    const cancellationTokenSource = new CancellationTokenSource();

    // #endregion

    // #region Computed Values

    const title = computed((): string => {
        return props.session.appendScheduleName("Area");
    });

    const subtitle = computed((): string => {
        return `Select the area you would like to check ${props.session.getCurrentAttendee()?.person?.nickName} into`;
    });

    const areas = computed((): AreaOpportunityBag[] => {
        return props.session.getAvailableAreas();
    });

    const skipMessage = computed((): string | undefined => {
        if (props.session.getAvailableAreas().length > 0) {
            return undefined;
        }

        return `Sorry, there are currently not any available areas that ${props.session.getCurrentAttendee()?.person?.nickName} can check into at this time.`;
    });

    // #endregion

    // #region Functions

    /**
     * Update the actions supported by this screen.
     */
    function updateActions(): void {
        const actions: KioskButton[] = [];

        const isSkipVisible = skipMessage.value
            && props.configuration.template?.kioskCheckInType === KioskCheckInMode.Family
            && props.session.selectedAttendeeIds
            && props.session.selectedAttendeeIds.length > 1;

        if (isSkipVisible) {
            actions.push({
                title: "Skip",
                key: "next",
                type: "primary",
                disabled: false,
                handler: onSkipClick
            });
        }

        emit("updateActions", actions);
    }

    /**
     * Handles the click event for an area button.
     *
     * @param area The area that was selected.
     */
    async function onAreaClick(area: AreaOpportunityBag): Promise<void> {
        if (!area.id) {
            return;
        }

        try {
            isProcessing.value = true;

            const newSession = props.session.withSelectedArea(area.id);

            emit("next", await newSession.withNextScreen());
        }
        catch (error) {
            await alert(error instanceof Error ? error.message : UnexpectedErrorMessage, cancellationTokenSource.token);
        }
        finally {
            isProcessing.value = false;
        }
    }

    async function onSkipClick(): Promise<void> {
        try {
            isProcessing.value = true;

            emit("next", await props.session.withNextScreenBySkippingAttendee());
        }
        catch (error) {
            await alert(error instanceof Error ? error.message : UnexpectedErrorMessage, cancellationTokenSource.token);
        }
        finally {
            isProcessing.value = false;
        }
    }

    // #endregion

    watch(() => props.session, () => {
        updateActions();
    });

    onBeforeUnmount(() => cancellationTokenSource.cancel());

    updateActions();
</script>
