<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="group-select-screen">
        <MainPanel :title="title"
                   :subtitle="subtitle">
            <div class="attendance-cards">
                <AttendanceCard v-for="attendance in aggregateAttendance"
                                term="Checked Out"
                                :attendance="attendance" />
            </div>

            <div class="messages">
                <div class="message" v-for="msg in session.messages" v-text="msg"></div>
            </div>
        </MainPanel>
    </div>
</template>

<script setup lang="ts">
    import AttendanceCard from "./attendanceCard.partial.obs";
    import MainPanel from "./mainPanel.partial.obs";
    import { computed, PropType } from "vue";
    import { KioskConfigurationBag } from "@Obsidian/ViewModels/Blocks/CheckIn/CheckInKiosk/kioskConfigurationBag";
    import { CheckInSession } from "./checkInSession.partial";
    import { AggregateAttendance, KioskButton } from "./types.partial";

    const props = defineProps({
        configuration: {
            type: Object as PropType<KioskConfigurationBag>,
            required: true
        },

        session: {
            type: Object as PropType<CheckInSession>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "next", session: CheckInSession): void;
        (event: "updateActions", actions: KioskButton[]): void;
    }>();

    // #region Values

    // #endregion

    // #region Computed Values

    const title = computed((): string => {
        return "Checkout Complete";
    });

    const subtitle = computed((): string => {
        return "Below are the details of your checkout";
    });

    const aggregateAttendance = computed((): AggregateAttendance[] => {
        const items: AggregateAttendance[] = [];

        for (const attendance of props.session.checkedOutAttendances) {
            if (!attendance.person) {
                continue;
            }

            let item = items.find(i => i.person.id === attendance.person?.id);

            if (!item) {
                item = {
                    person: attendance.person,
                    attendances: [],
                    inProgressAchievements: [],
                    justCompletedAchievements: []
                };

                items.push(item);
            }

            item.attendances.push(attendance);
        }

        return items;
    });

    // #endregion

    // #region Functions

    /**
     * Update the actions supported by this screen.
     */
    function updateActions(): void {
        const actions: KioskButton[] = [];

        emit("updateActions", actions);
    }

    // #endregion

    updateActions();
</script>
