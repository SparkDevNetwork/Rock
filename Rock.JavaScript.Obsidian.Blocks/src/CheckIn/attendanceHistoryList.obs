<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="config.options?.isValidContextEntity"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Attendance History"
          :entityTypeGuid="EntityType.Attendance"
          stickyHeader
          liveUpdates
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onGridSettingsClick">

        <Column name="location"
                title="Location"
                :filter="textValueFilter"
                :filterValue="getLocationFilterValue"
                visiblePriority="xs">
            <template #format="{ row }">
                <div class="text">
                    <div>{{ row.location }}</div>
                    <div><small>{{ row.locationPath }}</small></div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="campus"
                    title="Campus"
                    field="campus"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <TextColumn name="schedule"
                    title="Schedule"
                    field="schedule"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <PersonColumn v-if="config.options?.isPersonColumnVisible"
                      name="person"
                      title="Person"
                      field="person"
                      :showAsLink="true"
                      :hideAvatar="true"
                      :filter="pickExistingValueFilter"
                      :filterValue="getPersonNameFilterValue"
                      visiblePriority="xs" />

        <Column v-if="config.options?.isGroupColumnVisible"
                name="group"
                title="Group"
                :filter="textValueFilter"
                :filterValue="getGroupFilterValue"
                visiblePriority="md">
            <template #format="{ row }">
                <div class="text">
                    <div>{{ row.groupName }}</div>
                    <div><small>{{ row.checkInAreaPath }}</small></div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <DateTimeColumn name="startDateTime"
                        title="Start Date Time"
                        field="startDateTime"
                        :filter="dateValueFilter"
                        visiblePriority="md" />

        <DateTimeColumn name="endDateTime"
                        title="End Date Time"
                        field="endDateTime"
                        :filter="dateValueFilter"
                        visiblePriority="md" />

        <BooleanColumn name="didAttend"
                       title="Attended"
                       field="didAttend"
                       :filter="booleanValueFilter"
                       visiblePriority="xs" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :groupItems="config.options?.groupItems ?? []"
                       :showGroupPicker="config.options?.isGroupColumnVisible"
                       :showPersonPicker="config.options?.isPersonColumnVisible" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { BooleanColumn, PersonColumn, pickExistingValueFilter, dateValueFilter, booleanValueFilter, TextColumn, textValueFilter, DateTimeColumn, Column } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { AttendanceHistoryListOptionsBag } from "@Obsidian/ViewModels/Blocks/CheckIn/AttendanceHistoryList/attendanceHistoryListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridSettingsOptions, PreferenceKey } from "./AttendanceHistoryList/types.partial";
    import { computed, reactive, ref, watch } from "vue";
    import GridSettingsModal from "./AttendanceHistoryList/gridSettingsModal.partial.obs";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const config = useConfigurationValues<ListBlockBox<AttendanceHistoryListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        startDate: preferences.getValue(PreferenceKey.FilterDateRangeStart),
        endDate: preferences.getValue(PreferenceKey.FilterDateRangeEnd),
        person: JSON.parse(preferences.getValue(PreferenceKey.FilterPerson) || "{}"),
        group: preferences.getValue(PreferenceKey.FilterGroup),
        schedule: JSON.parse(preferences.getValue(PreferenceKey.FilterSchedule) || "{}"),
        attended: preferences.getValue(PreferenceKey.FilterDidAttend) || config.options?.filterAttendanceByDefault ? "true" : null,
    });

    // #endregion

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.startDate
            || !!gridSettings.value.endDate
            || (config.options?.isPersonColumnVisible && !!gridSettings.value.person?.value)
            || (config.options?.isGroupColumnVisible && !!gridSettings.value.group)
            || !!gridSettings.value.schedule?.value
            || !!gridSettings.value.attended;
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
    * Gets the filter value text to use for the location column.
    *
    * @param row The row to be filtered.
    */
    function getLocationFilterValue(row: Record<string, unknown>): string {
        let filterValue = `${row["location"]} ${row["locationPath"]}`;
        return filterValue;
    }

    /**
    * Gets the filter value text to use for the name column.
    *
    * @param row The row to be filtered.
    */
    function getPersonNameFilterValue(row: Record<string, unknown>): string {
        const person = row["person"] as PersonFieldBag;
        return !person ? "" : `${person.nickName} ${person.lastName}`;
    }

    /**
    * Gets the filter value text to use for the group column.
    *
    * @param row The row to be filtered.
    */
    function getGroupFilterValue(row: Record<string, unknown>): string {
        let filterValue = `${row["groupName"]} ${row["checkInAreaPath"]}`;
        return filterValue;
    }
    // #endregion

    // #region Event Handlers

    /**
    * Called when the grid setting icon is clicked, displays the block filters.
    *
    */
    function onGridSettingsClick(): void {
        isGridSettingsVisible.value = true;
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(PreferenceKey.FilterDateRangeStart, gridSettings.value.startDate ?? "");
        preferences.setValue(PreferenceKey.FilterDateRangeEnd, gridSettings.value.endDate ?? "");
        preferences.setValue(PreferenceKey.FilterPerson, JSON.stringify(gridSettings.value.person));
        preferences.setValue(PreferenceKey.FilterGroup, gridSettings.value.group ?? "");
        preferences.setValue(PreferenceKey.FilterSchedule, JSON.stringify(gridSettings.value.schedule));
        preferences.setValue(PreferenceKey.FilterDidAttend, gridSettings.value.attended ?? "");

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
