<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="config.options?.isValidContextEntity"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Item"
          title="Attendance History"
          :entityTypeGuid="EntityType.Attendance"
          stickyHeader
          liveUpdates>

        <Column name="location"
                title="Location"
                field="location"
                :filter="pickExistingValueFilter"
                :filterValue="getLocationFilterValue"
                :quickFilterValue="getLocationFilterValue"
                visiblePriority="xs"
                width=15%>
            <template #format="{ row }">
                <div class="text">
                    <div>{{ row.location }}</div>
                    <div><small>{{ row.locationPath }}</small></div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="campus"
                    title="Campus"
                    field="campus"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <TextColumn name="schedule"
                    title="Schedule"
                    field="schedule"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <PersonColumn v-if="config.options?.isPersonColumnVisible"
                      name="person"
                      title="Person"
                      field="person"
                      :showAsLink="true"
                      :hideAvatar="true"
                      :filter="pickExistingValueFilter"
                      :filterValue="getPersonNameFilterValue"
                      :quickFilterValue="getPersonNameFilterValue"
                      visiblePriority="xs" />

        <Column v-if="config.options?.isGroupColumnVisible"
                name="group"
                title="Group"
                field="group"
                :filter="pickExistingValueFilter"
                :filterValue="getGroupFilterValue"
                :quickFilterValue="getGroupFilterValue"
                :sortValue="getGroupSortValue"
                visiblePriority="md">
            <template #format="{ row }">
                <div class="text">
                    <div>{{ row.groupName }}</div>
                    <div><small>{{ row.checkInAreaPath }}</small></div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <DateTimeColumn name="startDateTime"
                        title="Start Date Time"
                        field="startDateTime"
                        :filter="dateValueFilter"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        visiblePriority="md" />

        <DateTimeColumn name="endDateTime"
                        title="End Date Time"
                        field="endDateTime"
                        :filter="dateValueFilter"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        visiblePriority="md" />

        <BooleanColumn name="didAttend"
                       title="Attended"
                       field="didAttend"
                       :filter="booleanValueFilter"
                       headerClass="text-center"
                       width="150"
                       itemClass="justify-content-center text-center"
                       visiblePriority="xs" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { BooleanColumn, PersonColumn, pickExistingValueFilter, dateValueFilter, booleanValueFilter, TextColumn, DateTimeColumn, Column } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { AttendanceHistoryListOptionsBag } from "@Obsidian/ViewModels/Blocks/CheckIn/AttendanceHistoryList/attendanceHistoryListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const config = useConfigurationValues<ListBlockBox<AttendanceHistoryListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
    * Gets the filter value text to use for the location column.
    *
    * @param row The row to be filtered.
    */
    function getLocationFilterValue(row: Record<string, unknown>): string {
        let filterValue = `${row["location"]} ${row["locationPath"]}`;
        return filterValue;
    }

    /**
    * Gets the filter value text to use for the name column.
    *
    * @param row The row to be filtered.
    */
    function getPersonNameFilterValue(row: Record<string, unknown>): string {
        const person = row["person"] as PersonFieldBag;
        return !person ? "" : `${person.nickName} ${person.lastName}`;
    }

    /**
    * Gets the filter value text to use for the group column.
    *
    * @param row The row to be filtered.
    */
    function getGroupFilterValue(row: Record<string, unknown>): string {
        let filterValue = `${row["groupName"]} ${row["checkInAreaPath"]}`;
        return filterValue;
    }

    /**
    * Gets the filter value text to use for the group column.
    *
    * @param row The row to be filtered.
    */
    function getGroupSortValue(row: Record<string, unknown>): string {
        return getGroupFilterValue(row);
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
