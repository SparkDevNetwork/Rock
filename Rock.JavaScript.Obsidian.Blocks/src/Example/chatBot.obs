<template>
    <div class="chat-container" ref="chatContainer">
        <div class="sessions-column">
            <div class="sessions-container" ref="sessionsContainer">
                <div v-for="session in sessions"
                     :key="session.id"
                     class="session"
                     :class="{ 'active': session.id === sessionId }"
                     @click="onSelectSession(session.id)">
                    <strong>{{ session.name || "Unnamed Session" }}</strong><br>
                    {{ RockDateTime.parseISO(session.lastMessageDateTime!)?.localDateTime.toASPString("g") }}
                </div>
            </div>

            <RockButton btnType="primary"
                        autoDisable
                        @click="onNewSession">
                New Session
            </RockButton>
        </div>

        <div class="conversation-container">
            <div class="well messages-container" ref="messagesContainer">
                <div v-for="(message, index) in messages"
                     :key="index"
                     class="message"
                     :class="getMessageClass(message)"
                     :title="getTokenCounts(message)">
                    <span class="message-text">{{ message.message }}</span>
                </div>
            </div>

            <div>
                <TextBox v-model="message"
                         placeholder="Type your message here..."
                         @keyup.enter="onSubmit">
                    <template #inputGroupAppend>
                        <span class="input-group-btn">
                            <button class="btn btn-primary"
                                    :disabled="isSendDisabled"
                                    @click.prevent="onSubmit">Send</button>
                        </span>
                    </template>
                </TextBox>
            </div>
        </div>
    </div>
</template>

<style scoped>
.chat-container {
    display: flex;
    flex-direction: row;
    gap: var(--spacing-small);
}

.sessions-column {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
}

.sessions-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-small);
    flex-grow: 1;
    overflow-y: auto;
}

.sessions-container :first-child {
    margin-top: auto;
}

.session {
    background-color: var(--color-info-soft);
    color: var(--color-info-strong);
    padding: var(--spacing-small);
    border-radius: var(--rounded-small);
    cursor: pointer;
    min-width: 200px;
}

.session.active {
    border: 2px solid var(--color-info-strong);
    cursor: initial;
}

.conversation-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.messages-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    overflow-y: auto;
    gap: var(--spacing-small);
}

.message {
    padding: var(--spacing-tiny) var(--spacing-small);
    border-radius: var(--rounded-medium);
    max-width: 75%;
}

.message-user {
    background-color: #4298e5;
    color: white;
    margin-left: auto;
}

.message-assistant {
    background-color: #dfdfdf;
    color: #333;
    margin-right: auto;
}
</style>

<script setup lang="ts">
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { asFormattedString } from "@Obsidian/Utility/numberUtils";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { computed, nextTick, onBeforeUnmount, onMounted, reactive, ref } from "vue";

    const enum AuthorRole {
        User = 0,

        Assistant = 1
    }

    type ChatBotConfigurationBag = {
        error?: string | null;

        sessionId?: number | null;

        sessions?: ChatSessionBag[] | null;

        messages?: ChatMessageBag[] | null;
    };

    type ChatSessionBag = {
        id: number;

        name?: string | null;

        lastMessageDateTime?: string | null;
    };

    type ChatMessageBag = {
        role: AuthorRole;

        message?: string | null;

        tokenCount: number;

        consumedTokenCount: number;
    };

    const config = useConfigurationValues<ChatBotConfigurationBag>();
    const invokeBlockAction = useInvokeBlockAction();

    const chatContainer = ref<HTMLDivElement>();
    const sessionsContainer = ref<HTMLDivElement>();
    const messagesContainer = ref<HTMLDivElement>();

    const message = ref("");
    const isSending = ref(false);
    const messages = reactive(config.messages ?? []);
    const sessions = reactive(config.sessions ?? []);
    const sessionId = ref(config.sessionId ?? 0);

    const isSendDisabled = computed((): boolean => {
        return isSending.value || !message.value;
    });

    function updateContainerHeight(): void {
        if (!chatContainer.value) {
            return;
        }

        const top = chatContainer.value.getBoundingClientRect().y;
        chatContainer.value.style.height = `${window.innerHeight - top - 75}px`;
    }

    function getMessageClass(message: ChatMessageBag): string {
        return message.role === AuthorRole.User ? "message-user" : "message-assistant";
    }

    function getTokenCounts(message: ChatMessageBag): string {
        if (message.role === AuthorRole.User) {
            return `Tokens: ${asFormattedString(message.tokenCount)}`;
        }

        return `Input tokens: ${asFormattedString(message.consumedTokenCount - message.tokenCount)}; Output token: ${asFormattedString(message.tokenCount)}`;
    }

    function updateSessionDate(): void {
        const session = sessions.find(s => s.id === sessionId.value);

        if (session) {
            session.lastMessageDateTime = RockDateTime.now().toISOString();
        }

        updateSessionOrder();
    }

    function updateSessionOrder(): void {
        sessions.sort((a, b) => {
            const da = RockDateTime.parseISO(a.lastMessageDateTime ?? "");
            const db = RockDateTime.parseISO(b.lastMessageDateTime ?? "");

            if (!da) {
                return 1;
            }

            if (!db) {
                return -1;
            }

            return da.toMilliseconds() - db.toMilliseconds();
        });
    }

    async function onSubmit(): Promise<void> {
        if (!message.value) {
            return;
        }

        var msg = message.value;

        message.value = "";

        messages.push({
            role: AuthorRole.User,
            message: msg,
            tokenCount: 0,
            consumedTokenCount: 0
        });
        nextTick(() => messagesContainer.value?.scrollTo(0, messagesContainer.value.scrollHeight));

        isSending.value = true;
        try {
            const response = await invokeBlockAction<ChatMessageBag>("SendMessage", { message: msg, sessionId: sessionId.value });

            if (response.isSuccess && response.data) {
                messages.push(response.data);
                updateSessionDate();
                nextTick(() => messagesContainer.value?.scrollTo(0, messagesContainer.value.scrollHeight));
            }
            else {
                await alert(response.errorMessage ?? "Unknown error while trying to send message.");
                messages.pop(); // Remove the user's message if sending failed.
            }
        }
        finally {
            isSending.value = false;
        }
    }

    async function onSelectSession(id: number): Promise<void> {
        if (sessionId.value === id) {
            return;
        }

        const result = await invokeBlockAction<ChatMessageBag[]>("LoadSession", { sessionId: id });

        if (result.isSuccess && result.data) {
            sessionId.value = id;
            messages.splice(0, messages.length, ...result.data);
            updateSessionOrder();
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to load session messages.");
        }
    }

    async function onNewSession(): Promise<void> {
        const result = await invokeBlockAction<ChatSessionBag>("StartNewSession");

        if (result.isSuccess && result.data) {
            sessionId.value = result.data.id;
            messages.splice(0, messages.length);
            sessions.push(result.data);
            nextTick(() => sessionsContainer.value?.scrollTo(0, sessionsContainer.value.scrollHeight));
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to start new session.");
        }
    }

    onMounted(() => {
        updateContainerHeight();
        messagesContainer.value?.scrollTo(0, messagesContainer.value.scrollHeight);
        sessionsContainer.value?.scrollTo(0, sessionsContainer.value.scrollHeight);

        window.addEventListener("resize", updateContainerHeight);
    });

    onBeforeUnmount(() => {
        window.removeEventListener("resize", updateContainerHeight);
    });
</script>
