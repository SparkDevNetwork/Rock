<template>
    <GalleryAndResult :importCode="importCode" :exampleCode="exampleCode" hasMultipleValues :value="{
        'modelValue': value,
        'openFolders': openFolders,
        'selectedFolder': selectedFolder
    }">

        <NotificationBox alertType="danger" heading="Danger" v-if="isDangerNotificationVisible" dismissible @dismiss="isDangerNotificationVisible = false">
            The files shown in this demo are your actual files and changes are permanent.
            Do not perform any actions that you do not actually want performed.
        </NotificationBox>

        <NotificationBox alertType="info" heading="Note" v-if="isInternalNotificationVisible" dismissible @dismiss="isInternalNotificationVisible = false">
            This control is for internal use only.
        </NotificationBox>

        <FileAssetManager :height="height" v-model="value" v-model:openFolders="openFolders" v-model:selectedFolder="selectedFolder" :enableAssetManager="enableAssetManager" :enableFileManager="enableFileManager" :enableZipUpload="enableZipUpload" :editFilePage="editFilePage" />

        <template #settings>
            <div class="row">
                <div class="col-md-3">
                    <CheckBox v-model="isStaticHeight" label="Use Static Height?" help="If you don't use a static height (default), the height of the control will grow and shrink to be just large enough to show all the files and folders listed. If you use a static height, you need to specify a CSS value for how tall to make the control." />
                    <TransitionVerticalCollapse>
                        <div v-if="isStaticHeight">
                            <TextBox v-model="staticHeight" label="Static Height" help="You may use any valid CSS height value. If you enter `flexible`, it is the same as not specifying a value (disables static height; this is the default)" />
                        </div>
                    </TransitionVerticalCollapse>
                </div>
                <div class="col-md-3">
                    <CheckBox v-model="enableFileManager" label="Enable File Browser" help="If true, a folder will appear in the left column hooked to a folder on the server, the root of which is configurable." />
                </div>
                <div class="col-md-3">
                    <CheckBox v-model="enableAssetManager" label="Enable Asset Storage Providers" help="If true, all asset storage providers configured in system settings will appear in the left column." />
                </div>
                <div class="col-md-3">
                    <CheckBox v-model="enableZipUpload" label="Enable Uploading Zip Packages" help="If true, zip files can be uploaded to local file servers and they will be automatically unzipped and have their contents placed in the selected folder." />
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                </div>
            </div>
        </template>

        <template #props>
            <h5>TextBox Props</h5>
            <table class="table table-striped mb-4">
                <thead>
                    <tr>
                        <th>Prop</th>
                        <th>Type</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>modelValue</code></td>
                        <td>FileAsset[ ]</td>
                        <td><em>Required</em></td>
                        <td>The <code>v-model</code> for receiving the selected file(s). The list contains <code>FileAsset</code> objects, which</td>
                    </tr>
                    <tr>
                        <td><code>openFolders</code></td>
                        <td>String[ ]</td>
                        <td>[ ]</td>
                        <td>The <code>v-model</code> for sending/receiving the folders that are/should be expanded in the control's sidebar.</td>
                    </tr>
                    <tr>
                        <td><code>selectedFolder</code></td>
                        <td>String</td>
                        <td>null</td>
                        <td>The <code>v-model</code> for sending/receiving the folder that is selected in the control's sidebar (that folder's files are shown on the right pane).</td>
                    </tr>
                    <tr>
                        <td><code>height</code></td>
                        <td>String | "flexible"</td>
                        <td>"flexible"</td>
                        <td>The special string "flexible" causes the height of the control to grow and shrink to fit its contents. To set a specific height, specify a CSS height value.</td>
                    </tr>
                    <tr>
                        <td><code>enableAssetManager</code></td>
                        <td>Boolean</td>
                        <td>false</td>
                        <td>Whether or not to show folders from the server's <a href="/admin/system/asset-storage">configured</a> asset storage providers in the control's left sidebar.</td>
                    </tr>
                    <tr>
                        <td><code>enableFileManager</code></td>
                        <td>Boolean</td>
                        <td>false</td>
                        <td>Whether or not to show folders from the server's local file system in the control's left sidebar.</td>
                    </tr>
                    <tr>
                        <td><code>enableZipUpload </code></td>
                        <td>boolean</td>
                        <td>false</td>
                        <td>If true, zip files can be uploaded to local file servers and they will be automatically unzipped and have their contents placed in the selected folder.</td>
                    </tr>
                    <tr>
                        <td><code>encryptedRootFolder</code></td>
                        <td>String</td>
                        <td>""</td>
                        <td>When <code>enableFileManager</code> is <code>true</code>, this specifies the root folder to fetch folders and files from. Must be encrypted (via the back end). When blank, it will default to <code>~/Content</code>.</td>
                    </tr>
                    <tr>
                        <td><code>editFilePage</code></td>
                        <td>String</td>
                        <td>""</td>
                        <td>If specified, it enables the "Edit File" functionality for file manager files. Specifies the URL that will be opened for editing files. Query parameters will be added to the URL that specify the file being edited.</td>
                    </tr>
                    <tr>
                        <td><code>browseMode</code></td>
                        <td>"doc" | "image"</td>
                        <td>"doc"</td>
                        <td>When set to "image", non-image files will be filtered out of the file results.</td>
                    </tr>
                </tbody>
            </table>

            <h5>Special Types</h5>

            <p>This control uses one special type in its API: <code>FileAsset</code>, which can be imported from <code>"@Obsidian/ViewModels/Controls/fileAsset"</code>.</p>
        </template>
    </GalleryAndResult>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import GalleryAndResult from "./galleryAndResult.partial.obs";
    import FileAssetManager from "@Obsidian/Controls/fileAssetManager.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse.obs";
    import { getSfcControlImportPath } from "./utils.partial";
    import { FileAsset } from "@Obsidian/ViewModels/Controls/fileAsset";

    const value = ref<FileAsset[]>([]);
    const openFolders = ref<string[]>([]);
    const selectedFolder = ref<string>("");

    const isStaticHeight = ref(true);
    const staticHeight = ref("400px");
    const height = computed(() => isStaticHeight.value ? staticHeight.value : "flexible");
    const enableAssetManager = ref(true);
    const enableFileManager = ref(true);
    const enableZipUpload = ref(false);
    const editFilePage = ref("/admin/cms/file-manager/edit");

    const isInternalNotificationVisible = ref(true);
    const isDangerNotificationVisible = ref(true);

    const importCode = getSfcControlImportPath("fileAssetManager");
    const exampleCode = computed(() => {
        const enableAssetManagerProp = enableAssetManager.value ? " enableAssetManager" : "";
        const enableFileManagerProp = enableFileManager.value ? " enableFileManager" : "";
        const enableZipUploadProp = enableZipUpload.value ? " enableZipUpload" : "";
        const heightProp = isStaticHeight.value ? ` height="${height.value}"` : "";
        return `<FileAssetManager v-model="value"${enableAssetManagerProp}${enableFileManagerProp}${enableZipUploadProp}${heightProp} />`;
    });
</script>