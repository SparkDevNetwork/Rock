<template>
    <GalleryAndResult :importCode="importCode" :exampleCode="exampleCode">

        <ContentDropDownPicker label="Your Custom Picker"
                               @primaryButtonClicked="onSelect"
                               @clearButtonClicked="onClear"
                               v-model:showPopup="showPopup"
                               v-model:isFullscreen="isFullscreen"
                               :innerLabel="innerLabel"
                               :showClear="showClearButton"
                               pickerContentBoxHeight="auto"
                               disablePickerContentBoxScroll
                               iconCssClass="fa fa-cross"
                               rules="required">

            <p>You can place anything you want in here. Click the Save button to select a value or Cancel to close this box.
                The actions are completely customizable via event handlers (though they always close the popup), or you can
                completely override them via the <code>mainPickerActions</code> slot. You can also add additional custom buttons
                to the right via the <code>customPickerActions</code> slot.</p>

            <p><strong>Note</strong>: you are in control of:</p>

            <ul>
                <li>Selecting a value when the primary button is clicked. This control does not touch actual values at all
                    except to pass them to <code>&lt;RockFormField&gt;</code> for validation.</li>
                <li>Determining the text inside the select box via the <code>innerLabel</code> prop, since this control does
                    not look at the values or know how to format them</li>
                <li>Determining when the clear button should show up via the <code>showClear</code> prop, once again because
                    this control doesn't mess with selected values.</li>
            </ul>

            <template #primaryButtonLabel><span v-html="primaryButtonLabel"></span></template>

            <template #secondaryButtonLabel><span v-html="secondaryButtonLabel"></span></template>


            <template #customPickerActions>
                Custom Actions Here
            </template>
        </ContentDropDownPicker>

        <template #settings>
            <div class="row">
                <TextBox formGroupClasses="col-md-3" label="Primary Button Label" v-model="primaryButtonLabel" />
                <TextBox formGroupClasses="col-md-3" label="Secondary Button Label" v-model="secondaryButtonLabel" />
                <div class="col-md-3">
                    <InlineCheckBox label="Show Popup" v-model="showPopup" />
                </div>
                <div class="col-md-3">
                    <InlineCheckBox label="Show Clear Button" v-model="showClearButton" />
                </div>
            </div>

            <p class="text-semibold font-italic">Not all settings are demonstrated in this gallery.</p>
            <p>Additional props extend and are passed to the underlying <code>Rock Form Field</code>.</p>
        </template>
    </GalleryAndResult>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import GalleryAndResult from "./common/galleryAndResult.partial.obs";
    import ContentDropDownPicker from "@Obsidian/Controls/contentDropDownPicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox.obs";

    import { getSfcControlImportPath } from "./common/utils.partial";

    const value = ref<string>("");
    const innerLabel = computed<string>(() => value.value || "No Value Selected");
    const showPopup = ref(false);
    const isFullscreen = ref(false);

    function onSelect(): void {
        value.value = "A Value";
    }
    function onClear(): void {
        value.value = "";
    }

    const primaryButtonLabel = ref("<i class='fa fa-save'></i> Save");
    const secondaryButtonLabel = ref("Close");
    const showClearButton = ref(false);
    const importCode = getSfcControlImportPath("contentDropDownPicker");
    const exampleCode = `<ContentDropDownPicker
    label="Your Custom Picker"
    @primaryButtonClicked="selectValue"
    @clearButtonClicked="clear"
    :innerLabel="innerLabel"
    :showClear="!!value"
    iconCssClass="fa fa-cross" >
    You can place anything you want in here. Click the Save button to select a value or Cancel to close this box.
</ContentDropDownPicker>`;
</script>