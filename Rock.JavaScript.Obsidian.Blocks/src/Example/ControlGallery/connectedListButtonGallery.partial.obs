<template>
    <GalleryAndResult :importCode="importCode" :exampleCode="exampleCode" enableReflection>

        <ConnectedListButton
                             :aside="aside"
                             :asideIconCssClass="asideIconCssClass"
                             :badgeText="badgeText"
                             :iconCssClass="iconCssClass"
                             :description="description"
                             :primaryActions="primaryActions"
                             :secondaryActions="secondaryActions"
                             :title="title"
                             @click="onClick" />

        <template #settings>
            <div class="row">
                <TextBox v-model="badgeText" formGroupClasses="col-md-6" label="Badge Text" />
                <TextBox v-model="iconCssClass" formGroupClasses="col-md-6" label="Icon CSS Class" />
            </div>

            <div class="row">
                <TextBox v-model="title" formGroupClasses="col-md-6" label="Title" />
                <TextBox v-model="description" formGroupClasses="col-md-6" label="Description" />
            </div>

            <div class="row">
                <TextBox v-model="asideIconCssClass" formGroupClasses="col-md-6" label="Aside Icon CSS Class" />
                <TextBox v-model="aside" formGroupClasses="col-md-6" label="Aside" />
            </div>

            <div class="row">
                <Switch v-model="showPrimaryActions" formGroupClasses="col-md-4" label="Show Primary Actions" />
                <Switch v-model="showSecondaryActions" formGroupClasses="col-md-4" label="Show Secondary Actions" />
            </div>
        </template>
    </GalleryAndResult>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import GalleryAndResult from "./common/galleryAndResult.partial.obs";
    import ConnectedListButton from "@Obsidian/Controls/connectedListButton.obs";
    import Switch from "@Obsidian/Controls/switch.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { MenuAction } from "@Obsidian/Types/Controls/dropDownMenu";

    const importCode = `import ConnectedListButton from "@Obsidian/Controls/connectedListButton.obs";`;

    const aside = ref<string>("hello@triumph.tech");
    const asideIconCssClass = ref<string>("fa fa-user");
    const badgeText = ref<string>("Step 3");
    const iconCssClass = ref<string>("fa fa-chart-line");
    const description = ref<string>("This step calculates weekly growth based on new signups.");
    const title = ref<string>("Growth Metrics");
    const showPrimaryActions = ref<boolean>(false);
    const showSecondaryActions = ref<boolean>(false);

    const primaryActions = computed<MenuAction[] | null>(() => {
        if (showPrimaryActions.value) {
            return [
                {
                    iconCssClass: "fa fa-edit",
                    title: "Edit",
                    type: "default",
                    handler: () => alert("Edit clicked"),
                },
                {
                    iconCssClass: "fa fa-copy",
                    title: "Duplicate",
                    type: "default",
                    handler: () => alert("Duplicate clicked"),
                }
            ];
        }
        else {
            return [];
        }
    });

    const secondaryActions = computed<MenuAction[] | null>(() => {
        if (showSecondaryActions.value) {
            return [
                {
                    iconCssClass: "fa fa-trash",
                    title: "Delete",
                    type: "default",
                    handler: () => alert("Delete clicked"),
                }
            ];
        }
        else {
            return [];
        }
    });

    const exampleCode = computed<string>(() => {
        return `<ConnectedListButton aside="${aside.value}"
                     asideIconCssClass="${asideIconCssClass.value}"
                     badgeText="${badgeText.value}"
                     iconCssClass="${iconCssClass.value}"
                     description="${description.value}"
                     :primaryActions="${JSON.stringify(primaryActions.value, null, 2).replace(/\n/g, "\n                     ").replace(/"/g, "'")}"
                     :secondaryActions="${JSON.stringify(secondaryActions.value, null, 2).replace(/\n/g, "\n                     ").replace(/"/g, "'")}"
                     title="${title.value}"
                     @click="onClick" />`;
    });

    function onClick(): void {
        alert("Button clicked!");
    }
</script>