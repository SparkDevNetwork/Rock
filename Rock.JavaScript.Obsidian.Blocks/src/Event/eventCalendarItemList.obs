<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="config.options?.eventCalendarIdKey"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Event Item"
          :entityTypeGuid="EntityType.EventCalendarItem"
          stickyHeader
          liveUpdates
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onGridSettingsClick"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    width="23%"
                    visiblePriority="xs" />

        <TextColumn name="date"
                    :title="nextDateColumnTitle"
                    field="date"
                    visiblePriority="xs" />

        <Column name="calendars"
                title="Calendars"
                :filter="textValueFilter"
                :filterValue="getRowCalendarsFilterValue"
                visiblePriority="md">
            <template #format="{ row }">
                <template v-for="calendar in row.calendars">
                    {{ calendar }}<br>
                </template>
            </template>
        </Column>

        <Column name="audiences"
                title="Audiences"
                :filter="textValueFilter"
                :filterValue="getRowAudiencesFilterValue"
                visiblePriority="md">
            <template #format="{ row }">
                <template v-for="audience in row.audiences">
                    {{ audience }}<br>
                </template>
            </template>
        </Column>

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <NumberBadgeColumn name="occurrences"
                           title="Occurrences"
                           field="occurrences"
                           :filter="numberValueFilter"
                           :infoMinimum="1"
                           :warningMinimum="0"
                           :warningMaximum="0"
                           visiblePriority="md" />

        <Column name="isActive"
                title="Status"
                field="isActive"
                :filter="booleanValueFilter"
                visiblePriority="md">
            <template #format="{ row }">
                <span v-if="row.isActive" class="label label-success">
                    Active
                </span>
                <span v-else class="label label-default">
                    Inactive
                </span>
            </template>
        </Column>

        <Column name="isApproved"
                title="Approval Status"
                field="isApproved"
                :filter="booleanValueFilter"
                visiblePriority="md">
            <template #format="{ row }">
                <span v-if="row.isApproved" class="label label-info">
                    Approved
                </span>
                <span v-else class="label label-warning">
                    Not Approved
                </span>
            </template>
        </Column>

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :campusItems="config.options?.campusItems ?? []" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, TextColumn, textValueFilter, booleanValueFilter, numberValueFilter, DeleteColumn, Column, NumberBadgeColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { EventCalendarItemListOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarItemList/eventCalendarItemListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, GridSettingsOptions, PreferenceKey } from "./EventCalendarItemList/types.partial";
    import { computed, reactive, ref, watch } from "vue";
    import GridSettingsModal from "./EventCalendarItemList/gridSettingsModal.partial.obs";

    const config = useConfigurationValues<ListBlockBox<EventCalendarItemListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        startDate: preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterStartDate)),
        endDate: preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterEndDate)),
        status: preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterStatus)),
        approvalStatus: preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterApprovalStatus)),
        campuses: JSON.parse(preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterCampus)) || "[]"),
        audiences: JSON.parse(preferences.getValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterAudience)) || "[]"),
    });

    // #endregion

    // #region Computed Values

    const nextDateColumnTitle = computed((): string => {
        return !!gridSettings.value.startDate || !!gridSettings.value.endDate ? "Next Date In Range" : "Next Start Date";
    });

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.startDate
            || !!gridSettings.value.endDate
            || !!gridSettings.value.status
            || !!gridSettings.value.approvalStatus
            || gridSettings.value.campuses.length > 0
            || gridSettings.value.audiences.length > 0;
    });

    /**
    * Gets the filter value text to use for the calendars column.
    *
    * @param row The row to be filtered.
    */
    function getRowCalendarsFilterValue(row: Record<string, unknown>): string {
        let filterValue = "";
        const calendars = row.calendars as string[];
        for (const calendar of calendars) {
            filterValue += calendar;
        }

        return filterValue;
    }

    /**
    * Gets the filter value text to use for the calendars column.
    *
    * @param row The row to be filtered.
    */
    function getRowAudiencesFilterValue(row: Record<string, unknown>): string {
        let filterValue = "";
        const audiences = row.audiences as string[];
        for (const audience of audiences) {
            filterValue += audience;
        }

        return filterValue;
    }

    /**
    * Makes the key unique to the current event calendar.
    *
    * @param row The preference key.
    */
    function makeKeyUniqueToEventCalendar(key: string): string {
        if (config.options?.eventCalendarIdKey) {
            return `${config.options?.eventCalendarIdKey}-${key}`;
        }
        return key;
    }

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete event calendar item.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
    * Called when the grid setting icon is clicked, displays the block filters.
    *
    */
    function onGridSettingsClick(): void {
        isGridSettingsVisible.value = true;
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterStartDate), gridSettings.value.startDate ?? "");
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterEndDate), gridSettings.value.endDate ?? "");
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterStatus), gridSettings.value.status ?? "");
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterApprovalStatus), gridSettings.value.approvalStatus ?? "");
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterCampus), JSON.stringify(gridSettings.value.campuses));
        preferences.setValue(makeKeyUniqueToEventCalendar(PreferenceKey.FilterAudience), JSON.stringify(gridSettings.value.audiences));

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
