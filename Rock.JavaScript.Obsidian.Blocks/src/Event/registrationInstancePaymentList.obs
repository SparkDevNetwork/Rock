<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          title="Payments"
          itemTerm="Payment"
          :exportTitle="config.options?.exportFileName ?? 'Payments'"
          :entityTypeGuid="EntityType.FinancialTransaction"
          stickyHeader
          liveUpdates
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @selectItem="onSelectItem"
          @gridSettingsClick="isGridSettingsVisible = true">

        <TextColumn name="person"
                    title="Person"
                    field="person"
                    :filter="pickExistingValueFilter"
                    visiblePriority="xs" />

        <DateTimeColumn name="transactionDateTime"
                        title="Date / Time"
                        field="transactionDateTime"
                        :filter="dateValueFilter"
                        itemClass="grid-item-pull-left"
                        visiblePriority="md" />

        <CurrencyColumn name="totalAmount"
                        title="Amount"
                        field="totalAmount"
                        itemClass="grid-item-pull-left"
                        :filter="numberValueFilter"
                        visiblePriority="xs" />

        <TextColumn name="paymentMethod"
                    title="Payment Method"
                    field="paymentMethod"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <TextColumn name="account"
                    title="Account"
                    field="account"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <TextColumn name="transactionCode"
                    title="Transaction Code"
                    field="transactionCode"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <Column name="registrars"
                title="Registrar"
                field="registrars"
                :filter="pickExistingValueFilter"
                :filterValue="getRegistrarsFilterValue"
                visiblePriority="md">

            <template #format="{ row }">
                <div class="text-lg">
                    <div v-for="registrar in row.registrarsHtml">
                        <span v-html="registrar"></span><br />
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <Column name="registrants"
                title="Registrant(s)"
                field="registrants"
                :filter="pickExistingValueFilter"
                :filterValue="getRegistrantsFilterValue"
                visiblePriority="xs">

            <template #format="{ row }">
                <div class="text-lg">
                    <div v-for="registrant in row.registrants">
                        <span>{{ registrant }}</span><br />
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible" />
</template>

<style>
.grid-item-pull-left {
    flex-direction: column;
    align-items: end;
}
</style>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, textValueFilter, dateValueFilter, pickExistingValueFilter, numberValueFilter, Column, DateTimeColumn, CurrencyColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { RegistrationInstancePaymentListOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationInstancePaymentList/registrationInstancePaymentListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, PreferenceKey, GridSettingsOptions } from "./RegistrationInstancePaymentList/types.partial";
    import GridSettingsModal from "./RegistrationInstancePaymentList/gridSettingsModal.partial.obs";
    import { computed, reactive, ref, watch } from "vue";

    const config = useConfigurationValues<ListBlockBox<RegistrationInstancePaymentListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;


    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        dateRange: preferences.getValue(makeKeyUniqueToRegistrationTemplate(PreferenceKey.FilterDateRange))
    });

    // #endregion

    //#region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.dateRange;
    });

    //#endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
    * Gets the filter value text to use for the registrants column.
    *
    * @param row The row to be filtered.
    */
    function getRegistrantsFilterValue(row: Record<string, unknown>): string {
        const registrants = row["registrants"] as string[];
        let filterValue = "";

        if (registrants && registrants.length > 0) {
            for (const registrant of registrants) {
                filterValue += registrant;
            }
        }

        return filterValue;
    }

    /**
    * Gets the filter value text to use for the registrars column.
    *
    * @param row The row to be filtered.
    */
    function getRegistrarsFilterValue(row: Record<string, unknown>): string {
        const registrants = row["registrars"] as string[];
        let filterValue = "";

        if (registrants && registrants.length > 0) {
            for (const registrant of registrants) {
                filterValue += registrant;
            }
        }

        return filterValue;
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Makes the key unique to the registration template.
     * @param key The preference key
     */
    function makeKeyUniqueToRegistrationTemplate(key: string): string {

        if (config.options?.registrationTemplateIdKey) {
            return `${config.options?.registrationTemplateIdKey}-${key}`;
        }

        return key;
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(makeKeyUniqueToRegistrationTemplate(PreferenceKey.FilterDateRange), gridSettings.value.dateRange ?? "");

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
