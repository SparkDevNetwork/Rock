<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Linkages"
          :entityTypeGuid="EntityType.EventItemOccurrenceGroupMap"
          stickyHeader
          liveUpdates
          gridSettings
          :exportTitle="config?.options?.exportTitle ?? 'Linkages'"
          :gridSettingsActive="hasSettingsFilters"
          :showLaunchWorkflow="false"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @gridSettingsClick="isGridSettingsVisible = true">

        <Column name="calendarItems"
                title="Calendar Item">

            <template #format="{ row }">
                <div class="text-lg">
                    <div v-for="calendarItem in row.calendarItems">
                        <span v-html="calendarItem"></span><br />
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="campus"
                    title="Campus"
                    field="campus"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <Column name="group"
                title="Group"
                visiblePriority="md">

            <template #format="{ row }">
                <div class="text-lg">
                    <a :href="getGroupDetailUrl(row.groupIdKey)">{{ row.group }}</a>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <Column name="contentItems"
                title="Content Item"
                visiblePriority="md">

            <template #format="{ row }">
                <div class="text-lg">
                    <div v-for="contentItem in row.contentItems">
                        <span v-html="contentItem"></span><br />
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="publicName"
                    title="Public Name"
                    field="publicName"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="urlSlug"
                    title="URL Slug"
                    field="urlSlug"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <EditColumn @click="onSelectItem" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :campusItems="config.options?.campusItems ?? []" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, textValueFilter, DeleteColumn, EditColumn, Column } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { RegistrationInstanceLinkageListOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationInstanceLinkageList/registrationInstanceLinkageListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridSettingsOptions, NavigationUrlKey, PreferenceKey } from "./RegistrationInstanceLinkageList/types.partial";
    import GridSettingsModal from "./RegistrationInstanceLinkageList/gridSettingsModal.partial.obs";
    import { computed, reactive, ref, watch } from "vue";

    const config = useConfigurationValues<ListBlockBox<RegistrationInstanceLinkageListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        campuses: JSON.parse(preferences.getValue(makeKeyUniqueToRegistrationTemplate(PreferenceKey.FilterCampuses)) || "[]"),
    });

    // #endregion

    //#region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return gridSettings.value.campuses.length > 0;
    });

    //#endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete event item occurrence group map.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
     * Creates a URL to the group detail page with the group id.
     * @param key
     */
    function getGroupDetailUrl(key: string): string {

        if (config.navigationUrls?.[NavigationUrlKey.GroupDetailPage]) {
            return config.navigationUrls[NavigationUrlKey.GroupDetailPage].replace("((Key))", key);
        }

        return "";
    }

    function makeKeyUniqueToRegistrationTemplate(key: string): string {

if (config.options?.registrationTemplateIdKey) {
    return `${config.options?.registrationTemplateIdKey}-${key}`;
}

return key;
}

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(makeKeyUniqueToRegistrationTemplate(PreferenceKey.FilterCampuses), JSON.stringify(gridSettings.value.campuses));

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
