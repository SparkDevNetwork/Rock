<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-3">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>

            <div class="col-md-3">
                <CheckBox v-model="isApproved"
                          label="Approved" />
                <span v-if="isApproved" class="small">{{ approvalText }}</span>
            </div>
        </div>

        <TextBox v-model="summary"
                 label="Summary"
                 textMode="multiline" />

        <HtmlEditor v-model="description"
                    label="Description"
                    :editorHeight="100"
                    toolbar="light" />

        <div class="row">
            <div class="col-md-6">
                <h5>Audiences</h5>
                <Grid light
                      liveUpdates
                      keyField="key"
                      itemTerm="Audience"
                      :data="audienceGridData"
                      @addItem="onAddAudience">

                    <TextColumn name="audience"
                                field="audience"
                                visiblePriority="xs" />

                    <DeleteColumn :onClick="onDeleteAudience" disableConfirmation />
                </Grid>

                <CheckBoxList label="Calendars"
                              v-model="calendars"
                              rules="required"
                              help="Calendars that this item should be added to (at least one is required)."
                              :items="availableCalendars"
                              horizontal
                              :repeatColumns="0" />

                <TextBox label="Details Url"
                         v-model="detailsUrl"
                         help="A custom URL to use for showing details of the calendar item (if the default item detail page should not be used)." />
            </div>
            <div class="col-md-6">
                <ImageUploader v-model="photo"
                               label="Photo"
                               :uploadAsTemporary="true"
                               uploadButtonText="Upload"
                               :showDeleteButton="true" />
            </div>
        </div>

        <Panel v-if="eventItemAttributes.length > 0" title="Event Attribute Values" hasCollapse>
            <div v-for="eventItemAttribute in eventItemAttributes">
                <h3>{{ eventItemAttribute.eventCalendarName }}</h3>
                <AttributeValuesContainer v-if="eventItemAttribute.attributeValues && eventItemAttribute.attributes"
                                          :showCategoryLabel="false"
                                          v-model="eventItemAttribute.attributeValues"
                                          :attributes="eventItemAttribute.attributes"
                                          isEditMode
                                          :numberOfColumns="2" />
            </div>
        </Panel>

        <Panel title="Event Attributes" hasCollapse>
            <Grid :data="occurenceAttributesGridData" keyField="key" itemTerm="Event Occurrence Attributes" liveUpdates light @addItem="onAddAttribute">
                <TextColumn name="name"
                            field="name"
                            title="Attribute" />

                <TextColumn name="description"
                            field="description"
                            title="Description" />

                <TextColumn name="fieldType"
                            field="fieldType"
                            title="Field Type" />

                <BooleanColumn name="isRequired"
                               field="isRequired"
                               title="Required" />

                <BooleanColumn name="showInGrid"
                               field="showInGrid"
                               title="Show in Grid" />

                <BooleanColumn name="allowSearch"
                               field="allowSearch"
                               title="Allow Search" />

                <EditColumn @click="onEditAttribute" />

                <DeleteColumn @click="onDeleteAttribute" disableConfirmation />
            </Grid>

            <Modal v-model="isAttributeModalOpen" title="Event Occurrence Attribute" saveText="Save" :onSave="onStartSaveAttribute">

                <RockForm v-model:submit="submitEditAttribute" @submit="onSaveAttribute">
                    <NotificationBox v-show="attributeErrors.length > 0" alertType="validation">
                        Please correct the following:
                        <ul>
                            <li v-for="error of attributeErrors">
                                {{ error }}
                            </li>
                        </ul>
                    </NotificationBox>
                    <AttributeEditor v-model="occurrenceAttribute" :reservedKeyNames="reservedKeyNames" />
                </RockForm>

            </Modal>
        </Panel>

        <Modal v-model="isAudienceModalOpen"
               title="Select Audience"
               @save="onSaveAudience"
               saveText="Save">

            <div>
                <DefinedValuePicker label="Defined Value"
                                    v-model="audience"
                                    :definedTypeGuid="DefinedType.MarketingCampaignAudienceType"
                                    :multiple="false"
                                    :enhanceForLongLists="false" />
            </div>

        </Modal>
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, reactive, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    import ImageUploader from "@Obsidian/Controls/imageUploader.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import HtmlEditor from "@Obsidian/Controls/htmlEditor.obs";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { EventItemBag } from "@Obsidian/ViewModels/Blocks/Event/EventItemDetail/eventItemBag";
    import { EventItemDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/EventItemDetail/eventItemDetailOptionsBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import { EventItemOccurenceAttributeBag } from "@Obsidian/ViewModels/Blocks/Event/EventItemDetail/eventItemOccurenceAttributeBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import Grid, { TextColumn, DeleteColumn, BooleanColumn, EditColumn } from "@Obsidian/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { FieldType as FieldTypeGuids } from "@Obsidian/SystemGuids/fieldType";
    import { newGuid } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<EventItemBag>,
            required: true
        },

        options: {
            type: Object as PropType<EventItemDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: EventItemBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue.attributes ?? {});
    const attributeValues = ref(props.modelValue.attributeValues ?? {});
    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const summary = propertyRef(props.modelValue.summary ?? "", "Summary");
    const detailsUrl = propertyRef(props.modelValue.detailsUrl ?? "", "DetailsUrl");
    const isApproved = propertyRef(props.modelValue.isApproved ?? false, "IsApproved");
    const photo = propertyRef(props.modelValue.photo ?? {}, "PhotoId");
    const eventOccurenceAttributes = ref(props.modelValue.eventOccurenceAttributes ?? []);
    const calendars = ref(props.modelValue.calendars ?? []);

    const availableCalendars = ref(props.modelValue.availableCalendars ?? []);

    const isAttributeModalOpen = ref(false);
    const submitEditAttribute = ref(false);
    const occurrenceAttribute = ref<PublicEditableAttributeBag | null>(null);
    const reservedKeyNames = ref<string[]>([]);
    const attributeErrors = ref<string[]>([]);

    const audience = ref({} as ListItemBag);
    const isAudienceModalOpen = ref(false);
    const audiences = ref(props.modelValue.audiences ?? []);

    const eventItemAttributes = ref(props.modelValue.eventCalendarItemAttributes ?? []);

    const approvalText = ref(props.modelValue.approvalText ?? "");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, summary, isApproved, detailsUrl, photo];

    // #endregion

    // #region Computed Values

    const audienceGridData: GridDataBag = reactive<GridDataBag>({
        rows: audiences.value.map((searchKey: ListItemBag) => toAudienceRowItem(searchKey))
    });

    const occurenceAttributesGridData: GridDataBag = reactive<GridDataBag>({
        rows: eventOccurenceAttributes.value.map(x => toAttributeGridRowItem(x))
    });

    // #endregion

    // #region Functions

    function toAudienceRowItem(audience: ListItemBag): Record<string, unknown> {
        return {
            key: audience.value,
            audience: audience.text
        };
    }

    function toAttributeGridRowItem(bag: EventItemOccurenceAttributeBag): Record<string, unknown> {

        if (bag.attribute?.key && !reservedKeyNames.value.includes(bag.attribute?.key)) {
            reservedKeyNames.value.push(bag.attribute.key);
        }

        return {
            key: bag.attribute?.guid,
            name: bag.attribute?.name,
            fieldType: bag.fieldType,
            description: bag.attribute?.description,
            isRequired: bag.attribute?.isRequired,
            showInGrid: bag.attribute?.isShowInGrid,
            allowSearch: bag.attribute?.isAllowSearch
        };
    }

    // #endregion

    // #region Event Handlers

    const onSaveAudience = (): void => {
        isAudienceModalOpen.value = false;

        const audienceValue = audience.value?.value;
        if (audienceValue && !audiences.value.some(x => x.value == audienceValue)) {
            audiences.value.push(audience.value);
            const rowItem = toAudienceRowItem(audience.value);
            audienceGridData.rows?.push(rowItem);
        }

        audience.value = {};
    };

    const onAddAudience = (): void => {
        isAudienceModalOpen.value = true;
    };

    const onDeleteAudience = async (key: string): Promise<void> => {
        isAudienceModalOpen.value = false;
        audiences.value = audiences.value.filter(s => s.value !== key);

        // Update the grid.
        if (audienceGridData.rows) {
            const index = audienceGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                audienceGridData.rows?.splice(index, 1);
            }
        }
    };

    const onAddAttribute = (): void => {
        occurrenceAttribute.value = {} as PublicEditableAttributeBag;
        occurrenceAttribute.value.fieldTypeGuid = FieldTypeGuids.Text;
        isAttributeModalOpen.value = true;
        attributeErrors.value = [];
    };

    const onEditAttribute = (key: string): void => {
        attributeErrors.value = [];
        const selectedAttribute = eventOccurenceAttributes.value.find(x => x.attribute?.guid === key);
        // If attribute exists set it as current attribute for editing.
        if (selectedAttribute?.attribute) {
            occurrenceAttribute.value = selectedAttribute.attribute;
            isAttributeModalOpen.value = true;
            reservedKeyNames.value = reservedKeyNames.value.filter(x => x !== selectedAttribute.attribute?.key);
        }
        else {
            onAddAttribute();
        }
    };

    const onDeleteAttribute = async (key: string): Promise<void> => {
        isAttributeModalOpen.value = false;
        const deletedAttribute = eventOccurenceAttributes.value.find(s => s.attribute?.guid === key);
        eventOccurenceAttributes.value = eventOccurenceAttributes.value.filter(s => s.attribute?.guid !== key);

        if (deletedAttribute?.attribute) {
            reservedKeyNames.value = reservedKeyNames.value.filter(k => k !== deletedAttribute.attribute?.key);
        }

        // Update the grid.
        if (occurenceAttributesGridData.rows) {
            const index = occurenceAttributesGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                occurenceAttributesGridData.rows?.splice(index, 1);
            }
        }
    };

    const onSaveAttribute = (): void => {

        if (occurrenceAttribute.value && eventOccurenceAttributes.value) {
            const index = eventOccurenceAttributes.value.findIndex(a => a.attribute?.guid === occurrenceAttribute.value?.guid);

            if (index !== -1) {
                let editedAttribute = eventOccurenceAttributes.value.find(a => a.attribute?.guid == occurrenceAttribute.value?.guid);
                let rowItem = occurenceAttributesGridData.rows?.find(x => x.key == occurrenceAttribute.value?.key);

                if (editedAttribute?.attribute) {
                    editedAttribute.attribute = occurrenceAttribute.value;
                    eventOccurenceAttributes.value.splice(index, 1, editedAttribute);
                }

                if (rowItem && occurenceAttributesGridData.rows && editedAttribute?.attribute) {
                    // Update GridRowItem so changes are reflected in the UI.
                    const rowIndex = occurenceAttributesGridData.rows.findIndex(r => r.key === occurrenceAttribute.value?.key);
                    rowItem = toAttributeGridRowItem(editedAttribute);
                    occurenceAttributesGridData.rows?.splice(rowIndex, 1, rowItem);
                }
            }
            else {
                const newEventAttribute = {
                    attribute: occurrenceAttribute.value,
                    fieldType: ""
                };
                newEventAttribute.attribute.guid = newGuid();
                eventOccurenceAttributes.value.push(newEventAttribute);

                // Add new RowItem to the grid to represent the newly added attribute.
                const newRowItem = toAttributeGridRowItem(newEventAttribute);
                occurenceAttributesGridData.rows?.push(newRowItem);
            }

            occurrenceAttribute.value = null;
            isAttributeModalOpen.value = false;
        }
    };

    const onStartSaveAttribute = (): void => {
        attributeErrors.value = [];
        const isExistingKey = reservedKeyNames.value.includes(occurrenceAttribute.value?.key ?? "") && !occurrenceAttribute.value?.guid;
        submitEditAttribute.value = !isExistingKey;
        if (isExistingKey) {
            attributeErrors.value.push("There is already an existing property with the key value you entered or the key has illegal characters. Please select a different key value and use only letters, numbers and underscores.");
        }
    };

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(summary, props.modelValue.summary ?? "");
        updateRefValue(isApproved, props.modelValue.isApproved ?? false);
        updateRefValue(detailsUrl, props.modelValue.detailsUrl ?? "");
        updateRefValue(photo, props.modelValue.photo ?? {});
        updateRefValue(audiences, props.modelValue.audiences ?? []);
        updateRefValue(calendars, props.modelValue.calendars ?? []);
        updateRefValue(eventItemAttributes, props.modelValue.eventCalendarItemAttributes ?? []);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, eventOccurenceAttributes, audiences, calendars, eventItemAttributes, ...propRefs], () => {
        const newValue: EventItemBag = {
            ...props.modelValue,
            attributeValues: attributeValues.value,
            description: description.value,
            isActive: isActive.value,
            name: name.value,
            summary: summary.value,
            isApproved: isApproved.value,
            eventOccurenceAttributes: eventOccurenceAttributes.value,
            detailsUrl: detailsUrl.value,
            photo: photo.value,
            audiences: audiences.value,
            calendars: calendars.value,
            eventCalendarItemAttributes: eventItemAttributes.value
        };

        emit("update:modelValue", newValue);
    }, { deep: true });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
