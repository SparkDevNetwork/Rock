<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="live-event">
        <div class="row">
            <div class="col-xs-12 col-md-4 col-lg-3 col-md-4">
                <Kpi class="ml-0"
                     color="blue"
                     :colorShade="600"
                     :value="participantCount"
                     label="Current Participants"
                     iconCssClass="fa fa-user"
                     isCard
                     tooltip="The number of individuals that are currently participating in the experience." />
            </div>
        </div>

        <NotificationBox v-if="isExperienceInactive" alertType="warning">
            This experience event has ended.
        </NotificationBox>

        <div class="experience-body row d-flex flex-wrap" :class="{ inactive: isExperienceInactive }">
            <div class="col-xs-12 col-md-6 col-lg-7 mb-3 mb-md-0">
                <div class="experience-actions-panel panel panel-section h-100 mb-sm-0">
                    <div class="panel-heading">
                        <h4 class="panel-title">Experience Actions</h4>
                        <a v-if="isNotificationAvailable" href="#" :class="notificationStateClass" @click.prevent="onNotificationStateClick">
                            <i :class="notificationStateIconClass"></i>
                        </a>
                    </div>
                    <div class="panel-body">
                        <ExperienceActionButtons :modelValue="activeAction"
                                                 :actions="experienceActions"
                                                 @update:modelValue="onUpdateActiveAction" />
                    </div>
                </div>
            </div>

            <div class="col-xs-12 col-md-6 col-lg-5">
                <div class="preview-panel">
                    <iframe v-if="previewPageUrl" class="invisible" :src="previewPageUrl" @load="onPreviewLoad" />
                    <NotificationBox v-else alertType="info">
                        Live experience preview has not been configured.
                    </NotificationBox>
                    <div>
                        <RockLabel>Visualizer</RockLabel>
                        <div class="d-flex">
                            <div class="mr-3">
                                <InlineCheckBox v-model="isVisualizerAutomatic" label="Automatic" />
                            </div>
                            <div class="flex-grow-1 overflow-hidden">
                                <DropDownList :modelValue="activeVisualizer"
                                              @update:modelValue="onUpdateActiveVisualizer"
                                              :items="visualizerItems"
                                              showBlankItem
                                              :disabled="isVisualizerAutomatic" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<style scoped>
.experience-body.inactive {
    cursor: not-allowed;
    opacity: .5;
    pointer-events: none;
}

.experience-actions-panel {
    background-color: var(--panel-heading-bg);
}

.preview-panel {
    display: flex;
    flex-direction: column;
    min-height: 480px;
}

.preview-panel iframe {
    flex-grow: 1;
    overflow: hidden;
    border: 1px solid #dfe0e1;
    border-radius: 4px;
}
</style>

<script setup lang="ts">
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Kpi from "@Obsidian/Controls/kpi.obs";
    import ExperienceActionButtons from "./experienceActionButtons.partial.obs";
    import InlineCheckBox from "@Obsidian/Controls/inlineCheckBox.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import { computed, PropType, ref, watch } from "vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ITopic } from "@Obsidian/Utility/realTime";
    import { IParticipantTopic } from "../types.partial";
    import { ExperienceManagerInitializationBox } from "@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox";
    import { NavigationUrlKey } from "./types.partial";

    const props = defineProps({
        /** The identifier of the occurrence we have joined. */
        occurrenceIdKey: {
            type: String as PropType<string | null>,
            default: null
        },

        /** The topic proxy for the experience we have joined. */
        realTimeTopic: {
            type: Object as PropType<ITopic<IParticipantTopic> | null>,
            default: null
        },

        /** The block configuration data. */
        configuration: {
            type: Object as PropType<ExperienceManagerInitializationBox>,
            required: true
        },

        /** The identifier of the initial action being displayed, read-only. */
        initialActionIdKey: {
            type: String as PropType<string | null>,
            required: true
        },

        /** The identifier of the initial action visualizer being displayed, read-only. */
        initialVisualizerActionIdKey: {
            type: String as PropType<string | null>,
            required: true
        }
    });

    // const emit = defineEmits<{
    // }>();

    // #region Values

    const isNotificationsEnabled = ref(false);
    const activeAction = ref<string | null>(props.initialActionIdKey ?? null);
    const participantCount = ref(props.configuration.participantCount);
    const isExperienceInactive = ref(props.configuration.isExperienceInactive);

    const experienceActions: ListItemBag[] = props.configuration.actions ?? [];
    const isNotificationAvailable = props.configuration.isNotificationAvailable;

    const activeVisualizer = ref(props.initialVisualizerActionIdKey ?? "");
    const isVisualizerAutomatic = ref(true);

    // #endregion

    // #region Computed Values

    const notificationStateClass = computed((): string => {
        return isNotificationsEnabled.value ? "btn btn-info btn-xs" : "btn btn-default btn-xs";
    });

    const notificationStateIconClass = computed((): string => {
        return isNotificationsEnabled.value ? "fa fa-fw fa-bell" : "fa fa-fw fa-bell-slash";
    });

    const previewPageUrl = computed((): string => {
        return props.configuration.navigationUrls?.[NavigationUrlKey.LiveExperiencePage] ?? "";
    });

    const visualizerItems = computed((): ListItemBag[] => {
        return (props.configuration.actions ?? []).map((a, idx) => ({
            value: a.value,
            text: `${idx + 1}. ${a.text}`
        }));
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when the notification bell is clicked. Toggle the
     * flag which determines if we are sending push notifications.
     */
    function onNotificationStateClick(ev: Event): void {
        isNotificationsEnabled.value = !isNotificationsEnabled.value;

        if (ev.target instanceof HTMLElement) {
            ev.target.blur();
        }
    }

    /**
     * Called when the preview IFrame has loaded. Hide the admin bar and then
     * show the frame.
     *
     * @param ev The event.
     */
    function onPreviewLoad(ev: Event): void {
        if (ev.target instanceof HTMLIFrameElement) {
            const adminFooter = ev.target.contentDocument?.querySelector("#cms-admin-footer") as HTMLElement;

            if (adminFooter) {
                adminFooter.style.display = "none";
            }

            ev.target.classList.remove("invisible");
        }
    }

    /**
     * Event handler for when the individual manually changes selection of the
     * activeAction value. Notify the server of the change.
     *
     * @param value The new value to set activeAction to.
     */
    async function onUpdateActiveAction(value: string | null): Promise<void> {
        if (activeAction.value === value || !props.realTimeTopic || !props.occurrenceIdKey) {
            return;
        }

        activeAction.value = value;

        if (activeAction.value) {
            await props.realTimeTopic.server.showAction(props.occurrenceIdKey, activeAction.value, isNotificationsEnabled.value);

            if (isVisualizerAutomatic.value) {
                await props.realTimeTopic.server.showVisualizer(props.occurrenceIdKey, activeAction.value);
            }
        }
        else {
            await props.realTimeTopic.server.clearActions(props.occurrenceIdKey);

            if (isVisualizerAutomatic.value) {
                await props.realTimeTopic.server.clearVisualizer(props.occurrenceIdKey);
            }
        }
    }

    /**
     * Event handler for when the server notifies us that an action should
     * be shown.
     *
     * @param idKey The occurrence identifier key.
     * @param actionIdKey The action identifier that should be shown.
     */
    function onShowAction(idKey: string, actionIdKey: string): void {
        if (idKey === props.occurrenceIdKey) {
            activeAction.value = actionIdKey;
        }
    }

    /**
     * Event handler for when the server notifies us that all actions
     * should be cleared.
     *
     * @param idKey The occurrence identifier key.
     */
    function onClearActions(idKey: string): void {
        if (idKey === props.occurrenceIdKey) {
            activeAction.value = null;
        }
    }

    /**
     * Event handler for when the server notifies us that a visualizer should
     * be shown.
     *
     * @param idKey The occurrence identifier key.
     * @param actionIdKey The action identifier that should be shown.
     */
    function onShowVisualizer(idKey: string, actionIdKey: string): void {
        if (idKey === props.occurrenceIdKey) {
            activeVisualizer.value = actionIdKey;
        }
    }

    /**
     * Event handler for when the server notifies us that the visualizer
     * should be cleared.
     *
     * @param idKey The occurrence identifier key.
     */
    function onClearVisualizer(idKey: string): void {
        if (idKey === props.occurrenceIdKey) {
            activeVisualizer.value = "";
        }
    }

    /**
     * Event handler for when the individual manually changes selection of the
     * activeVisualizer value. Notify the server of the change.
     *
     * @param value The new value to set activeVisualizer to.
     */
    async function onUpdateActiveVisualizer(value: string | string[]): Promise<void> {
        const newValue = typeof value === "string" ? value : "";

        if (activeVisualizer.value === newValue) {
            return;
        }

        activeVisualizer.value = newValue;

        if (props.realTimeTopic && props.occurrenceIdKey) {
            if (activeVisualizer.value) {
                await props.realTimeTopic.server.showVisualizer(props.occurrenceIdKey, activeVisualizer.value);
            }
            else {
                await props.realTimeTopic.server.clearVisualizer(props.occurrenceIdKey);
            }
        }
    }

    /**
     * Event handler for a timer that causes us to update the participant
     * count in the UI.
     */
    async function onUpdateParticipantCountTimer(): Promise<void> {
        try {
            if (props.realTimeTopic && props.occurrenceIdKey) {
                participantCount.value = await props.realTimeTopic.server.getParticipantCount(props.occurrenceIdKey);
            }
        }
        finally {
            setTimeout(onUpdateParticipantCountTimer, props.configuration.participantCountUpdateInterval * 1_000);
        }
    }

    // #endregion

    watch(() => props.realTimeTopic, () => {
        if (props.realTimeTopic) {
            props.realTimeTopic.on("showAction", onShowAction);
            props.realTimeTopic.on("clearActions", onClearActions);
            props.realTimeTopic.on("showVisualizer", onShowVisualizer);
            props.realTimeTopic.on("clearVisualizer", onClearVisualizer);
        }
    });

    watch(() => props.initialActionIdKey, () => {
        activeAction.value = props.initialActionIdKey;
    });

    watch(() => props.initialVisualizerActionIdKey, () => {
        activeVisualizer.value = props.initialVisualizerActionIdKey ?? "";
    });

    setTimeout(onUpdateParticipantCountTimer, props.configuration.participantCountUpdateInterval * 1_000);
</script>
