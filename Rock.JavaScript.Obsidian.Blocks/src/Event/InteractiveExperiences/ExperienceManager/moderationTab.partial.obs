<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="moderation">
        <div class="well">
            <div class="row">
                <div class="col-md-6">
                    <DropDownList v-model="filterAction"
                                  label="Action"
                                  :items="filterActionItems" />
                </div>

                <div class="col-md-6">
                    <CampusPicker v-model="filterCampus"
                                  label="Campus"
                                  displayStyle="condensed"
                                  forceVisible
                                  multiple />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <CheckBoxList v-model="filterStatus"
                                  label="Statuses"
                                  horizontal
                                  :items="filterStatusItems" />
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="grid-table table table-condensed table-light table-hover">
                <thead>
                    <tr>
                        <th></th>
                        <th>Response</th>
                        <th>Campus</th>
                        <th>Status</th>
                        <th class="grid-columncommand">Approve</th>
                        <th class="grid-columncommand">Reject</th>
                        <th class="grid-columncommand"></th>
                    </tr>
                </thead>

                <tbody>
                    <tr v-for="row in filteredAnswers">
                        <td style="width: 1px;">
                            <span class="badge badge-default">{{ row.actionIndex }}</span>
                        </td>
                        <td>{{ row.response }}</td>
                        <td>{{ row.campusName }}</td>
                        <td v-html="getStatusLabelHtml(row.status)"></td>
                        <td class="grid-columncommand" align="center">
                            <a v-if="row.status !== approvedStatus" class="btn btn-success btn-sm btn-square grid-approve-button" @click.prevent="onApproveAnswer(row)">
                                <i class="fa fa-thumbs-up"></i>
                            </a>
                        </td>
                        <td class="grid-columncommand" align="center">
                            <a v-if="row.status !== rejectedStatus" class="btn btn-danger btn-sm btn-square grid-reject-button" @click.prevent="onRejectAnswer(row)">
                                <i class="fa fa-thumbs-down"></i>
                            </a>
                        </td>
                        <td class="grid-columncommand" align="center">
                            <a class="btn btn-danger btn-sm btn-square grid-delete-button" @click.prevent="onDeleteAnswer(row)">
                                <i class="fa fa-times"></i>
                            </a>
                        </td>
                    </tr>

                    <tr v-if="!filteredAnswers.length" align="left">
                        <td colspan="7">No matching responses.</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, reactive, ref, watch } from "vue";
    import { ITopic } from "@Obsidian/Utility/realTime";
    import { IParticipantTopic } from "../types.partial";
    import { InteractiveExperienceApprovalStatus } from "@Obsidian/Enums/Event/interactiveExperienceApprovalStatus";
    import { ExperienceManagerInitializationBox } from "@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox";
    import { ExperienceAnswerBag } from "@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { alert, confirm } from "@Obsidian/Utility/dialogs";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { areEqual } from "@Obsidian/Utility/guid";

    type ActionAnswer = ExperienceAnswerBag & {
        actionIndex: number;
    };

    const props = defineProps({
        /** The identifier of the occurrence we have joined. */
        occurrenceIdKey: {
            type: String as PropType<string | null>,
            default: null
        },

        /** The topic proxy for the experience we have joined. */
        realTimeTopic: {
            type: Object as PropType<ITopic<IParticipantTopic> | null>,
            default: null
        },

        /** The block configuration data. */
        configuration: {
            type: Object as PropType<ExperienceManagerInitializationBox>,
            required: true
        }
    });

    // const emit = defineEmits<{
    // }>();

    // #region Values

    const invokeBlockAction = useInvokeBlockAction();
    const occurrenceAnswers = reactive<ActionAnswer[]>([]);

    const filterAction = ref("");
    const filterCampus = ref<ListItemBag[]>([]);
    const filterStatus = ref<string[]>([]);

    const approvedStatus = InteractiveExperienceApprovalStatus.Approved;
    const rejectedStatus = InteractiveExperienceApprovalStatus.Rejected;
    const filterStatusItems: ListItemBag[] = [
        {
            value: InteractiveExperienceApprovalStatus.Pending.toString(),
            text: "Pending"
        },
        {
            value: InteractiveExperienceApprovalStatus.Approved.toString(),
            text: "Approved"
        },
        {
            value: InteractiveExperienceApprovalStatus.Rejected.toString(),
            text: "Rejected"
        }
    ];

    // #endregion

    // #region Computed Values

    const filteredAnswers = computed((): ActionAnswer[] => {
        return occurrenceAnswers
            .filter(a => !filterAction.value || filterAction.value === a.actionIdKey)
            .filter(a => !filterCampus.value.length || filterCampus.value.some(c => areEqual(c.value, a.campusGuid)))
            .filter(a => !filterStatus.value.length || filterStatus.value.some(s => a.status.toString() === s));
    });

    const filterActionItems = computed((): ListItemBag[] => {
        return (props.configuration.actions ?? []).map((a, idx) => ({
            value: a.value,
            text: `${idx+1}. ${a.text}`
        }));
    });

    // #endregion

    // #region Functions

    /**
     * Called during startup as well as anytime the realTimeTopic prop
     * value changes. Add all the listeners needed to the topic.
     */
    function setupTopicListeners(): void {
        if (props.realTimeTopic) {
            props.realTimeTopic.on("answerSubmitted", onAnswerSubmitted);
            props.realTimeTopic.on("answerUpdated", onAnswerUpdated);
            props.realTimeTopic.on("answerRemoved", onAnswerRemoved);
        }
    }

    /**
     * Gets the index number of the action. This is used to display the
     * number in the grid of answers.
     *
     * @param actionId The identifier of the action whose index is to be determined.
     *
     * @returns The index number of the action, with 1 being the first index. Will return 0 if the action was not found.
     */
    function getActionIndex(actionId?: string | null): number {
        if (!actionId) {
            return 0;
        }

        const index = (props.configuration.actions ?? []).findIndex(a => a.value === actionId);

        return index < 0 ? 0 : index + 1;
    }

    /**
     * Gets the HTML used to render the status label for the given answer status.
     *
     * @param status The status to be represented by the label.
     *
     * @returns An HTML string that represents the answer status.
     */
    function getStatusLabelHtml(status: InteractiveExperienceApprovalStatus): string {
        if (status === InteractiveExperienceApprovalStatus.Approved) {
            return `<span class="label label-success">Approved</span>`;
        }
        else if (status === InteractiveExperienceApprovalStatus.Rejected) {
            return `<span class="label label-danger">Rejected</span>`;
        }
        else {
            return `<span class="label label-default">Pending</span>`;
        }
    }

    /**
     * Updates an existing answer. If the answer is found it is replaced with
     * the new answer data. Otherwise it is appended to the list of answers.
     *
     * @param answer The answer details that were updated.
     */
    function updateAnswer(answer: ExperienceAnswerBag): void {
        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answer.idKey);

        const actionAnswer: ActionAnswer = {
            actionIndex: getActionIndex(answer.actionIdKey),
            ...answer
        };

        if (answerIndex !== -1) {
            occurrenceAnswers.splice(answerIndex, 1, actionAnswer);
        }
        else {
            occurrenceAnswers.push(actionAnswer);
        }
    }

    /**
     * Removes an answer from the list of answers.
     *
     * @param answerIdKey The identifier key of the answer to be removed.
     */
    function removeAnswer(answerIdKey: string): void {
        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answerIdKey);

        if (answerIndex !== -1) {
            occurrenceAnswers.splice(answerIndex, 1);
        }
    }

    /**
     * Gets all answers from the server. This will also clear the existing
     * list of answers. Otherwise we might still get out of sync when the
     * results come back due to a RealTime message arriving before the
     * results are returned.
     */
    async function getAllAnswers(): Promise<void> {
        // Clear the array.
        occurrenceAnswers.slice();

        const response = await invokeBlockAction<ExperienceAnswerBag[]>("GetExperienceAnswers", { occurrenceKey: props.configuration.occurrenceIdKey });

        if (response.isSuccess && response.data) {
            for (const answer of response.data) {
                updateAnswer(answer);
            }
        }
    }

    /**
     * Updates an answer's approval status. This does not update the UI
     * directly. Instead the RealTime message from the server will cause
     * the UI to update.
     *
     * @param answerIdKey The identifier key of the answer to be updated.
     * @param status The new approval status to set the answer to.
     */
    async function updateAnswerStatus(answerIdKey: string, status: InteractiveExperienceApprovalStatus): Promise<void> {
        const response = await invokeBlockAction("UpdateExperienceAnswerStatus", { key: answerIdKey, status: status });

        if (response.isError) {
            await alert(response.errorMessage || "Response could not be updated.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when a new answer has been submitted via the RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was submitted to.
     * @param answer The answer details that were submitted.
     */
    function onAnswerSubmitted(idKey: string, answer: ExperienceAnswerBag): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        updateAnswer(answer);
    }

    /**
     * Event handler for when an existing answer has been updated via the
     * RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was updated for.
     * @param answer The answer details that were updated.
     */
    function onAnswerUpdated(idKey: string, answer: ExperienceAnswerBag): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        updateAnswer(answer);
    }

    /**
     * Event handler for when an existing answer has been removed via the
     * RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was removed from.
     * @param answerIdKey The identifier key of the answer that was removed.
     */
    function onAnswerRemoved(idKey: string, answerIdKey: string): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        removeAnswer(answerIdKey);
    }

    /**
     * Event handler for when the moderator wants approve an answer.
     *
     * @param answer The answer that is to be approved.
     */
    function onApproveAnswer(answer: ActionAnswer): void {
        if (answer.idKey) {
            updateAnswerStatus(answer.idKey, InteractiveExperienceApprovalStatus.Approved);
        }
    }

    /**
     * Event handler for when the moderator wants reject an answer.
     *
     * @param answer The answer that is to be rejected.
     */
    function onRejectAnswer(answer: ActionAnswer): void {
        if (answer.idKey) {
            updateAnswerStatus(answer.idKey, InteractiveExperienceApprovalStatus.Rejected);
        }
    }

    /**
     * Event handler for when the moderator wants delete an answer.
     *
     * @param answer The answer that is to be deleted.
     */
    async function onDeleteAnswer(answer: ActionAnswer): Promise<void> {
        if (!answer.idKey) {
            return;
        }

        const confirmed = await confirm(`Do you wish to delete< this response?\n\n${answer.response}`);

        if (!confirmed) {
            return;
        }

        const response = await invokeBlockAction("DeleteExperienceAnswer", { key: answer.idKey });

        if (response.isError) {
            await alert(response.errorMessage || "Response could not be deleted.");
        }
    }

    // #endregion

    getAllAnswers();
    setupTopicListeners();

    watch(() => props.realTimeTopic, () => setupTopicListeners());
</script>
