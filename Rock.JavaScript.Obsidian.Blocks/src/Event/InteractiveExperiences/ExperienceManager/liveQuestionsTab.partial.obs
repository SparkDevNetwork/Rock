<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="live-questions">
        <div class="row d-flex flex-wrap">
            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-2">
                <DropDownList v-model="selectedAction"
                              :showBlankItem="false"
                              :items="actionItems" />
            </div>

            <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3 mb-2 ml-md-auto">
                <CampusPicker v-model="selectedCampus"
                              forceVisible
                              showBlankItem
                              displayStyle="condensed" />
            </div>
        </div>

        <div class="table-responsive">
            <table class="grid-table table table-condensed table-light">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Campus</th>
                        <th>Response</th>
                    </tr>
                </thead>

                <tbody>
                    <tr v-for="row in filteredAnswers">
                        <td>{{ row.submitterName }}</td>
                        <td>{{ row.campusName }}</td>
                        <td>{{ row.response }}</td>
                    </tr>

                    <tr v-if="!filteredAnswers.length">
                        <td colspan="3">No matching responses.</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, reactive, ref, watch } from "vue";
    import { ITopic } from "@Obsidian/Utility/realTime";
    import { IParticipantTopic } from "../types.partial";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { InteractiveExperienceApprovalStatus } from "@Obsidian/Enums/Event/interactiveExperienceApprovalStatus";
    import { ExperienceManagerInitializationBox } from "@Obsidian/ViewModels/Blocks/Event/InteractiveExperiences/ExperienceManager/experienceManagerInitializationBox";
    import { ExperienceAnswerBag } from "@Obsidian/ViewModels/Event/InteractiveExperiences/experienceAnswerBag";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { areEqual } from "@Obsidian/Utility/guid";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";

    type ActionAnswer = ExperienceAnswerBag & {
    };

    const props = defineProps({
        /** The identifier of the occurrence we have joined. */
        occurrenceIdKey: {
            type: String as PropType<string | null>,
            default: null
        },

        /** The topic proxy for the experience we have joined. */
        realTimeTopic: {
            type: Object as PropType<ITopic<IParticipantTopic> | null>,
            default: null
        },

        /** The block configuration data. */
        configuration: {
            type: Object as PropType<ExperienceManagerInitializationBox>,
            required: true
        }
    });

    // #region Values

    const invokeBlockAction = useInvokeBlockAction();
    const occurrenceAnswers = reactive<ActionAnswer[]>([]);
    const selectedAction = ref("");
    const selectedCampus = ref<ListItemBag | null>(null);

    // #endregion

    // #region Computed Values

    const filteredAnswers = computed((): ActionAnswer[] => {
        return occurrenceAnswers
            .filter(a => a.status === InteractiveExperienceApprovalStatus.Approved)
            .filter(a => selectedAction.value === a.actionIdKey)
            .filter(a => !selectedCampus.value || areEqual(selectedCampus.value.value, a.campusGuid))
            .reverse();
    });

    const actionItems = computed((): ListItemBag[] => {
        return (props.configuration.actions ?? []).map((a, idx) => ({
            value: a.value,
            text: `${idx + 1}. ${a.text}`
        }));
    });

    // #endregion

    // #region Functions

    /**
     * Called during startup as well as anytime the realTimeTopic prop
     * value changes. Add all the listeners needed to the topic.
     */
    function setupTopicListeners(): void {
        if (props.realTimeTopic) {
            props.realTimeTopic.on("answerSubmitted", onAnswerSubmitted);
            props.realTimeTopic.on("answerUpdated", onAnswerUpdated);
            props.realTimeTopic.on("answerRemoved", onAnswerRemoved);
        }
    }

    /**
     * Updates an existing answer. If the answer is found it is replaced with
     * the new answer data. Otherwise it is appended to the list of answers.
     *
     * @param answer The answer details that were updated.
     */
    function updateAnswer(answer: ExperienceAnswerBag): void {
        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answer.idKey);

        const actionAnswer: ActionAnswer = {
            ...answer
        };

        if (answerIndex !== -1) {
            // Remove the answer and insert it at the beginning so it at the end.
            occurrenceAnswers.splice(answerIndex, 1);
        }

        occurrenceAnswers.push(actionAnswer);
    }

    /**
     * Removes an answer from the list of answers.
     *
     * @param answerIdKey The identifier key of the answer to be removed.
     */
    function removeAnswer(answerIdKey: string): void {
        const answerIndex = occurrenceAnswers.findIndex(a => a.idKey === answerIdKey);

        if (answerIndex !== -1) {
            occurrenceAnswers.splice(answerIndex, 1);
        }
    }

    /**
     * Gets all answers from the server. This will also clear the existing
     * list of answers. Otherwise we might still get out of sync when the
     * results come back due to a RealTime message arriving before the
     * results are returned.
     */
    async function getAllAnswers(): Promise<void> {
        // Clear the array.
        occurrenceAnswers.slice();

        const response = await invokeBlockAction<ExperienceAnswerBag[]>("GetExperienceAnswers", { occurrenceKey: props.configuration.occurrenceIdKey });

        if (response.isSuccess && response.data) {
            for (const answer of response.data) {
                updateAnswer(answer);
            }
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when a new answer has been submitted via the RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was submitted to.
     * @param answer The answer details that were submitted.
     */
    function onAnswerSubmitted(idKey: string, answer: ExperienceAnswerBag): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        updateAnswer(answer);
    }

    /**
     * Event handler for when an existing answer has been updated via the
     * RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was updated for.
     * @param answer The answer details that were updated.
     */
    function onAnswerUpdated(idKey: string, answer: ExperienceAnswerBag): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        updateAnswer(answer);
    }

    /**
     * Event handler for when an existing answer has been removed via the
     * RealTime engine.
     *
     * @param idKey The identifier key of the occurrence the answer was removed from.
     * @param answerIdKey The identifier key of the answer that was removed.
     */
    function onAnswerRemoved(idKey: string, answerIdKey: string): void {
        if (idKey !== props.occurrenceIdKey) {
            return;
        }

        removeAnswer(answerIdKey);
    }

    // #endregion

    getAllAnswers();
    setupTopicListeners();

    watch(() => props.realTimeTopic, () => setupTopicListeners());

    if (actionItems.value.length > 0 && actionItems.value[0].value) {
        selectedAction.value = actionItems.value[0].value;
    }
</script>
