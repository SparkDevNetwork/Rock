<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Active Registration Instance"
          :entityTypeGuid="EntityType.RegistrationInstance"
          stickyHeader
          :showLaunchWorkflow="false"
          liveUpdates
          @selectItem="onSelectItem">
        <SelectColumn />

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <DateColumn name="startDateTime"
                        title="Start Date Time"
                        field="startDateTime"
                        :filter="dateValueFilter"
                        visiblePriority="xs" />

        <DateColumn name="endDateTime"
                        title="End Date Time"
                        field="endDateTime"
                        :filter="dateValueFilter"
                        visiblePriority="xs" />

        <TextColumn name="details"
                    title="Details"
                    field="details"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <NumberColumn name="registrantsCount"
                      title="Registrant Count"
                      field="registrantsCount"
                      :filter="numberValueFilter"
                      visiblePriority="xs" />

        <BooleanColumn name="isActive"
                       title="Is Active"
                       field="isActive"
                       visiblePriority="xs" />



        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, BooleanColumn, TextColumn, NumberColumn, numberValueFilter, textValueFilter, dateValueFilter, SelectColumn, DateColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { RegistrationInstanceActiveListOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationInstanceActiveList/registrationInstanceActiveListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./RegistrationInstanceActiveList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<RegistrationInstanceActiveListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
