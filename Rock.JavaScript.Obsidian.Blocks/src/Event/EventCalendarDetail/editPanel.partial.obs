<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="iconCssClass"
                         label="Calendar CSS Class" />
            </div>
        </div>

        <Panel title="Event Attributes" hasCollapse>

            <Grid :data="eventAttributesGridData" keyField="key" itemTerm="Event Occurrence Attributes" liveUpdates light @addItem="onAddAttribute">
                <TextColumn name="name"
                            field="name"
                            title="Attribute" />

                <TextColumn name="description"
                            field="description"
                            title="Description" />

                <TextColumn name="fieldType"
                            field="fieldType"
                            title="Field Type" />

                <BooleanColumn name="isRequired"
                               field="isRequired"
                               title="Required" />

                <BooleanColumn name="showInGrid"
                               field="showInGrid"
                               title="Show in Grid" />

                <BooleanColumn name="allowSearch"
                               field="allowSearch"
                               title="Allow Search" />

                <EditColumn @click="onEditAttribute" />

                <DeleteColumn @click="onDeleteAttribute" disableConfirmation />
            </Grid>

            <Modal v-model="isAttributeModalOpen" title="Calendar Event Attribute" saveText="Save" :onSave="onStartSaveAttribute">
                <hr />
                <RockForm v-model:submit="submitEditAttribute" @submit="onSaveAttribute">
                    <NotificationBox v-show="attributeErrors.length > 0" alertType="validation">
                        Please correct the following:
                        <ul>
                            <li v-for="error of attributeErrors">
                                {{ error }}
                            </li>
                        </ul>
                    </NotificationBox>
                    <AttributeEditor v-model="eventAttribute" :reservedKeyNames="reservedKeyNames" />
                </RockForm>
            </Modal>
        </Panel>

        <Panel title="Content Channels" hasCollapse>
            <Grid :data="contentChannelsGridData" keyField="key" itemTerm="Content Channel" liveUpdates light @addItem="onAddContentChannel">
                <TextColumn name="name"
                            field="name"
                            title="Channels" />

                <DeleteColumn @click="onDeleteContentChannel" disableConfirmation />
            </Grid>
        </Panel>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />

        <Modal v-model="isContentChannelModalOpen"
               title="Content Channel"
               @save="onSaveContentChannel"
               saveText="Save">

            <div>
                <DropDownList label="Channel"
                              v-model="contentChannel"
                              :items="contentChannelsList"
                              showBlankItem />

            </div>

        </Modal>
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, reactive, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { EventCalendarBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventCalendarBag";
    import { EventCalendarDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventCalendarDetailOptionsBag";
    import Panel from "@Obsidian/Controls/panel.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { EventAttributeBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventAttributeBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { newGuid } from "@Obsidian/Utility/guid";
    import Grid, { TextColumn, DeleteColumn, BooleanColumn, EditColumn } from "@Obsidian/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { FieldType as FieldTypeGuids } from "@Obsidian/SystemGuids/fieldType";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<EventCalendarBag>,
            required: true
        },

        options: {
            type: Object as PropType<EventCalendarDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: EventCalendarBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue.attributes ?? {});
    const attributeValues = ref(props.modelValue.attributeValues ?? {});
    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const iconCssClass = propertyRef(props.modelValue.iconCssClass ?? "", "iconCssClass");
    const isContentChannelModalOpen = ref(false);
    const contentChannelsList = ref(props.modelValue.contentChannels ?? []);
    const contentChannel = ref("");
    const savedContentChannels = ref(props.modelValue.savedContentChannels ?? []);
    const eventAttributes = ref(props.modelValue.eventAttributes ?? []);
    const isAttributeModalOpen = ref(false);
    const submitEditAttribute = ref(false);
    const eventAttribute = ref<PublicEditableAttributeBag | null>(null);
    const reservedKeyNames = ref<string[]>([]);
    const attributeErrors = ref<string[]>([]);

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, iconCssClass];

    // #endregion

    // #region Computed Values

    const eventAttributesGridData: GridDataBag = reactive<GridDataBag>({
        rows: eventAttributes.value.map(x => toAttributeGridRowItem(x))
    });

    const contentChannelsGridData: GridDataBag = reactive<GridDataBag>({
        rows: savedContentChannels.value.map(x => tocontentChannelsGridRowItem(x))
    });

    // #endregion

    // #region Functions

    function toAttributeGridRowItem(bag: EventAttributeBag): Record<string, unknown> {

        if (bag.attribute?.key && !reservedKeyNames.value.includes(bag.attribute?.key)) {
            reservedKeyNames.value.push(bag.attribute.key);
        }

        return {
            key: bag.attribute?.guid,
            name: bag.attribute?.name,
            fieldType: bag.fieldType,
            description: bag.attribute?.description,
            isRequired: bag.attribute?.isRequired,
            showInGrid: bag.attribute?.isShowInGrid,
            allowSearch: bag.attribute?.isAllowSearch
        };
    }

    function tocontentChannelsGridRowItem(bag: ListItemBag): Record<string, unknown> {

        return {
            key: bag.value,
            name: bag.text
        };
    }

    // #endregion

    // #region Event Handlers

    const onSaveContentChannel = (): void => {
        isContentChannelModalOpen.value = false;

        if (!savedContentChannels.value.some(x => x.value == contentChannel.value)) {
            const selectedContentChannel = contentChannelsList.value.find(x => x.value == contentChannel.value);
            if (selectedContentChannel) {
                savedContentChannels.value.push(selectedContentChannel);

                // Add new RowItem to the grid to represent the newly added content channel.
                const newRowItem = tocontentChannelsGridRowItem(selectedContentChannel);
                contentChannelsGridData.rows?.push(newRowItem);
            }
        }

        contentChannel.value = "";
    };

    const onAddContentChannel = (): void => {
        contentChannel.value = "";
        isContentChannelModalOpen.value = true;
    };

    const onDeleteContentChannel = (key: string): void => {
        isContentChannelModalOpen.value = false;
        savedContentChannels.value = savedContentChannels.value.filter(s => s.value !== key);

        // Update the grid.
        if (contentChannelsGridData.rows) {
            const index = contentChannelsGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                contentChannelsGridData.rows?.splice(index, 1);
            }
        }
    };

    const onAddAttribute = (): void => {
        eventAttribute.value = {} as PublicEditableAttributeBag;
        eventAttribute.value.fieldTypeGuid = FieldTypeGuids.Text;
        isAttributeModalOpen.value = true;
        attributeErrors.value = [];
    };

    const onEditAttribute = async (key: string): Promise<void> => {
        attributeErrors.value = [];
        const selectedAttribute = eventAttributes.value.find(x => x.attribute?.guid === key);
        // If attribute exists set it as current attribute for editing.
        if (selectedAttribute?.attribute) {
            eventAttribute.value = selectedAttribute.attribute;
            isAttributeModalOpen.value = true;
            reservedKeyNames.value = reservedKeyNames.value.filter(x => x !== selectedAttribute.attribute?.key);
        }
        else {
            onAddAttribute();
        }
    };

    const onDeleteAttribute = async (key: string): Promise<void> => {
        isAttributeModalOpen.value = false;
        const deletedAttribute = eventAttributes.value.find(s => s.attribute?.guid === key);
        eventAttributes.value = eventAttributes.value.filter(s => s.attribute?.guid !== key);

        if (deletedAttribute?.attribute) {
            reservedKeyNames.value = reservedKeyNames.value.filter(k => k !== deletedAttribute.attribute?.key);
        }

        // Update the grid.
        if (eventAttributesGridData.rows) {
            const index = eventAttributesGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                eventAttributesGridData.rows?.splice(index, 1);
            }
        }
    };

    const onSaveAttribute = (): void => {

        if (eventAttribute.value && eventAttributes.value) {
            const index = eventAttributes.value.findIndex(a => a.attribute?.guid === eventAttribute.value?.guid);

            if (index !== -1) {
                let editedAttribute = eventAttributes.value.find(a => a.attribute?.guid == eventAttribute.value?.guid);
                let rowItem = eventAttributesGridData.rows?.find(x => x.key == eventAttribute.value?.key);

                if (editedAttribute?.attribute) {
                    editedAttribute.attribute = eventAttribute.value;
                    eventAttributes.value.splice(index, 1, editedAttribute);
                }

                if (rowItem && eventAttributesGridData.rows && editedAttribute?.attribute) {
                    // Update GridRowItem so changes are reflected in the UI.
                    const rowIndex = eventAttributesGridData.rows.findIndex(r => r.key === eventAttribute.value?.key);
                    rowItem = toAttributeGridRowItem(editedAttribute);
                    eventAttributesGridData.rows?.splice(rowIndex, 1, rowItem);
                }
            }
            else {
                eventAttribute.value.guid = newGuid();
                const newEventAttribute = {
                    attribute: eventAttribute.value,
                    fieldType: ""
                };
                eventAttributes.value.push(newEventAttribute);

                // Add new RowItem to the grid to represent the newly added attribute.
                const newRowItem = toAttributeGridRowItem(newEventAttribute);
                eventAttributesGridData.rows?.push(newRowItem);
            }

            eventAttribute.value = null;
            isAttributeModalOpen.value = false;
        }
    };

    const onStartSaveAttribute = (): void => {
        attributeErrors.value = [];
        const isExistingKey = reservedKeyNames.value.includes(eventAttribute.value?.key ?? "");
        submitEditAttribute.value = !isExistingKey;
        if (isExistingKey) {
            attributeErrors.value.push("There is already an existing property with the key value you entered or the key has illegal characters. Please select a different key value and use only letters, numbers and underscores.");
        }
    };

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(iconCssClass, props.modelValue.iconCssClass ?? "");
        updateRefValue(eventAttributes, props.modelValue.eventAttributes ?? []);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, savedContentChannels, eventAttributes, ...propRefs], () => {
        const newValue: EventCalendarBag = {
            ...props.modelValue,
            attributeValues: attributeValues.value,
            description: description.value,
            isActive: isActive.value,
            name: name.value,
            iconCssClass: iconCssClass.value,
            savedContentChannels: savedContentChannels.value,
            eventAttributes: eventAttributes.value
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
