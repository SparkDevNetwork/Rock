<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="iconCssClass"
                         label="Calendar CSS Class" />
            </div>
        </div>

        <Panel title="Event Attributes" hasCollapse>
            <div class="table-responsive">
                <table class="grid-table table table-striped table-hover">
                    <thead>
                        <tr align="left">
                            <th data-priority="1" scope="col">Attribute</th>
                            <th data-priority="1" scope="col">Description</th>
                            <th data-priority="1" scope="col">Field Type</th>
                            <th data-priority="1" scope="col">Required</th>
                            <th data-priority="1" scope="col">Show in Grid</th>
                            <th data-priority="1" scope="col">Allow Search</th>
                            <th class="grid-columncommand" data-priority="1" scope="col">&nbsp;</th>
                        </tr>
                    </thead>

                    <tbody>
                        <tr v-if="eventAttributes.length > 0" v-for="eventAttribute in eventAttributes" align="left">
                            <td data-priority="1">{{ eventAttribute.attribute?.name }}</td>
                            <td data-priority="1">{{ eventAttribute.attribute?.description }}</td>
                            <td data-priority="1">{{ eventAttribute.fieldType }}</td>
                            <td data-priority="1" v-html="getCheckMark(eventAttribute.attribute?.isRequired)"></td>
                            <td data-priority="1" v-html="getCheckMark(eventAttribute.attribute?.isShowInGrid)"></td>
                            <td data-priority="1" v-html="getCheckMark(eventAttribute.attribute?.isAllowSearch)"></td>
                            <td class="grid-columncommand" data-priority="1" align="center">
                                <RockButton title="Edit"
                                            class="btn-grid-action"
                                            btnType="link"
                                            @click.prevent.stop="onAddEditAttribute(eventAttribute.attribute)">
                                    <i class="fa fa-pencil"></i>
                                </RockButton>
                            </td>
                            <td class="grid-columncommand" data-priority="1" align="center">
                                <RockButton title="Delete"
                                            class="btn-grid-action"
                                            btnType="link"
                                            @click.prevent.stop="onDeleteAttribute(eventAttribute)">
                                    <i class="fa fa-times"></i>
                                </RockButton>
                            </td>
                        </tr>

                        <div v-else>
                            <hr />
                            No Attributes Found
                            <hr />
                        </div>
                    </tbody>
                </table>
            </div>
            <div class="grid-actions border-panel">
                <RockButton class="btn-add btn-grid-action" btnType="link" @click.prevent.stop="onAddEditAttribute(null)"><i class="fa fa-plus-circle fa-fw"></i></RockButton>
            </div>

            <Modal v-model="isAttributeModalOpen" title="Calendar Event Attribute">

                <hr />

                <RockForm v-model:submit="submitEditAttribute" @submit="onSaveEditAttribute">
                    <AttributeEditor v-model="eventAttribute" :reservedKeyNames="reservedKeyNames" />
                </RockForm>

                <template #customButtons>
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Primary"
                                @click="onStartSaveEditAttribute">Save</RockButton>
                </template>

            </Modal>
        </Panel>

        <Panel title="Content Channels" hasCollapse>
            <div class="table-responsive">
                <table class="grid-table table table-striped table-hover">
                    <thead>
                        <tr align="left">
                            <th data-priority="1" scope="col">Channels</th>
                            <th class="grid-columncommand" data-priority="1" scope="col">&nbsp;</th>
                        </tr>
                    </thead>

                    <tbody>
                        <tr v-if="savedContentChannels.length > 0" v-for="contentChannel in savedContentChannels" align="left">
                            <td data-priority="1">{{ contentChannel.text }}</td>
                            <td class="grid-columncommand" data-priority="1" align="center">
                                <RockButton title="Delete"
                                            class="btn-add btn-grid-action"
                                            btnType="link"
                                            @click.prevent.stop="onDeleteContentChannel(contentChannel)">
                                    <i class="fa fa-times"></i>
                                </RockButton>
                            </td>
                        </tr>

                        <div v-else>
                            <hr />
                            No Content Channels Found
                            <hr />
                        </div>
                    </tbody>
                </table>
            </div>
            <div class="grid-actions border-panel">
                <RockButton class="btn-add btn-grid-action" btnType="link" @click.prevent.stop="onAddContentChannel"><i class="fa fa-plus-circle fa-fw"></i></RockButton>
            </div>
        </Panel>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />

        <Modal v-model="isContentChannelModalOpen"
               title="Content Channel"
               @save="onSaveContentChannel"
               saveText="Save">

            <div>
                <DropDownList label="Channel"
                              v-model="contentChannel"
                              :items="contentChannelsList"
                              showBlankItem />

            </div>

        </Modal>
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { watchPropertyChanges, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { EventCalendarBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventCalendarBag";
    import { EventCalendarDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventCalendarDetailOptionsBag";
    import Panel from "@Obsidian/Controls/panel.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { EventAttributeBag } from "@Obsidian/ViewModels/Blocks/Event/EventCalendarDetail/eventAttributeBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<EventCalendarBag>,
            required: true
        },

        options: {
            type: Object as PropType<EventCalendarDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: EventCalendarBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue.attributes ?? {});
    const attributeValues = ref(props.modelValue.attributeValues ?? {});
    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const iconCssClass = propertyRef(props.modelValue.iconCssClass ?? "", "iconCssClass");
    const isContentChannelModalOpen = ref(false);
    const contentChannelsList = ref(props.modelValue.contentChannels ?? []);
    const contentChannel = ref("");
    const savedContentChannels = ref(props.modelValue.savedContentChannels ?? []);
    const eventAttributes = ref(props.modelValue.eventAttributes ?? []);
    const isAttributeModalOpen = ref(false);
    const submitEditAttribute = ref(false);
    const eventAttribute = ref<PublicEditableAttributeBag | null>(null);
    const reservedKeyNames = ref<[]>([]);

    const invokeBlockAction = useInvokeBlockAction();

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, iconCssClass];

    // #endregion

    // #region Computed Values
    const getCheckMark = (booleanValue: boolean | undefined): string => {
        return booleanValue ? "<i class='fa fa-check'></i>" : "";
    };
    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers
    const onSaveContentChannel = (): void => {
        isContentChannelModalOpen.value = false;

        if (!savedContentChannels.value.some(x => x.value == contentChannel.value)) {
            const selectedContentChannel = contentChannelsList.value.find(x => x.value == contentChannel.value);
            if (selectedContentChannel) {
                savedContentChannels.value.push(selectedContentChannel);
            }
        }

        contentChannel.value = "";
    };

    const onAddContentChannel = (): void => {
        isContentChannelModalOpen.value = true;
    };

    const onDeleteContentChannel = async (contentChannel: ListItemBag): Promise<void> => {
        isContentChannelModalOpen.value = false;
        savedContentChannels.value = savedContentChannels.value.filter(s => s.value !== contentChannel.value);
    };

    const onAddEditAttribute = async (attribute: PublicEditableAttributeBag | null | undefined): Promise<void> => {

        // If attribute exists but has no Guid then it's newly added to we edit in-memory version.
        if (attribute && !attribute.guid) {
            eventAttribute.value = attribute;
            isAttributeModalOpen.value = true;
        }
        else {
            const response = await invokeBlockAction<{ editableAttribute: PublicEditableAttributeBag, reservedKeyNames: [], modalTitle: string }>("GetAttribute", {
                attributeGuid: attribute?.guid ?? null
            });

            if (response.isSuccess && response.data) {
                eventAttribute.value = response.data.editableAttribute;
                isAttributeModalOpen.value = true;
                reservedKeyNames.value = response.data.reservedKeyNames;
            }
        }
    };

    const onDeleteAttribute = async (eventAttribute: EventAttributeBag): Promise<void> => {
        isAttributeModalOpen.value = false;
        eventAttributes.value = eventAttributes.value.filter(s => s.attribute?.guid !== eventAttribute.attribute?.guid
            || s.attribute?.key !== eventAttribute.attribute?.key);

        props.options.eventAttributes = eventAttributes.value;
    };

    const onSaveEditAttribute = (): void => {

        if (eventAttribute.value && eventAttributes.value) {
            const index = eventAttributes.value.findIndex(a => a.attribute?.guid === eventAttribute.value?.guid && a.attribute?.key === eventAttribute.value?.key);

            if (index !== -1) {
                let editedAttribute = eventAttributes.value.find(a => a.attribute?.guid == eventAttribute.value?.guid);
                if (editedAttribute) {
                    editedAttribute.attribute = eventAttribute.value;
                    eventAttributes.value.splice(index, 1, editedAttribute);
                }
            }
            else {
                const newEventAttribute = {
                    attribute: eventAttribute.value,
                    fieldType: ""
                };
                eventAttributes.value.push(newEventAttribute);
            }

            props.options.eventAttributes = eventAttributes.value;
            eventAttribute.value = null;
            isAttributeModalOpen.value = false;
        }
    };

    const onStartSaveEditAttribute = (): void => {
        submitEditAttribute.value = true;
    };
    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(iconCssClass, props.modelValue.iconCssClass ?? "");
        updateRefValue(eventAttributes, props.modelValue.eventAttributes ?? []);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, savedContentChannels, eventAttributes, ...propRefs], () => {
        const newValue: EventCalendarBag = {
            ...props.modelValue,
            attributeValues: attributeValues.value,
            description: description.value,
            isActive: isActive.value,
            name: name.value,
            iconCssClass: iconCssClass.value,
            savedContentChannels: savedContentChannels.value,
            eventAttributes: eventAttributes.value
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
