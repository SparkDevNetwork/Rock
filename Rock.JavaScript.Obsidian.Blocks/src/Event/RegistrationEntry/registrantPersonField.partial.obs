<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <component v-if="component" :is="component" v-bind="fieldControlComponentProps" v-model="fieldValues[field.guid]" />
    <NotificationBox v-else alertType="danger">Could not load the control for person field {{ fieldType }}.</NotificationBox>
</template>
<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { CurrentRegistrationEntryState, use } from "./utils.partial";
    import AddressControl from "@Obsidian/Controls/addressControl.obs";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import GenderPicker from "@Obsidian/Controls/genderPicker.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import PhoneNumberBoxWithSms from "@Obsidian/Controls/phoneNumberBoxWithSms.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { RegistrationPersonFieldType } from "@Obsidian/Enums/Event/registrationPersonFieldType";
    import { Guid } from "@Obsidian/Types";
    import { RegistrationEntryFormFieldBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFormFieldBag";

    const props = defineProps({
        field: {
            type: Object as PropType<RegistrationEntryFormFieldBag>,
            required: true
        },
        fieldValues: {
            type: Object as PropType<Record<Guid, unknown>>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const registrationEntryState = use(CurrentRegistrationEntryState);

    // #region Values

    // #endregion

    // #region Computed Values

    const component = computed(() => {
        switch (props.field.personFieldType) {
            case RegistrationPersonFieldType.FirstName:
                return TextBox;

            case RegistrationPersonFieldType.LastName:
                return TextBox;

            case RegistrationPersonFieldType.MiddleName:
                return TextBox;

            case RegistrationPersonFieldType.Campus:
                return DropDownList;

            case RegistrationPersonFieldType.Email:
                return EmailBox;

            case RegistrationPersonFieldType.Gender:
                return GenderPicker;

            case RegistrationPersonFieldType.Birthdate:
                return BirthdayPicker;

            case RegistrationPersonFieldType.AnniversaryDate:
                return BirthdayPicker;

            case RegistrationPersonFieldType.Address:
                return AddressControl;

            case RegistrationPersonFieldType.MaritalStatus:
                return DropDownList;

            case RegistrationPersonFieldType.ConnectionStatus:
                return DropDownList;

            case RegistrationPersonFieldType.Grade:
                return DropDownList;

            case RegistrationPersonFieldType.HomePhone:
                return PhoneNumberBox;

            case RegistrationPersonFieldType.WorkPhone:
                return PhoneNumberBox;

            case RegistrationPersonFieldType.MobilePhone:
                if (registrationEntryState.viewModel?.showSmsOptIn ?? false) {
                    return PhoneNumberBoxWithSms;
                }

                return PhoneNumberBox;

            case RegistrationPersonFieldType.Race:
                return DropDownList;

            case RegistrationPersonFieldType.Ethnicity:
                return DropDownList;
        }
    });

    const fieldControlComponentProps = computed(() => {
        const componentProps: Record<string, unknown> = {
            rules: props.field.isRequired ? "required" : "",
            disabled: props.disabled
        };

        switch (props.field.personFieldType) {
            case RegistrationPersonFieldType.FirstName:
                componentProps.label = "First Name";
                break;

            case RegistrationPersonFieldType.LastName:
                componentProps.label = "Last Name";
                break;

            case RegistrationPersonFieldType.MiddleName:
                componentProps.label = "Middle Name";
                break;

            case RegistrationPersonFieldType.Campus:
                componentProps.label = "Campus";
                componentProps.items = [...registrationEntryState.viewModel.campuses ?? []];
                break;

            case RegistrationPersonFieldType.Email:
                componentProps.label = "Email";
                break;

            case RegistrationPersonFieldType.Gender:
                break;

            case RegistrationPersonFieldType.Birthdate:
                componentProps.label = "Birthday";
                break;

            case RegistrationPersonFieldType.AnniversaryDate:
                componentProps.label = "Anniversary Date";
                break;

            case RegistrationPersonFieldType.Address:
                componentProps.label = "Address";
                break;

            case RegistrationPersonFieldType.MaritalStatus:
                componentProps.label = "Marital Status";
                componentProps.items = [...registrationEntryState.viewModel.maritalStatuses ?? []];
                break;

            case RegistrationPersonFieldType.ConnectionStatus:
                componentProps.label = "Connection Status";
                componentProps.items = [...registrationEntryState.viewModel.connectionStatuses ?? []];
                break;

            case RegistrationPersonFieldType.Grade:
                componentProps.label = "Grade";
                componentProps.items = [...registrationEntryState.viewModel.grades ?? []];
                break;

            case RegistrationPersonFieldType.HomePhone:
                componentProps.label = "Home Phone";
                break;

            case RegistrationPersonFieldType.WorkPhone:
                componentProps.label = "Work Phone";
                break;

            case RegistrationPersonFieldType.MobilePhone:
                componentProps.label = "Mobile Phone";
                break;

            case RegistrationPersonFieldType.Race:
                componentProps.label = "Race";
                componentProps.items = [...registrationEntryState.viewModel.races ?? []];
                break;

            case RegistrationPersonFieldType.Ethnicity:
                componentProps.label = "Ethnicity";
                componentProps.items = [...registrationEntryState.viewModel.ethnicities ?? []];
                break;
        }

        return componentProps;
    });

    const fieldType = computed<RegistrationPersonFieldType>(() => {
        return props.field.personFieldType;
    });

    // #endregion

    /**
     * Sets the default value if it doesn't exist on fieldValues already.
     */
    function setDefaultValueIfNeeded(): void {
        if (!(props.field.guid in props.fieldValues)) {
            let defaultValue: unknown = "";

            switch (props.field.personFieldType) {
                case RegistrationPersonFieldType.Birthdate:
                    defaultValue = undefined;
                    break;

                case RegistrationPersonFieldType.AnniversaryDate:
                    defaultValue = undefined;
                    break;

                case RegistrationPersonFieldType.Address:
                    // Address Control now handles the default value itself.
                    defaultValue = {};
                    break;
            }

            props.fieldValues[props.field.guid] = defaultValue;
        }
    }

    setDefaultValueIfNeeded();

    // Fix issue with TextBox being passed an undefined value instead of an
    // empty string.
    watch(() => props.fieldValues, () => setDefaultValueIfNeeded(), { deep: true });
</script>