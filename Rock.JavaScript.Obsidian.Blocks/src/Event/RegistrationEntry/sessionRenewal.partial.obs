<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Dialog :modelValue="isModalVisible" :dismissible="false">
        <template #header>
            <h4 v-if="isLoading || spotsSecured === null">{{ registrationTermTitleCase }} Timed Out</h4>
            <h4 v-else>Request Extension</h4>
        </template>
        <template #default>
            <LoadingIndicator v-if="isLoading" />
            <template v-else-if="hasWaitlist && spotsSecured === 0">
                Due to high demand there is no longer space available.
                You can continue, but your {{ registrantsTermLowerCase }} will be placed on the waitlist.
                Do you wish to continue with the {{ registrationTermLowerCase }}?
            </template>
            <template v-else-if="spotsSecured === 0">
                Due to high demand there is no longer space available for this {{ registrantTermLowerCase }}.
            </template>
            <template v-else-if="hasWaitlist && spotsSecured !== null">
                Due to high demand there is no longer space available for all your {{ registrantsTermLowerCase }}.
                Your last {{ waitlistRegistrantCountWord }}
                {{ pluralConditional(waitlistRegistrantCount, registrantTermLowerCase, ` ${registrantsTermLowerCase}`) }}
                will be placed on the waitlist.
                Do you wish to continue with the {{ registrationTermLowerCase }}?
            </template>
            <template v-else-if="spotsSecured !== null">
                Due to high demand there is no longer space available for all your {{ registrantsTermLowerCase }}.
                Only {{ nonWaitlistRegistrantCountWord }} {{ pluralConditional(nonWaitlistRegistrantCount, 'spot is', 'spots are') }} available.
                Your {{ registrationTermLowerCase }} has been updated to only allow
                {{ nonWaitlistRegistrantCountWord }} {{ pluralConditional(nonWaitlistRegistrantCount, registrantTermLowerCase, ` ${registrantsTermLowerCase}`) }}.
                Do you wish to continue with the {{ registrationTermLowerCase }}?
            </template>
            <template v-else>
                Your {{ registrationTermLowerCase }} has timed out. Do you wish to request an extension in time?
            </template>
        </template>
        <template v-if="!isLoading" #footer>
            <template v-if="!hasWaitlist && spotsSecured === 0">
                <RockButton btnType="link" @click="restart">Close</RockButton>
            </template>
            <template v-else-if="spotsSecured !== null">
                <RockButton btnType="primary" @click="close">Yes</RockButton>
                <RockButton btnType="link" @click="restart">No, cancel {{ registrationTermLowerCase }}</RockButton>
            </template>
            <template v-else>
                <RockButton btnType="primary" @click="requestRenewal">Yes</RockButton>
                <RockButton btnType="link" @click="restart">No, cancel {{ registrationTermLowerCase }}</RockButton>
            </template>
        </template>
    </Dialog>
</template>
<script setup lang="ts">
    import { computed, nextTick, PropType, ref, watch } from "vue";
    import { CurrentRegistrationEntryState, use } from "./utils.partial";
    import Dialog from "@Obsidian/Controls/dialog.obs";
    import LoadingIndicator from "@Obsidian/Controls/loadingIndicator.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { toWord } from "@Obsidian/Utility/numberUtils";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { pluralConditional, toTitleCase } from "@Obsidian/Utility/stringUtils";
    import { SessionRenewalResultBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/sessionRenewalResultBag";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { Guid } from "@Obsidian/Types";

    const props = defineProps({
        isSessionExpired: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "success"): void
    }>();

    const registrationEntryState = use(CurrentRegistrationEntryState);
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const spotsSecured = ref<number | null>(null);
    const isLoading = ref<boolean>(false);
    const isModalVisible = ref<boolean>(false);

    // #endregion

    // #region Computed Values

    /** The registrant term (singular) (lower case). */
    const registrantTermLowerCase = computed<string>(() => {
        return registrationEntryState.viewModel.registrantTerm?.toLowerCase() || "registrant";
    });

    /** The registrants term (plural) (lower case). */
    const registrantsTermLowerCase = computed<string>(() => {
        return registrationEntryState.viewModel.pluralRegistrantTerm?.toLowerCase() || "registrants";
    });

    /** The registration term (singular) (lower case). */
    const registrationTermLowerCase = computed<string>(() => {
        return registrationEntryState.viewModel.registrationTerm?.toLowerCase() || "registration";
    });

    /** The registration term (singular) (title case). */
    const registrationTermTitleCase = computed<string>(() => {
        return toTitleCase(registrationEntryState.viewModel.registrationTerm ?? null) || "Registration";
    });

    /** Does this registration instance have a waitlist? */
    const hasWaitlist = computed<boolean>(() => {
        return registrationEntryState.viewModel.waitListEnabled;
    });

    /** The number of registrants being registered */
    const allRegistrantCount = computed<number>(() => {
        return registrationEntryState.registrants.length;
    });

    /** The number of registrants pushed to the waitlist */
    const waitlistRegistrantCount = computed<number>(() => {
        return registrationEntryState.registrants.filter(r => r.isOnWaitList).length;
    });

    /** The number of registrants pushed to the waitlist as a word (eg "one") */
    const waitlistRegistrantCountWord = computed<string>(() => {
        return toWord(waitlistRegistrantCount.value);
    });

    /** The number of registrants not on a waitlist */
    const nonWaitlistRegistrantCount = computed<number>(() => {
        return registrationEntryState.registrants.filter(r => !r.isOnWaitList).length;
    });

    /** The number of registrants not on a waitlist as a word (eg "one") */
    const nonWaitlistRegistrantCountWord = computed<string>(() => {
        return toWord(nonWaitlistRegistrantCount.value);
    });

    // #endregion

    // #region Functions

    /** Restart the registration by reloading the page */
    function restart(): void {
        isLoading.value = true;
        location.reload();
    }

    /** Close the modal and continue on */
    function close(): void {
        isModalVisible.value = false;

        nextTick(() => {
            spotsSecured.value = null;
            isLoading.value = false;
        });
    }

    /** Attempt to renew the session and get more time */
    async function requestRenewal(): Promise<void> {
        spotsSecured.value = 0;
        isLoading.value = true;

        try {
            const request: {
                registrationSessionGuid: Guid;
            } = {
                registrationSessionGuid: toGuidOrNull(registrationEntryState.registrationSessionGuid) ?? emptyGuid
            };

            const response = await invokeBlockAction<SessionRenewalResultBag>("TryToRenewSession", request);

            if (response.isSuccess && response.data) {
                const asDate = RockDateTime.parseISO(response.data.expirationDateTime ?? "");
                registrationEntryState.sessionExpirationDateMs = asDate?.toMilliseconds() ?? null;
                spotsSecured.value = response.data.spotsSecured;
            }
            else {
                registrationEntryState.sessionExpirationDateMs = null;
                spotsSecured.value = 0;
            }

            // If there is a deficiency, then update the state to reflect the reduced spots available
            let deficiency = nonWaitlistRegistrantCount.value - spotsSecured.value;

            if (!deficiency) {
                emit("success");
                close();
                return;
            }

            registrationEntryState.viewModel.spotsRemaining = spotsSecured.value;

            if (!hasWaitlist) {
                // Reduce the registrants down to fit the spots available
                registrationEntryState.registrants.length = spotsSecured.value;
                return;
            }

            // Work backward through the registrants until the deficiency is removed
            for (let i = allRegistrantCount.value - 1; i >= 0; i--) {
                if (!deficiency) {
                    break;
                }

                const registrant = registrationEntryState.registrants[i];

                if (registrant.isOnWaitList) {
                    continue;
                }

                registrant.isOnWaitList = true;
                deficiency--;
            }
        }
        finally {
            isLoading.value = false;
        }
    }

    // #endregion

    // #region Watchers

    watch(() => props.isSessionExpired, () => {
        if (props.isSessionExpired) {
            spotsSecured.value = null;
            isModalVisible.value = true;
        }
    });
</script>