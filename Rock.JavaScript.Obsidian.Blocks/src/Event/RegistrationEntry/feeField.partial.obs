<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <template v-if="!isHidden">
        <CheckBox v-if="isCheckbox" :label="label" :validationTitle="props.fee.name" v-model="checkboxValue" :rules="rules" :disabled="isCheckboxDisabled" />
        <NumberUpDown v-else-if="isNumberUpDown" :validationTitle="props.fee.name ?? undefined" :label="label" :min="0" :max="maxValue" v-model="quantityValue" :rules="rules" />
        <DropDownList v-else-if="isDropDown" :label="label" :items="dropDownListOptions" v-model="dropDownValue" :rules="rules" formControlClasses="input-width-md" />
        <NumberUpDownGroup v-else-if="isNumberUpDownGroup" :label="label" :options="numberUpDownGroupOptions" v-model="numberGroupValue" :rules="rules" />
        <NotificationBox v-else alertType="danger">This {{ registrationEntryTerms.feeSingularLowerCase }} configuration is not supported</NotificationBox>
    </template>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { RegistrationEntryTerms, use } from "./utils.partial";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import NumberUpDown from "@Obsidian/Controls/numberUpDown.obs";
    import NumberUpDownGroup from "@Obsidian/Controls/numberUpDownGroup.obs";
    import { NumberUpDownGroupOption } from "@Obsidian/Types/Controls/numberUpDownGroup";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import { areEqual } from "@Obsidian/Utility/guid";
    import { asFormattedString, toCurrencyOrNull} from "@Obsidian/Utility/numberUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { RegistrationEntryFeeBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFeeBag";
    import { RegistrationEntryFeeItemBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFeeItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<Record<string, number>>,
            required: true
        },

        fee: {
            type: Object as PropType<RegistrationEntryFeeBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: Record<string, number>): void;
    }>();

    const registrationEntryTerms = use(RegistrationEntryTerms);

    // #region Values

    const internalValue = ref({ ...props.modelValue });

    // #endregion

    // #region Computed Values

    const maxValue = computed<number>((): number => {
        if (!singleItem.value || singleItem.value.countRemaining === null || singleItem.value.countRemaining === undefined) {
            return 100;
        }

        return singleItem.value.countRemaining + quantityValue.value;
    });

    const checkboxValue = computed<boolean>({
        get(): boolean {
            if (singleItem.value) {
                return internalValue.value[singleItem.value.guid] === 1 ? true : false;
            }
            else {
                return false;
            }
        },
        set(value: boolean) {
            if (singleItem.value) {
                internalValue.value = {
                    [singleItem.value.guid]: value ? 1 : 0
                };
            }
        }
    });

    const quantityValue = computed({
        get(): number {
            if (singleItem.value) {
                return internalValue.value[singleItem.value.guid] ?? 0;
            }
            else {
                return 0;
            }
        },
        set(value: number) {
            if (singleItem.value) {
                internalValue.value = {
                    [singleItem.value.guid]: value
                };
            }
        }
    });

    const dropDownValue = computed({
        get(): string {
            if (props.fee.items) {
                for (const item of props.fee.items) {
                    if (internalValue.value[item.guid]) {
                        return item.guid;
                    }
                }
            }

            return "";
        },
        set(value: string) {
            const newValue = {};

            if (props.fee.items) {
                for (const item of props.fee.items) {
                    if (areEqual(value, item.guid)) {
                        newValue[item.guid] = 1;
                    }
                    else {
                        newValue[item.guid] = 0;
                    }
                }
            }

            updateRefValue(internalValue, newValue);
        }
    });

    const numberGroupValue = computed({
        get(): Record<string, number> {
            const values: Record<string, number> = {};

            for (const option of numberUpDownGroupOptions.value) {
                values[option.key] = internalValue.value[option.key] ?? 0;
            }

            return values;
        },
        set(value: Record<string, number>) {
            updateRefValue(internalValue, value);
        }
    });

    const label = computed((): string => {
        if (singleItem.value) {
            return getItemLabel(singleItem.value);
        }

        return props.fee.name ?? "";
    });

    const singleItem = computed((): RegistrationEntryFeeItemBag | null => {
        if (!props.fee.items || props.fee.items.length !== 1) {
            return null;
        }

        return props.fee.items[0];
    });

    const isHidden = computed((): boolean => {
        if (!props.fee.items?.length) {
            return true;
        }

        if (props.fee.hideWhenNoneRemaining) {
            if (singleItem.value && props.fee.items[0].countRemaining !== null && props.fee.items[0].countRemaining !== undefined) {
                if (props.fee.items[0].countRemaining + (internalValue.value[props.fee.items[0].guid] ?? 0) === 0) {
                    return true;
                }
            }

            if (!singleItem.value) {
                if (props.fee.items.every(i => i.countRemaining !== null && i.countRemaining !== undefined && i.countRemaining + (internalValue.value[i.guid] ?? 0) === 0)) {
                    return true;
                }
            }
        }

        return false;
    });

    const isCheckbox = computed((): boolean => {
        return !!singleItem.value && !props.fee.allowMultiple;
    });

    const isNumberUpDown = computed((): boolean => {
        return !!singleItem.value && props.fee.allowMultiple;
    });

    const isNumberUpDownGroup = computed((): boolean => {
        return !!props.fee.items && props.fee.items.length > 1 && props.fee.allowMultiple;
    });

    const isDropDown = computed((): boolean => {
        return !!props.fee.items && props.fee.items.length > 1 && !props.fee.allowMultiple;
    });

    const dropDownListOptions = computed((): ListItemBag[] => {
        return props.fee.items
            ?.filter(i => !props.fee.hideWhenNoneRemaining || i.countRemaining === null || i.countRemaining === undefined || (i.countRemaining + internalValue.value[i.guid] ?? 0) > 0)
            .map(i => ({
                text: getItemLabel(i),
                value: i.guid,
                disabled: i.countRemaining !== null && i.countRemaining !== undefined && (i.countRemaining + internalValue.value[i.guid] ?? 0) === 0
            })) ?? [];
    });

    const numberUpDownGroupOptions = computed((): NumberUpDownGroupOption[] => {
        return props.fee.items
            ?.filter(i => !props.fee.hideWhenNoneRemaining || i.countRemaining === null || i.countRemaining === undefined || (i.countRemaining + internalValue.value[i.guid] ?? 0) > 0)
            .map(i => ({
                key: i.guid,
                label: getItemLabel(i),
                max: i.countRemaining !== null && i.countRemaining !== undefined
                    ? i.countRemaining + (internalValue.value[i.guid] ?? 0)
                    : 100,
                min: 0
            })) ?? [];
    });

    const rules = computed((): string => {
        return props.fee.isRequired ? "required" : "";
    });

    const isCheckboxDisabled = computed((): string | undefined => {
        if (props.fee.isRequired && checkboxValue.value) {
            return "disabled";
        }

        if (!checkboxValue.value && props.fee.items?.length && props.fee.items[0].countRemaining === 0) {
            return "disabled";
        }

        return undefined;
    });

    // #endregion

    // #region Functions

    function getItemLabel(item: RegistrationEntryFeeItemBag): string {
        const formattedCost = toCurrencyOrNull(item.cost);

        const formattedItem = item.cost === 0 ? `${item.name}` : `${item.name} (${formattedCost})`;
        if (item.countRemaining !== null && item.countRemaining !== undefined) {
            const formattedRemaining = asFormattedString(item.countRemaining, 0);
            return `${formattedItem} (${formattedRemaining} remaining)`;
        }

        return formattedItem;
    }

    // #endregion

    // #region Watchers

    watch(() => props.modelValue, () => {
        updateRefValue(internalValue, { ...props.modelValue });
    });

    watch(internalValue, () => {
        emit("update:modelValue", internalValue.value);
    });

    // #endregion

    // If the fee is required see if we need to auto-select it.
    if (singleItem.value && props.fee.isRequired) {
        // If the fee is available then select it.
        if (props.fee.items?.length && (props.fee.items[0].countRemaining === null || props.fee.items[0].countRemaining === undefined || props.fee.items[0].countRemaining > 0)) {
            if (isCheckbox.value && !checkboxValue.value) {
                checkboxValue.value = true;
            }
            else if (isNumberUpDown.value && !quantityValue.value) {
                quantityValue.value = 1;
            }

            // Force the emit so the count remaining decreases for other registrants.
            // This causes the registrant component to recalculate immediately
            // before the next registrant component begins to load.
            emit("update:modelValue", internalValue.value);
        }
    }
</script>
