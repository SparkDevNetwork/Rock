<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="registrationentry-registrant-details">
        <RockForm @submit="onNext" :formResetKey="formResetKey">
            <template v-if="isDataForm">
                <template v-if="currentFormIndex === 0">
                    <div v-if="familyOptions.length > 1" class="well">
                        <RadioButtonList :label="`${firstName || registrantTermTitleCase} is in the same ${viewModel.familyTerm || 'immediate family'} as`" rules="required" :modelValue="currentRegistrant.familyGuid ?? undefined" @update:modelValue="onSetFamilyGuid" :items="familyOptions" validationTitle="Family" />
                    </div>
                    <div v-if="isFamilyMembersDropDownVisible" class="row">
                        <div class="col-md-6">
                            <DropDownList :modelValue="currentRegistrant.personGuid ?? ''" @update:modelValue="onSetPersonGuid" :items="familyMemberOptions" label="Family Member to Register" />
                        </div>
                    </div>
                </template>

                <ItemsWithPreAndPostHtml :items="prePostHtmlItems">
                    <template v-for="field in currentFormFields" :key="field.guid" v-slot:[field.guid]>
                        <RegistrantPersonField v-if="field.fieldSource === fieldSources.personField && currentRegistrant.fieldValues"
                                               :field="field"
                                               :fieldValues="currentRegistrant.fieldValues"
                                               :disabled="isFieldDisabled(field)" />
                        <RegistrantAttributeField v-else-if="(field.fieldSource === fieldSources.registrantAttribute || field.fieldSource === fieldSources.personAttribute || field.fieldSource === fieldSources.groupMemberAttribute) && currentRegistrant.fieldValues"
                                                  :field="field"
                                                  :fieldValues="currentRegistrant.fieldValues"
                                                  :formFields="currentFormFields"
                                                  :disabled="isFieldDisabled(field)" />
                        <NotificationBox alertType="danger" v-else>Could not resolve field source {{ field.fieldSource }}</NotificationBox>
                    </template>
                </ItemsWithPreAndPostHtml>

                <div v-if="!isWaitList && isLastForm && viewModel.fees?.length && viewModel.fees.some(f => !!f.items?.length)" class="well registration-additional-options">
                    <h4>{{ feesTermTitleCase }}</h4>
                    <template v-for="fee in viewModel.fees" :key="fee.guid">
                        <FeeField v-if="currentRegistrant.feeItemQuantities" :modelValue="currentRegistrant.feeItemQuantities" :fee="fee" @update:modelValue="onUpdateRegistrantFee" />
                    </template>
                </div>
            </template>

            <div v-if="isSignatureForm" class="registrant-signature-document styled-scroll">
                <h2 class="signature-header">Please Sign the {{ signatureDocumentTermTitleCase }} for {{ firstName }}</h2>
                <div class="signaturedocument-container">
                    <iframe src="javascript: window.frameElement.getAttribute('srcdoc');" onload="this.style.height = this.contentWindow.document.body.scrollHeight + 'px'" class="signaturedocument-iframe" border="0" frameborder="0" :srcdoc="signatureSource"></iframe>
                </div>

                <div class="well">
                    <ElectronicSignature v-model="signatureData" :isDrawn="isSignatureDrawn" @signed="onSigned" :documentTerm="signatureDocumentTermTitleCase" />
                </div>
            </div>

            <div class="actions row">
                <div class="col-xs-6">
                    <RockButton v-if="showPrevious" btnType="default" @click="onPrevious">
                        Previous
                    </RockButton>
                </div>
                <div class="col-xs-6 text-right">
                    <RockButton v-if="isNextVisible" btnType="primary" type="submit" :disabled="isNextDisabled">
                        Next
                    </RockButton>
                </div>
            </div>
        </RockForm>
    </div>
</template>
<script setup lang="ts">
    import { computed, onUpdated, PropType, ref, watch } from "vue";
    import FeeField from "./feeField.partial.obs";
    import RegistrantAttributeField from "./registrantAttributeField.partial.obs";
    import RegistrantPersonField from "./registrantPersonField.partial.obs";
    import { convertComparisonValue, CurrentRegistrationEntryState, GetPersistSessionArgs, getRegistrantBasicInfo, OriginalFormFieldValues, scrollToTopAfterNextRender, use } from "./utils.partial";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import ElectronicSignature from "@Obsidian/Controls/electronicSignature.obs";
    import ItemsWithPreAndPostHtml from "@Obsidian/Controls/itemsWithPreAndPostHtml.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { FilterExpressionType } from "@Obsidian/Core/Reporting/filterExpressionType";
    import { RegistrantsSameFamily } from "@Obsidian/Enums/Event/registrantsSameFamily";
    import { RegistrationFieldSource } from "@Obsidian/Enums/Event/registrationFieldSource";
    import { useStore } from "@Obsidian/PageState";
    import { Guid } from "@Obsidian/Types";
    import { ItemWithPreAndPostHtml } from "@Obsidian/Types/Controls/itemsWithPreAndPostHtml";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { getFieldType } from "@Obsidian/Utility/fieldTypes";
    import { areEqual, emptyGuid, newGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { toTitleCase } from "@Obsidian/Utility/stringUtils";
    import { RegistrantBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrantBag";
    import { RegistrationEntryFamilyMemberBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFamilyMemberBag";
    import { RegistrationEntryVisibilityBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryVisibilityBag";
    import { ElectronicSignatureValue } from "@Obsidian/ViewModels/Controls/electronicSignatureValue";
    import { CurrentPersonBag } from "@Obsidian/ViewModels/Crm/currentPersonBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { RegistrationEntryInitializationBox } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryInitializationBox";
    import { RegistrationEntryFormBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFormBag";
    import { RegistrationEntryFormFieldBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFormFieldBag";
    import { RegistrationEntryArgsBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryArgsBag";
    import { RegistrationPersonFieldType } from "@Obsidian/Enums/Event/registrationPersonFieldType";
    import { Gender, GenderDescription } from "@Obsidian/Enums/Crm/gender";
    import { toNumber } from "@Obsidian/Utility/numberUtils";
    import { AddressControlBag } from "@Obsidian/ViewModels/Controls/addressControlBag";

    const props = defineProps({
        currentRegistrant: {
            type: Object as PropType<RegistrantBag>,
            required: true
        },
        isWaitList: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "next"): void,
        (e: "previous"): void
    }>();

    const store = useStore();
    const invokeBlockAction = useInvokeBlockAction();
    const registrationEntryState = use(CurrentRegistrationEntryState);
    const getRegistrationEntryBlockArgs = use(GetPersistSessionArgs);

    // Make sure current registrant properties are initialized.
    if (!props.currentRegistrant.feeItemQuantities) {
        props.currentRegistrant.feeItemQuantities = {};
    }
    if (!props.currentRegistrant.fieldValues) {
        props.currentRegistrant.fieldValues = {};
    }

    if (registrationEntryState.viewModel.fees && props.currentRegistrant.feeItemQuantities) {
        for (const fee of registrationEntryState.viewModel.fees) {
            for (const feeItem of fee.items ?? []) {
                if (feeItem.guid && typeof props.currentRegistrant.feeItemQuantities[feeItem.guid] !== "number") {
                    props.currentRegistrant.feeItemQuantities[feeItem.guid] = 0;
                }
            }
        }
    }

    const fieldSources = {
        personField: RegistrationFieldSource.PersonField,
        personAttribute: RegistrationFieldSource.PersonAttribute,
        groupMemberAttribute: RegistrationFieldSource.GroupMemberAttribute,
        registrantAttribute: RegistrationFieldSource.RegistrantAttribute
    } as const;

    const originalFormFieldValues = use(OriginalFormFieldValues);

    // #region Values

    const signatureData = ref<ElectronicSignatureValue | undefined>();
    const signatureSource = ref<string>("");
    const signatureToken = ref<string>("");
    const formResetKey = ref<string>("");
    const isNextDisabled = ref<boolean>(false);

    // #endregion

    // #region Computed Values

    const isSignatureDrawn = computed<boolean>(() => {
        return registrationEntryState.viewModel.isSignatureDrawn;
    });

    const showPrevious = computed<boolean>(() => {
        // Allow to navigate to other registrants
        if (registrationEntryState.currentRegistrantIndex > 0) {
            return true;
        }

        // Allow to navigate to registration attributes
        if ((registrationEntryState.viewModel?.registrationAttributesStart?.length ?? 0) > 0) {
            return true;
        }

        // Allow back to intro page if this is not an existing registration
        if (!registrationEntryState.viewModel.isExistingRegistration) {
            return true;
        }

        return false;
    });

    const viewModel = computed<RegistrationEntryInitializationBox>(() => {
        return registrationEntryState.viewModel;
    });

    const currentFormIndex = computed<number>(() => {
        return registrationEntryState.currentRegistrantFormIndex;
    });

    const currentForm = computed<RegistrationEntryFormBag | null>(() => {
        return formsToShow.value[currentFormIndex.value] || null;
    });

    const isLastForm = computed<boolean>(() => {
        return (currentFormIndex.value + 1) === formsToShow.value.length;
    });

    const isDataForm = computed<boolean>(() => {
        return currentFormIndex.value < formsToShow.value.length;
    });

    const isSignatureForm = computed<boolean>(() => {
        return viewModel.value.isInlineSignatureRequired && currentFormIndex.value === formsToShow.value.length;
    });

    const isNextVisible = computed<boolean>(() => {
        return !isSignatureForm.value;
    });

    /** The filtered list of forms that will be shown */
    const formsToShow = computed<RegistrationEntryFormBag[]>(() => {
        if (!props.isWaitList) {
            return viewModel.value.registrantForms ?? [];
        }

        return viewModel.value.registrantForms?.filter(form => form.fields?.some(field => field.showOnWaitList)) ?? [];
    });

    /** The filtered fields to show on the current form */
    const currentFormFields = computed<RegistrationEntryFormFieldBag[]>(() => {
        return (currentForm.value?.fields || [])
            .filter(f => !props.isWaitList || f.showOnWaitList);
    });

    /** The filtered fields to show on the current form augmented to remove pre/post HTML from non-visible fields */
    const currentFormFieldsAugmented = computed<RegistrationEntryFormFieldBag[]>(() => {
        const fields = JSON.parse(JSON.stringify(currentFormFields.value)) as RegistrationEntryFormFieldBag[];

        fields.forEach(value => {
            if (value.fieldSource != fieldSources.personField) {
                let isVisible = true;
                switch (value.visibilityRuleType) {
                    case FilterExpressionType.GroupAll:
                        isVisible = !!value.visibilityRules?.every(vr => isRuleMet(vr, props.currentRegistrant.fieldValues ?? {}, fields));
                        break;

                    case FilterExpressionType.GroupAllFalse:
                        isVisible = !!value.visibilityRules?.every(vr => !isRuleMet(vr, props.currentRegistrant.fieldValues ?? {}, fields));
                        break;

                    case FilterExpressionType.GroupAny:
                        isVisible = !!value.visibilityRules?.some(vr => isRuleMet(vr, props.currentRegistrant.fieldValues ?? {}, fields));
                        break;

                    case FilterExpressionType.GroupAnyFalse:
                        isVisible = !!value.visibilityRules?.some(vr => !isRuleMet(vr, props.currentRegistrant.fieldValues ?? {}, fields));
                        break;

                    default:
                        isVisible = true;
                        break;
                }

                if (isVisible === false) {
                    value.preHtml = "";
                    value.postHtml = "";
                }
            }
        });

        return fields;
    });

    /** The current fields as pre-post items to allow pre-post HTML to be rendered */
    const prePostHtmlItems = computed<ItemWithPreAndPostHtml[]>(() => {
        return currentFormFieldsAugmented.value
            .filter(f => f.guid)
            .map(f => ({
                preHtml: f.preHtml ?? "",
                postHtml: f.postHtml ?? "",
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                slotName: f.guid!
            }));
    });

    const currentPerson = computed<CurrentPersonBag | null>(() => {
        return store.state.currentPerson;
    });

    /** The fees term (plural) (title case). */
    const feesTermTitleCase = computed<string>(() => {
        return toTitleCase(viewModel.value.pluralFeeTerm ?? null) || "Fees";
    });

    /** The radio options that are displayed to allow the user to pick another person that this
     *  registrant is part of a family. */
    const familyOptions = computed<ListItemBag[]>(() => {
        const options: ListItemBag[] = [];
        const usedFamilyGuids: Record<Guid, boolean> = {};

        if (viewModel.value.registrantsSameFamily !== RegistrantsSameFamily.Ask) {
            return options;
        }

        // Add previous registrants as options
        for (let i = 0; i < registrationEntryState.currentRegistrantIndex; i++) {
            const registrant = registrationEntryState.registrants[i];
            const info = getRegistrantBasicInfo(registrant, viewModel.value.registrantForms ?? []);

            if (registrant.familyGuid && !usedFamilyGuids[registrant.familyGuid] && info?.firstName && info?.lastName) {
                options.push({
                    text: `${info.firstName} ${info.lastName}`,
                    value: registrant.familyGuid
                });

                usedFamilyGuids[registrant.familyGuid] = true;
            }
        }

        // Add the current person (registrant) if not already added
        if (viewModel.value.currentPersonFamilyGuid && currentPerson.value?.fullName && !usedFamilyGuids[viewModel.value.currentPersonFamilyGuid]) {
            usedFamilyGuids[viewModel.value.currentPersonFamilyGuid] = true;
            options.push({
                text: currentPerson.value.fullName,
                value: viewModel.value.currentPersonFamilyGuid
            });
        }

        // Add the current person (registrant) if not already added
        const familyGuid = !props.currentRegistrant.familyGuid || usedFamilyGuids[props.currentRegistrant.familyGuid] == true
            ? newGuid()
            : props.currentRegistrant.familyGuid;
        options.push({
            text: "None of the above",
            value: familyGuid
        });

        return options;
    });

    const isFamilyMembersDropDownVisible = computed<boolean>(() => {
        // Should it ever be shown?
        if (viewModel.value.registrantsSameFamily === RegistrantsSameFamily.No) {
            return false;
        }

        // Don't show if show family members option in the template is false.
        if (!viewModel.value.areCurrentFamilyMembersShown) {
            return false;
        }

        // Don't show if this is an existing (saved) registration.
        if (registrationEntryState.viewModel.isExistingRegistration) {
            return false;
        }

        // Are there family members to choose from?
        if (!familyMemberOptions.value.length) {
            return false;
        }

        // Don't show if no same family selection is made.
        if (viewModel.value.registrantsSameFamily === RegistrantsSameFamily.Ask && !props.currentRegistrant.familyGuid) {
            return false;
        }

        return true;
    });

    /** The people that can be picked from because they are members of the same family. */
    const familyMemberOptions = computed<ListItemBag[]>(() => {

        const usedFamilyMemberGuids = registrationEntryState.registrants
            .filter(r => r.personGuid && r.personGuid !== props.currentRegistrant.personGuid)
            .map(r => r.personGuid);

        return viewModel.value.familyMembers
            ?.filter(fm => fm.guid && !usedFamilyMemberGuids.includes(fm.guid))
            ?.map(fm => ({
                text: fm.fullName,
                value: fm.guid
            })) ?? [];
    });

    /** The registrant term (singular) (title case). */
    const registrantTermTitleCase = computed<string>(() => {
        return toTitleCase(viewModel.value.registrantTerm ?? null) || "Registrant";
    });

    const firstName = computed<string>(() => {
        return getRegistrantBasicInfo(props.currentRegistrant, viewModel.value.registrantForms ?? []).firstName;
    });

    const familyMember = computed<RegistrationEntryFamilyMemberBag | null>(() => {
        const personGuid = props.currentRegistrant.personGuid;

        if (!personGuid) {
            return null;
        }

        return viewModel.value.familyMembers?.filter(fm => fm.guid)?.find(fm => areEqual(fm.guid, personGuid)) || null;
    });

    /** The signature document term (singular) (title case). */
    const signatureDocumentTermTitleCase = computed<string>(() => {
        return toTitleCase(viewModel.value.signatureDocumentTerm ?? null) || "Release";
    });

    // #endregion

    // #region Functions

    function isFieldDisabled(field: RegistrationEntryFormFieldBag): boolean {
        if (!props.currentRegistrant.personGuid) {
            return false;
        }

        function isValueIn<TEnum>(value: TEnum, ...collection: TEnum[]): boolean {
            return collection.some(v => v === value);
        }

        // Disable the field if it is for a known person
        // and the field is not editable (hard-coded as first and last name currently).
        if (field.fieldSource === RegistrationFieldSource.PersonField
            && isValueIn(field.personFieldType, RegistrationPersonFieldType.FirstName, RegistrationPersonFieldType.LastName)) {
            return true;
        }

        function hasExistingFieldValue(personGuid: Guid, fieldGuid: Guid): boolean {
            // At this point originalFormFieldValues should contain the
            // original form field values when a person is selected
            // (or when the registrant form loads if no selection available).

            const originalFieldValue = originalFormFieldValues.value[personGuid]?.[fieldGuid];

            if (isValueIn(field.personFieldType, RegistrationPersonFieldType.Birthdate, RegistrationPersonFieldType.AnniversaryDate)) {
                if (!originalFieldValue || (typeof originalFieldValue === "object" && !originalFieldValue["day"] && !originalFieldValue["month"] && !originalFieldValue["year"])) {
                    // Date is not set.
                    return false;
                }
                else {
                    // Disable if the date is set.
                    return true;
                }
            }
            else if (isValueIn(field.personFieldType, RegistrationPersonFieldType.Gender)) {
                if ((typeof originalFieldValue === "string"
                    || typeof originalFieldValue === "number")
                    && isValueIn(toNumber(originalFieldValue), Gender.Male, Gender.Female)) {
                    // Disable if the gender value is set.
                    return true;
                }
                else if (typeof originalFieldValue === "string"
                    && isValueIn(originalFieldValue, GenderDescription[Gender.Male], GenderDescription[Gender.Female])) {
                    // Disable if the gender value is set.
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (field.personFieldType === RegistrationPersonFieldType.Address) {
                const valueAsAddress = JSON.parse(JSON.stringify(originalFieldValue)) as AddressControlBag;
                if (valueAsAddress?.city
                    || valueAsAddress?.country
                    || valueAsAddress?.locality
                    || valueAsAddress?.postalCode
                    || valueAsAddress?.state
                    || valueAsAddress?.street1
                    || valueAsAddress?.street2) {
                    // Disable if any of the address fields have a value.
                    return true;
                }
                else {
                    return false;
                }
            }

            return originalFieldValue !== "" && originalFieldValue !== undefined && originalFieldValue !== null;
        }

        // Disable the field if it is for a known person
        // and the field has the setting "Lock if values exist"
        // and a field value exists.
        return !!field.isLockedIfValuesExist
            && hasExistingFieldValue(props.currentRegistrant.personGuid, field.guid);
    }

    function isRuleMet(rule: RegistrationEntryVisibilityBag, fieldValues: Record<Guid, unknown>, formFields: RegistrationEntryFormFieldBag[]): boolean {
        const value = !rule.comparedToRegistrationTemplateFormFieldGuid ? "" : fieldValues[rule.comparedToRegistrationTemplateFormFieldGuid] || "";

        if (typeof value !== "string") {
            return false;
        }

        const comparedToFormField = formFields.find(ff => areEqual(ff.guid, rule.comparedToRegistrationTemplateFormFieldGuid));
        if (!comparedToFormField?.attribute?.fieldTypeGuid) {
            return false;
        }

        const fieldType = getFieldType(comparedToFormField.attribute.fieldTypeGuid);

        if (!fieldType) {
            return false;
        }

        if (!rule.comparisonValue) {
            return false;
        }

        return fieldType.doesValueMatchFilter(value, convertComparisonValue(rule.comparisonValue), comparedToFormField.attribute.configurationValues ?? {});
    }

    function onPrevious(): void {
        clearFormErrors();

        if (currentFormIndex.value <= 0) {
            emit("previous");
            return;
        }

        registrationEntryState.currentRegistrantFormIndex--;
        scrollToTopAfterNextRender();
    }

    async function onNext(): Promise<void> {
        clearFormErrors();
        let lastFormIndex = formsToShow.value.length - 1;

        // If we have an inline signature then there is an additional form
        // screen that we need to show. Get the document to be signed from
        // the server and then display the form.
        if (viewModel.value.isInlineSignatureRequired) {
            isNextDisabled.value = true;

            try {
                const request: {
                    args: RegistrationEntryArgsBag;
                    registrantGuid: Guid;
                } = {
                    args: getRegistrationEntryBlockArgs(),
                    registrantGuid: toGuidOrNull(props.currentRegistrant.guid) ?? emptyGuid
                };
                const result = await invokeBlockAction("GetSignatureDocumentData", request);

                if (result.isSuccess && result.data) {
                    const data = (result.data as Record<string, string>);

                    if (data.existingSignatureDocumentGuid) {
                        props.currentRegistrant.existingSignatureDocumentGuid = data.existingSignatureDocumentGuid;
                    }
                    else {
                        signatureSource.value = data.documentHtml;
                        signatureToken.value = data.securityToken;

                        lastFormIndex += 1;
                    }
                }
                else {
                    console.error(result.data);
                    return;
                }
            }
            finally {
                isNextDisabled.value = false;
            }
        }

        if (currentFormIndex.value >= lastFormIndex) {
            emit("next");
            return;
        }

        registrationEntryState.currentRegistrantFormIndex++;
        scrollToTopAfterNextRender();
    }

    function updateFeeItemsRemaining(): void {
        // Calculate fee items remaining.
        const combinedFeeItemQuantities: Record<Guid, number> = {};

        // Get all of the fee items in use for all registrants and add them to the combinedFeeItemQuantities Record
        for (const registrant of registrationEntryState.registrants) {
            for (const feeItemGuid in registrant.feeItemQuantities) {

                if (registrant.feeItemQuantities[feeItemGuid] > 0) {
                    const feeItemsUsed = registrant.feeItemQuantities[feeItemGuid];
                    if (combinedFeeItemQuantities[feeItemGuid] === undefined || combinedFeeItemQuantities[feeItemGuid] === null) {
                        combinedFeeItemQuantities[feeItemGuid] = feeItemsUsed;
                    }
                    else {
                        combinedFeeItemQuantities[feeItemGuid] += feeItemsUsed;
                    }
                }
            }
        }

        // Now go through all of the fee items and update the usage by subtracting the the total in combinedFeeItemQuantities from the originalCountRemaining
        const fees = registrationEntryState.viewModel.fees ?? [];
        for (const fee of fees) {
            if (fee?.items?.length) {
                for (const feeItem of fee.items) {
                    if (!feeItem.guid || feeItem.countRemaining === null || feeItem.countRemaining === undefined || feeItem.originalCountRemaining === undefined || feeItem.originalCountRemaining === null) {
                        continue;
                    }

                    const usedFeeItemCount = combinedFeeItemQuantities[feeItem.guid] ?? 0;
                    if (usedFeeItemCount !== undefined && usedFeeItemCount !== null) {
                        feeItem.countRemaining = feeItem.originalCountRemaining - usedFeeItemCount;
                    }
                }
            }
        }
    }

    /**
     * Clears any existing errors from the RockForm component. This is
     * needed since we display multiple registrant forms inside the single
     * RockForm instance. Otherwise when moving from the first form to
     * the second form it would immediately validate and display errors.
     */
    function clearFormErrors(): void {
        formResetKey.value = newGuid();
    }

    async function onSigned(): Promise<void> {
        // Send all the signed document information to the server. This will
        // prepare the final signed document data that will be later sent
        // when we complete the registration.
        const request: {
            args: RegistrationEntryArgsBag | null | undefined;
            registrantGuid: Guid;
            documentHtml: string | null | undefined;
            securityToken: string | null | undefined;
            signature: ElectronicSignatureValue | null | undefined;
        } = {
            args: getRegistrationEntryBlockArgs(),
            registrantGuid: toGuidOrNull(props.currentRegistrant.guid) ?? emptyGuid,
            documentHtml: signatureSource.value,
            securityToken: signatureToken.value,
            signature: signatureData.value
        };

        const result = await invokeBlockAction<string>("SignDocument", request);

        if (result.isSuccess && result.data) {
            // Store the signed document data on the registrant.
            props.currentRegistrant.signatureData = result.data;
            emit("next");
        }
        else {
            console.error(result.data);
        }
    }

    function setRegistrantFieldValues(fieldValues: Record<Guid, unknown>): void {
        props.currentRegistrant.fieldValues = fieldValues;

        // If this is the first time registrant field values are set
        // for the selected person, also update the person's initial values
        // so the "Lock existing values" feature can use them for comparison.
        if (props.currentRegistrant.personGuid) {
            if (!originalFormFieldValues.value[props.currentRegistrant.personGuid]) {
                originalFormFieldValues.value = {
                    ...originalFormFieldValues.value,
                    [props.currentRegistrant.personGuid]: {
                        ...fieldValues
                    }
                };
            }
        }
    }

    /**
     *
     * Copies form field values from the selected family member to the current registrant.
     *
     * @param clearRegistrantFieldWhenFamilyMemberFieldEmpty When `true`, clears a registrant form field if the selected family member does not have a value for that field; otherwise, leaves the registrant form field alone if `false`.
     */
    function copyValuesFromFamilyMember(clearRegistrantFieldWhenFamilyMemberFieldEmpty: boolean): void {
        if (!familyMember.value || registrationEntryState.viewModel.isExistingRegistration) {
            // Don't copy values if a family member is not selected or if this is an existing registration.
            return;
        }

        // If the family member selection is made then set all form fields where use existing value is enabled
        const newFieldValues: Record<Guid, unknown> = {
            ...(props.currentRegistrant.fieldValues ?? {})
        };

        if (familyMember.value.fieldValues && viewModel.value.registrantForms) {
            for (const form of viewModel.value.registrantForms) {
                if (!form.fields) {
                    // The form doesn't have fields so skip to the next form.
                    continue;
                }

                for (const field of form.fields) {
                    if (!field.guid) {
                        // The field is missing a unique identifier so skip to the next form field.
                        continue;
                    }

                    // Do not set common fields if they are of type
                    // Registrant Attribute since there is no value to set.
                    // Fixes issue #5610.
                    if (field.fieldSource === RegistrationFieldSource.RegistrantAttribute) {
                        continue;
                    }

                    if (field.guid in familyMember.value.fieldValues) {
                        const familyMemberValue = familyMember.value.fieldValues[field.guid];

                        if (!familyMemberValue) {
                            if (clearRegistrantFieldWhenFamilyMemberFieldEmpty) {
                                newFieldValues[field.guid] = undefined;
                            }
                        }
                        else if (typeof familyMemberValue === "object") {
                            newFieldValues[field.guid] = { ...familyMemberValue };
                        }
                        else {
                            newFieldValues[field.guid] = familyMemberValue;
                        }
                    }
                    else {
                        // Current registrant doesn't have a record of this field value yet,
                        // so add a blank field value.
                        newFieldValues[field.guid] = undefined;
                    }
                }
            }
        }

        setRegistrantFieldValues(newFieldValues);
    }

    async function getFieldValues(): Promise<void> {
        const request: {
            args: RegistrationEntryArgsBag | null | undefined;
            forms: RegistrationEntryFormBag[] | null | undefined;
            registrantGuid: Guid;
        } = {
            args: getRegistrationEntryBlockArgs(),
            forms: viewModel.value.registrantForms,
            registrantGuid: toGuidOrNull(props.currentRegistrant.guid) ?? emptyGuid
        };

        const result = await invokeBlockAction<Record<Guid, unknown>>("GetDefaultAttributeFieldValues", request);

        if (result.isSuccess && result.data && viewModel.value.registrantForms) {
            const newFieldValues: Record<Guid, unknown> = {
                // Create a shallow copy of the current field values first.
                // Field values may be overwritten below.
                ...(props.currentRegistrant.fieldValues ?? {})
            };

            for (const form of viewModel.value.registrantForms) {
                if (form.fields) {
                    for (const field of form.fields) {
                        // Check if we got a value for the attribute
                        if (field.guid && field.guid in result.data) {
                            const formFieldValue = result.data[field.guid];
                            const currentFormFieldValue = props.currentRegistrant.fieldValues?.[field.guid];

                            if (currentFormFieldValue === undefined || currentFormFieldValue === null || currentFormFieldValue === "") {
                                if (typeof formFieldValue === "object" && typeof currentFormFieldValue === "object") {
                                    // Is this even possible? It was already determined that currentFormFieldValue is undefined | null | "".
                                    newFieldValues[field.guid] = { ...formFieldValue };
                                }
                                else {
                                    newFieldValues[field.guid] = formFieldValue;
                                }
                            }
                        }
                    }
                }
            }

            setRegistrantFieldValues(newFieldValues);
        }
    }

    function onUpdateRegistrantFee(values: Record<string, number>): void {
        const newValue = { ...props.currentRegistrant.feeItemQuantities };

        for (const key of Object.keys(values)) {
            newValue[key] = values[key];
        }

        props.currentRegistrant.feeItemQuantities = newValue;

        updateFeeItemsRemaining();
    }

    function onSetFamilyGuid(familyGuid: Guid): void {
        if (familyGuid !== props.currentRegistrant.familyGuid) {
            props.currentRegistrant.familyGuid = familyGuid;
            props.currentRegistrant.personGuid = null;
        }
    }

    function onSetPersonGuid(guid: Guid | Guid[]): void {
        if (Array.isArray(guid)) {
            // This should not happen, but if multiple values are selected, then default to the first selection.
            guid = guid[0];
        }

        if (!areEqual(guid, props.currentRegistrant.personGuid)) {
            props.currentRegistrant.personGuid = guid;

            if (familyMember.value) {
                props.currentRegistrant.familyGuid = familyMember.value.familyGuid;
            }
        }
    }

    // #endregion

    // #region Watchers

    watch(familyMember, (newValue, oldValue) => {
        if (!familyMember.value) {
            // If the family member selection is cleared then clear all form fields
            if (viewModel.value.registrantForms) {
                const newFieldValues: Record<string, unknown> = {
                    ...(props.currentRegistrant.fieldValues ?? {})
                };

                for (const form of viewModel.value.registrantForms) {
                    if (form.fields) {
                        for (const field of form.fields) {
                            // Do not touch common fields if they are of type
                            // Registrant Attribute since we don't set them when
                            // selecting a family member either.
                            // Fixes issue #5610.
                            if (field.fieldSource === RegistrationFieldSource.RegistrantAttribute) {
                                newFieldValues[field.guid] = props.currentRegistrant.fieldValues?.[field.guid];
                            }
                            else {
                                // Keep the field value property for the current registrant,
                                // but set it to undefined instead of removing the property completely.
                                newFieldValues[field.guid] = undefined;
                            }
                        }
                    }
                }

                setRegistrantFieldValues(newFieldValues);
            }
        }
        else {
            // Only clear when the family member is changed.
            const clearRegistrantFieldWhenFamilyFieldEmpty = newValue !== oldValue;

            // If the family member selection is made then set all form fields where use existing value is enabled
            copyValuesFromFamilyMember(clearRegistrantFieldWhenFamilyFieldEmpty);
        }
    });

    // #endregion

    onUpdated(() => {
        updateFeeItemsRemaining();
    });

    // Last-minute setup.
    getFieldValues();
    copyValuesFromFamilyMember(false);
</script>