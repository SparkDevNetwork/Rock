<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="internalIsShown"
           :isSaveButtonDisabled="!wipPaymentPlanConfiguration?.endDate"
           :saveText="wipPaymentPlanConfiguration?.endDate ? 'Apply' : ''"
           title="Set Up Payment Plan"
           v-model:submit="submit"
           @save="onConfigurePaymentPlan"
           @closeModal="onCancel">
        <template v-if="paymentPlanDeadlineDate?.isLaterThan(RockDateTime.now())">
            <StaticFormControl :modelValue="`The total amount of ${balanceDue} is payable by ${paymentPlanDeadlineDate.toASPString('MMMM dd, yyyy')}.`" />

            <hr />

            <div class="row">
                <div class="col">
                    <NotificationBox v-if="isPaymentFrequencyWarningShown" alertType="danger">The selected payment frequency is not compatible with the chosen start date. Please adjust the frequency or select a different start date to proceed.</NotificationBox>

                    <DropDownList :modelValue="paymentFrequencyGuidOrEmptyString"
                                  @update:modelValue="onUpdatePaymentFrequencyGuid"
                                  :items="paymentPlanFrequencyItems"
                                  label="Select Your Desired Payment Frequency"
                                  rules="required" />
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <DatePicker :modelValue="startDateIsoString"
                                @update:modelValue="onUpdateStartDateIsoString"
                                label="Start Date"
                                :disallowPastDateSelection="true"
                                :rules="['required', validateStartDate]" />
                </div>
            </div>

            <div :class="['row', !areAmountFieldsShown ? 'invisible' : '']">
                <div class="col-sm-6">
                    <CurrencyBox :modelValue="amountToPayTodayPlusAdjustmentCurrency?.number ?? 0"
                                 @update:modelValue="onUpdateAmountToPayToday"
                                 label="Amount To Pay Today"
                                 :rules="amountToPayTodayRules"
                                 @blur="onBlurAmountToPayToday">

                        <template #append>
                            <small>A minimum of {{ wipPaymentPlanConfiguration?.minAmountToPayToday }} is due today.</small>
                        </template>
                    </CurrencyBox>
                </div>

                <div class="col-sm-6">
                    <DropDownList :modelValue="numberOfPayments + ''"
                                  @update:modelValue="onUpdateNumberOfPaymentsStringOrEmpty"
                                  :items="numberOfPaymentsItems"
                                  label="Number of Payments"
                                  rules="required"
                                  :showBlankItem="false" />
                </div>
            </div>

            <div :class="['row', !areAmountFieldsShown ? 'invisible' : '']">
                <div class="col">
                </div>
            </div>

            <div :class="['row', !areAmountFieldsShown ? 'collapse' : '']">
                <div class="col-sm-6">
                    <RockLabel>Plan Summary</RockLabel>
                    <p>
                        Amount Due Today<br />
                        {{ wipPaymentPlanConfiguration?.amountToPayTodayPlusAdjustment }}<small v-if="amountToPayTodaySuffix">&nbsp;({{ amountToPayTodaySuffix }})</small>
                    </p>
                    <p v-if="wipPaymentPlanConfiguration?.amountPerPayment.isGreaterThan(0)">{{ wipPaymentPlanConfiguration.paymentPlanFrequency.getNPaymentsOfAmountMessage(wipPaymentPlanConfiguration.numberOfPayments, wipPaymentPlanConfiguration.amountPerPayment) }}</p>
                </div>

                <div v-if="paymentDates.length" class="col-sm-6">
                    <RockLabel>Payment Schedule</RockLabel>
                    <p>Below are the dates and amounts that will be automatically charged to your chosen payment method.</p>
                    <div v-for="paymentDate in paymentDates" :key="paymentDate.toMilliseconds()" class="row">
                        <div class="col-sm-3 col-xs-6 text-right">{{ paymentDate.toASPString("d") }}</div>
                        <div class="col-xs-6">{{ wipPaymentPlanConfiguration?.amountPerPayment }}</div>
                    </div>
                </div>
            </div>
        </template>
        <template v-else>
            A payment deadline date is required to create a payment plan.
        </template>
    </Modal>
</template>

<script setup lang="ts">
    import { PropType, computed, ref, watch, nextTick } from "vue";
    import { useConfigurePaymentPlanFeature } from "./paymentPlans.partial";
    import { PaymentPlanConfiguration, PaymentPlanFrequency } from "./types.partial";
    import CurrencyBox from "@Obsidian/Controls/currencyBox.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import StaticFormControl from "@Obsidian/Controls/staticFormControl.obs";
    import { Guid } from "@Obsidian/Types";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { areEqual, emptyGuid, newGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { toNumber } from "@Obsidian/Utility/numberUtils";
    import { RockCurrency } from "@Obsidian/Utility/rockCurrency";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { validateValue, ValidationResult, ValidationRule, ValidationRuleFunction } from "@Obsidian/ValidationRules";
    import { RegistrationEntryGetScheduledPaymentDatesRequestBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryGetScheduledPaymentDatesRequestBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Boolean as PropType<boolean>,
            default: false,
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: boolean): void;
    }>();

    const {
        balanceDue,
        isConfigured,
        paymentPlanDeadlineDate,
        paymentPlanFrequencies,
        wipPaymentPlanConfiguration,
        configure,
        initializeWorkInProgress,
        reconfigureWorkInProgress } = useConfigurePaymentPlanFeature();

    const invokeBlockAction = useInvokeBlockAction();

    const amountToPayTodayRules: ValidationRule[] = ["required", validateAmountToPayTodayRule, validateAmountToPayTodayLessThanRemaining];

    //#region Values

    // Initialize refs with empty values,
    // then call a separate initialize function for code clarity.
    const paymentPlanFrequency = ref<PaymentPlanFrequency>();
    const startDateIsoString = ref<string | null>(null);
    const paymentFrequencyGuidOrEmptyString = ref<string>("");
    const amountToPayToday = ref<number>(0);
    const amountToPayTodayAdjustmentCurrency = ref<RockCurrency | null | undefined>();
    const amountToPayTodayPlusAdjustmentCurrency = ref<RockCurrency | null | undefined>();
    const numberOfPayments = ref<number>(0);
    const areAmountFieldsShown = ref<boolean>(false);
    const paymentDates = ref<RockDateTime[]>([]);
    const getScheduledPaymentDatesRequestGuid = ref<Guid | null | undefined>();
    const isPaymentFrequencyWarningShown = ref<boolean>(false);
    const submit = ref<boolean>(false);

    //#endregion

    //#region Computed Values

    /**
     * The allowed payment plan frequencies.
     */
    const paymentPlanFrequencyItems = computed<ListItemBag[]>(() => {
        return wipPaymentPlanConfiguration.value?.paymentPlanFrequencies.map(frequency => frequency.listItemBag) ?? paymentPlanFrequencies.value.map(f => f.listItemBag);
    });

    const internalIsShown = useVModelPassthrough(props, "modelValue", emit);

    const amountToPayTodaySuffix = computed<string>(() => {
        if (!wipPaymentPlanConfiguration.value) {
            return "";
        }
        else if (wipPaymentPlanConfiguration.value.balanceDue.isEqualTo(amountToPayToday.value ?? 0)) {
            return `pay in full`;
        }
        else if (!wipPaymentPlanConfiguration.value.amountToPayTodayAdjustment.isZero) {
            return `added ${wipPaymentPlanConfiguration.value.amountToPayTodayAdjustment} to evenly distribute the remaining payments`;
        }
        else {
            return "";
        }
    });

    const numberOfPaymentsItems = computed<ListItemBag[]>(() => {
        function createRange(inclusiveStart: number, inclusiveEnd: number): number[] {
            const range: number[] = [];

            for (let i = inclusiveStart; i <= inclusiveEnd; i++) {
                range.push(i);
            }

            return range;
        }

        if (!wipPaymentPlanConfiguration.value) {
            return [];
        }
        else {
            return createRange(2, wipPaymentPlanConfiguration.value.paymentPlanFrequency.maxNumberOfPayments)
                .map(n => ({
                    text: n.toString(),
                    value: n.toString()
                }));
        }
    });

    //#endregion

    //#region Functions

    function showOrHidePaymentFrequencyWarningIfChanged(paymentFrequencyGuidBefore: Guid | null): void {
        const currentPaymentFrequencyGuid = toGuidOrNull(wipPaymentPlanConfiguration.value?.paymentPlanFrequency.listItemBag.value);

        if (paymentFrequencyGuidBefore && !areEqual(paymentFrequencyGuidBefore, currentPaymentFrequencyGuid)) {
            isPaymentFrequencyWarningShown.value = true;
        }
        else if (paymentFrequencyGuidBefore || currentPaymentFrequencyGuid) {
            isPaymentFrequencyWarningShown.value = false;
        }
    }

    const validateStartDate: ValidationRuleFunction = (value: unknown, _params: unknown[] | undefined): ValidationResult => {
        if (!value || typeof value !== "string" || !paymentPlanFrequencies.value.length) {
            return true;
        }

        let date = RockDateTime.parseISO(value);

        if (!date) {
            return true;
        }

        /**
         * Checks if a start date is valid for any of the payment plan frequencies.
         */
        function isDateValid(startDate: RockDateTime): boolean {
            for (const paymentPlanFrequency of paymentPlanFrequencies.value) {
                const transDate1 = paymentPlanFrequency.getValidTransactionDate(startDate);
                if (transDate1) {
                    if (paymentPlanFrequency.getNextTransactionDate(transDate1)) {
                        // Two transactions can occur for the given start date with this frequency.
                        return true;
                    }
                }
            }

            return false;
        }

        const earliestDate = wipPaymentPlanConfiguration.value?.startDate ?? RockDateTime.now();

        // Check if the start date is valid for any of the payment plan frequencies.
        if (isDateValid(date)) {
            return true;
        }
        else {
            date = date.addDays(-1);

            while (!date.isEarlierThan(earliestDate)) {
                if (isDateValid(date)) {
                    return `must be no later than ${date.toLocaleString({ year: "numeric", month: "numeric", day: "numeric" })}`;
                }
                else {
                    date = date.addDays(-1);
                }
            }
        }

        // This shouldn't happen but return a generic error just in case.
        return `is invalid`;
    };

    function validateAmountToPayTodayRule(_value: unknown, _params?: unknown[]): ValidationResult {
        if (wipPaymentPlanConfiguration.value?.minAmountToPayToday?.isGreaterThan(amountToPayToday.value ?? 0)) {
            return "must be greater than or equal to the minimum amount";
        }
        else {
            return true;
        }
    }

    function validateAmountToPayTodayLessThanRemaining(_value: unknown, _params?: unknown[]): ValidationResult {
        if (wipPaymentPlanConfiguration.value?.balanceDue.isLessThanOrEqualTo(amountToPayToday.value ?? 0)) {
            return "must be less than the total amount";
        }
        else {
            return true;
        }
    }

    function updateModal(config: PaymentPlanConfiguration | null | undefined): void {
        if (!config) {
            // No payment plan config was supplied so reset the modal.
            paymentPlanFrequency.value = undefined;
            startDateIsoString.value = null;
            numberOfPayments.value = 0;
            amountToPayToday.value = 0;
            paymentFrequencyGuidOrEmptyString.value = "";
            amountToPayTodayAdjustmentCurrency.value = undefined;
            amountToPayTodayPlusAdjustmentCurrency.value = undefined;
            areAmountFieldsShown.value = false;
            isPaymentFrequencyWarningShown.value = false;
            getScheduledPaymentDatesRequestGuid.value = null;
            paymentDates.value = [];
        }
        else {
            // Populate the modal from the suppiled payment plan config.
            paymentPlanFrequency.value = config.paymentPlanFrequency;
            startDateIsoString.value = config.startDate?.toISOString();
            numberOfPayments.value = config.numberOfPayments;
            amountToPayToday.value = config.amountToPayToday.number;
            paymentFrequencyGuidOrEmptyString.value = config.paymentPlanFrequency.transactionFrequency.definedValueGuid;

            // Amount To Pay Today fields need to be zeroed out
            // and updated on the next tick for them to properly update.
            amountToPayTodayAdjustmentCurrency.value = null;
            amountToPayTodayPlusAdjustmentCurrency.value = null;

            nextTick(() => {
                amountToPayTodayAdjustmentCurrency.value = config.amountToPayTodayAdjustment;
                amountToPayTodayPlusAdjustmentCurrency.value = config.amountToPayToday.add(config.amountToPayTodayAdjustment);
            });

            // Show the amount fields once a payment frequency has been selected.
            if (config.paymentPlanFrequency.transactionFrequency.definedValueGuid) {
                areAmountFieldsShown.value = true;
            }
            else {
                areAmountFieldsShown.value = false;
            }

            // Get the scheduled payment dates.
            const bag: RegistrationEntryGetScheduledPaymentDatesRequestBag = {
                numberOfPayments: numberOfPayments.value,
                scheduledTransactionFrequencyValueGuid: toGuidOrNull(paymentFrequencyGuidOrEmptyString.value) ?? emptyGuid,
                paymentStartDate: startDateIsoString.value
            };

            const requestGuid = newGuid();
            getScheduledPaymentDatesRequestGuid.value = requestGuid;

            invokeBlockAction<string[]>("GetScheduledPaymentDates", { bag })
                .then(result => {
                    if (requestGuid !== requestGuid) {
                        // Ignore this response as its for an earlier request and we only want to handle the latest request!
                        return;
                    }

                    if (result?.isSuccess && result.data) {
                        const scheduledPaymentDates: RockDateTime[] = [];

                        for (const scheduledPaymentDate of result.data.map(isoDate => RockDateTime.parseISO(isoDate))) {
                            if (scheduledPaymentDate) {
                                scheduledPaymentDates.push(scheduledPaymentDate);
                            }
                        }

                        paymentDates.value = scheduledPaymentDates;
                    }
                    else {
                        paymentDates.value = [];
                    }
                });
        }
    }

    //#endregion

    //#region Event Handlers

    function onUpdateNumberOfPaymentsStringOrEmpty(value: string | string[]): void {
        let numbOfPayments: number;
        if (Array.isArray(value)) {
            numbOfPayments = toNumber(value[0] ?? "");
        }
        else {
            numbOfPayments = toNumber(value);
        }

        // Update the ref, then recalculate the payment plan configuration
        // on the next tick (otherwise the UI won't know the ref changed).
        numberOfPayments.value = numbOfPayments;

        nextTick(() => {
            reconfigureWorkInProgress({
                desiredNumberOfPayments: numbOfPayments
            });
        });
    }

    function onUpdateAmountToPayToday(value: number | null): void {
        // Only update the ref here. DO NOT recalculate on update;
        // otherwise, the value will get overwritten on each character entered.
        // Instead, calculate on blur.
        amountToPayToday.value = value ?? 0;
    }

    function onBlurAmountToPayToday(): void {
        if (wipPaymentPlanConfiguration.value) {
            // Validate the field before trying to recalculate the payment plan
            // so errors can be displayed.
            const validationErrors = validateValue(amountToPayToday.value, amountToPayTodayRules);

            if (validationErrors?.length) {
                // This field is invalid and will prevent the form from being submitted.
                // Submit the form which will revalidate this field and show validation errors.
                submit.value = true;
            }
            else {
                reconfigureWorkInProgress({
                    amountToPayToday: RockCurrency.create(amountToPayToday.value, wipPaymentPlanConfiguration.value.balanceDue.currencyInfo),
                });
            }
        }
    }

    function onUpdateStartDateIsoString(value: string | null): void {
        const desiredStartDateOverride: RockDateTime | null = value
            ? RockDateTime.parseISO(value)?.date ?? null
            : null;

        if (desiredStartDateOverride) {
            const paymentFrequencyGuidBeforeConfiguration = toGuidOrNull(paymentFrequencyGuidOrEmptyString.value);

            // Update the ref, then recalculate the payment plan configuration
            // on the next tick (otherwise the UI won't know the ref changed).
            startDateIsoString.value = desiredStartDateOverride.toISOString();

            if (!wipPaymentPlanConfiguration.value) {
                // The payment plan has not been created yet,
                // so initialize it with the currently selected
                // start date and payment frequency.
                initializeWorkInProgress({
                    desiredStartDate: desiredStartDateOverride,
                    desiredPaymentPlanFrequency: paymentPlanFrequencies.value.find(p => areEqual(p.listItemBag.value, paymentFrequencyGuidBeforeConfiguration))
                });

                showOrHidePaymentFrequencyWarningIfChanged(paymentFrequencyGuidBeforeConfiguration);
            }
            else if (!wipPaymentPlanConfiguration.value.startDate.date.isEqualTo(desiredStartDateOverride)) {
                // The payment plan has already been created
                // and the start date has changed,
                // so reconfigure the payment plan.
                nextTick(() => {
                    reconfigureWorkInProgress({
                        desiredStartDate: desiredStartDateOverride
                    });

                    showOrHidePaymentFrequencyWarningIfChanged(paymentFrequencyGuidBeforeConfiguration);
                });
            }
        }
    }

    function onUpdatePaymentFrequencyGuid(guid: Guid | Guid[]): void {
        if (Array.isArray(guid)) {
            throw "Multiple payment frequencies are not supported";
        }

        // Update the ref, then recalculate the payment plan configuration
        // on the next tick (otherwise the UI won't know the ref changed).
        paymentFrequencyGuidOrEmptyString.value = guid;

        if (wipPaymentPlanConfiguration.value) {
            nextTick(() => {
                reconfigureWorkInProgress({
                    desiredPaymentPlanFrequency: paymentPlanFrequencies.value.find(p => areEqual(p.listItemBag.value, guid))
                });

                isPaymentFrequencyWarningShown.value = false;
            });
        }
    }

    function onConfigurePaymentPlan(): void {
        if (wipPaymentPlanConfiguration.value) {
            // Recalc the amount to pay today one last time before setting the payment plan values.
            reconfigureWorkInProgress({
                // The amount to pay today should manually be passed in here
                // to handle the case where an individual pressed [Enter] while
                // in the amount to pay today field (onBlur is not triggered).
                amountToPayToday: RockCurrency.create(amountToPayToday.value, wipPaymentPlanConfiguration.value.balanceDue.currencyInfo)
            });

            configure(wipPaymentPlanConfiguration.value);

            internalIsShown.value = false;
        }
    }

    function onCancel(): void {
        // Clear the "work in progress" plan before closing
        // (this will also reset the modal via a watcher).
        wipPaymentPlanConfiguration.value = null;
    }

    //#endregion

    //#region Watchers

    // Update the modal whenever the work-in-progress payment plan is changed or set to null.
    watch(wipPaymentPlanConfiguration, (config) => {
        updateModal(config);
    }, {
        immediate: true
    });

    watch(() => props.modelValue, (isShown) => {
        if (isShown && !wipPaymentPlanConfiguration.value && isConfigured.value) {
            // Initialize the work-in-progress payment plan from the payment plan on
            // the registration when the modal is opened.
            initializeWorkInProgress();
        }
    }, {
        immediate: true
    });

    //#endregion
</script>