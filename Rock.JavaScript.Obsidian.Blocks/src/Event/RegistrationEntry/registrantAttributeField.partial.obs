<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <template v-if="isVisible">
        <RockField v-if="modifiedAttribute" v-model="value" :isEditMode="!disabled" :attribute="modifiedAttribute" :disabled="disabled" />
        <NotificationBox v-else alertType="danger">Could not resolve attribute field</NotificationBox>
    </template>
</template>
<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockField from "@Obsidian/Controls/rockField.obs";
    import { FilterExpressionType } from "@Obsidian/Core/Reporting/filterExpressionType";
    import { Guid } from "@Obsidian/Types";
    import { ComparisonValue } from "@Obsidian/Types/Reporting/comparisonValue";
    import { getFieldType } from "@Obsidian/Utility/fieldTypes";
    import { areEqual } from "@Obsidian/Utility/guid";
    import { RegistrationEntryVisibilityBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryVisibilityBag";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { RegistrationEntryFormFieldBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationEntry/registrationEntryFormFieldBag";

    const props = defineProps({
        field: {
            type: Object as PropType<RegistrationEntryFormFieldBag>,
            required: true
        },

        fieldValues: {
            type: Object as PropType<Record<Guid, unknown>>,
            required: true
        },

        formFields: {
            type: Array as PropType<RegistrationEntryFormFieldBag[]>,
            required: true
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    // Ensure the field is configured.
    if (!props.field.visibilityRules) {
        props.field.visibilityRules = [];
    }

    // #region Values

    const value = ref<string>((props.fieldValues[props.field.guid] as string) ?? "");

    // #endregion

    // #region Computed Values

    const isVisible = computed<boolean>(() => {
        switch (props.field.visibilityRuleType) {
            case FilterExpressionType.GroupAll:
                return props.field.visibilityRules?.every(vr => isRuleMet(vr, props.fieldValues, props.formFields)) ?? true;

            case FilterExpressionType.GroupAllFalse:
                return props.field.visibilityRules?.every(vr => !isRuleMet(vr, props.fieldValues, props.formFields)) ?? true;

            case FilterExpressionType.GroupAny:
                return props.field.visibilityRules?.some(vr => isRuleMet(vr, props.fieldValues, props.formFields)) ?? true;

            case FilterExpressionType.GroupAnyFalse:
                return props.field.visibilityRules?.some(vr => !isRuleMet(vr, props.fieldValues, props.formFields)) ?? true;
        }

        return true;
    });

    const modifiedAttribute = computed<PublicAttributeBag | null>(() => {
        if (!props.field.attribute) {
            return null;
        }

        const fieldAttribute: PublicAttributeBag = { ...props.field.attribute };
        fieldAttribute.isRequired = props.field.isRequired;
        return fieldAttribute;
    });

    // #endregion

    // #region Functions

    function isRuleMet(rule: RegistrationEntryVisibilityBag, fieldValues: Record<Guid, unknown>, formFields: RegistrationEntryFormFieldBag[]): boolean {
        const value = fieldValues[rule.comparedToRegistrationTemplateFormFieldGuid] || "";

        if (typeof value !== "string") {
            return false;
        }

        const comparedToFormField = formFields.find(ff => areEqual(ff.guid, rule.comparedToRegistrationTemplateFormFieldGuid));
        if (!comparedToFormField?.attribute?.fieldTypeGuid) {
            return false;
        }

        const fieldType = getFieldType(comparedToFormField.attribute.fieldTypeGuid);

        if (!fieldType) {
            return false;
        }

        if (!rule.comparisonValue) {
            return false;
        }

        const comparisonValue: ComparisonValue = {
            value: rule.comparisonValue.value ?? "",
            comparisonType: rule.comparisonValue.comparisonType
        };

        return fieldType.doesValueMatchFilter(value, comparisonValue, comparedToFormField.attribute.configurationValues ?? {});
    }

    // #endregion

    // #region Watchers

    // Detect changes like switch from one person to another.
    watch(() => props.fieldValues[props.field.guid], () => {
        value.value = props.fieldValues[props.field.guid] as string;
    });

    watch(value, () => {
        props.fieldValues[props.field.guid] = value.value;
    });

    // #endregion
</script>