<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Fee"
          title="Fees"
          :entityTypeGuid="EntityType.RegistrationRegistrantFee"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false"
          :exportTitle="config.options?.exportTitleName ?? ''">

        <TextColumn name="registrationId"
                    title="Registration Id"
                    field="registrationId"
                    :hideOnScreen="true"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <DateColumn name="registrationDate"
                    title="Registration Date"
                    field="registrationDate"
                    headerClass="text-right"
                    itemClass="justify-content-end text-right"
                    :filter="dateValueFilter"
                    visiblePriority="md" />

        <TextColumn name="registeredBy"
                    title="Registered By"
                    field="registeredBy"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <TextColumn name="registrant"
                    title="Registrant"
                    field="registrant"
                    :filter="pickExistingValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="registrantId"
                    title="Registrant Id"
                    field="registrantId"
                    :hideOnScreen="true"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="feeName"
                    title="Fee Name"
                    field="feeName"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="feeItemName"
                    title="Option"
                    field="feeItemName"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <NumberColumn name="quantity"
                      title="Quantity"
                      field="quantity"
                      :filter="numberValueFilter"
                      visiblePriority="md" />

        <CurrencyColumn name="cost"
                        title="Cost"
                        field="cost"
                        :quickFilterValue="getCostQuickFilterValue"
                        :filter="numberValueFilter"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        visiblePriority="md" />

        <CurrencyColumn name="feeTotal"
                        title="Fee Total"
                        field="feeTotal"
                        :quickFilterValue="getFeesQuickFilterValue"
                        :filter="numberValueFilter"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        visiblePriority="xs" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { NumberColumn, numberValueFilter, dateValueFilter, textValueFilter, pickExistingValueFilter, DateColumn, TextColumn, CurrencyColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { RegistrationInstanceFeeListOptionsBag } from "@Obsidian/ViewModels/Blocks/Event/RegistrationInstanceFeeList/registrationInstanceFeeListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";
    import { asFormattedString, toNumberOrNull } from "@Obsidian/Utility/numberUtils";

    const config = useConfigurationValues<ListBlockBox<RegistrationInstanceFeeListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion


    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Formats the amount as a decimal value for the grid's quick search
     * @param row the targeted row
     */
    function getCostQuickFilterValue(row: Record<string, unknown>): string {
        return getCurrencyAsDecimal(row.cost as string);
    }


    /**
     * Formats the amount as a decimal value for the grid's quick search
     * @param row the targeted row.
     */
    function getFeesQuickFilterValue(row: Record<string, unknown>): string {
        return getCurrencyAsDecimal(row.feeTotal as string);
    }

    /**
     * Formats the amount as a decimal value for the grid's quick search since raw value might
     * not include decimal places with will be added by the Currency Column when formatting as currency.
     * @param value the amount as string
     */
    function getCurrencyAsDecimal(value: string | null): string {
        let numberValue = toNumberOrNull(value);

        if (numberValue) {
            return asFormattedString(numberValue, 2);
        }

        return "";
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
