<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <RockForm v-model:submit="submitForm" @submit="onSave" :formResetKey="resetKey">
        <Panel type="block" :title="panelName" :headerSecondaryActions="headerSecondaryActions">

            <template #headerActions>
                <span class="action clickable text-info" v-if="appleTvPageEditBag.idKey" title="Copy Page Guid to Clipboard" @click="onExportClick">
                    <i class="fa fa-clipboard"></i>
                </span>
            </template>

            <template #default>
                <EditPanel v-if="panelMode === DetailPanelMode.Add || panelMode === DetailPanelMode.Edit"
                           v-model="appleTvPageEditBag"
                           :options="options"
                           @propertyChanged="onPropertyChanged" />

                <Modal v-model="showAuditDetailsModal" title="Audit Details">
                    <AuditDetail :entityTypeGuid="EntityType.Page" :entityKey="entityKey" />
                </Modal>
            </template>

            <template #footerActions>
                <div v-if="panelMode !== DetailPanelMode.View">
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Primary"
                                @click="onSaveForm">
                        Save
                    </RockButton>
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Link"
                                @click="onSaveAndContinueEditingForm">
                        Save Continue Editing
                    </RockButton>
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Link"
                                @click="onCancelEdit">
                        Cancel
                    </RockButton>
                </div>
            </template>

        </Panel>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./AppleTvPageDetail/editPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import AuditDetail from "@Obsidian/Controls/auditDetail.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { getSecurityGrant, provideSecurityGrant, refreshDetailAttributes, useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { debounce } from "@Obsidian/Utility/util";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { NavigationUrlKey } from "./AppleTvPageDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { AppleTvPageBag } from "@Obsidian/ViewModels/Blocks/Tv/AppleTvPageDetail/appleTvPageBag";
    import { AppleTvPageDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Tv/AppleTvPageDetail/appleTvPageDetailOptionsBag";

    const config = useConfigurationValues<DetailBlockBox<AppleTvPageBag, AppleTvPageDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const securityGrant = getSecurityGrant(config.securityGrantToken);

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const appleTvPageEditBag = ref(config.entity ?? {} as AppleTvPageBag);
    const submitForm = ref(false);
    const redirectAfterSave = ref(true);
    const resetKey = ref("");
    const showAuditDetailsModal = ref(false);

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.Edit);

    // The properties that are being edited in the UI. This is used to
    // inform the server which incoming values have valid data in them.
    const validProperties = [
        "attributeValues",
        "name",
        "description",
        "showInMenu",
        "pageTVML",
        "rockCacheability"
    ];

    const refreshAttributesDebounce = debounce(() => refreshDetailAttributes(appleTvPageEditBag, validProperties, invokeBlockAction), undefined, true);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return appleTvPageEditBag.value?.name ?? "New Page";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return appleTvPageEditBag.value?.idKey ?? "";
    });

    const headerSecondaryActions = computed((): PanelAction[] | undefined => {
        const actions: PanelAction[] = [];

        if (appleTvPageEditBag.value.idKey) {
            actions.push({
                type: "default",
                title: "Audit Details",
                handler: onAuditClick
            });
        }

        return actions;
    });

    const options = computed((): AppleTvPageDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    const onAuditClick = (): void => {
        showAuditDetailsModal.value = true;
    };

    const onExportClick = (event: Event): void => {
        navigator.clipboard.writeText(appleTvPageEditBag.value?.pageGuid ?? "");

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const jquery = <any>window[<any>"$"];
        const jEl = jquery(event.target).tooltip();
        jEl.attr("data-original-title", "Copied")
            .tooltip("show")
            .attr("data-original-title", "Copy Page Guid to Clipboard");
    };

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<void> {
        if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
            window.location.href = makeUrlRedirectSafe(config.navigationUrls[NavigationUrlKey.ParentPage]);
        }
    }

    /**
     * Event handler for when a value has changed that has an associated
     * C# property name. This is used to detect changes to values that
     * might cause qualified attributes to either show up or not show up.
     *
     * @param propertyName The name of the C# property that was changed.
     */
    function onPropertyChanged(propertyName: string): void {
        // If we don't have any qualified attribute properties or this property
        // is not one of them then do nothing.
        if (!config.qualifiedAttributeProperties || !config.qualifiedAttributeProperties.some(n => n.toLowerCase() === propertyName.toLowerCase())) {
            return;
        }

        refreshAttributesDebounce();
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";

        const data: DetailBlockBox<AppleTvPageBag, AppleTvPageDetailOptionsBag> = {
            entity: appleTvPageEditBag.value,
            isEditable: true,
            validProperties: validProperties
        };

        const result = await invokeBlockAction<AppleTvPageBag | string>("Save", {
            box: data
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                const parentPageUrl = config.navigationUrls?.[NavigationUrlKey.ParentPage];
                if (redirectAfterSave.value && parentPageUrl) {
                    window.location.href = makeUrlRedirectSafe(parentPageUrl);
                }
                else {
                    appleTvPageEditBag.value = result.data;
                }
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save page.";
        }

    }

    function onSaveForm(): void {
        redirectAfterSave.value = true;
        submitForm.value = true;
    }

    function onSaveAndContinueEditingForm(): void {
        redirectAfterSave.value = false;
        submitForm.value = true;
    }


    // #endregion

    provideSecurityGrant(securityGrant);

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified page could not be viewed.";
    }
    else if (!config.entity.idKey) {
        appleTvPageEditBag.value = config.entity;
        panelMode.value = DetailPanelMode.Add;
    }
</script>
