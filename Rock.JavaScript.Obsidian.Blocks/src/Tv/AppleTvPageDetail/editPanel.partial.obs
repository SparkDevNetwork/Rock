<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name" label="Page Name" rules="required" />
            </div>
            <div class="col-md-6">
                <CheckBox v-model="showInMenu" label="Show In Menu" />
            </div>
        </div>

        <TextBox v-model="description" label="Description" textMode="multiline" />

        <CodeEditor v-model="pageTVML" label="Page TVML" theme="rock" mode="text" :editorHeight="200" />

        <CacheabilityPicker v-model="cacheability" :showBlankItem="false" :multiple="false" />

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />

    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { AppleTvPageBag } from "@Obsidian/ViewModels/Blocks/Tv/AppleTvPageDetail/appleTvPageBag";
    import { AppleTvPageDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Tv/AppleTvPageDetail/appleTvPageDetailOptionsBag";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import CodeEditor from "@Obsidian/Controls/codeEditor.obs";
    import CacheabilityPicker from "@Obsidian/Controls/cacheabilityPicker.obs";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { TimeIntervalUnit } from "@Obsidian/Enums/Core/timeIntervalUnit";
    import { RockCacheabilityBag } from "@Obsidian/ViewModels/Controls/rockCacheabilityBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<AppleTvPageBag>>,
            required: true
        },

        options: {
            type: Object as PropType<AppleTvPageDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<AppleTvPageBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "InternalName");
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const showInMenu = ref(props.modelValue?.bag?.showInMenu ?? false);
    const pageTVML = ref(props.modelValue?.bag?.pageTVML ?? "");
    const cacheability = ref(props.modelValue?.bag?.rockCacheability ?? defaultValue());

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [name, description];

    // #endregion

    // #region Functions

    function defaultValue(): RockCacheabilityBag {
        return {
            rockCacheabilityType: 0,
            maxAge: { unit: TimeIntervalUnit.Minutes, value: null },
            sharedMaxAge: { unit: TimeIntervalUnit.Minutes, value: null }
        };
    }

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(showInMenu, props.modelValue?.bag?.showInMenu ?? false);
        updateRefValue(pageTVML, props.modelValue?.bag?.pageTVML ?? "");
        updateRefValue(cacheability, props.modelValue?.bag?.rockCacheability ?? defaultValue());
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, showInMenu, pageTVML, cacheability, ...propRefs], () => {
        const newValue: ValidPropertiesBox<AppleTvPageBag> = {
            bag: { ...props.modelValue.bag } as AppleTvPageBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "showInMenu", showInMenu.value);
        setPropertiesBoxValue(newValue, "pageTVML", pageTVML.value);
        setPropertiesBoxValue(newValue, "rockCacheability", cacheability.value);

        emit("update:modelValue", newValue);
    }, { deep: true });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
