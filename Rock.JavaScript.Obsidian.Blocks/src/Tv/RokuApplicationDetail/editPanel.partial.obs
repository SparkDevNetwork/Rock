<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>
            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active"
                          rules="required" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <CheckBox v-model="enablePageViews"
                          label="Enable Page Views"
                          rules="required"
                          help="Determines if interaction records are written for page views." />

                <NumberBox v-model="pageViewRetentionDuration"
                           label="Page View Retention Duration"
                           help="The number of days to retain page views. Keep blank to store indefinitely."
                           v-if="enablePageViews" />
            </div>
            <div class="col-md-6">
                <TextBox v-model="apiKey"
                         label="API Key"
                         rules="required"
                         help="The API Key that will be used to secure your TV application." />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <PagePicker v-model="authenticationPage"
                            label="Authentication Page"
                            help="The page on your public website that will be used for the authentication process." />
            </div>
        </div>


        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />

        <div class="row">
            <div class="col-md-12">
                <TextBox v-if="showRokuComponents"
                         textMode="multiline"
                         v-model="rokuComponents"
                         label="Roku Components"
                         help="The components that will be used to build the Roku application."
                         :rows="6"
                         :allowHtml="true" />
            </div>
        </div>
    </fieldset>
</template>

<script setup lang="ts">
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import PagePicker from "@Obsidian/Controls/pagePicker.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";

    import { PropType, ref, watch } from "vue";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { RokuApplicationBag } from "@Obsidian/ViewModels/Blocks/Tv/RokuApplicationDetail/rokuApplicationBag";
    import { RokuApplicationDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Tv/RokuApplicationDetail/rokuApplicationDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { PageRouteValueBag } from "@Obsidian/ViewModels/Rest/Controls/pageRouteValueBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<RokuApplicationBag>>,
            required: true
        },

        options: {
            type: Object as PropType<RokuApplicationDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<RokuApplicationBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue.bag?.description ?? "", "Description");
    const name = propertyRef(props.modelValue.bag?.name ?? "", "Name");
    const enablePageViews = propertyRef(props.modelValue.bag?.enablePageViews ?? false, "EnablePageViews");
    const apiKey = propertyRef(props.modelValue.bag?.apiKey ?? "", "ApiKey");
    const isActive = propertyRef(props.modelValue.bag?.isActive ?? false, "IsActive");
    const pageViewRetentionDuration = propertyRef(props.modelValue.bag?.pageViewRetentionDuration, "PageViewRetentionDuration");
    const authenticationPage = propertyRef<PageRouteValueBag | null>({ page: props.modelValue.bag?.loginPage } ?? null, "AuthenticationPage");
    const rokuComponents = propertyRef(props.modelValue.bag?.rokuComponents ?? "", "RokuComponents");
    const showRokuComponents = ref(props.modelValue.bag?.showRokuComponents ?? false);

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, name, enablePageViews, apiKey, isActive, pageViewRetentionDuration, authenticationPage, rokuComponents];

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue.bag?.description ?? "");
        updateRefValue(name, props.modelValue.bag?.name ?? "");
        updateRefValue(enablePageViews, props.modelValue.bag?.enablePageViews ?? false);
        updateRefValue(apiKey, props.modelValue.bag?.apiKey ?? "");
        updateRefValue(isActive, props.modelValue.bag?.isActive ?? false);
        updateRefValue(pageViewRetentionDuration, props.modelValue.bag?.pageViewRetentionDuration);
        updateRefValue(authenticationPage, { page: props.modelValue?.bag?.loginPage ?? null });
        updateRefValue(rokuComponents, props.modelValue.bag?.rokuComponents ?? "");
        showRokuComponents.value = props.modelValue?.bag?.showRokuComponents ?? false;
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: ValidPropertiesBox<RokuApplicationBag> = {
            bag: { ...props.modelValue.bag } as RokuApplicationBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "enablePageViews", enablePageViews.value);
        setPropertiesBoxValue(newValue, "apiKey", apiKey.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "pageViewRetentionDuration", pageViewRetentionDuration.value);
        setPropertiesBoxValue(newValue, "loginPage", { text: authenticationPage.value?.page?.text, value: authenticationPage.value?.page?.value ?? null });
        setPropertiesBoxValue(newValue, "rokuComponents", rokuComponents.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>