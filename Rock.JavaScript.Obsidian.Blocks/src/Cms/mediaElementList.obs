<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="isVisible"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          :itemTerm="config?.options?.mediaFolderName + ' Media Elements'"
          :entityTypeGuid="EntityType.MediaElement"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    width="40%"
                    visiblePriority="md" />

        <TextColumn name="durationSeconds"
                    title="Duration"
                    field="durationSeconds"
                    :filter="textValueFilter"
                    :getValue="formatDuration"
                    width="20%"
                    visiblePriority="xs" />

        <NumberColumn name="watchCount"
                      title="Watch Count"
                      field="watchCount"
                      :filter="numberValueFilter"
                      width="20%"
                      visiblePriority="xs" />

        <BooleanColumn name="transcribed"
                       title="Transcribed"
                       field="transcribed"
                       :filter="booleanValueFilter"
                       width="10%"
                       visiblePriority="xs" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, DeleteColumn, TextColumn, textValueFilter, NumberColumn, numberValueFilter, BooleanColumn, booleanValueFilter } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { MediaElementListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/MediaElementList/mediaElementListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./MediaElementList/types.partial";
    import { computed, reactive, ref } from "vue";
    import { useStore } from "@Obsidian/PageState";

    const config = useConfigurationValues<ListBlockBox<MediaElementListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const store = useStore();

    // All blocks auto reload when changing block settings unless there is an
    // explicit reason not to (like using a custom reload function instead),
    // in which case you can remove this code.
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Computed Values

    const isVisible = computed((): boolean => {
        return store.state.areSecondaryBlocksShown;
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            // Format the duration before setting the grid data
            if (result.data.rows) {
                result.data.rows = result.data.rows.map(row => ({
                    ...row,
                    durationSeconds: formatDuration(Number(row.durationSeconds))
                }));
            }

            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Formats a duration in seconds to a human readable string (e.g. "2h 46m 16s")
     * @param seconds The duration in seconds
     */
    function formatDuration(seconds: number): string {
        if (!seconds) return "";

        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = Math.floor(seconds % 60);

        const parts: string[] = [];
        if (hours > 0) parts.push(`${hours}h`);
        if (minutes > 0) parts.push(`${minutes}m`);
        if (remainingSeconds > 0 || parts.length === 0) parts.push(`${remainingSeconds}s`);

        return parts.join(" ");
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete media element.");
        }
    }

    /**
     * Called when the Add button has been clicked by the individual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
