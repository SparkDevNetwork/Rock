<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-3">
                <DatePicker v-model="startDate" label="Start Date" help="The date when this adaptation becomes eligible to be shown." />
            </div>
            <div class="col-md-3">
                <DatePicker v-model="endDate" label="End Date" help="The date when this adaptation stops being shown." />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <DropDownList
                              v-model="segments"
                              enhanceForLongLists
                              multiple
                              label="Segments"
                              help="The segments that an individual needs to be in order for this message adaptation to be considered relevant. Leave blank for all individuals to be considered relevant."
                              :items="segmentOptions" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <NumberBox :minimumValue="0" v-model="viewSaturationCount" label="View Saturation Count" help="The number of times a person should view the message before it's deemed to have been saturated." />
            </div>
            <div class="col-md-3">
                <NumberBox :minimumValue="0" v-model="viewSaturationInDays" label="View Saturation Date Range" help="Specify the number of days to be taken into consideration for the saturation calculation of views. Views outside this range will not be considered.">
                    <template #inputGroupAppend>
                        <span class="input-group-addon">days</span>
                    </template>
                </NumberBox>
            </div>
        </div>
        <SectionHeader class="margin-t-lg" title="Message Content"
                       description="The items below represent different forms of content that can be associated with the message." />
        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" :showCategoryLabel="false" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, computed, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { AdaptiveMessageAdaptationBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageAdaptationDetail/adaptiveMessageAdaptationBag";
    import { AdaptiveMessageAdaptationDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageAdaptationDetail/adaptiveMessageAdaptationDetailOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<AdaptiveMessageAdaptationBag>>,
            required: true
        },

        options: {
            type: Object as PropType<AdaptiveMessageAdaptationDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<AdaptiveMessageAdaptationBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const startDate = propertyRef(props.modelValue?.bag?.startDate ?? "", "StartDate");
    const endDate = propertyRef(props.modelValue?.bag?.endDate ?? "", "EndDate");
    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue?.bag?.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const viewSaturationCount = propertyRef(props.modelValue?.bag?.viewSaturationCount ?? null, "ViewSaturationCount");
    const viewSaturationInDays = propertyRef(props.modelValue?.bag?.viewSaturationInDays ?? null, "ViewSaturationInDays");
    const segments = propertyRef(props.modelValue?.bag?.segments ?? [], "Segments");
    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, segments, viewSaturationCount, viewSaturationInDays, startDate, endDate];

    // #endregion

    // #region Computed Values

    const segmentOptions = computed((): ListItemBag[] => {
        return props.options.segmentOptions ?? [];
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue?.bag?.isActive ?? false);
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(viewSaturationCount, props.modelValue?.bag?.viewSaturationCount ?? null);
        updateRefValue(viewSaturationInDays, props.modelValue?.bag?.viewSaturationInDays ?? null);
        updateRefValue(segments, props.modelValue?.bag?.segments ?? []);
        updateRefValue(startDate, props.modelValue?.bag?.startDate ?? "");
        updateRefValue(endDate, props.modelValue?.bag?.endDate ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: ValidPropertiesBox<AdaptiveMessageAdaptationBag> = {
            bag: { ...props.modelValue.bag } as AdaptiveMessageAdaptationBag
        };
        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "viewSaturationInDays", viewSaturationInDays.value);
        setPropertiesBoxValue(newValue, "viewSaturationCount", viewSaturationCount.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "segments", segments.value);
        setPropertiesBoxValue(newValue, "startDate", startDate.value);
        setPropertiesBoxValue(newValue, "endDate", endDate.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
