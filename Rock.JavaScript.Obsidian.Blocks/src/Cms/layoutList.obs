<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Layout"
          :entityTypeGuid="EntityType.Layout"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          :showLaunchWorkflow="false"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="5%" />

        <TextColumn name="fileName"
                    title="Layout File"
                    field="fileName"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="50%" />

        <TextColumn name="description"
                    title="Description"
                    field="description"
                    :filter="textValueFilter"
                    visiblePriority="md"
                    width="1%" />

        <BooleanColumn name="isSystem"
                       title="System"
                       field="isSystem"
                       visiblePriority="xs"
                       width="80px"
                       :itemClass="'d-flex justify-content-center align-items-center'" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />

        <!-- The columns below will only be shown in the exported file -->
        <Column name="siteId"
                title="Site Id"
                field="siteId"
                :hideOnScreen="true" />

        <Column name="layoutMobilePhone"
                title="Layout Mobile Phone"
                field="layoutMobilePhone"
                :hideOnScreen="true" />

        <Column name="layoutMobileTablet"
                title="Layout Mobile Tablet"
                field="layoutMobileTablet"
                :hideOnScreen="true" />

        <DateTimeColumn name="createdDateTime"
                        title="Created Date Time"
                        field="createdDateTime"
                        :hideOnScreen="true" />

        <DateTimeColumn name="modifiedDateTime"
                        title="Modified Date Time"
                        field="modifiedDateTime"
                        :hideOnScreen="true" />

        <Column name="createdByPersonAliasId"
                title="Created By Person Alias Id"
                field="createdByPersonAliasId"
                :hideOnScreen="true" />

        <Column name="modifiedByPersonAliasId"
                title="Modified By Person Alias Id"
                field="modifiedByPersonAliasId"
                :hideOnScreen="true" />

        <Column name="id"
                title="Id"
                field="id"
                :hideOnScreen="true" />

        <Column name="idKey"
                title="Id Key"
                field="idKey"
                :hideOnScreen="true" />

        <Column name="guid"
                title="Guid"
                field="guid"
                :hideOnScreen="true" />

        <Column name="foreignId"
                title="Foreign Id"
                field="foreignId"
                :hideOnScreen="true" />

        <Column name="foreignGuid"
                title="Foreign Guid"
                field="foreignGuid"
                :hideOnScreen="true" />

        <Column name="foreignKey"
                title="Foreign Key"
                field="foreignKey"
                :hideOnScreen="true" />
    </Grid>

    <!-- Informational Note -->
    <NotificationBox :alertType="'info'"
                     :dismissible="false"
                     :class="'mt-4'">
        <div>
            <strong>Note</strong> {{ note }}
        </div>
    </NotificationBox>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { Column, BooleanColumn, TextColumn, textValueFilter, DeleteColumn, SecurityColumn, DateTimeColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LayoutListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/LayoutList/layoutListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./LayoutList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<LayoutListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;
    const note = "Rock will ensure that at least one layout entry exists for each layout file in the site's theme folder. If all the layouts for a layout file are deleted, Rock will automatically and immediately recreate a new layout entry.";

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);

            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete layout.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
