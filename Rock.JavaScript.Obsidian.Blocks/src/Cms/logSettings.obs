<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock v-if="!blockError"
                 v-model:mode="panelMode"
                 :title="panelName"
                 :labels="blockLabels"
                 :isAuditHidden="true"
                 :isBadgesVisible="false"
                 :isDeleteVisible="false"
                 :isEditVisible="isEditable"
                 :isFollowVisible="false"
                 :isSecurityHidden="true"
                 :isFullScreenVisible="false"
                 :footerActions="footerActions"
                 @cancelEdit="onCancelEdit"
                 @edit="onEdit"
                 @save="onSave">
        <template #view>
            <NotificationBox v-if="isSaveSuccessful" alertType="success">Setting saved successfully.</NotificationBox>
            <ViewPanel :modelValue="logSettingsViewBag" :options="options" />
        </template>

        <template #edit>
            <EditPanel v-model="logSettingsEditBag" :options="options" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./LogSettings/editPanel.partial.obs";
    import ViewPanel from "./LogSettings/viewPanel.partial.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { LogSettingsBag } from "@Obsidian/ViewModels/Blocks/Cms/LogSettings/logSettingsBag";
    import { LogSettingsDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/LogSettings/logSettingsDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";

    const config = useConfigurationValues<DetailBlockBox<LogSettingsBag, LogSettingsDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");
    const isDeleting = ref(false);
    const isSaveSuccessful = ref(false);

    const logSettingsViewBag = ref(config.entity);
    const logSettingsEditBag = ref<ValidPropertiesBox<LogSettingsBag>>({
        bag: {} as LogSettingsBag
    });

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = ref("Log Settings");

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        return labels;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): LogSettingsDetailOptionsBag => {
        return config.options ?? {};
    });

    const footerActions = computed((): PanelAction[] => {
        const actions: PanelAction[] = [];

        if (panelMode.value === DetailPanelMode.View) {
            actions.push({
                type: "link",
                title: deleteButtonText.value,
                handler: onDelete,
                disabled: isDeleting.value,
            });
        }

        return actions;
    });

    const deleteButtonText = computed((): string => {
        return isDeleting.value ? "Deleting Log ..." : "Delete Log";
    });

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    function onCancelEdit(): boolean {
        panelMode.value = DetailPanelMode.View;
        return true;
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<void> {
        errorMessage.value = "";
        isDeleting.value = true;

        try {
            const result = await invokeBlockAction<string>("Delete");

            if (result.isSuccess && result.data) {
                window.location.href = makeUrlRedirectSafe(result.data);
            }
            else {
                errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete log settings.";
            }
        }
        finally {
            isDeleting.value = false;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<LogSettingsBag>>("Edit", {
            key: logSettingsViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            logSettingsEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<LogSettingsBag> | string>("Save", {
            box: logSettingsEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                logSettingsViewBag.value = result.data.bag;
                isSaveSuccessful.value = true;
                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save log settings.";

        return false;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified log settings could not be viewed.";
    }
    else {
        logSettingsEditBag.value = { bag: config.entity };
    }
</script>
