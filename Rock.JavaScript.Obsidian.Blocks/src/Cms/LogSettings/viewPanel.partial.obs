<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { LogSettingsBag } from "@Obsidian/ViewModels/Blocks/Cms/LogSettings/logSettingsBag";
    import { LogSettingsDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/LogSettings/logSettingsDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<LogSettingsBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<LogSettingsDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const verbosityLevel = props.options.verbosityLevels?.find(v => v.value == props.modelValue?.standardLogLevel);
        if (verbosityLevel?.text) {
            valueBuilder.addTextValue("Verbosity Level", verbosityLevel.text);
        }

        valueBuilder.addTextValue("Local File System", props.modelValue.isLocalLoggingEnabled ? "Enabled" : "Disabled");

        return valueBuilder.build();
    });

    /** The values to display at half-width on the right side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.selectedCategories) {
            valueBuilder.addHtmlValue("Categories", props.modelValue.selectedCategories.join("<br>"));
        }
        else {
            valueBuilder.addTextValue("Categories", "");
        }

        valueBuilder.addTextValue("Observability", props.modelValue.isObservabilityLoggingEnabled ? "Enabled" : "Disabled");

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
