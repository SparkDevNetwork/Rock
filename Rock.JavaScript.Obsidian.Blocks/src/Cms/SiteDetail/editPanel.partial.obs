<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <NotificationBox v-if="!idkey" alertType="info">
            <strong>Note</strong> If a Default Page is not specified, Rock will automatically create a new page at the root and set it as the default page for this new site.
        </NotificationBox>

        <NotificationBox v-if="isSystem" alertType="info">
            <strong>Note</strong> Because this site is used by Rock, editing is restricted.
        </NotificationBox>

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         :disabled="isSystem"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 :disabled="isSystem"
                 label="Description"
                 textMode="multiline" />

        <div class="row">

            <div class="col-md-4">
                <DropDownList v-model="theme"
                              label="Theme"
                              :disabled="isSystem"
                              help="The theme that should be used for the site. Themes contain specific layouts and css styling that controls how a site and its pages will look."
                              :items="themes" />

                <PagePicker v-model="defaultPage"
                            label="Default Page"
                            :multiple="false"
                            help="The page and route that will be used whenever a specific page or page route is not provided."
                            promptForPageRoute
                            showSelectCurrentPage />

                <PagePicker v-model="loginPage"
                            label="Login Page"
                            :multiple="false"
                            help="The page users will be redirected to when they request a page that requires login."
                            promptForPageRoute
                            showSelectCurrentPage />

                <PagePicker v-model="changePasswordPage"
                            label="Change Password Page"
                            :multiple="false"
                            help="The page for changing a password for the site."
                            promptForPageRoute
                            showSelectCurrentPage />

                <PagePicker v-model="communicationPage"
                            label="Communication Page"
                            :multiple="false"
                            help="The page that user will be redirected to when creating a new communication."
                            promptForPageRoute
                            showSelectCurrentPage />

                <PagePicker v-model="registrationPage"
                            label="Group Registration Page"
                            :multiple="false"
                            help="The page that user will be redirected to when they request to register for a group."
                            promptForPageRoute
                            showSelectCurrentPage />

                <PagePicker v-model="pageNotFoundPage"
                            label="404 Page"
                            :multiple="false"
                            help="Page to use instead of the server's 404 message."
                            promptForPageRoute
                            showSelectCurrentPage />
            </div>


            <div class="col-md-6 col-md-offset-2">

                <TextBox v-model="siteDomains"
                         label="Domain(s)"
                         help="A list of domains that are associated with this site (list can be either comma delimited or each on a separate line).
                  These values are used by Rock to load the correct site whenever a specific page or route is not provided in the URL.
                  Rock will determine the site to use by finding the first site with a domain value that is contained by the current request's hostname in the url.
                  It will then display that site's default page."
                         textMode="multiline" />

                <TextBox v-model="errorPage"
                         label="Error Page"
                         help="The URL that user will be redirected to if an error occurs on site." />

                <TextBox v-model="googleAnalyticsCode"
                         label="Google Analytics Code"
                         help="Optional Google Analytics Code. If specified, the Google Analytics script with this code will be added to every page rendered for this site." />

                <CheckBox v-model="requiresEncryption"
                          label="Require Encryption"
                          help="Ensures that the site is loaded over SSL by redirecting to https." />

                <CheckBox v-model="enabledForShortening"
                          label="Enabled for Shortening"
                          help="Should this site (and its first domain) be an available option when creating shortlinks?" />

                <CheckBox v-model="enableVisitorTracking"
                          label="Enable Visitor Tracking"
                          help="Enable Visitor Tracking to keep track of how an anonymous visitor is interacting with the site." />

                <CheckBox v-model="enablePersonalization"
                          label="Enable Personalization"
                          help="Enable Personalization to allow pages to be personalized based on how the user interacts with the site." />

                <div class="row">
                    <div class="col-md-4">
                        <ImageUploader v-model="favIconBinaryFile"
                                       label="Site Icon"
                                       help="Commonly called a 'favicon', this image is used as a browser and app icon for your site. Recommended image size is 192x192. Rock will automatically create all the sizes required by various devices."
                                       :uploadAsTemporary="true"
                                       uploadButtonText="Upload"
                                       :binaryFileTypeGuid="binaryFileTypeGuid"
                                       :showDeleteButton="true" />
                    </div>
                    <div class="col-md-4">
                        <ImageUploader v-model="siteLogoBinaryFile"
                                       label="Site Logo"
                                       help="The site logo is used by certain themes to apply to the changes on the site. See the theme's documentation for information on sizing"
                                       :uploadAsTemporary="true"
                                       uploadButtonText="Upload"
                                       :showDeleteButton="true" />
                    </div>

                </div>

            </div>

        </div>

        <Panel title="Page Attributes" hasCollapse>
            <NotificationBox alertType="info">
                Page Attributes apply to all of the pages of this site. Each page will have its own value for these attributes.
            </NotificationBox>

            <div class="panel-body">
                <div class="grid grid-panel">
                    <Grid :data="gridData" keyField="key" itemTerm="Page Attribute" liveUpdates light @addItem="onAddItem">
                        <TextColumn name="name" field="name" title="Attribute" />
                        <TextColumn name="description" field="description" title="Description" />
                        <BooleanColumn name="isRequired" field="isRequired" title="Required" />
                        <EditColumn @click="onEditItem" />
                        <DeleteColumn @click="onDeleteItem" disableConfirmation />
                    </Grid>
                </div>
            </div>


            <Modal v-model="isModalOpen" title="Page Attributes">

                <RockForm v-model:submit="submitEditAttribute" @submit="onSaveAttribute">
                    <NotificationBox v-show="attributeErrors.length > 0" alertType="validation">
                        Please correct the following:
                        <ul>
                            <li v-for="error of attributeErrors">
                                {{ error }}
                            </li>
                        </ul>
                    </NotificationBox>
                    <AttributeEditor v-model="siteAttribute" :reservedKeyNames="reservedKeyNames" />
                </RockForm>

                <template #customButtons>
                    <RockButton btnType="primary" @click="onStartSaveAttribute">Save</RockButton>
                </template>

            </Modal>
        </Panel>

        <Panel title="Advanced Settings" hasCollapse>
            <div class="row">

                <div class="col-md-6">

                    <CheckBox v-model="enableMobileRedirect"
                              label="Enabled Mobile Redirect" />

                    <CheckBox v-model="enablePageViews"
                              label="Log Page Views" />

                    <NumberBox v-model="retentionDuration"
                               label="Page View Retention Period"
                               help="The number of days to keep page views logged. Leave blank to keep page views logged indefinitely." />

                    <TextBox v-model="allowedFrameDomains"
                             label="Allowed Frame Domain(s)"
                             textMode="multiline"
                             help="A list of domain values that are allowed to embed this site (via an iframe).  This list may be delimited with spaces or commas, or you may enter item per line.
                      The value you enter here will be used for the &lt;source&gt; as described in [Content-Security-Policy frame-ancestors directive](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors#Syntax).
                      Be sure to include your own server domain(s) in the list to prevent locking yourself out from modal use.
                      If left blank, Rock will inject properties into the HTTP Header which modern web browsers will use to prevent site embedding and it will use a frame-ancestors value of 'self'." />

                </div>

                <div class="col-md-6">

                    <CheckBox v-model="allowIndexing"
                              label="Allow Indexing" />

                    <TextBox v-model="indexStartingLocation"
                             label="Crawling Starting Location"
                             help="Enables the Rock indexer for this site." />

                    <CheckBox v-model="enableExclusiveRoutes"
                              label="Enable Exclusive Routes"
                              help="Enabling this feature will prevent other sites from using this sites routes and prevent routes from other sites from working on this site.
                      This means the domain in the URL used with the route must match the site's configured Domain(s). If the route is configured as 'Is Global' then this setting is ignored." />

                    <CheckBox v-model="disablePredictableIds"
                              label="Disable Predictable Ids"
                              help="This should be disabled only with the knowledge that the site was created/built to handle this (rare)." />

                </div>

            </div>

            <CodeEditor v-model="pageHeaderContent" label="Page Header Content" theme="rock" mode="text" :editorHeight="200" help="The content provided here will be added to each page's head section." />

        </Panel>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, reactive, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import PagePicker from "@Obsidian/Controls/pagePicker.obs";
    import ImageUploader from "@Obsidian/Controls/imageUploader.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import CodeEditor from "@Obsidian/Controls/codeEditor.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import Grid, { DeleteColumn, EditColumn, TextColumn, BooleanColumn } from "@Obsidian/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { SiteBag } from "@Obsidian/ViewModels/Blocks/Cms/SiteDetail/siteBag";
    import { SiteDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/SiteDetail/siteDetailOptionsBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import { BinaryFiletype } from "@Obsidian/SystemGuids/binaryFiletype";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<SiteBag>>,
            required: true
        },

        options: {
            type: Object as PropType<SiteDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<SiteBag>): void;
        (e: "propertyChanged", value: string): void;
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue?.bag?.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const theme = propertyRef(props.modelValue?.bag?.theme ?? "", "Theme");
    const siteDomains = ref(props.modelValue?.bag?.siteDomains ?? "");
    const errorPage = propertyRef(props.modelValue?.bag?.errorPage ?? "", "ErrorPage");
    const googleAnalyticsCode = propertyRef(props.modelValue?.bag?.googleAnalyticsCode ?? "", "GoogleAnalyticsCode");
    const requiresEncryption = propertyRef(props.modelValue?.bag?.requiresEncryption ?? false, "RequiresEncryption");
    const enabledForShortening = propertyRef(props.modelValue?.bag?.enabledForShortening ?? false, "EnabledForShortening");
    const enableVisitorTracking = propertyRef(props.modelValue?.bag?.enableVisitorTracking ?? false, "EnableVisitorTracking");
    const enablePersonalization = propertyRef(props.modelValue?.bag?.enablePersonalization ?? false, "enablePersonalization");
    const favIconBinaryFile = propertyRef(props.modelValue?.bag?.favIconBinaryFile ?? null, "FavIconBinaryFile");
    const siteLogoBinaryFile = propertyRef(props.modelValue?.bag?.siteLogoBinaryFile ?? null, "SiteLogoBinaryFile");
    const enableMobileRedirect = propertyRef(props.modelValue?.bag?.enableMobileRedirect ?? false, "EnableMobileRedirect");
    const enablePageViews = propertyRef(props.modelValue?.bag?.enablePageViews ?? false, "EnablePageViews");
    const retentionDuration = ref(props.modelValue?.bag?.retentionDuration);
    const allowedFrameDomains = propertyRef(props.modelValue?.bag?.allowedFrameDomains ?? "", "AllowedFrameDomains");
    const allowIndexing = propertyRef(props.modelValue?.bag?.allowIndexing ?? false, "AllowIndexing");
    const indexStartingLocation = propertyRef(props.modelValue?.bag?.indexStartingLocation ?? "", "IndexStartingLocation");
    const enableExclusiveRoutes = propertyRef(props.modelValue?.bag?.enableExclusiveRoutes ?? false, "EnableExclusiveRoutes");
    const disablePredictableIds = propertyRef(props.modelValue?.bag?.disablePredictableIds ?? false, "DisablePredictableIds");
    const pageHeaderContent = propertyRef(props.modelValue?.bag?.pageHeaderContent ?? "", "PageHeaderContent");
    const siteAttributes = ref(props.modelValue?.bag?.siteAttributes ?? []);
    const binaryFileTypeGuid = ref(toGuidOrNull(props.modelValue?.bag?.binaryFileTypeGuid) ?? BinaryFiletype.Default);
    const idkey = ref(props.modelValue?.bag?.idKey);
    const isSystem = props.modelValue?.bag?.isSystem;
    const themes = ref(props.options.themes ?? []);
    const isModalOpen = ref<boolean>(false);
    const reservedKeyNames = ref(props.options.reservedKeyNames ?? []);
    const siteAttribute = ref<PublicEditableAttributeBag | null>(null);
    const submitEditAttribute = ref<boolean>(false);
    const attributeErrors = ref<string[]>([]);

    const defaultPage = ref({
        page: props.modelValue?.bag?.defaultPage ?? null
    });
    const loginPage = ref({
        page: props.modelValue?.bag?.loginPage ?? null
    });
    const changePasswordPage = ref({
        page: props.modelValue?.bag?.changePasswordPage ?? null
    });
    const communicationPage = ref({
        page: props.modelValue?.bag?.communicationPage ?? null
    });
    const registrationPage = ref({
        page: props.modelValue?.bag?.registrationPage ?? null
    });
    const pageNotFoundPage = ref({
        page: props.modelValue?.bag?.pageNotFoundPage ?? null
    });

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, theme, googleAnalyticsCode, requiresEncryption, enabledForShortening, enableVisitorTracking, enablePersonalization, favIconBinaryFile, enablePageViews,
        siteLogoBinaryFile, enableMobileRedirect, allowedFrameDomains, allowIndexing, indexStartingLocation, enableExclusiveRoutes, disablePredictableIds, pageHeaderContent, errorPage];

    // #endregion

    // #region Computed Values

    const gridData: GridDataBag = reactive<GridDataBag>({
        rows: siteAttributes.value.map(x => convertToRowItem(x))
    });
    // #endregion

    // #region Functions

    function convertToRowItem(attribute: PublicEditableAttributeBag): Record<string, unknown> {
        console.log(attribute);
        return {
            key: attribute.key,
            name: attribute.name,
            description: attribute.description,
            isRequired: attribute.isRequired
        };
    }

    // #endregion

    // #region Event Handlers

    async function onAddItem(): Promise<void> {
        siteAttribute.value = {} as PublicEditableAttributeBag;
        isModalOpen.value = true;
        attributeErrors.value = [];
    }

    const onEditItem = async (key: string): Promise<void> => {

        attributeErrors.value = [];
        const selectedSiteAttribute = siteAttributes.value.find(x => x.key === key);
        // If attribute exists set it as current attribute for editing.
        if (selectedSiteAttribute) {
            siteAttribute.value = selectedSiteAttribute;
            isModalOpen.value = true;
        }
        else {
            onAddItem();
        }
    };

    const onDeleteItem = async (key: string): Promise<void> => {
        // Close modal and remove deleted attribute from the current collection of attributes.
        isModalOpen.value = false;
        siteAttributes.value = siteAttributes.value.filter(s => s.key !== key);

        // Update the grid.
        if (gridData.rows) {
            const index = gridData.rows.findIndex(r => r["idKey"] === key);

            if (index !== -1) {
                gridData.rows?.splice(index, 1);
            }
        }
    };

    function onSaveAttribute(): void {

        if (siteAttribute.value) {
            const index = siteAttributes.value.findIndex(a => a.key === siteAttribute.value?.key);
            if (index !== -1) {
                // Get the updated attribute and rowItem.
                let editedAttribute = siteAttributes.value.find(a => a.guid == siteAttribute.value?.guid);
                let rowItem = gridData.rows?.find(x => x["idKey"] == siteAttribute.value?.key);

                if (editedAttribute) {
                    // Replace old attribute with updated attribute.
                    editedAttribute = siteAttribute.value;
                    siteAttributes.value.splice(index, 1, editedAttribute);
                }

                if (rowItem && gridData.rows && editedAttribute) {
                    // Update GridRowItem so changes are reflected in the UI.
                    const rowIndex = gridData.rows.findIndex(r => r["idKey"] === siteAttribute.value?.key);
                    rowItem = convertToRowItem(editedAttribute);
                    gridData.rows?.splice(rowIndex, 1, rowItem);
                }
            }
            else {
                siteAttributes.value.push(siteAttribute.value);

                // Add new RowItem to the grid to represent the newly added attribute.
                const newRowItem = convertToRowItem(siteAttribute.value);
                gridData.rows?.push(newRowItem);
            }

            const key = siteAttribute.value?.key ?? "";
            siteAttribute.value = null;
            isModalOpen.value = false;
            if (!reservedKeyNames.value.includes(key)) {
                reservedKeyNames.value.push(key);
            }
        }
    }

    const onStartSaveAttribute = (): void => {
        attributeErrors.value = [];
        const isExistingKey = reservedKeyNames.value.includes(siteAttribute.value?.key ?? "") && !siteAttribute.value?.guid;
        submitEditAttribute.value = !isExistingKey;
        if (isExistingKey) {
            attributeErrors.value.push("There is already an existing property with the key value you entered or the key has illegal characters. Please select a different key value and use only letters, numbers and underscores.");
        }
    };

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue?.bag?.isActive ?? false);
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(theme, props.modelValue?.bag?.theme ?? "");
        updateRefValue(siteDomains, props.modelValue?.bag?.siteDomains ?? "");
        updateRefValue(errorPage, props.modelValue?.bag?.errorPage ?? "");
        updateRefValue(googleAnalyticsCode, props.modelValue?.bag?.googleAnalyticsCode ?? "");
        updateRefValue(requiresEncryption, props.modelValue?.bag?.requiresEncryption ?? false);
        updateRefValue(enabledForShortening, props.modelValue?.bag?.enabledForShortening ?? false);
        updateRefValue(enableVisitorTracking, props.modelValue?.bag?.enableVisitorTracking ?? false);
        updateRefValue(enablePersonalization, props.modelValue?.bag?.enablePersonalization ?? false);
        updateRefValue(favIconBinaryFile, props.modelValue?.bag?.favIconBinaryFile ?? null);
        updateRefValue(siteLogoBinaryFile, props.modelValue?.bag?.siteLogoBinaryFile ?? null);
        updateRefValue(enableMobileRedirect, props.modelValue?.bag?.enableMobileRedirect ?? false);
        updateRefValue(enablePageViews, props.modelValue?.bag?.enablePageViews ?? false);
        updateRefValue(retentionDuration, props.modelValue?.bag?.retentionDuration);
        updateRefValue(allowedFrameDomains, props.modelValue?.bag?.allowedFrameDomains ?? "");
        updateRefValue(allowIndexing, props.modelValue?.bag?.allowIndexing ?? false);
        updateRefValue(indexStartingLocation, props.modelValue?.bag?.indexStartingLocation ?? "");
        updateRefValue(enableExclusiveRoutes, props.modelValue?.bag?.enableExclusiveRoutes ?? false);
        updateRefValue(disablePredictableIds, props.modelValue?.bag?.disablePredictableIds ?? false);
        updateRefValue(pageHeaderContent, props.modelValue?.bag?.pageHeaderContent ?? "");
        updateRefValue(siteAttributes, props.modelValue?.bag?.siteAttributes ?? []);
        updateRefValue(binaryFileTypeGuid, props.modelValue?.bag?.binaryFileTypeGuid ?? BinaryFiletype.Default);

        updateRefValue(defaultPage, {
            page: props.modelValue?.bag?.defaultPage ?? null
        });
        updateRefValue(loginPage, {
            page: props.modelValue?.bag?.loginPage ?? null
        });
        updateRefValue(changePasswordPage, {
            page: props.modelValue?.bag?.changePasswordPage ?? null
        });
        updateRefValue(communicationPage, {
            page: props.modelValue?.bag?.communicationPage ?? null
        });
        updateRefValue(registrationPage, {
            page: props.modelValue?.bag?.registrationPage ?? null
        });
        updateRefValue(pageNotFoundPage, {
            page: props.modelValue?.bag?.pageNotFoundPage ?? null
        });
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, siteDomains, defaultPage, loginPage, changePasswordPage, communicationPage, registrationPage, pageNotFoundPage, ...propRefs], () => {
        const newValue: ValidPropertiesBox<SiteBag> = {
            bag: { ...props.modelValue } as SiteBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "theme", theme.value);
        setPropertiesBoxValue(newValue, "defaultPage", defaultPage.value?.page);
        setPropertiesBoxValue(newValue, "loginPage", loginPage.value?.page);
        setPropertiesBoxValue(newValue, "changePasswordPage", changePasswordPage.value?.page);
        setPropertiesBoxValue(newValue, "communicationPage", communicationPage.value?.page);
        setPropertiesBoxValue(newValue, "registrationPage", registrationPage.value?.page);
        setPropertiesBoxValue(newValue, "pageNotFoundPage", pageNotFoundPage.value?.page);
        setPropertiesBoxValue(newValue, "siteDomains", siteDomains.value);
        setPropertiesBoxValue(newValue, "errorPage", errorPage.value);
        setPropertiesBoxValue(newValue, "googleAnalyticsCode", googleAnalyticsCode.value);
        setPropertiesBoxValue(newValue, "requiresEncryption", requiresEncryption.value);
        setPropertiesBoxValue(newValue, "enabledForShortening", enabledForShortening.value);
        setPropertiesBoxValue(newValue, "enableVisitorTracking", enableVisitorTracking.value);
        setPropertiesBoxValue(newValue, "enablePersonalization", enablePersonalization.value);
        setPropertiesBoxValue(newValue, "favIconBinaryFile", favIconBinaryFile.value);
        setPropertiesBoxValue(newValue, "siteLogoBinaryFile", siteLogoBinaryFile.value);
        setPropertiesBoxValue(newValue, "enableMobileRedirect", enableMobileRedirect.value);
        setPropertiesBoxValue(newValue, "enablePageViews", enablePageViews.value);
        setPropertiesBoxValue(newValue, "retentionDuration", retentionDuration.value);
        setPropertiesBoxValue(newValue, "allowedFrameDomains", allowedFrameDomains.value);
        setPropertiesBoxValue(newValue, "allowIndexing", allowIndexing.value);
        setPropertiesBoxValue(newValue, "indexStartingLocation", indexStartingLocation.value);
        setPropertiesBoxValue(newValue, "enableExclusiveRoutes", enableExclusiveRoutes.value);
        setPropertiesBoxValue(newValue, "disablePredictableIds", disablePredictableIds.value);
        setPropertiesBoxValue(newValue, "pageHeaderContent", pageHeaderContent.value);
        setPropertiesBoxValue(newValue, "siteAttributes", siteAttributes.value);
        setPropertiesBoxValue(newValue, "binaryFileTypeGuid", binaryFileTypeGuid.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
