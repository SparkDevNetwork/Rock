<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name" />
            </div>

            <div class="col-md-6">
                <TextBox v-model="path"
                         label="Path" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <CheckBox v-model="excludeSystemTypes"
                          label="Exclude 'System' Types?" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="showOnlyObsidian"
                          label="Show Obsidian only?" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const name = ref(props.modelValue.name ?? "");
    const path = ref(props.modelValue.path ?? "");
    const excludeSystemTypes = ref(props.modelValue.excludeSystemTypes ?? false);
    const showOnlyObsidian = ref(props.modelValue.showOnlyObsidian ?? false);
    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            name: name.value,
            path: path.value,
            excludeSystemTypes: excludeSystemTypes.value,
            showOnlyObsidian: showOnlyObsidian.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        name.value = props.modelValue.name ?? "";
        path.value = props.modelValue.path ?? "";
        excludeSystemTypes.value = props.modelValue.excludeSystemTypes ?? false;
        showOnlyObsidian.value = props.modelValue.showOnlyObsidian ?? false;
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
