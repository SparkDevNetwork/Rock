<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="library-viewer-item-list">
        <div v-for="item of items"
             :class="['library-viewer-list-item', item === selectedItem ? 'selected' : '']"
             @click="onClicked(item)">
            <div class="library-viewer-list-item-header">
                <h5>{{ item.title }}</h5>
                <ItemStampList :item="item" />
            </div>
            <div v-if="item.summary" class="library-viewer-list-item-summary">
                <p>{{ item.summary }}</p>
                <div class="library-viewer-list-item-summary-overlay"></div>
            </div>
            <div class="library-viewer-list-item-publish-info">
                <span class="library-viewer-list-item-published-date" v-if="item.publishedDateTime">Published on {{ toDateString(item.publishedDateTime) }}</span>
                <span class="library-viewer-list-item-published-by" v-if="item.sourcePublisherName">{{ item.sourcePublisherName }}</span>
            </div>
            <div class="library-viewer-list-item-footer">
                <ItemBadgeList :items="getBadges(item)" />
                <ItemDownloadsLabel :downloads="item.downloads" />
            </div>
        </div>
    </div>
</template>

<style scoped>
.library-viewer-item-list {
    width: 479px;
    flex-shrink: 0;
    border-right: 1px solid var(--toremove-border-color, #F2E3D9);
    background: #FFF;
    overflow: auto;
}

.library-viewer-list-item {
    cursor: pointer;
    border-bottom: 1px solid #F2E3D9;
    background: var(--app-colors-white, #FFF);
    height: 240px;
    max-height: 240px;
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    padding: 16px 24px;
}

.library-viewer-list-item.selected {
    background: var(--theme-colors-light, #F2E3D9);
}

.library-viewer-list-item > * + * {
    padding-top: 16px;
}

.library-viewer-list-item-header {
    color: var(--theme-colors-darkest, #332114);
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}

.library-viewer-list-item-header h5 {
    margin: 0;
}

.library-viewer-list-item-header .stamps {
    align-self: flex-start;
}

.library-viewer-list-item-header > * + * {
    margin-left: 8px;
}

.library-viewer-list-item-summary {
    flex: 1;
    position: relative;
    overflow: hidden;
}

.library-viewer-list-item-summary-overlay {
    position: absolute;
    bottom: 0;
    width: 100%;
    height:8px;
    background: linear-gradient(to top, var(--app-colors-white,#fff), transparent);
}

.library-viewer-list-item.selected .library-viewer-list-item-summary-overlay {
    background: linear-gradient(to top, var(--theme-colors-light, #F2E3D9), transparent);
}
.library-viewer-list-item-publish-info {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    flex-shrink: 0;
}

.library-viewer-list-item-footer {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
}
</style>

<script setup lang="ts">
    import { PropType } from "vue";
    import ItemBadgeList from "./itemBadgeList.partial.obs";
    import ItemDownloadsLabel from "./itemDownloadsLabel.partial.obs";
    import ItemStampList from "./itemStampList.partial.obs";
    import { getItemCategories, toDateString } from "./utils.partial";
    import { LibraryViewerItemBag } from "@Obsidian/ViewModels/Blocks/Cms/LibraryViewer/libraryViewerItemBag";

    const props = defineProps({
        items: {
            type: Object as PropType<LibraryViewerItemBag[]>,
            required: true
        },
        selectedItem: {
            type: Object as PropType<LibraryViewerItemBag | null | undefined>
        }
    });

    const emit = defineEmits<{
        (e: "select", value: LibraryViewerItemBag): void
    }>();

    // #region Functions

    /**
     * Gets the badges for an item.
     */
    function getBadges(item: LibraryViewerItemBag): string[] {
        return getItemCategories(item, props.items.filter(item => !!item.topic).map(item => item.topic!));
    }

    // #endregion

    //#region Event Handlers

    function onClicked(item: LibraryViewerItemBag): void {
        emit("select", item);
    }

    //#endregion
</script>