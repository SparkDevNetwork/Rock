<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Block"
          :entityTypeGuid="EntityType.Block"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <Column name="type"
                title="Type"
                :filter="textValueFilter"
                visiblePriority="xs">
            <template #format="{ row }">
                <div>
                    <div>
                        <span class="text-semibold">{{ row.name }}</span>
                    </div>
                    <div v-if="row.path">
                        {{ row.path }}
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="zone"
                    title="Zone"
                    field="zone"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <BooleanColumn name="isSystem"
                       title="Is System"
                       field="isSystem"
                       visiblePriority="xs"
                       width="5%" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <ButtonColumn name="showProperties" :title="title" :iconClass="icon" @click="onShowProperties" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>
<script lang="ts">
    declare global {
        // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any
        var Rock: any;
    }
</script>
<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, BooleanColumn, TextColumn, textValueFilter, DeleteColumn, SecurityColumn, ButtonColumn, Column } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { BlockListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/BlockList/blockListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<BlockListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const icon = "fa fa-cog";
    const title = "Block Properties";

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    function onShowProperties(key: string): void {
        const rowId = gridData?.rows?.find(r => r["idKey"] === key)?.id;
        if (rowId) {
            Rock.controls.modal.show(undefined, `/BlockProperties/${rowId}?t=Block Properties`);
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", { key });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete block.");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
