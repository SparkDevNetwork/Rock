<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="row mb-2">
        <div class="col">
            <a href="/admin/cms/adaptive-messages/attributes" class='btn btn-xs btn-default pull-right'><i class="fa fa-plus"></i> Adaptive Message Attributes</a>
        </div>
    </div>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Adaptive Message"
          :entityTypeGuid="EntityType.AdaptiveMessage"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          tooltipField="key"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">
        <SelectColumn />

        <!-- Name column that will always show in the Grid -->
        <HighlightDetailColumn name="name"
                               title="Name"
                               field="name"
                               :filter="textValueFilter"
                               :filterValue="getRowNameFilterValue"
                               :quickFilterValue="getRowNameFilterValue"
                               visiblePriority="xs"
                               :hideOnScreen="false"
                               :excludeFromExport="true">
            <template #detailFormat="{ row }">
                <template v-if="row.description">{{ row.description }}</template>
            </template>
        </HighlightDetailColumn>

       <Column name="categories"
                title="Categories"
                :filter="textValueFilter"
                :filterValue="getRowCategoriesFilterValue"
                :quickFilterValue="getRowCategoriesFilterValue"
                visiblePriority="lg">
            <template #format="{ row }">
                <span class='label label-default margin-l-sm' v-for="category in row.categories">
                    {{ category }}
                </span>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <NumberColumn name="views"
                      title="Views"
                      field="views"
                      :filter="numberValueFilter"
                      visiblePriority="sm">
            <template #format="{ row }">
                <div class="flex-grow-1 text-right">
                    {{ row.views }}
                </div>
            </template>
        </NumberColumn>
        <NumberColumn name="adaptations"
                      title="Adaptations"
                      field="adaptations"
                      :filter="numberValueFilter"
                      visiblePriority="xs" >
            <template #format="{ row }">
                <div class="flex-grow-1 text-right">
                    {{ row.adaptations }}
                </div>
            </template>

        </NumberColumn>

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { NumberColumn, HighlightDetailColumn, textValueFilter, DeleteColumn, SelectColumn, numberValueFilter } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { AdaptiveMessageListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageList/adaptiveMessageListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, Row } from "./AdaptiveMessageList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<AdaptiveMessageListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Gets the filter value text to use for the accounts column.
     *
     * @param row The row to be filtered.
     */
     function getRowCategoriesFilterValue(row: Record<string, unknown>): string {
        let filterValue = "";

        for (const category of (row as Row).categories) {
            filterValue += ` ${category} ?? ""}`;
        }

        return filterValue;
    }

    /**
     * Gets the filter value text to use for the name column.
     *
     * @param row The row to be filtered.
     */
     function getRowNameFilterValue(row: Record<string, unknown>): string {
        const r = row as Row;

        return `${r.name} ${r.id} ${r.description ?? ""}`;
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete adaptive message.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
