<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning" v-text="blockError" />

    <NotificationBox v-if="errorMessage" alertType="danger" v-text="errorMessage" />

    <DetailBlock v-if="!blockError"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :labels="blockLabels"
                 :entityKey="entityKey"
                 :entityTypeGuid="EntityType.PageShortLink"
                 entityTypeName="PageShortLink"
                 :isAuditHidden="false"
                 :isBadgesVisible="true"
                 :isDeleteVisible="isEditable"
                 :isEditVisible="isEditable"
                 :isFollowVisible="false"
                 :isSecurityHidden="true"
                 :isFullScreenVisible="false"
                 :footerSecondaryActions="internalFooterSecondaryActions"
                 @cancelEdit="onCancelEdit"
                 @delete="onDelete"
                 @edit="onEdit"
                 @save="onSave">
        <template #view>
            <ViewPanel :modelValue="pageShortLinkViewBag" :options="options" />
        </template>

        <template #edit>
            <EditPanel v-model="pageShortLinkEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./PageShortLinkDetail/editPanel.partial.obs";
    import ViewPanel from "./PageShortLinkDetail/viewPanel.partial.obs";
    import { getSecurityGrant, provideSecurityGrant, useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./PageShortLinkDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { PageShortLinkBag } from "@Obsidian/ViewModels/Blocks/Cms/PageShortLinkDetail/pageShortLinkBag";
    import { PageShortLinkDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/PageShortLinkDetail/pageShortLinkDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<PageShortLinkBag, PageShortLinkDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const securityGrant = getSecurityGrant(config.securityGrantToken);

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const pageShortLinkViewBag = ref(config.entity);
    const pageShortLinkEditBag = ref<ValidPropertiesBox<PageShortLinkBag>>({
        bag: {} as PageShortLinkBag
    });

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: pageShortLinkEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return "Shortened Link";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return pageShortLinkViewBag.value?.idKey ?? "";
    });

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        return labels;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): PageShortLinkDetailOptionsBag => {
        return config.options ?? {};
    });

    /** Adding the copy button as a secondary footer action in the block. */
    const internalFooterSecondaryActions = computed((): PanelAction[] => {
        const actions: PanelAction[] = [];

        if (panelMode.value === DetailPanelMode.View) {
            actions.push({
                iconCssClass: "fa fa-clipboard",
                title: "Copy",
                type: "default",
                handler: onCopyLink
            });
        }
        return actions;
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        if (!pageShortLinkEditBag.value.bag?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                return config.navigationUrls[NavigationUrlKey.ParentPage];
            }

            return false;
        }

        return true;
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<false | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<string>("Delete", {
            key: pageShortLinkViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete page short link.";

            return false;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<PageShortLinkBag>>("Edit", {
            key: pageShortLinkViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            pageShortLinkEditBag.value = result.data;

            return true;
        }
        else {
            return false;
        }
    }

    /** The event handler to copy the website link to the clipboard */
    function onCopyLink(): void {
        const copyLink = pageShortLinkViewBag.value?.copyLink ?? "";
        navigator.clipboard.writeText(copyLink);
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<PageShortLinkBag | string>("Save", {
            box: pageShortLinkEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                pageShortLinkViewBag.value = result.data;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save page short link.";

        return false;
    }

    // #endregion

    provideSecurityGrant(securityGrant);

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified page short link could not be viewed.";
    }
    else if (!config.entity.idKey) {
        pageShortLinkEditBag.value = { bag: config.entity };
        panelMode.value = DetailPanelMode.Add;
    }
</script>
