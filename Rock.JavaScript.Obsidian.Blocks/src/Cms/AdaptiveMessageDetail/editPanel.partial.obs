<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required"
                         :maxLength="100"
                         @blur="populateMessageKey" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="key"
                         label="Key"
                         help="The unique key that will identify this adaptive message."
                         :maxLength="100"
                         :rules="validityKeyRules" />
            </div>
            <div class="col-md-6">
                <CategoryPicker v-model="categories"
                                label="Categories"
                                rules="required"
                                multiple
                                :entityTypeGuid="EntityType.AdaptiveMessageCategory" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <DatePicker v-model="startDate" label="Start Date" help="The date when this adaptive message becomes eligible to be shown." />
            </div>
            <div class="col-md-6">
                <DatePicker v-model="endDate" label="End Date" help="The date when this adaptive message stops being shown." />
            </div>
        </div>

        <Panel title="Adaptation Attributes" :hasCollapse="false" :isDrawerOpen="true">
            <div class="panel-body">
                <NotificationBox alertType="info">
                    These Attributes apply to all adaptations. Each adaptation will have their own value for these attributes.
                </NotificationBox>
                <h5>Shared Adaptation Attributes</h5>
                <div class="grid grid-panel">
                    <Grid :data="gridSharedData" keyField="key" itemTerm="Shared Adaptation Attribute" liveUpdates light>
                        <TextColumn name="name" field="name" title="Attribute" />
                        <TextColumn name="description" field="description" title="Description" />
                        <Column title="Inherited" name="key">
                            <template #format="{ row }">
                                (Inherited from Adaptive Message)
                            </template>

                            <template #skeleton>
                                <div class="skeleton skeleton-text skeleton-rounded" />
                            </template>
                        </Column>
                    </Grid>
                </div>

                <h5>Adaptation Attributes</h5>
                <div class="grid grid-panel">
                    <Grid :data="gridData" keyField="key" itemTerm="Attribute" liveUpdates light @addItem="onAddItem">
                        <TextColumn name="name" field="name" title="Attribute" />
                        <TextColumn name="description" field="description" title="Description" />
                        <BooleanColumn name="isRequired" field="isRequired" title="Required" />
                        <EditColumn @click="onEditItem" />
                        <DeleteColumn @click="onDeleteItem" disableConfirmation />
                    </Grid>
                </div>
            </div>
            <Modal v-model="isModalOpen" title="Adaptation Attributes" saveText="Okay" :onSave="onStartSaveAttribute">
                <RockForm v-model:submit="submitEditAttribute" @submit="onSaveAttribute">
                    <AttributeEditor v-model="adaptationAttribute" :reservedKeyNames="reservedKeyNames" />
                </RockForm>
            </Modal>
        </Panel>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, reactive, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CategoryPicker from "@Obsidian/Controls/categoryPicker.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Grid, { Column, EditColumn, DeleteColumn, TextColumn, BooleanColumn } from "@Obsidian/Controls/grid";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { AdaptiveMessageBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageDetail/adaptiveMessageBag";
    import { AdaptiveMessageDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageDetail/adaptiveMessageDetailOptionsBag";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { FieldType as FieldTypeGuids } from "@Obsidian/SystemGuids/fieldType";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import { ValidationRule } from "@Obsidian/ValidationRules";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<AdaptiveMessageBag>>,
            required: true
        },

        options: {
            type: Object as PropType<AdaptiveMessageDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<AdaptiveMessageBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue?.bag?.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const key = propertyRef(props.modelValue?.bag?.key ?? "", "Key");
    const categories = propertyRef(
        props.modelValue?.bag?.categories?.length
            ? props.modelValue?.bag?.categories
            : props.options.parentCategory
                ? [props.options.parentCategory]
                : [],
        "Categories"
    );
    const adaptationSharedAttributes = ref(props.modelValue?.bag?.adaptationSharedAttributes ?? []);
    const adaptationAttributes = ref(props.modelValue?.bag?.adaptationAttributes ?? []);
    const adaptationAttribute = ref<PublicEditableAttributeBag | null>(null);
    const isModalOpen = ref<boolean>(false);
    const submitEditAttribute = ref<boolean>(false);
    const reservedKeyNames = ref(props.modelValue?.bag?.reservedKeyNames ?? []);
    const messageReservedKeyNames = ref(props.modelValue?.bag?.messageReservedKeyNames ?? []);
    const startDate = propertyRef(props.modelValue?.bag?.startDate ?? "", "StartDate");
    const endDate = propertyRef(props.modelValue?.bag?.endDate ?? "", "EndDate");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, categories, key, startDate, endDate];

    // #endregion

    // #region Computed Values

    const gridSharedData: GridDataBag = reactive<GridDataBag>({
        rows: adaptationSharedAttributes.value.map(x => convertToRowItem(x))
    });

    const gridData: GridDataBag = reactive<GridDataBag>({
        rows: adaptationAttributes.value.map(x => convertToRowItem(x))
    });

    const validityKeyRules = computed<ValidationRule[]>(() => [
        "required",
        validateKeyValue
    ]);

    // #endregion

    // #region Functions

    function convertToRowItem(attribute: PublicEditableAttributeBag): Record<string, unknown> {
        return {
            key: attribute.key,
            name: attribute.name,
            description: attribute.description,
            isRequired: attribute.isRequired
        };
    }

    function populateMessageKey(): void {
        // if the attribute key hasn't been filled in yet, populate it with the attribute name minus whitespace
        if (key.value.trim() == "" && name.value.trim() != "") {
            let keyValue = name.value.trim().replace(/[^a-zA-Z0-9_.-]/g, "");
            let newKeyValue = keyValue;

            let i = 1;

            while (messageReservedKeyNames.value.some(k => k === newKeyValue)) {
                newKeyValue = keyValue + i++;
            }

            key.value = newKeyValue;
        }
    }

    function validateKeyValue(value: unknown): string | boolean {
        if (messageReservedKeyNames.value.some(k => k === key.value)) {
            return "There is already an existing property with the key value you entered or the key has illegal characters. Please select a different key value and use only letters, numbers and underscores.";
        }

        return true;
    }

    // #endregion

    // #region Event Handlers
    async function onAddItem(): Promise<void> {
        adaptationAttribute.value = {} as PublicEditableAttributeBag;
        isModalOpen.value = true;
        adaptationAttribute.value.fieldTypeGuid = FieldTypeGuids.Text;
    }

    const onEditItem = async (key: string): Promise<void> => {
        const selectedSiteAttribute = adaptationAttributes.value.find(x => x.key === key);
        // If attribute exists set it as current attribute for editing.
        if (selectedSiteAttribute) {
            adaptationAttribute.value = selectedSiteAttribute;
            isModalOpen.value = true;
        }
        else {
            onAddItem();
        }
    };
    const onDeleteItem = async (key: string): Promise<void> => {
        // Close modal and remove deleted attribute from the current collection of attributes.
        isModalOpen.value = false;
        adaptationAttributes.value = adaptationAttributes.value.filter(s => s.key !== key);
        reservedKeyNames.value = reservedKeyNames.value.filter(r => r !== key);

        // Update the grid.
        if (gridData.rows) {
            const index = gridData.rows.findIndex(r => r["key"] === key);

            if (index !== -1) {
                gridData.rows?.splice(index, 1);
            }
        }
    };

    function onSaveAttribute(): void {

        if (adaptationAttribute.value) {
            const index = adaptationAttributes.value.findIndex(a => a.key === adaptationAttribute.value?.key);
            if (index !== -1) {
                // Get the updated attribute and rowItem.
                let editedAttribute = adaptationAttributes.value.find(a => a.guid == adaptationAttribute.value?.guid);
                let rowItem = gridData.rows?.find(x => x.key == adaptationAttribute.value?.key);

                if (editedAttribute) {
                    // Replace old attribute with updated attribute.
                    editedAttribute = adaptationAttribute.value;
                    adaptationAttributes.value.splice(index, 1, editedAttribute);
                }

                if (rowItem && gridData.rows && editedAttribute) {
                    // Update GridRowItem so changes are reflected in the UI.
                    const rowIndex = gridData.rows.findIndex(r => r.key === adaptationAttribute.value?.key);
                    rowItem = convertToRowItem(editedAttribute);
                    gridData.rows?.splice(rowIndex, 1, rowItem);
                }
            }
            else {
                adaptationAttributes.value.push(adaptationAttribute.value);

                // Add new RowItem to the grid to represent the newly added attribute.
                const newRowItem = convertToRowItem(adaptationAttribute.value);
                gridData.rows?.push(newRowItem);
            }

            isModalOpen.value = false;
            adaptationAttribute.value = null;
        }
    }

    const onStartSaveAttribute = (): void => {
        submitEditAttribute.value = true;
    };

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue?.bag?.isActive ?? false);
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(key, props.modelValue?.bag?.key ?? "");
        updateRefValue(categories, props.modelValue?.bag?.categories ?? []);
        updateRefValue(startDate, props.modelValue?.bag?.startDate ?? "");
        updateRefValue(endDate, props.modelValue?.bag?.endDate ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, adaptationAttributes, ...propRefs], () => {
        const newValue: ValidPropertiesBox<AdaptiveMessageBag> = {
            bag: { ...props.modelValue.bag } as AdaptiveMessageBag
        };
        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "key", key.value);
        setPropertiesBoxValue(newValue, "categories", categories.value);
        setPropertiesBoxValue(newValue, "adaptationAttributes", adaptationAttributes.value);
        setPropertiesBoxValue(newValue, "startDate", startDate.value);
        setPropertiesBoxValue(newValue, "endDate", endDate.value);

        emit("update:modelValue", newValue);
    });

    watch(isModalOpen, () => {
        if (isModalOpen.value) {
            reservedKeyNames.value = reservedKeyNames.value.filter(k => k !== adaptationAttribute.value?.key);
        }
        else {
            if (adaptationAttribute.value?.key && !reservedKeyNames.value.some(k => k === adaptationAttribute.value?.key)) {
                reservedKeyNames.value.push(adaptationAttribute.value.key);
            }
        }
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
