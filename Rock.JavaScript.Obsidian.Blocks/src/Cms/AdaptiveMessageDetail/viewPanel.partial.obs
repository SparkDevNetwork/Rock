<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />
        <Panel title="Workflows" :hasCollapse="true" :isDrawerOpen="true">
            <h2>Adaptations</h2>
            <p>The messages below are personalized for the configured segments and are in order by the priority.</p>
            <Grid :definition="props.modelValue?.adaptationsGridDefinition ?? undefined"
                  :data="adaptationsGridDataSource"
                  :entityTypeGuid="EntityType.AdaptiveMessageAdaptation"
                  light
                  keyField="idKey"
                  itemTerm="Adaptation"
                  liveUpdates
                  :onAddItem="onAddAdaptation">

                <ReorderColumn :onOrderChanged="onOrderChanged" />
                <TextColumn name="name"
                            title="Description"
                            field="name"
                            visiblePriority="xs" />

                <Column name="segments"
                        title="Segments"
                        visiblePriority="lg">
                    <template #format="{ row }">
                        <span class='label label-info margin-r-sm' v-for="segment in row.segments">
                        {{ segment }}
                        </span>
                    </template>

                    <template #skeleton>
                        <div class="skeleton skeleton-text skeleton-rounded" />
                    </template>
                </Column>

                <TextColumn name="saturation"
                            title="Saturation"
                            field="saturation"
                            visiblePriority="lg" />

                <NumberColumn name="views"
                            title="Views"
                            field="views"
                            visiblePriority="sm" />

                <EditColumn :onClick="onEditAdaptation" />
                <DeleteColumn :onClick="onDeleteClick" />
            </Grid>
        </Panel>
</fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, reactive } from "vue";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { AdaptiveMessageBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageDetail/adaptiveMessageBag";
    import { AdaptiveMessageDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/AdaptiveMessageDetail/adaptiveMessageDetailOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { NavigationUrlKey } from "./types.partial";
    import Grid, { TextColumn, DeleteColumn, ReorderColumn, EditColumn } from "@Obsidian/Controls/grid";
import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";

    const props = defineProps({
    modelValue: {
    type: Object as PropType<AdaptiveMessageBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<AdaptiveMessageDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});
    const adaptations = reactive(props.modelValue?.adaptationsGridData ?? {});
    const adaptationsGridDataSource = ref<GridDataBag>(adaptations);
    const invokeBlockAction = useInvokeBlockAction();
    const config = useConfigurationValues<DetailBlockBox<AdaptiveMessageBag, AdaptiveMessageDetailOptionsBag>>();

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.description) {
            valueBuilder.addTextValue("Description", props.modelValue.description);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.key) {
            valueBuilder.addTextValue("Key", props.modelValue.key);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.categories && props.modelValue.categories.length > 0) {
            let categoryStr = "";
            for (const category of props.modelValue.categories) {
                categoryStr += `<span class='label label-default margin-r-sm'>${category.text}</span>`;
            }

            valueBuilder.addHtmlValue("Categories", `${categoryStr}`);
        }

        return valueBuilder.build();
    });

    function onAddAdaptation(): void {
        if (config.navigationUrls?.[NavigationUrlKey.AdaptationDetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.AdaptationDetailPage].replace("((Key))", "0") + `&AdaptiveMessageId=${props.modelValue?.idKey}`;
        }
    }

     /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
     function onEditAdaptation(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.AdaptationDetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.AdaptationDetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
     async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<void> {
        const data = {
            key: props.modelValue?.idKey,
            guid: item.guid,
            beforeGuid: beforeItem?.guid ?? null
        };

        const result = await invokeBlockAction("ReorderAdaptation", data);

        if (!result.isSuccess) {
            alert(result.errorMessage || "Unable to re-order sources, you might need to reload the page.");
            return;
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
     async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("DeleteAdaptation", {
            key
        });

        if (result.isSuccess) {
            if (adaptationsGridDataSource) {
                const index = adaptationsGridDataSource.value.rows?.findIndex(r => r["idKey"] === key);

                if (index && index !== -1) {
                    adaptationsGridDataSource.value.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete site.");
        }
    }

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
