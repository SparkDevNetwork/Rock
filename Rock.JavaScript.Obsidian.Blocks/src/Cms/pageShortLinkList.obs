<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Shortened Links"
          :entityTypeGuid="EntityType.PageShortLink"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          :showLaunchWorkflow="false"
          @selectItem="onSelectItem">

        <TextColumn name="shortLink"
                    title="Shortened URL"
                    field="shortLink"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="site"
                    title="Site"
                    field="site"
                    :filter="pickExistingValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="token"
                    title="Token"
                    field="token"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <ButtonColumn name="copy"
                    iconClass="fa fa-clipboard"
                    visiblePriority="xs"
                    @click="onCopyClick" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, textValueFilter, DeleteColumn, ButtonColumn, pickExistingValueFilter,  } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { PageShortLinkListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/PageShortLinkList/pageShortLinkListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./PageShortLinkList/types.partial";
    import { reactive, ref } from "vue";
    import { IGridState } from "@Obsidian/Types/Controls/grid";

    const config = useConfigurationValues<ListBlockBox<PageShortLinkListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete page short link.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
    * The function to copy a specific website link to the clipboard.
    *
    * @param key The key of the row whose link is to be copied.
    * @param grid The grid state.
    */
    async function onCopyClick(key: string, grid: IGridState): Promise<void> {
        const row = grid.rows.find(r => r.idKey === key);
        if (row) {
            const shortLink = row.shortLink;
            await navigator.clipboard.writeText(shortLink as string);
            alert("Short link copied to clipboard.");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
