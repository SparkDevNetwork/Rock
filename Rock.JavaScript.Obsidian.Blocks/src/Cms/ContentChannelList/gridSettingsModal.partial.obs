<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <CategoryPicker label="Categories"
                                v-model="categories"
                                multiple
                                :entityTypeGuid="EntityType.ContentChannel" />
            </div>
            <div class="col-md-4">
                <DropDownList label="Type"
                              v-model="type"
                              :items="contentChannelTypeItems"
                              :showBlankItem="true"
                              :enhanceForLongLists="false"
                              :grouped="false"
                              :multiple="false" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import CategoryPicker from "@Obsidian/Controls/categoryPicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },


        contentChannelTypeItems: {
            type: Array as PropType<ListItemBag[]>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
    }>();

    const categories = ref<ListItemBag[]>(props.modelValue.categories ?? []);
    const type = ref(props.modelValue.type ?? "");
    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            type: type.value,
            categories: categories.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        categories.value = props.modelValue.categories ?? [];
        type.value = props.modelValue.type ?? "";
    });
</script>
