<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <NumberBox v-model="timeToLiveSeconds"
                           label="Time to Live (Seconds)"
                           help="The amount of seconds that a message sent on the queue can persist without being consumed before being discarded. A value less than 1 means the message will not expire."
                           rules="gte:1" />
            </div>
        </div>
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import { QueueBag } from "@Obsidian/ViewModels/Blocks/Bus/QueueDetail/queueBag";
    import { QueueDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Bus/QueueDetail/queueDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<QueueBag>,
            required: true
        },

        options: {
            type: Object as PropType<QueueDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: QueueBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const timeToLiveSeconds = propertyRef(props.modelValue.timeToLiveSeconds ?? null, "TimeToLiveSeconds");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [timeToLiveSeconds];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(timeToLiveSeconds, props.modelValue.timeToLiveSeconds ?? null);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([...propRefs], () => {
        const newValue: QueueBag = {
            ...props.modelValue,
            timeToLiveSeconds: timeToLiveSeconds.value
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
