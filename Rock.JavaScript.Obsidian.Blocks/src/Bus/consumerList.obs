<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          itemTerm="Consumer"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false">

        <TextColumn name="queueName"
                    title="Queue"
                    field="queueName"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="consumerName"
                    title="Consumer"
                    field="consumerName"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="messageName"
                    title="Message"
                    field="messageName"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import Grid, { AttributeColumns, TextColumn, textValueFilter } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { QueueListOptionsBag } from "@Obsidian/ViewModels/Blocks/Bus/QueueList/queueListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<QueueListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
