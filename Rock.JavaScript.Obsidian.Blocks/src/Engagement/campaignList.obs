<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          itemTerm="Campaign"
          keyField="guid"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Campaign Name"
                    field="name"
                    :filter="textValueFilter"
                    width="20%"
                    visiblePriority="xs" />

        <TextColumn name="dataView"
                    title="DataView"
                    field="dataView"
                    :filter="textValueFilter"
                    width="15%"
                    visiblePriority="xs" />

        <TextColumn name="connectionOpportunity"
                    title="Connection Opportunity"
                    field="connectionOpportunity"
                    :filter="textValueFilter"
                    width="20%"
                    visiblePriority="xs" />

        <NumberColumn name="activeRequests"
                      title="Active Requests"
                      field="activeRequests"
                      :filter="numberValueFilter"
                      width="10%"
                      visiblePriority="xs" />

        <NumberColumn name="pendingConnections"
                      title="Pending Connections"
                      field="pendingConnections"
                      :filter="numberValueFilter"
                      width="10%"
                      visiblePriority="xs" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       width="1%"
                       visiblePriority="xs" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />

        <!-- Will only appear in the exported document -->
        <TextColumn name="guid"
                title="Guid"
                field="guid"
                :hideOnScreen="true" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import Grid, { TextColumn, textValueFilter, numberValueFilter, NumberColumn, BooleanColumn, DeleteColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { CampaignListOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/CampaignList/campaignListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";
    import { NavigationUrlKey } from "./CampaignList/types.partial";
    import { emptyGuid } from "@Obsidian/Utility/guid";


    const config = useConfigurationValues<ListBlockBox<CampaignListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when the Add button has been clicked by the individual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", emptyGuid);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", { key });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["guid"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete block.");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>