<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <CheckBoxList v-if="!displayAsDropDown"
                  v-model="modelValue"
                  :label="props.label ?? ''"
                  :items="props.items"
                  :horizontal="true"
                  :repeatColumns="4" />
    <DropDownList v-if="displayAsDropDown"
                  v-model="modelValue"
                  :label="props.label ?? ''"
                  :items="props.items"
                  :multiple="true" />
</template>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import { SignUpFilterType } from "./signUpFilterType.partial";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<string[]>,
            required: true
        },

        items: {
            type: Array as PropType<ListItemBag[]>,
            required: true
        },

        label: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        displayAs: {
            type: String as PropType<SignUpFilterType>,
            default: SignUpFilterType.Checkboxes
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string[]): void
    }>();

    const modelValue = useVModelPassthrough(props, "modelValue", emit);

    // #region Computed Values

    const displayAsDropDown = computed((): boolean => {
        return props.displayAs === SignUpFilterType.MultiSelectDropDown;
    });

    // #endregion
</script>
