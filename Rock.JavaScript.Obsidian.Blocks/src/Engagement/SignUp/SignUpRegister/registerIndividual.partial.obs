<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <h4>{{ title }}</h4>

    <div class="row sign-up-anonymous-name">
        <div class="col-md-6">
            <FirstNameTextBox v-model="firstName"
                              label="First Name"
                              rules="required"
                              :validationTitle="`${title} First Name`"
                              :disabled="disabled" />
        </div>
        <div class="col-md-6">
            <TextBox v-model="lastName"
                     label="Last Name"
                     rules="required"
                     :validationTitle="`${title} Last Name`"
                     :disabled="disabled" />
        </div>
    </div>

    <div class="row sign-up-anonymous-communication">
        <div class="col-md-6">
            <EmailBox v-model="email"
                      label="Email"
                      :rules="emailRules"
                      :validationTitle="`${title} Email`"
                      :disabled="disabled" />
        </div>
        <div class="col-md-6">
            <PhoneNumberBox v-model="mobilePhoneNumber"
                            v-model:countryCode="mobilePhoneCountryCode"
                            label="Mobile Phone"
                            :rules="mobilePhoneRules"
                            :validationTitle="`${title} Mobile Phone`"
                            :disabled="disabled" />
        </div>
    </div>

    <div class="row -mt-form-group sign-up-anonymous-allow-sms">
        <div class="col-md-6 col-md-offset-6">
            <CheckBox v-model="registrant.allowSms"
                      label=""
                      text="Allow SMS Messages"
                      :disabled="disabled || !mobilePhoneNumber" />
        </div>
    </div>

    <div v-if="anyMemberAttributes" class="sign-up-anonymous-member-attributes">
        <AttributeValuesContainer v-model="memberAttributeValues"
                                  :isEditMode="true"
                                  :attributes="memberAttributes"
                                  :showCategoryLabel="false"
                                  :numberOfColumns="2"
                                  :disabled="disabled" />
    </div>

    <div v-if="anyMemberOpportunityAttributes" class="sign-up-anonymous-member-opportunity-attributes">
        <AttributeValuesContainer v-model="memberOpportunityAttributeValues"
                                  :isEditMode="true"
                                  :attributes="memberOpportunityAttributes"
                                  :showCategoryLabel="false"
                                  :numberOfColumns="2"
                                  :disabled="disabled" />
    </div>

    <hr>
</template>

<script setup lang="ts">
    import { computed, inject, PropType, ref } from "vue";
    import { MemberAttributes, MemberOpportunityAttributes } from "../types.partial";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import FirstNameTextBox from "@Obsidian/Controls/firstNameTextBox.obs";
    import { SignUpRegistrantBag } from "@Obsidian/ViewModels/Blocks/Engagement/SignUp/SignUpRegister/signUpRegistrantBag";

    const props = defineProps({
        registrant: {
            type: Object as PropType<SignUpRegistrantBag>,
            required: true
        },

        title: {
            type: String as PropType<string>,
            required: true
        },

        requireEmail: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        requireMobilePhone: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    // #region Values

    const memberAttributes = inject(MemberAttributes, ref({}));
    const memberOpportunityAttributes = inject(MemberOpportunityAttributes, ref({}));

    // #endregion Values

    // #region Computed Values

    const firstName = computed<string>({
        get() {
            return props.registrant.firstName ?? "";
        },
        set(newValue: string) {
            props.registrant.firstName = newValue;
        }
    });

    const lastName = computed<string>({
        get() {
            return props.registrant.lastName ?? "";
        },
        set(newValue: string) {
            props.registrant.lastName = newValue;
        }
    });

    const email = computed<string>({
        get() {
            return props.registrant.email ?? "";
        },
        set(newValue: string) {
            props.registrant.email = newValue;
        }
    });

    const emailRules = computed((): string => {
        return props.requireEmail ? "required" : "";
    });

    const mobilePhoneNumber = computed<string | undefined>({
        get() {
            return props.registrant.mobilePhoneNumber ?? undefined;
        },
        set(newValue: string | undefined) {
            props.registrant.mobilePhoneNumber = newValue;
            props.registrant.allowSms = !!newValue;
        }
    });

    const mobilePhoneCountryCode = computed<string | undefined>({
        get() {
            return props.registrant.mobilePhoneCountryCode ?? undefined;
        },
        set(newValue: string | undefined) {
            props.registrant.mobilePhoneCountryCode = newValue;
        }
    });

    const mobilePhoneRules = computed((): string => {
        return props.requireMobilePhone ? "required" : "";
    });

    const anyMemberAttributes = computed((): boolean => {
        return !!Object.keys(memberAttributes.value).length;
    });

    const anyMemberOpportunityAttributes = computed((): boolean => {
        return !!Object.keys(memberOpportunityAttributes.value).length;
    });

    const memberAttributeValues = computed<Record<string, string>>({
        get() {
            return props.registrant.memberAttributeValues ?? {};
        },
        set(newValue: Record<string, string>) {
            props.registrant.memberAttributeValues = newValue;
        }
    });

    const memberOpportunityAttributeValues = computed<Record<string, string>>({
        get() {
            return props.registrant.memberOpportunityAttributeValues ?? {};
        },
        set(newValue: Record<string, string>) {
            props.registrant.memberOpportunityAttributeValues = newValue;
        }
    });

        // #endregion
</script>
