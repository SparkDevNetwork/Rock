<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div v-if="!hasValidIdkey" class="row">
            <div class="col-md-6" id="divAchiever" runat="server">
                <TextBox v-model="achieverId"
                         :rules="achieverIdRules"
                         label="Achiever Id" />
            </div>
            <div class="col-md-6" id="divAchievement" runat="server">
                <AchievementTypePicker v-model="achievementType" rules="required" label="Achievement" :multiple="false" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <DatePicker v-model="achievementAttemptStartDateTime"
                            rules="required"
                            label="Start Date"
                            help="The date that progress toward this attempt began." />
            </div>
            <div class="col-md-6">
                <DatePicker v-model="achievementAttemptEndDateTime"
                            label="End Date"
                            help="The date that progress toward this attempt ended." />
            </div>
            <div class="col-md-6">
                <TextBox v-model="progress"
                         class="input-width-md"
                         :rules="validateNumberValue"
                         label="Progress"
                         help="The percent towards completion of this attempt. 0.5 is 50%, 1 is 100%, etc." />
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { AchievementAttemptBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementAttemptDetail/achievementAttemptBag";
    import { AchievementAttemptDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementAttemptDetail/achievementAttemptDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import AchievementTypePicker from "@Obsidian/Controls/achievementTypePicker.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import { ValidationRule } from "@Obsidian/Types/validationRules";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<AchievementAttemptBag>>,
            required: true
        },

        options: {
            type: Object as PropType<AchievementAttemptDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<AchievementAttemptBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const achieverId = propertyRef(props.modelValue?.bag?.achieverEntityId ?? "", "AchieverEntityId");
    const achievementType = propertyRef(props.modelValue?.bag?.achievementType ?? {}, "AchievementType");
    const achievementAttemptStartDateTime = propertyRef(props.modelValue?.bag?.achievementAttemptStartDateTime ?? "", "AchievementAttemptStartDateTime");
    const achievementAttemptEndDateTime = propertyRef(props.modelValue?.bag?.achievementAttemptEndDateTime ?? "", "AchievementAttemptEndDateTime");
    const progress = propertyRef(props.modelValue?.bag?.progress ?? "", "Progress");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [achieverId, achievementType, achievementAttemptStartDateTime, achievementAttemptEndDateTime, progress];

    // #endregion

    // #region Computed Values

    const hasValidIdkey = computed((): boolean => {
        return !!props.modelValue?.bag?.idKey;
    });

    const achieverIdRules = computed((): ValidationRule[] => {
        const rules: ValidationRule[] = ["required", validateNumberValue];
        return rules;
    });

    // #endregion

    // #region Functions

    function validateNumberValue(value: unknown): string | boolean {

        const stringValue = value as string;

        if (stringValue) {
            const num = Number(value);
            if (!isValidNumber(num)) {
                return "must be a valid number.";
            }
            else if (num < 0) {
                return "must be a valid number.";
            }
        }

        return true;
    }

    function isValidNumber(num: number): boolean {
        return !isNaN(num) && isFinite(num);
    }

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(achieverId, props.modelValue?.bag?.achieverEntityId ?? "");
        updateRefValue(achievementType, props.modelValue?.bag?.achievementType ?? {});
        updateRefValue(achievementAttemptStartDateTime, props.modelValue?.bag?.achievementAttemptStartDateTime ?? "");
        updateRefValue(achievementAttemptEndDateTime, props.modelValue?.bag?.achievementAttemptEndDateTime ?? "");
        updateRefValue(progress, props.modelValue?.bag?.progress ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: ValidPropertiesBox<AchievementAttemptBag> = {
            bag: { ...props.modelValue.bag } as AchievementAttemptBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "achieverEntityId", achieverId.value);
        setPropertiesBoxValue(newValue, "achievementType", achievementType.value);
        setPropertiesBoxValue(newValue, "achievementAttemptStartDateTime", achievementAttemptStartDateTime.value);
        setPropertiesBoxValue(newValue, "achievementAttemptEndDateTime", achievementAttemptEndDateTime.value);
        setPropertiesBoxValue(newValue, "progress", progress.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
