<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, onMounted } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { AchievementAttemptBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementAttemptDetail/achievementAttemptBag";
    import { AchievementAttemptDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementAttemptDetail/achievementAttemptDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<AchievementAttemptBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<AchievementAttemptDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.progressHtml) {
            valueBuilder.addHtmlValue("", props.modelValue.progressHtml);
        }

        if (props.modelValue.achieverHtml) {
            valueBuilder.addHtmlValue("", props.modelValue.achieverHtml);
        }

        if (props.modelValue.attemptDescription) {
            valueBuilder.addTextValue("Date", props.modelValue.attemptDescription);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions
    onMounted(() => {
        var $ = window["$"];

        // person-link-popover
        $(".js-person-popover").popover({
            placement: "right",
            trigger: "manual",
            delay: 500,
            html: true,
            content: function () {
                var dataUrl = "/api/People/PopupHtml/" + $(this).attr("personid") + "/false";

                var result = $.ajax({
                    type: "GET",
                    url: dataUrl,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    async: false
                }).responseText;

                var resultObject = JSON.parse(result);

                return resultObject.PickerItemDetailsHtml;

            }
        }).on("mouseenter", (e: Event) => {
            console.log(e);
            var target = e.target;
            $(target).popover("show");
            $(target).siblings(".popover").on("mouseleave", () => {
                $(target).popover("hide");
            });
        }).on("mouseleave", (e) => {
            var target = e.target;
            setTimeout(() => {
                if (!$(".popover:hover").length) {
                    $(target).popover("hide");
                }
            }, 100);
        });
    });
    // #endregion

    // #region Event Handlers

    // #endregion
</script>
