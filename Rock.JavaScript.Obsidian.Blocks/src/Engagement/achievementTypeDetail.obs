<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning" v-html="blockError"></NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger" v-html="errorMessage"></NotificationBox>

    <Panel type="block" :title="panelName">
        <template #default>
            <div v-if="validationError" class="alert alert-validation">
                Please correct the following:
                <div v-html="validationError" />
            </div>
            <ViewPanel v-if="panelMode == DetailPanelMode.View"
                       :modelValue="achievementTypeViewBag"
                       :options="options"
                       :rebuildActionSuccessMessage="rebuildActionSuccessMessage" />

            <RockForm v-model:submit="submitForm" @submit="onSave" :formResetKey="resetKey">
                <EditPanel v-if="panelMode === DetailPanelMode.Add || panelMode === DetailPanelMode.Edit"
                           v-model="achievementTypeEditBag"
                           :options="options"
                           @propertyChanged="baseBlock.onPropertyChanged" />
            </RockForm>
        </template>
        <template #footerActions>
            <div v-if="panelMode === DetailPanelMode.Edit || panelMode === DetailPanelMode.Add">
                <RockButton v-if="isEditable"
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            autoDisable
                            autoLoading
                            @click="onStartSubmitForm">
                    Save
                </RockButton>
                <RockButton v-if="isEditable"
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Link"
                            @click="onCancelEdit">
                    Cancel
                </RockButton>
            </div>

            <div v-if="panelMode === DetailPanelMode.View && isEditable">
                <RockButton :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            autoDisable
                            autoLoading
                            @click="onEdit">
                    Edit
                </RockButton>
                <RockButton :btnSize="BtnSize.Default"
                            :btnType="BtnType.Link"
                            autoDisable
                            autoLoading
                            @click="onDelete">
                    Delete
                </RockButton>
            </div>
        </template>
        <template #footerSecondaryActions>
            <RockButton v-if="panelMode == DetailPanelMode.View"
                        :btnSize="BtnSize.Default"
                        :btnType="BtnType.Danger"
                        autoDisable
                        autoLoading
                        @click="onRebuild">
                Rebuild
            </RockButton>
        </template>
    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { confirm } from "@Obsidian/Utility/dialogs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import EditPanel from "./AchievementTypeDetail/editPanel.partial.obs";
    import ViewPanel from "./AchievementTypeDetail/viewPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { useConfigurationValues, useInvokeBlockAction, useEntityDetailBlock } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./AchievementTypeDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { AchievementTypeBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementTypeDetail/achievementTypeBag";
    import { AchievementTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/AchievementTypeDetail/achievementTypeDetailOptionsBag";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { confirmDelete } from "@Obsidian/Utility/dialogs";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<AchievementTypeBag, AchievementTypeDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");
    const rebuildActionSuccessMessage = ref("");
    const submitForm = ref(false);
    const resetKey = ref("");
    const validationError = ref("");

    const achievementTypeViewBag = ref(config.entity);
    const achievementTypeEditBag = ref<ValidPropertiesBox<AchievementTypeBag>>({
        bag: {} as AchievementTypeBag
    });

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: achievementTypeEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return panelMode.value === DetailPanelMode.Add ? "Add Achievement Type" : achievementTypeViewBag.value?.name ?? "";
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): AchievementTypeDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Event Handlers

    /**
    * Event handler for the Rebuild button being clicked. Sends the
    * rebuild request to the server and then redirects to the target page.
    *
    * @returns false if it should stay on the page; or a string containing a redirect URL.
    */
    async function onRebuild(): Promise<void> {
        errorMessage.value = "";
        rebuildActionSuccessMessage.value = "";
        if (!await confirm("Are you sure you want to delete this data? Attempt data that occurs after a person's most recent successful attempt will be deleted and rebuilt from streak data. This process occurs real-time (not in a job).")) {
            return;
        }

        const result = await invokeBlockAction<string>("Rebuild", {
            idKey: achievementTypeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            rebuildActionSuccessMessage.value = result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to rebuild streak.";
        }
    }

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<void> {
        if (!achievementTypeEditBag.value?.bag?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                window.location.href = makeUrlRedirectSafe(config.navigationUrls[NavigationUrlKey.ParentPage]);
            }
        }
        else {
            panelMode.value = DetailPanelMode.View;
        }
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<void> {
        errorMessage.value = "";

        if (!await confirmDelete("Achievement Type", "All associated achievement attempts will also be deleted!")) {
            return;
        }

        const result = await invokeBlockAction<string>("Delete", {
            key: achievementTypeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            window.location.href = makeUrlRedirectSafe(result.data);
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete group member schedule template.";
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<void> {
        const result = await invokeBlockAction<ValidPropertiesBox<AchievementTypeBag>>("Edit", {
            key: achievementTypeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            achievementTypeEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };
            panelMode.value = DetailPanelMode.Edit;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";
        validationError.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<AchievementTypeBag> | string>("Save", {
            box: achievementTypeEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                achievementTypeViewBag.value = result.data.bag;
                panelMode.value = DetailPanelMode.View;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                window.location.href = makeUrlRedirectSafe(result.data);
            }
        }
        else if (result.statusCode === 400) {
            validationError.value = result.errorMessage ?? "Unknown error while trying to save achievement type.";
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save achievement type.";
        }

    }

    const onStartSubmitForm = (): void => {
        submitForm.value = true;
    };

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified achievement type could not be viewed.";
    }
    else if (!config.entity.idKey) {
        achievementTypeEditBag.value = { bag: config.entity };
        panelMode.value = DetailPanelMode.Add;
    }
</script>
