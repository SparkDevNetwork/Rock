<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <TextBox v-model="firstName"
                         label="First Name" />
            </div>

            <div class="col-md-4">
                <TextBox v-model="lastName"
                         label="Last Name" />
            </div>

            <div class="col-md-4">
                <TextBox v-model="note"
                         label="Note" />
            </div>

            <div class="col-md-4">
                <CampusPicker v-model="campus"
                              label="Campus"
                              :includeInactive="true"
                              :showBlankItem="true" />
            </div>

            <div class="col-md-4">
                <DateRangePicker v-model="dateStarted"
                                 label="Date Started"
                                 :disallowPastDateSelection="false" />
            </div>

            <div class="col-md-4">
                <DateRangePicker v-model="dateCompleted"
                                 label="Date Completed"
                                 :disallowPastDateSelection="false" />
            </div>

            <div class="col-md-4">
                <CheckBoxList v-model="stepStatus"
                              label="Step Status"
                              :items="stepStatusItems"
                              :horizontal="true"
                              :repeatColumns="0" />
            </div>

        </div>
    </Modal>
</template>

<script setup lang="ts">
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import DateRangePicker from "@Obsidian/Controls/dateRangePicker.obs";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DateRangeParts } from "@Obsidian/Types/Controls/dateRangePicker";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        stepStatusItems: {
            type: Array as PropType<ListItemBag[]>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const firstName = ref(props.modelValue.firstName ?? "");
    const lastName = ref(props.modelValue.lastName ?? "");
    const note = ref(props.modelValue.note ?? "");
    const campus = ref(props.modelValue.campus);
    const dateStarted = ref<DateRangeParts | undefined>({
        lowerValue: props.modelValue.dateStartedLower,
        upperValue: props.modelValue.dateStartedUpper
    });
    const dateCompleted = ref<DateRangeParts | undefined>({
        lowerValue: props.modelValue.dateCompletedLower,
        upperValue: props.modelValue.dateCompletedUpper
    });
    const stepStatus = ref(props.modelValue.stepStatus);

    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            firstName: firstName.value,
            lastName: lastName.value,
            note: note.value,
            campus: campus.value,
            dateStartedUpper: dateStarted.value?.upperValue,
            dateStartedLower: dateStarted.value?.lowerValue,
            dateCompletedUpper: dateCompleted.value?.upperValue,
            dateCompletedLower: dateCompleted.value?.lowerValue,
            stepStatus: stepStatus.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        firstName.value = props.modelValue.firstName ?? "";
        lastName.value = props.modelValue.lastName ?? "";
        note.value = props.modelValue.note ?? "";
        campus.value = props.modelValue.campus ?? null;
        dateStarted.value = {
            lowerValue: props.modelValue.dateStartedLower,
            upperValue: props.modelValue.dateStartedUpper
        };
        dateCompleted.value = {
            lowerValue: props.modelValue.dateCompletedLower,
            upperValue: props.modelValue.dateCompletedUpper
        };
        stepStatus.value = props.modelValue.stepStatus;
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
