<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->

<template>
    <Grid v-if="isVisible"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          personKeyField="personIdKey"
          itemTerm="Step Participant"
          :title="itemTerm"
          :entityTypeGuid="EntityType.Step"
          stickyHeader
          liveUpdates
          :showCommunicate="true"
          :showPersonMerge="true"
          :showBulkUpdate="true"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <SelectColumn />

        <Column name="id"
                title="ID"
                field="id"
                :hideOnScreen="true" />

        <Column name="person"
                title="Name"
                field="person"
                :filter="pickExistingValueFilter"
                :filterValue="getNameFilterValue"
                :quickFilterValue="getNameFilterValue"
                :sortValue="getNameFilterValue"
                visiblePriority="xs"
                width="25%">
            <template #format="{ row }">
                <PersonAvatar :personIdKey="row.personIdKey" :photoUrl="photoUrl(row)" photoSize="xs" marginRight="sm" enableHoverInfo />
                <span class="mr-1">{{ row.fullName }}</span>
                <span v-if="row.signalMarkup" class="mr-1" v-html="row.signalMarkup"></span>
                <span v-if="config.options?.isNoteColumnVisible && row.note" class='js-member-note' data-toggle='tooltip' data-placement='top' :title='`${row.note}`'>
                    <i class='fa fa-file-text-o text-info'></i>
                </span>
            </template>
        </Column>

        <DateColumn v-if="config.options?.isDateStartedColumnVisible"
                    name="dateStarted"
                    title="Date Started"
                    field="dateStarted"
                    :filter="dateValueFilter"
                    headerClass="title-right"
                    itemClass="justify-content-end text-right"
                    width="20%"
                    visiblePriority="md" />

        <DateColumn name="dateCompleted"
                    title="Date Completed"
                    field="dateCompleted"
                    :filter="dateValueFilter"
                    headerClass="title-right"
                    itemClass="justify-content-end text-right"
                    width="170"
                    visiblePriority="xs" />

        <TextColumn v-if="config.options?.isCampusColumnVisible"
                    name="campus"
                    title="Campus"
                    field="campus"
                    :filter="pickExistingValueFilter"
                    visiblePriority="md" />

        <Column name="stepStatusId"
                title="Step Status Id"
                field="stepStatusId"
                :hideOnScreen="true" />

        <Column name="stepStatus"
                title="Status"
                field="stepStatus"
                :filter="pickExistingValueFilter"
                :filterValue="getStepStatusFilterValue"
                visiblePriority="xs">

            <template #format="{ row }">
                <span class="label label-default" :style="`background-color: ${stepStatusBackgroundColors[row.stepStatus]};color:#fff;`">
                    {{ row.stepStatus }}
                </span>
            </template>
        </Column>

        <TextColumn v-if="config.options?.isNoteColumnVisible"
                    name="note"
                    title="Note"
                    field="note"
                    :filter="textValueFilter"
                    visiblePriority="md" />

        <Column name="personId"
                title="Person Id"
                field="personId"
                :hideOnScreen="true" />

        <Column name="exportPerson"
                title="Person"
                field="exportPerson"
                :hideOnScreen="true" />

        <Column name="isCompleted"
                title="Is Completed"
                field="isCompleted"
                :hideOnScreen="true" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <ButtonColumn v-if="config.options?.personProfilePageUrl" :excludeFromExport="true" name="user" iconClass="fa fa-user" @click="onPersonClick" visiblePriority="md" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<style>
.grid-item-pull-right {
    flex-direction: column;
    align-items: start;
}

.title-right .grid-column-title {
    text-align: right;
}
</style>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import PersonAvatar from "@Obsidian/Controls/personAvatar.obs";
    import Grid, { AttributeColumns, pickExistingValueFilter, dateValueFilter, TextColumn, textValueFilter, DeleteColumn, SelectColumn, DateColumn, ButtonColumn, Column } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { StepParticipantListOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/StepParticipantList/stepParticipantListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./StepParticipantList/types.partial";
    import { computed, reactive, ref } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";
    import { useStore } from "@Obsidian/PageState";

    const config = useConfigurationValues<ListBlockBox<StepParticipantListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const stepStatusBackgroundColors = config.options?.stepStatusBackgroundColors ?? {};

    // #endregion

    // #region Computed Values

    const isVisible = computed((): boolean => {
        return useStore().state.areSecondaryBlocksShown;
    });

    /**
     * The item term, derived from the name of the current step type.
     */
    const itemTerm = computed((): string => {
        return config.options?.stepType?.text ? `${config.options.stepType.text} Step Participants` : "Step Participants";
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
    * Gets the filter value text to use for the step status column.
    *
    * @param row The row to be filtered.
    */
    function getStepStatusFilterValue(row: Record<string, unknown>): string {
        return row["stepStatus"] as string;
    }

    /**
    * Gets the filter value text to use for the name column.
    *
    * @param row The row to be filtered.
    */
    function getNameFilterValue(row: Record<string, unknown>): string {
        return row["fullName"] as string;
    }

    /**
     * Gets the URL for the avatar of the name column.
     */
    function photoUrl(row: Record<string, unknown>): string {
        if (!row["person"]) {
            return "";
        }

        const value = row["person"] as PersonFieldBag;

        if (!value || typeof value !== "object") {
            return "";
        }

        return value.photoUrl ?? "";
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            const row = gridData?.rows?.find(r => r["idKey"] === key);
            const id = row?.id ?? 0;
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", id.toString());
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete step.");
        }
    }

    /**
     * Called when the Person button has been clicked by the indivual.
     */
    function onPersonClick(key: string): void {
        if (config.options?.personProfilePageUrl) {
            const personIdKey = gridData?.rows?.find(r => r["idKey"] === key)?.personIdKey as string;
            if (personIdKey) {
                window.location.href = config.options.personProfilePageUrl.replace("((Key))", personIdKey);
            }
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion
    gridDataSource.value = loadGridData();
</script>
