<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->

<template>

    <NotificationBox v-if="!config.options?.isAuthorizedToViewProgram" alertType="warning">
        <strong>Note</strong> You are not authorized to view Step Types of this Step Program.
    </NotificationBox>

    <Grid v-if="config.options?.isBlockVisible && config.options?.isAuthorizedToViewProgram"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Step Type"
          :entityTypeGuid="EntityType.StepType"
          stickyHeader
          liveUpdates
          gridSettings
          :showLaunchWorkflow="false"
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onClickGridSetting"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <ReorderColumn v-if="config.options?.canEdit" @orderChanged="onOrderChanged" />

        <Column name="icon"
                visiblePriority="xs"
                width="57px">
            <template #format="{ row }">
                <i :class="`fa-fw ${row.iconCssClass}`"></i>
            </template>
        </Column>

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="30%" />

        <BooleanColumn name="hasEndDate"
                       title="Spans Time"
                       field="hasEndDate"
                       :filter="booleanValueFilter"
                       visiblePriority="md" />

        <BooleanColumn name="allowMultiple"
                       title="Allow Multiple"
                       field="allowMultiple"
                       :filter="booleanValueFilter"
                       visiblePriority="md" />

        <NumberColumn name="startedCount"
                      title="Started"
                      field="startedCount"
                      :filter="numberValueFilter"
                      visiblePriority="md" />

        <NumberColumn name="completedCount"
                      title="Completed"
                      field="completedCount"
                      :filter="numberValueFilter"
                      visiblePriority="md" />

        <ButtonColumn v-if="config.options?.isBulkEntryColumnVisible"
                      name="bulkEntry"
                      iconClass="fa fa-truck"
                      visiblePriority="md"
                      @click="bulkEntry" />

        <SecurityColumn v-if="config.options?.isSecurityColumnVisible" />

        <DeleteColumn :rowDisabled="() => !config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible" />
</template>

<script setup lang="ts">
import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
import { EntityType } from "@Obsidian/SystemGuids/entityType";
import Grid, { BooleanColumn, TextColumn, textValueFilter, DeleteColumn, ReorderColumn, SecurityColumn, NumberColumn, Column, ButtonColumn, booleanValueFilter, numberValueFilter } from "@Obsidian/Controls/grid";
import { alert } from "@Obsidian/Utility/dialogs";
import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
import { StepTypeListOptionsBag } from "@Obsidian/ViewModels/Blocks/Engagement/StepTypeList/stepTypeListOptionsBag";
import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
import { NavigationUrlKey, GridSettingsOptions, PreferenceKey } from "./StepTypeList/types.partial";
import GridSettingsModal from "./StepTypeList/gridSettingsModal.partial.obs";
import { computed, reactive, ref, watch } from "vue";

const config = useConfigurationValues<ListBlockBox<StepTypeListOptionsBag>>();
const invokeBlockAction = useInvokeBlockAction();
const preferences = usePersonPreferences().blockPreferences;

// #region Values

const gridDataSource = ref<Promise<GridDataBag>>();
let gridData: GridDataBag | undefined;

const isGridSettingsVisible = ref(false);
const gridSettings = ref<GridSettingsOptions>({
    name: preferences.getValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterName)),
    spansTime: preferences.getValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterSpansTime)),
    allowsMultiple: preferences.getValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterAllowsMultiple)),
    activeStatus: preferences.getValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterActiveStatus)),
});

// #endregion

// #region Functions

/**
 * Called when the grid is requesting the row data be loaded.
 */
async function loadGridData(): Promise<GridDataBag> {
    const result = await invokeBlockAction<GridDataBag>("GetGridData");

    if (result.isSuccess && result.data) {
        gridData = reactive(result.data);
        return gridData;
    }
    else {
        throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
    }
}

// #endregion

// #region Computed Values

/** `true` if the grid settings is performing any filtering. */
const hasSettingsFilters = computed((): boolean => {
    return !!gridSettings.value.name
        || !!gridSettings.value.spansTime
        || !!gridSettings.value.allowsMultiple
        || !!gridSettings.value.activeStatus;
});

/**
* Makes the key unique to the current event calendar.
*
* @param row The preference key.
*/
function makeKeyUniqueToStepProgram(key: string): string {
    if (config.options?.stepProgramIdKey) {
        return `${config.options?.stepProgramIdKey}-${key}`;
    }
    return key;
}

// #endregion

// #region Event Handlers

/**
 * Called when a row has been selected by the individual.
 *
 * @param key The key of the row that was selected.
 */
function onSelectItem(key: string): void {
    if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
        window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
    }
}

/**
 * Called when a row's delete button has been clicked by the individual. This
 * happens only if they have confirmed the delete action.
 */
async function onDeleteClick(key: string): Promise<void> {
    const result = await invokeBlockAction<string>("Delete", {
        key
    });

    if (result.isSuccess) {
        if (gridData && gridData.rows) {
            const index = gridData.rows.findIndex(r => r["idKey"] === key);

            if (index !== -1) {
                gridData.rows?.splice(index, 1);
            }
        }
    }
    else {
        await alert(result.errorMessage ?? "Unknown error while trying to delete step type.");
    }
}

/**
 * Called when the Add button has been clicked by the indivual.
 */
function onAddItem(): void {
    if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
        window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
    }
}

/**
 * Called when a row has been dragged from one position to a new position.
 *
 * @param item The item that was moved to a new position.
 * @param beforeItem The item that the first item was dropped before.
 *
 * @returns `true` if the operation succeeded; otherwise `false`.
 */
async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
    const result = await invokeBlockAction<string>("ReorderItem", {
        key: item["idKey"],
        beforeKey: beforeItem?.["idKey"] ?? null
    });

    return result.isSuccess;
}

/**
* Called when a row has been selected by the individual.
*
* @param key The key of the row that was selected.
*/
function bulkEntry(key: string): void {
    if (config.navigationUrls?.[NavigationUrlKey.BulkEntryPage]) {
        window.location.href = config.navigationUrls[NavigationUrlKey.BulkEntryPage].replace("((Key))", key);
    }
}

/**
* Called when the grid setting icon is clicked, displays the block filters.
*
*/
function onClickGridSetting(): void {
    isGridSettingsVisible.value = true;
}

// #endregion

watch(gridSettings, async () => {
    preferences.setValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterName), gridSettings.value.name ?? "");
    preferences.setValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterSpansTime), gridSettings.value.spansTime ?? "");
    preferences.setValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterAllowsMultiple), gridSettings.value.allowsMultiple ?? "");
    preferences.setValue(makeKeyUniqueToStepProgram(PreferenceKey.FilterActiveStatus), gridSettings.value.activeStatus ?? "");

    await preferences.save();

    gridDataSource.value = loadGridData();
});

gridDataSource.value = loadGridData();
</script>
