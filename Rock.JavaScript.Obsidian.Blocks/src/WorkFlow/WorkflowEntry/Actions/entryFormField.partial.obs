<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <PrePost v-if="isVisible"
             :pre="field.preHtml"
             :post="field.postHtml">
        <RockField v-if="field.attribute && field.attribute.fieldTypeGuid !== emptyGuid"
                   :modelValue="value"
                   :attribute="field.attribute"
                   :showLabel="!field.isLabelHidden"
                   :requiredOverride="field.isRequired"
                   isEditMode
                   @update:modelValue="onValueUpdated" />
        <div v-else class="form-group static-control">
            <RockLabel v-if="field.attribute?.name"
                       :help="field.attribute?.description ?? undefined">
                {{ field.attribute?.name }}
            </RockLabel>

            <div class="control-wrapper">
                <div class="form-control-static" v-html="value"></div>
            </div>
        </div>
    </PrePost>
</template>

<script setup lang="ts">
    import PrePost from "../prePost.partial";
    import RockField from "@Obsidian/Controls/rockField.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import { EntryFormFieldBag } from "@Obsidian/ViewModels/Workflow/entryFormFieldBag";
    import { computed, PropType } from "vue";
    import { EntryFormFilterContext, EntryFormFilterFunctionBuilder } from "./conditional.partial";

    const props = defineProps({
        field: {
            type: Object as PropType<EntryFormFieldBag>,
            required: true
        },

        fieldValues: {
            type: Object as PropType<Record<string, string>>,
            required: true
        },

        filterContext: {
            type: Object as PropType<EntryFormFilterContext>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "updateFieldValue", attributeGuid: string, value: string): void;
    }>();

    const visbilityFilter = new EntryFormFilterFunctionBuilder();

    /** The current value from the field values for this field. */
    const value = computed((): string => {
        if (!props.field.attribute?.attributeGuid) {
            return "";
        }

        return props.fieldValues[props.field.attribute.attributeGuid] ?? "";
    });

    /**
     * Determines if this field is currently visible based on conditional
     * visibility rules.
     */
    const isVisible = computed((): boolean => {
        if (!props.field.visibilityRule) {
            return true;
        }

        return visbilityFilter.isMatch(props.filterContext, props.field.visibilityRule);
    });

    /**
     * Called when the field component has updated the value in the UI.
     *
     * @param value The updated value from the field component.
     */
    function onValueUpdated(value: string): void {
        if (props.field.attribute?.attributeGuid) {
            // Some fields emit the original value when they initialize, so
            // catch those and ignore the change.
            if (props.fieldValues[props.field.attribute.attributeGuid] !== value) {
                emit("updateFieldValue", props.field.attribute.attributeGuid, value);
            }
        }
    }
</script>
