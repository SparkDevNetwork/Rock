<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="form-builder-scroll">
        <div class="panel-body">
            <RockForm v-model:submit="formSubmit" @validationChanged="onValidationChanged">
                <ConfirmationEmail v-if="!isConfirmationEmailForced" v-model="confirmationEmail" :sourceTemplateOptions="sourceTemplateOptions" :recipientOptions="recipientOptions" />
                <NotificationBox v-else alertType="info">
                    <h4 class="alert-heading">Confirmation Email</h4>
                    <p>
                        The confirmation e-mail is defined on the template and cannot be changed.
                    </p>
                </NotificationBox>

                <NotificationEmail v-model="notificationEmail" :sourceTemplateOptions="sourceTemplateOptions" :campusTopicOptions="campusTopicOptions" />
            </RockForm>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed } from "vue";
    import { PropType, ref, watch } from "vue";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { FormError } from "@Obsidian/Utility/form";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import ConfirmationEmail from "../Shared/confirmationEmail.partial.obs";
    import NotificationEmail from "./notificationEmail.partial.obs";
    import { FormCommunication, FormTemplateListItem } from "./types.partial";
    import { useFormSources } from "./utils.partial";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FormCommunication>,
            required: true
        },

        recipientOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        },

        templateOverrides: {
            type: Object as PropType<FormTemplateListItem | null>,
            required: false
        },

        submit: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FormCommunication): void;
        (e: "validationChanged", value: FormError[]): void;
    }>();

    const confirmationEmail = ref(props.modelValue.confirmationEmail ?? {});

    const notificationEmail = ref(props.modelValue.notificationEmail ?? {});

    const formSubmit = ref(false);

    const sources = useFormSources();

    const sourceTemplateOptions = sources.emailTemplateOptions ?? [];
    const campusTopicOptions = sources.campusTopicOptions ?? [];

    const isConfirmationEmailForced = computed((): boolean => props.templateOverrides?.isConfirmationEmailConfigured ?? false);

    /**
     * Event handler for when the validation state of the form has changed.
     *
     * @param errors Any errors that were detected on the form.
     */
    function onValidationChanged(errors: FormError[]): void {
        emit("validationChanged", errors);
    }

    watch(() => props.modelValue, () => {
        confirmationEmail.value = props.modelValue.confirmationEmail ?? {};
        notificationEmail.value = props.modelValue.notificationEmail ?? {};
    });

    watch([confirmationEmail, notificationEmail], () => {
        const newValue: FormCommunication = {
            ...props.modelValue,
            confirmationEmail: confirmationEmail.value,
            notificationEmail: notificationEmail.value
        };

        emit("update:modelValue", newValue);
    });

    // Any time the parent component tells us it has attempted to submit
    // then we trigger the submit on our form so it updates the validation.
    watch(() => props.submit, () => {
        if (props.submit) {
            formSubmit.value = true;
        }
    });
</script>
