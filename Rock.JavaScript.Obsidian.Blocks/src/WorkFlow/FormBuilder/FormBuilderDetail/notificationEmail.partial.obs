<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <SectionContainer v-model="enabled"
                      toggleText="Enable"
                      title="Notification Email"
                      description="Notification emails can be sent to specified individuals when each form is completed.">
        <SegmentedPicker v-model="destination" :items="notificationDestinationOptions" />

        <div v-if="isDestinationSpecificIndividual">
            <div class="row">
                <div class="col-md-4">
                    <PersonPicker v-model="recipient"
                                  label="Recipient"
                                  rules="required" />
                </div>
            </div>
        </div>

        <div v-else-if="isDestinationEmailAddress">
            <div class="row">
                <div class="col-md-4">
                    <EmailBox v-model="emailAddress"
                              label="Recipients"
                              rules="required"
                              allowMultiple />
                </div>
            </div>
        </div>

        <div v-else-if="isDestinationCampusTopic">
            <div class="row">
                <div class="col-md-4">
                    <DropDownList v-model="campusTopicGuid"
                                  label="Topic"
                                  rules="required"
                                  :items="campusTopicOptions" />
                </div>
            </div>
        </div>

        <div class="mt-3">
            <EmailSource v-model="source" :templateOptions="sourceTemplateOptions" />
        </div>
    </SectionContainer>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import EmailSource from "../Shared/emailSource.partial.obs";
    import SegmentedPicker from "../Shared/segmentedPicker.partial.obs";
    import SectionContainer from "@Obsidian/Controls/sectionContainer.obs";
    import { FormNotificationEmail, FormNotificationEmailDestination } from "../Shared/types.partial";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FormNotificationEmail>,
            required: true
        },

        sourceTemplateOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        },

        campusTopicOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FormNotificationEmail): void;
    }>();

    /** True if the notification e-mail is enabled and the rest of the UI should be shown. */
    const enabled = ref(props.modelValue.enabled ?? false);

    /** The currently selected destination option for where the e-mail will be sent. */
    const destination = ref(props.modelValue.destination?.toString() ?? FormNotificationEmailDestination.SpecificIndividual.toString());

    /** The recipient when destination is set to specific individual. */
    const recipient = ref(props.modelValue.recipient ?? undefined);

    /** The e-mail address(es) when destination is set to email address. */
    const emailAddress = ref(props.modelValue.emailAddress ?? "");

    /** The campus topic identifier when destination is set to campus topic. */
    const campusTopicGuid = ref(props.modelValue.campusTopicGuid ?? "");

    /** The source that will generate the e-mail to be sent. */
    const source = ref(props.modelValue.source ?? {});

    const notificationDestinationOptions: ListItemBag[] = [
        {
            value: FormNotificationEmailDestination.SpecificIndividual.toString(),
            text: "Specific Individual"
        },
        {
            value: FormNotificationEmailDestination.EmailAddress.toString(),
            text: "Email Address"
        },
        {
            value: FormNotificationEmailDestination.CampusTopic.toString(),
            text: "Campus Topic Address"
        }
    ];

    /** True if the selected destination is Specific Individual. */
    const isDestinationSpecificIndividual = computed((): boolean => destination.value === FormNotificationEmailDestination.SpecificIndividual.toString());

    /** True if the selected destination is Email Address. */
    const isDestinationEmailAddress = computed((): boolean => destination.value === FormNotificationEmailDestination.EmailAddress.toString());

    /** True if the selected destination is Campus Topic. */
    const isDestinationCampusTopic = computed((): boolean => destination.value === FormNotificationEmailDestination.CampusTopic.toString());

    // Watch for changes in the modelValue and update all our internal values.
    watch(() => props.modelValue, () => {
        enabled.value = props.modelValue.enabled ?? false;
        destination.value = props.modelValue.destination?.toString() ?? FormNotificationEmailDestination.SpecificIndividual.toString();
        recipient.value = props.modelValue.recipient ?? undefined;
        emailAddress.value = props.modelValue.emailAddress ?? "";
        campusTopicGuid.value = props.modelValue.campusTopicGuid ?? "";
        source.value = props.modelValue.source ?? {};
    });

    // Watch for changes in our internal values and update the modelValue.
    watch([enabled, destination, recipient, emailAddress, campusTopicGuid, source], () => {
        const newValue: FormNotificationEmail = {
            ...props.modelValue,
            enabled: enabled.value,
            destination: toNumberOrNull(destination.value) ?? FormNotificationEmailDestination.SpecificIndividual,
            recipient: recipient.value,
            emailAddress: emailAddress.value,
            campusTopicGuid: campusTopicGuid.value,
            source: source.value
        };

        emit("update:modelValue", newValue);
    });
</script>
