<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="isStartupError" alertType="warning">
        Unable to view details of this template.
    </NotificationBox>

    <Panel v-else type="block" :title="blockTitle" titleIconCssClass="fa fa-align-left">
        <template v-if="!isEditMode" #headerActions>
            <span v-if="isInactive" class="label label-danger">Inactive</span>
        </template>

        <template v-if="!isEditMode" #drawer>
            <AuditDetail :entityTypeGuid="EntityType.WorkflowFormBuilderTemplate" :entityKey="config.templateGuid ?? undefined" />
        </template>

        <div v-if="!isEditMode">
            <ViewPanel :modelValue="templateDetail" />

            <div class="actions">
                <RockButton v-if="isEditable" btnType="primary" accesskey="e" @click="onEditClick">Edit</RockButton>
            </div>
        </div>

        <div v-else>
            <RockForm @submit="onSubmit">
                <EditPanel v-model="templateEditDetail" />

                <div class="actions">
                    <RockButton type="submit" btnType="primary">Save</RockButton>
                    <RockButton btnType="link" @click="onEditCancelClick">Cancel</RockButton>
                </div>
            </RockForm>
        </div>
    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import AuditDetail from "@Obsidian/Controls/auditDetail.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { areEqual, emptyGuid } from "@Obsidian/Utility/guid";
    import EditPanel from "./FormTemplateDetail/editPanel.partial.obs";
    import { FormTemplateDetailConfiguration, TemplateDetail, TemplateEditDetail } from "./FormTemplateDetail/types.partial";
    import { provideSources } from "./FormTemplateDetail/utils.partial";
    import ViewPanel from "./FormTemplateDetail/viewPanel.partial.obs";

    const config = useConfigurationValues<FormTemplateDetailConfiguration>();
    const invokeBlockAction = useInvokeBlockAction();

    const templateDetail = ref(config.template);
    const templateEditDetail = ref<TemplateEditDetail>({});
    const isEditable = ref(config.isEditable);

    // Start in edit mode if we have an empty guid.
    const isEditMode = ref(areEqual(config.templateGuid ?? "", emptyGuid));

    /** True if the template being viewed is inactive. */
    const isInactive = computed(() => !(templateDetail.value?.isActive ?? false));

    /**
     * True if we have a startup error that prevents us from displaying
     * the normal view or edit panels. It's an error if we don't have a
     * template or a templateGuid. That currently means they tried to view
     * an invalid template.
     */
    const isStartupError = !config.template && !config.templateGuid;

    /**
     * Gets the title that should currently be displayed in the panel title.
     * This takes into account the current display mode.
     */
    const blockTitle = computed((): string => {
        if (!isEditMode.value) {
            return templateDetail.value?.name ?? "";
        }
        else {
            return templateEditDetail.value.name || "Add Template";
        }
    });

    /**
     * Event handler for when the individual clicks the Edit button.
     */
    async function onEditClick(): Promise<void> {
        const result = await invokeBlockAction<TemplateEditDetail>("StartEdit", {
            guid: config.templateGuid ?? ""
        });

        if (result.isSuccess && result.data) {
            templateEditDetail.value = result.data;
            isEditMode.value = true;
        }
    }

    /**
     * Event handler for when the individual clicks the Cancel button
     * while in edit mode.
     */
    function onEditCancelClick(): void {
        if (config.parentUrl && areEqual(config.templateGuid ?? "", emptyGuid)) {
            window.location.href = config.parentUrl;
            return;
        }

        templateEditDetail.value = {};
        isEditMode.value = false;
    }

    /**
     * Event handler for when the form has been validated and is now ready
     * to be submitted to the server.
     */
    async function onSubmit(): Promise<void> {
        const result = await invokeBlockAction<TemplateDetail | string>("SaveTemplate", {
            guid: config.templateGuid ?? "",
            template: templateEditDetail.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                templateDetail.value = result.data;
                templateEditDetail.value = {};
                isEditMode.value = false;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                window.location.href = result.data;
            }
        }
    }

    provideSources(config.sources ?? {});
</script>
