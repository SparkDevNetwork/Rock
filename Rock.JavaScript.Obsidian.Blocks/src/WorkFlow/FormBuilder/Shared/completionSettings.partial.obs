<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <SectionContainer v-model="enabled"
                      title="Completion Settings"
                      description="The settings below determine the actions to take after an individual completes the form."
                      :toggleText="sectionToggleText">
        <SegmentedPicker v-model="type"
                         :items="typeOptions" />

        <div v-if="isTypeDisplayMessage">
            <TextBox v-model="message"
                     label="Completion Message"
                     textMode="multiline"
                     rules="required" />
        </div>

        <div v-else-if="isTypeRedirect">
            <TextBox v-model="redirectUrl"
                     label="Redirect URL"
                     rules="required" />
        </div>
    </SectionContainer>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import SegmentedPicker from "./segmentedPicker.partial.obs";
    import SectionContainer from "@Obsidian/Controls/sectionContainer.obs";
    import { FormCompletionActionType, FormCompletionAction } from "./types.partial";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FormCompletionAction>,
            required: true
        },

        enabled: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        hasEnable: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FormCompletionAction): void;
        (e: "update:enabled", value: boolean): void;
    }>();

    const enabled = useVModelPassthrough(props, "enabled", emit);
    const type = ref(props.modelValue.type?.toString() ?? FormCompletionActionType.DisplayMessage.toString());
    const message = ref(props.modelValue.message ?? "");
    const redirectUrl = ref(props.modelValue.redirectUrl ?? "");

    const typeOptions: ListItemBag[] = [
        {
            value: FormCompletionActionType.DisplayMessage.toString(),
            text: "Display Message"
        },
        {
            value: FormCompletionActionType.Redirect.toString(),
            text: "Redirect to New Page"
        }
    ];

    /** True if the type is DisplayMessage. */
    const isTypeDisplayMessage = computed((): boolean => type.value === FormCompletionActionType.DisplayMessage.toString());

    /** True if the type is Redirect */
    const isTypeRedirect = computed((): boolean => type.value === FormCompletionActionType.Redirect.toString());

    /** The title text of the toggle button on the section. */
    const sectionToggleText = computed((): string => props.hasEnable ? "Enable" : "");

    // Watch for changes in our modelValue and then update all our internal values.
    watch(() => props.modelValue, () => {
        type.value = props.modelValue.type?.toString() ?? FormCompletionActionType.DisplayMessage.toString();
        message.value = props.modelValue.message ?? "";
        redirectUrl.value = props.modelValue.redirectUrl ?? "";
    });

    // Watch for changes on any of our internal values and then update the modelValue.
    watch([type, message, redirectUrl], () => {
        const newValue: FormCompletionAction = {
            ...props.modelValue,
            type: toNumberOrNull(type.value) ?? FormCompletionActionType.DisplayMessage,
            message: message.value,
            redirectUrl: redirectUrl.value
        };

        emit("update:modelValue", newValue);
    });
</script>
