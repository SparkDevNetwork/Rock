<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div>
        <SegmentedPicker v-model="type"
                         :items="emailSourceOptions" />

        <div v-if="isTemplateType">
            <div class="row">
                <div class="col-md-4">
                    <DropDownList v-model="template"
                                  label="Email Template"
                                  rules="required"
                                  :items="templateOptions" />
                </div>
            </div>
        </div>

        <div v-else-if="isCustomType">
            <div class="row">
                <div class="col-md-4">
                    <TextBox v-model="subject"
                             label="Subject"
                             rules="required" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <TextBox v-model="replyTo"
                             label="Reply To"
                             rules="email" />
                </div>
            </div>

            <TextBox v-model="body"
                     label="Email Body"
                     textMode="multiline"
                     rules="required" />

            <InlineCheckbox v-model="appendOrgHeaderAndFooter"
                            label="Append Organization Header and Footer" />
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import InlineCheckbox from "@Obsidian/Controls/inlineCheckBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import SegmentedPicker from "./segmentedPicker.partial.obs";
    import { FormEmailSource, FormEmailSourceType } from "./types.partial";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FormEmailSource>,
            default: {}
        },

        templateOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FormEmailSource): void;
    }>();

    const type = ref(props.modelValue.type?.toString() ?? FormEmailSourceType.UseTemplate.toString());
    const template = ref(props.modelValue.template ?? "");
    const subject = ref(props.modelValue.subject ?? "");
    const replyTo = ref(props.modelValue.replyTo ?? "");
    const body = ref(props.modelValue.body ?? "");
    const appendOrgHeaderAndFooter = ref(props.modelValue.appendOrgHeaderAndFooter ?? false);

    const emailSourceOptions: ListItemBag[] = [
        {
            value: FormEmailSourceType.UseTemplate.toString(),
            text: "Use Email Template"
        },
        {
            value: FormEmailSourceType.Custom.toString(),
            text: "Provide Custom Email"
        }
    ];

    /** True if the currently selected type is for UseTemplate. */
    const isTemplateType = computed((): boolean => type.value === FormEmailSourceType.UseTemplate.toString());

    /** True if the currently selected type is for Custom. */
    const isCustomType = computed((): boolean => type.value === FormEmailSourceType.Custom.toString());

    // Watch for changes for the modelValue and update all our internal values.
    watch(() => props.modelValue, () => {
        type.value = props.modelValue.type?.toString() ?? FormEmailSourceType.UseTemplate.toString();
        template.value = props.modelValue.template ?? "";
        subject.value = props.modelValue.subject ?? "";
        replyTo.value = props.modelValue.replyTo ?? "";
        body.value = props.modelValue.body ?? "";
        appendOrgHeaderAndFooter.value = props.modelValue.appendOrgHeaderAndFooter ?? false;
    });

    // Watch for changes to any of our internal values and update the modelValue.
    watch([type, template, subject, replyTo, body, appendOrgHeaderAndFooter], () => {
        const newValue: FormEmailSource = {
            ...props.modelValue,
            type: toNumberOrNull(type.value) ?? FormEmailSourceType.UseTemplate,
            template: template.value,
            subject: subject.value,
            replyTo: replyTo.value,
            body: body.value,
            appendOrgHeaderAndFooter: appendOrgHeaderAndFooter.value
        };

        emit("update:modelValue", newValue);
    });
</script>
