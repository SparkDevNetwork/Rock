<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <SectionContainer v-model="enabled"
                      toggleText="Enable"
                      title="Confirmation Email"
                      description="The following settings will be used to send an email to the individual who submitted the form.">
        <div class="row">
            <div class="col-md-4">
                <DropDownList v-model="recipientAttributeGuidOrEmptyString"
                              label="Recipient"
                              rules="required"
                              :items="recipientOptions" />
            </div>
        </div>

        <div class="mt-3">
            <EmailSource v-model="source" :templateOptions="sourceTemplateOptions" />
        </div>
    </SectionContainer>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import EmailSource from "./emailSource.partial.obs";
    import SectionContainer from "@Obsidian/Controls/sectionContainer.obs";
    import { FormConfirmationEmail, FormEmailSource } from "./types.partial";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FormConfirmationEmail>,
            required: true
        },

        recipientOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        },

        sourceTemplateOptions: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FormConfirmationEmail): void;
    }>();

    const enabled = ref(props.modelValue.enabled ?? false);
    /** The workflow confirmation recipient attribute guid (or empty string if not provided). */
    const recipientAttributeGuidOrEmptyString = ref<string>(props.modelValue.recipientAttributeGuid ?? "");
    const source = ref<FormEmailSource>(props.modelValue.source ?? {});

    // Watch for changes in our modelValue and then update all our internal values.
    watch(() => props.modelValue, () => {
        enabled.value = props.modelValue.enabled ?? false;
        recipientAttributeGuidOrEmptyString.value = props.modelValue.recipientAttributeGuid ?? "";
        source.value = props.modelValue.source ?? {};
    });

    // Watch for changes on any of our internal values and then update the modelValue.
    watch([enabled, recipientAttributeGuidOrEmptyString, source], () => {
        const newValue: FormConfirmationEmail = {
            ...props.modelValue,
            enabled: enabled.value,
            recipientAttributeGuid: toGuidOrNull(recipientAttributeGuidOrEmptyString.value),
            source: source.value
        };

        emit("update:modelValue", newValue);
    });
</script>
