<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TabbedContent
                   :tabs="tabs"
                   v-model:selectedTab="selectedTab"
                   :class="visibleCssClass"
                   selectedTabQueryParameterKey="tab">
        <template #tabpane="{ item }">
            <div v-if="item === 'Learning Plan'">
                <LearningPlanGrid :isAddEnabled="isEditable"
                                  :isDeleteEnabled="isEditable"
                                  getDataActionName="GetLearningPlan"
                                  @addClick="onAddActivityClick"
                                  @rowClick="onActivityRowClick"
                                  @deleteClick="onDeleteActivityClick"
                                  @reorderClick="onReorderActivity" />
            </div>
            <div v-else-if="item === 'Students'">
                <StudentGrid v-if="!isRefreshingStudents"
                             :isAddEnabled="isEditable"
                             :isDeleteEnabled="isEditable"
                             @addClick="onAddStudentClick"
                             @rowClick="onParticipantClick"
                             @deleteClick="onDeleteStudentClick" />
            </div>
            <div v-else-if="item === 'Facilitators'">
                <FacilitatorGrid v-if="!isRefreshingFacilitators"
                                 :isAddEnabled="isEditable"
                                 :isDeleteEnabled="isEditable"
                                 @addClick="onAddFacilitatorClick"
                                 @rowClick="onParticipantClick"
                                 @deleteClick="onDeleteFacilitatorClick" />
            </div>
            <div v-else-if="item === 'Content'">
                <ContentPageGrid :isAddEnabled="isEditable"
                                 :isDeleteEnabled="isEditable"
                                 @addClick="onAddContentPageClick"
                                 @rowClick="onContentPageClick"
                                 @deleteClick="onDeleteContentPageClick" />
            </div>

            <div v-else-if="item === 'Announcements'">
                <AnnouncementGrid :isAddEnabled="isEditable"
                                  :isDeleteEnabled="isEditable"
                                  @addClick="onAddAnnouncementClick"
                                  @rowClick="onAnnouncementClick"
                                  @deleteClick="onDeleteAnnouncementClick" />
            </div>
        </template>
    </TabbedContent>

    <Modal v-model="isParticipantModalOpen" :title="modalTitle" saveText="Save" @save="onSaveParticipant" :isSaveButtonDisabled="isModalSaveButtonDisabled">
        <NotificationBox v-show="participantModalError.length > 0" alertType="danger">
            {{ participantModalError }}
        </NotificationBox>

        <PersonPicker
                      formControlClasses="input-width-md margin-l-sm"
                      v-model="personAlias"
                      :excludeDeceased="true"
                      :enableSelfSelection="true"
                      label="Individual"
                      rules="required" />

        <TextBox
                 v-model="participantNote"
                 label="Note"
                 textMode="multiline"
                 :rows="4" />

        <AttributeValuesContainer v-model="participantAttributeValues" :attributes="participantAttributes" isEditMode :numberOfColumns="2" />
    </Modal>

</template>

<script setup lang="ts">
    import TabbedContent from "@Obsidian/Controls/tabbedContent.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import LearningPlanGrid from "./learningPlanGrid.partial.obs";
    import StudentGrid from "./studentGrid.partial.obs";
    import FacilitatorGrid from "./facilitatorGrid.partial.obs";
    import AnnouncementGrid from "./announcementGrid.partial.obs";
    import ContentPageGrid from "./contentPageGrid.partial.obs";
    import { useBlockBrowserBus, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./types.partial";
    import { computed, PropType, ref } from "vue";
    import { BlockMessages } from "@Obsidian/Utility/browserBus";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { LearningParticipantBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { alert, confirm } from "@Obsidian/Utility/dialogs";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const invokeBlockAction = useInvokeBlockAction();

    // Use the browser bus to listen for changes to edit mode for any blocks on the page.
    const browserBus = useBlockBrowserBus();
    const visibleCssClass = ref("show");

    // When another block on the page begins editing hide this block.
    browserBus.subscribe(BlockMessages.BeginEdit, () => {
        visibleCssClass.value = "hidden";
    });

    // When another block begins editing show this block.
    browserBus.subscribe(BlockMessages.EndEdit, () => {
        visibleCssClass.value = "show";
    });

    // #region Values

    const props = defineProps({
        navigationUrls: {
            type: Object as PropType<Record<string, string> | null>,
            required: false
        },
        isEditable: {
            type: Boolean as PropType<boolean>,
            default: () => false
        },
        showAbsences: {
            type: Boolean as PropType<boolean>,
            default: () => false
        }
    });

    const isEditable = ref(props.isEditable ?? false);
    const navigationUrls = ref(props.navigationUrls ?? {});

    const tabs: Array<string> = ["Learning Plan", "Students", "Facilitators", "Content", "Announcements"];

    // Open the selected tab if one is specified.
    const selectedTab = ref(new URLSearchParams(window.location.search).get("tab") ?? "");

    // Participant Modal properties.
    const participantModalError = ref("");
    const isParticipantModalOpen = ref(false);
    const isAddingFacilitator = ref(false);
    /** Used to force a refresh of the facilitators grid. */
    const isRefreshingFacilitators = ref(false);
    /** Used to force a refresh of the students grid. */
    const isRefreshingStudents = ref(false);
    const modalTitle = ref("Add Student");
    const personAlias = ref<ListItemBag | undefined>();
    const participantNote = ref("");
    const participantAttributes = ref<Record<string, PublicAttributeBag>>({});
    const participantAttributeValues = ref<Record<string, string>>({});

    // #endregion

    // #region Computed Values

    const isModalSaveButtonDisabled = computed(() => isRefreshingStudents.value === true || isRefreshingFacilitators.value === true);

    // #endregion

    // #region Functions

    async function invokeDeleteBlockAction(key: string, gridData: GridDataBag | undefined, blockActionName: string, entityName: string): Promise<void> {
        const result = await invokeBlockAction<string>(blockActionName, {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            alert(result.errorMessage ?? `Unknown error while trying to delete ${entityName}.`);
        }
    }

    function navigateToPage(navigationUrlKey: string, key: string | null): void {
        if (navigationUrls.value[navigationUrlKey]) {
            const idKey = !key ? "0" : key;
            window.location.href = navigationUrls.value[navigationUrlKey].replace("((Key))", idKey);
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when the Add activity button has been clicked by the individual.
     */
    function onActivityRowClick(key: string | null): void {
        navigateToPage(NavigationUrlKey.ActivityDetailPage, key);
    }

    /**
     * Called when the Add activity button has been clicked by the individual.
     */
    function onAddActivityClick(): void {
        navigateToPage(NavigationUrlKey.ActivityDetailPage, `0?autoEdit=true&returnUrl=${encodeURIComponent(window.location.href)}`);
    }

    /**
     * Called when the Add announcement button has been clicked by the individual.
     */
    function onAddAnnouncementClick(): void {
        navigateToPage(NavigationUrlKey.AnnouncementDetailPage, `0?autoEdit=true&returnUrl=${encodeURIComponent(window.location.href)}`);
    }

    /**
     * Called when the Add content page button has been clicked by the individual.
     */
    function onAddContentPageClick(): void {
        navigateToPage(NavigationUrlKey.ContentPageDetailPage, `0?autoEdit=true&returnUrl=${encodeURIComponent(window.location.href)}`);
    }

    /**
     * Called when the Add student button has been clicked by the individual.
     */
    function onAddStudentClick(): void {
        modalTitle.value = "Add Student";
        isAddingFacilitator.value = false;
        isParticipantModalOpen.value = true;
    }

    /**
     * Called when the Add facilitator button has been clicked by the individual.
     */
    function onAddFacilitatorClick(): void {
        modalTitle.value = "Add Facilitator";
        isAddingFacilitator.value = true;
        isParticipantModalOpen.value = true;
    }

    /**
     * Called when an announcement row has been clicked by the individual.
     */
    function onAnnouncementClick(key: string | null): void {
        navigateToPage(NavigationUrlKey.AnnouncementDetailPage, `${key}?returnUrl=${encodeURIComponent(window.location.href)}`);
    }

    /**
     * Called when a content page row has been clicked by the individual.
     */
    function onContentPageClick(key: string | null): void {
        navigateToPage(NavigationUrlKey.ContentPageDetailPage, `${key}?returnUrl=${encodeURIComponent(window.location.href)}`);
    }

    /**
     * Called when a student or facilitator row has been clicked by the individual.
     */
    function onParticipantClick(key: string | null): void {
        navigateToPage(NavigationUrlKey.ParticipantDetailPage, key);
    }

    /**
     * Called when an activity row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteActivityClick(key: string, gridData: GridDataBag | undefined): Promise<void> {
        const activity = gridData?.rows?.find(p => p.idKey === key);
        const hasCompletions = Number(activity?.["completedCount"]) > 0;

        if (hasCompletions) {
            const activityName = gridData?.rows?.find(r => r["idKey"] === key)?.["name"] as string;


            const isConfirmed = await confirm(`The ${activityName} activity has completed activities. Deleting will remove all activity history. Are you sure you want to proceed?`);

            if (isConfirmed) {
                await invokeDeleteBlockAction(key, gridData, "DeleteActivity", "activity");
            }
        }
        else {
            await invokeDeleteBlockAction(key, gridData, "DeleteActivity", "activity");
        }
    }

    /**
     * Called when an activity row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteAnnouncementClick(key: string, gridData: GridDataBag | undefined): Promise<void> {
        await invokeDeleteBlockAction(key, gridData, "DeleteAnnouncement", "announcement");
    }

    /**
     * Called when an activity row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteContentPageClick(key: string, gridData: GridDataBag | undefined): Promise<void> {
        await invokeDeleteBlockAction(key, gridData, "DeleteContentPage", "content page");
    }

    /**
     * Called when a student or faciliator row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteFacilitatorClick(key: string, gridData: GridDataBag | undefined): Promise<void> {
        await invokeDeleteBlockAction(key, gridData, "DeleteParticipant", "participant");
    }

    /**
     * Called when a student or faciliator row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteStudentClick(key: string, gridData: GridDataBag | undefined): Promise<void> {
        const participant = gridData?.rows?.find(p => p.idKey === key);
        const individual = participant?.["name"] as PersonFieldBag;
        let name = "this student";
        if (individual?.nickName) {
            name = `${individual.nickName ?? ""} ${individual.lastName ?? ""}`.trim();
        }

        const hasCompletions = participant?.["hasCompletions"] === true;

        const confirmationMessage = hasCompletions ?
            `${name} has completed activities for this class. Deleting will remove all activity history. Are you sure you want to proceed?` :
            `Are you sure you wish to delete ${name} from the class?`;

        const isConfirmed = await confirm(confirmationMessage);

        if (isConfirmed) {
            invokeDeleteBlockAction(key, gridData, "DeleteParticipant", "participant");
        }
    }

    /**
     * Called when an activity row has been dragged from one position to a new position.
     *
     * @param item The item that was moved to a new position.
     * @param beforeItem The item that the first item was dropped before.
     *
     * @returns `true` if the operation succeeded; otherwise `false`.
     */
    async function onReorderActivity(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
        const result = await invokeBlockAction<string>("ReorderActivity", {
            key: item["idKey"],
            beforeKey: beforeItem?.["idKey"] ?? null
        });

        return result.isSuccess;
    }

    async function onSaveParticipant(): Promise<void> {
        const participant: LearningParticipantBag = {
            currentGradePercent: 0,
            note: participantNote.value,
            personAlias: personAlias.value,
            isFacilitator: isAddingFacilitator.value
        };

        // Force a refresh of the grid data by toggling
        // the v-if condition for the appropriate grid.
        if (isAddingFacilitator.value === true) {
            isRefreshingFacilitators.value = true;
        }
        else {
            isRefreshingStudents.value = true;
        }

        const result = await invokeBlockAction<string>("SaveParticipant", {
            participantBag: participant
        });

        if (result.isSuccess && result.data) {
            // Remove the modal values in preparation for a subsequent selection.
            personAlias.value = undefined;
            participantNote.value = "";
        }

        if (isAddingFacilitator.value === true) {
            isRefreshingFacilitators.value = false;
        }
        else {
            isRefreshingStudents.value = false;
        }

        if (result.isError && result.errorMessage) {
            participantModalError.value = result.errorMessage;
            return;
        }

        if (!result.isSuccess) {
            participantModalError.value = "Unknown error while trying to save the individual.";
            return;
        }

        isParticipantModalOpen.value = false;
    }

    // #endregion

</script>
