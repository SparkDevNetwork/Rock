<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock v-if="!blockError"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :labels="blockLabels"
                 :entityKey="entityKey"
                 :entityTypeGuid="entityTypeGuid"
                 :entityTypeName="partipicantType"
                 :isFullScreenVisible="false"
                 :isAuditHidden="false"
                 :isBadgesVisible="false"
                 :isDeleteVisible="false"
                 :isEditVisible="false"
                 :isFollowVisible="false"
                 :isSecurityHidden="false"
                 @delete="onDelete"
                 @save="onSave">
        <template #view>
            <ViewPanel :modelValue="learningParticipantViewBag" :options="options" />
        </template>

        <template #edit>
            <EditPanel v-model="learningParticipantEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import EditPanel from "./LearningParticipantDetail/editPanel.partial.obs";
    import ViewPanel from "./LearningParticipantDetail/viewPanel.partial.obs";
    import { onConfigurationValuesChanged, useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { LearningParticipantBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantBag";
    import { LearningParticipantDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<LearningParticipantBag, LearningParticipantDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const learningParticipantViewBag = ref(config.entity);
    const learningParticipantEditBag = ref<ValidPropertiesBox<LearningParticipantBag>>({
        bag: {} as LearningParticipantBag
    });

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: learningParticipantEditBag
    });

    const entityTypeGuid = EntityType.LearningParticipant;
    const personAlias = ref(learningParticipantViewBag.value?.personAlias ?? {});
    const semesterName = ref(learningParticipantViewBag.value?.semesterName ?? "");
    const scheduledTime = ref(learningParticipantViewBag.value?.scheduledTime ?? "");
    const panelMode = ref<DetailPanelMode>(learningParticipantViewBag.value?.idKey ? DetailPanelMode.View : DetailPanelMode.Add);

    // #endregion

    // #region Computed Values

    const partipicantType = computed((): string => {
        return learningParticipantViewBag.value?.isFacilitator === true ? "Facilitator" : "Student";
    });

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return [personAlias.value?.text ?? "", semesterName.value, scheduledTime.value].filter(txt => txt?.length > 0).join(" | ");
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return learningParticipantViewBag.value?.idKey ?? "";
    });

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value !== DetailPanelMode.View) {
            return undefined;
        }

        return labels;
    });

    const options = computed((): LearningParticipantDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<false | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<string>("Delete", {
            key: learningParticipantViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete learning participant.";

            return false;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<LearningParticipantBag> | string>("Save", {
            box: learningParticipantEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                learningParticipantViewBag.value = result.data.bag;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save learning participant.";

        return false;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified learning participant could not be viewed.";
    }
    else if (!config.entity.idKey) {
        learningParticipantEditBag.value = { bag: config.entity};
        panelMode.value = DetailPanelMode.Add;
    }
</script>
