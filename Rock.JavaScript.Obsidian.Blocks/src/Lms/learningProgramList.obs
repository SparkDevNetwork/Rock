<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Learning Program"
          :entityTypeGuid="EntityType.LearningProgram"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          tooltipField="publicName"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <Column name="program"
                title="Program"
                width="50%"
                visiblePriority="xs">
            <template #format="{ row }">
                <div class="col-md-1 flex-column">
                    <span class="fa-stack">
                        <i class="fa fa-circle fa-stack-2x" :style="'color: oklch(from ' + row.highlightColor + ' calc(l + .33) c h);'"></i>
                        <i :style="'color: ' + row.highlightColor" :class="row.iconCssClass + ' fa-stack-1x'"></i>
                    </span>
                </div>
                <div class="col-md-11">
                    <span class="text-semibold">{{ row.name }}</span>

                    <div class="text-muted">{{ row.summary }}</div>
                </div>
            </template>
        </Column>
        <Column name="category"
                title="Category"
                :filter="textValueFilter"
                filterValue="category"
                quickFilterValue="category"
                width="15%"
                visiblePriority="lg">
            <template #format="{ row }">
                <span class="label label-default category-label" :style="'color: ' + row.categoryColor">
                    {{ row.category }}
                </span>
            </template>
        </Column>
        <BooleanColumn name="isPublic"
                       title="Public"
                       field="isPublic"
                       width="5%"
                       visiblePriority="xs" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       width="5%"
                       visiblePriority="xs" />

        <template #skeleton>
            <div class="skeleton skeleton-text skeleton-rounded" />
        </template>

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<style scoped>
.flex-column {
    display: flex;
    flex-direction: column;
    min-height: 100%;
    align-items: center;
    justify-content: center;
}

.category-label {
    scale: 1.3;
    align-self: center
}
</style>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { textValueFilter, BooleanColumn, Column, DeleteColumn, SecurityColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningProgramListOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramList/learningProgramListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./LearningProgramList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<LearningProgramListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete learning program.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
