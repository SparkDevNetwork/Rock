<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          title="Programs"
          itemTerm="Learning Program"
          :isCountMessageVisible="false"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          :showExport="false"
          :entityTypeGuid="EntityType.LearningProgram"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          tooltipField="publicName"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <Column name="name"
                title="Program"
                field="name"
                :filter="textValueFilter"
                width="50%"
                visiblePriority="xs">
            <template #format="{ row }">
                <div class="col-md-1 d-flex flex-column align-items-center justify-content-center">
                    <span v-html="getRowBadge(row)"></span>
                </div>
                <div class="col-md-11">
                    <span class="text-semibold">{{ row.name }}</span>

                    <div class="text-muted">{{ row.summary }}</div>
                </div>
            </template>
        </Column>
        <Column name="category"
                title="Category"
                :filter="pickExistingValueFilter"
                width="20%"
                visiblePriority="md">
            <template #format="{ row }">
                <span class="label label-default" :style="'color: ' + row.categoryColor">
                    {{ row.category }}
                </span>
            </template>
        </Column>
        <Column name="configurationMode"
                title="Configuration Mode"
                :filter="pickExistingValueFilter"
                width="20%"
                visiblePriority="md">
            <template #format="{ row }">
                <div class="configuration-mode-container">
                    <span :class="getConfigurationModeLabelClass(row.configurationMode)">
                        {{ getConfigurationModeText(row.configurationMode) }}
                    </span>
                </div>
            </template>
        </Column>
        <BooleanColumn name="isPublic"
                       title="Public"
                       field="isPublic"
                       :filter="booleanValueFilter"
                       width="5%"
                       visiblePriority="lg" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       :filter="booleanValueFilter"
                       width="5%"
                       visiblePriority="lg" />

        <template #skeleton>
            <div class="skeleton skeleton-text skeleton-rounded" />
        </template>

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" :disableConfirmation="true" />
    </Grid>
</template>
<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { textValueFilter, BooleanColumn, Column, DeleteColumn, SecurityColumn, booleanValueFilter, pickExistingValueFilter } from "@Obsidian/Controls/grid";
    import { alert, confirm } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningProgramListOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramList/learningProgramListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./LearningProgramList/types.partial";
    import { reactive, ref } from "vue";
    import { RockColor } from "@Obsidian/Core/Utilities/rockColor";
    import { ConfigurationMode, ConfigurationModeDescription } from "@Obsidian/Enums/Lms/configurationMode";
    import { asBoolean } from "@Obsidian/Utility/booleanUtils";

    const config = useConfigurationValues<ListBlockBox<LearningProgramListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    function getConfigurationModeLabelClass(configurationMode: ConfigurationMode): string {
        return `label label-${configurationMode === ConfigurationMode.AcademicCalendar ? "success" : "info"}`;
    }

    function getConfigurationModeText(configurationMode: ConfigurationMode): string {
        return ConfigurationModeDescription[configurationMode];
    }

    function getRowBadge(row: Record<string, unknown>): string {
        const baseColor = row.highlightColor as string;
        const pair = RockColor.calculateColorPair(new RockColor(baseColor));
        const iconCssClass = row.iconCssClass as string;

        return `
            <span class="fa-stack">
                <i class="fa fa-circle fa-stack-2x" style="color: ${pair.backgroundColor.toRgba()}"></i>
                <i style="color: ${pair.foregroundColor.toRgba()}" class="${iconCssClass} fa-stack-1x"></i>
            </span>`;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {

        const learningClass = gridData?.rows?.find(r => r.idKey === key);
        const programName = learningClass?.["name"] as string ?? "";

        const initialConfirmationMessage = programName.length > 0 ?
            `Are you sure you wish to delete the ${programName} program?` :
            "Are you sure you wish to delete the program?";

        const confirmed = await confirm(initialConfirmationMessage);

        if (!confirmed) {
            return;
        }

        // If there are student completions - ensure the individual
        // is aware that the delete will remove completed activities.
        if (await getHasStudentCompletions(key)) {
            const confirmationMessage = programName.length > 0 ?
                `The ${programName} program has classes with students that have completed activities. Are you sure you want to delete this program and all its related information?` :
                "The program has classes with students that have completed activities. Are you sure you want to delete this program and all its related information?";

            const confirmedDelete = await confirm(confirmationMessage);

            if (!confirmedDelete) {
                return;
            }
        }

        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete learning program.");
        }
    }

    async function getHasStudentCompletions(key: string): Promise<boolean> {
        const result = await invokeBlockAction<string>("HasStudentCompletions", {
            key
        });

        if (result.isSuccess && result.data) {
            return asBoolean(result.data);
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to check learning class student completions.");
        }

        return false;
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0") + "?returnUrl=" + window.location.href;
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>