<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <div class="activities-grid-container">

            <Grid light
                  keyField="idKey"
                  itemTerm="Activity"
                  :data="gridDataSource">

                <TextColumn name="name"
                            title="Name"
                            field="name"
                            visiblePriority="xs" />

                <Column
                        name="type"
                        title="Type"
                        visiblePriority="xs">
                    <template #format="{ row }">
                        <span v-html="getComponentHtml(row)"></span>
                    </template>
                </Column>

                <DateColumn
                            name="dateCompleted"
                            title="Date Completed"
                            visiblePriority="sm">
                </DateColumn>


                <DateColumn
                            name="dateAvailable"
                            title="Date Available"
                            visiblePriority="sm">
                </DateColumn>

                <DateColumn
                            name="dueDate"
                            title="Due Date"
                            visiblePriority="sm">
                </DateColumn>

                <TextColumn
                            name="grade"
                            title="Grade"
                            visiblePriority="sm">
                </TextColumn>
            </Grid>
        </div>
    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, reactive, ref } from "vue";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import Grid, { TextColumn, DateColumn, Column } from "@Obsidian/Controls/grid";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { LearningParticipantBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantBag";
    import { LearningParticipantDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantDetailOptionsBag";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { RockColor } from "@Obsidian/Core/Utilities/rockColor";

    const invokeBlockAction = useInvokeBlockAction();

    const props = defineProps({
        modelValue: {
            type: Object as PropType<LearningParticipantBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<LearningParticipantDetailOptionsBag>,
            required: true
        }
    });

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #region Values

    // #endregion

    // #region Computed Values

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const gradePercentText = props.modelValue.currentGradePercent ? `(${props.modelValue.currentGradePercent}%)` : "";
        const gradeText = props.modelValue.currentGradeText ? `${props.modelValue.currentGradeText} ${gradePercentText}` : gradePercentText;
        valueBuilder.addTextValue("Current Grade", gradeText);

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.absences != null) {
            valueBuilder.addHtmlValue("Absences", `<div class='label label-${props.modelValue.absencesLabelStyle}'>${props.modelValue.absences}</div>`);
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    function getComponentHtml(row: Record<string, unknown>): string {
        const baseColor = row.componentHighlightColor as string;
        const pair = RockColor.calculateColorPair(new RockColor(baseColor));
        const iconCssClass = row.componentIconCssClass as string;

        return `
            <span class="label label-default component-label" style="background-color: ${pair.backgroundColor.toRgba()}">
                <i class="${iconCssClass}" style="color: ${baseColor}"></i>${row.componentName}
            </span>`;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetLearningPlan");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);

            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load learning plan grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    // #endregion

    gridDataSource.value = loadGridData();
</script>
