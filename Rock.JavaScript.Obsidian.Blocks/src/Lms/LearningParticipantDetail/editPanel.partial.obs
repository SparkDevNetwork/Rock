<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <PersonPicker
                      formControlClasses="input-width-md margin-l-sm"
                      v-model="personAlias"
                      :excludeDeceased="true"
                      :enableSelfSelection="true"
                      label="Participant"
                      rules="required" />

        <TextBox
                 v-model="note"
                 label="Note"
                 textMode="multiline"
                 :rows="4" />

    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { LearningParticipantBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantBag";
    import { LearningParticipantDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningParticipantDetail/learningParticipantDetailOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { setPropertiesBoxValue } from "@Obsidian/Utility/block";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<LearningParticipantBag>>,
            required: true
        },

        options: {
            type: Object as PropType<LearningParticipantDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<LearningParticipantBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const personAlias = propertyRef<ListItemBag>(props.modelValue.bag?.personAlias ?? {}, "PersonAlias");
    const participantRole = propertyRef(props.modelValue.bag?.participantRole ?? {}, "ParticipantRole");
    const isFacilitator = ref(props.modelValue.bag?.isFacilitator ?? false);
    const note = ref(props.modelValue.bag?.note ?? "");
    const roleValue = ref(participantRole.value.value ?? "");

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(personAlias, props.modelValue.bag?.personAlias ?? {});
        updateRefValue(roleValue, props.modelValue.bag?.participantRole?.value ?? "");
    });

    // Watch for changes to our monitored values and emit a modelValue change event when necessary.
    watch([personAlias, roleValue], () => {
        const newValue: ValidPropertiesBox<LearningParticipantBag> = {
            bag: { ...props.modelValue.bag } as LearningParticipantBag
        };

        setPropertiesBoxValue(newValue, "personAlias", personAlias.value);
        setPropertiesBoxValue(newValue, "participantRole", { value: roleValue.value });
        setPropertiesBoxValue(newValue, "isFacilitator", isFacilitator.value);

        emit("update:modelValue", newValue);
    });
</script>
