<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock v-if="!blockError"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :entityKey="entityKey"
                 :isAuditHidden="true"
                 :isBadgesVisible="false"
                 :isDeleteVisible="false"
                 :isEditVisible="false"
                 :isFollowVisible="false"
                 :isFullScreenVisible="false"
                 :isSecurityHidden="false"
                 @cancelEdit="onCancelEdit"
                 @edit="onEdit"
                 @save="onSave">
        <template #edit>
            <EditPanel v-model="learningClassAnnouncementEditBag" :options="options" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import EditPanel from "./LearningClassAnnouncementDetail/editPanel.partial.obs";
    import { onConfigurationValuesChanged, useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./LearningClassDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { LearningClassAnnouncementBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningClassAnnouncementDetail/learningClassAnnouncementBag";
    import { LearningClassAnnouncementDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningClassAnnouncementDetail/learningClassAnnouncementDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<LearningClassAnnouncementBag, LearningClassAnnouncementDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const learningClassAnnouncementViewBag = ref(config.entity);
    const learningClassAnnouncementEditBag = ref<ValidPropertiesBox<LearningClassAnnouncementBag>>({
        bag: config.entity as LearningClassAnnouncementBag
    });

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: learningClassAnnouncementEditBag
    });

    const panelMode = ref<DetailPanelMode>(learningClassAnnouncementViewBag.value?.idKey ? DetailPanelMode.Edit : DetailPanelMode.Add);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return panelMode.value === DetailPanelMode.Add ? "Add Class Announcement" : "Edit Class Announcement";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return learningClassAnnouncementViewBag.value?.idKey ?? "";
    });

    const options = computed((): LearningClassAnnouncementDetailOptionsBag => {
        return config.options ?? { };
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
            return config.navigationUrls[NavigationUrlKey.ParentPage];
        }

        return false;
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<LearningClassAnnouncementBag>>("Edit", {
            key: learningClassAnnouncementViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            learningClassAnnouncementEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<LearningClassAnnouncementBag> | string>("Save", {
            box: learningClassAnnouncementEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                learningClassAnnouncementViewBag.value = result.data.bag;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save learning class announcement.";

        return false;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified learning class announcement could not be viewed.";
    }
    else if (!config.entity.idKey) {
        learningClassAnnouncementEditBag.value = { bag: config.entity };
        panelMode.value = DetailPanelMode.Add;
    }
</script>
