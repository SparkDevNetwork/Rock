<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TabbedContent :tabs="courseDetailTabs">
        <template #tabpane="{ item }">
            <div v-if="item === 'Overview'">
                <fieldset>
                    <div class="row">
                        <div class="col-md-6">
                            <TextBox v-model="name"
                                     label="Name"
                                     rules="required" />

                            <TextBox v-model="publicName"
                                     label="Public Name" />

                            <TextBox v-model="courseCode"
                                     class="input-width-md"
                                     label="Course Code"
                                     rules="required" />

                            <NumberBox v-model="credits"
                                       class="input-width-sm"
                                       label="Credits"
                                       rules="required" />

                            <NumberBox v-model="maxStudents"
                                       class="input-width-sm"
                                       label="Maximum Students"
                                       help="The maximum number of students a class can have." />

                            <WorkflowTypePicker
                                       v-model="completionWorkflowType"
                                       label="Completion Workflow Type"
                                       help="The workflow to launch when an individual completes the course." />

                            <CheckBox
                                      v-model="allowHistoricalAccess"
                                      label="Allow Historical Access" />

                            <CheckBox
                                      v-model="enableAnnouncements"
                                      label="Enable Announcements" />

                        </div>
                        <div class="col-md-6">
                            <CheckBox
                                      v-model="isActive"
                                      label="Active" />

                            <CheckBox
                                      v-model="isPublic"
                                      label="Public" />

                            <CategoryPicker
                                            v-model="category"
                                            label="Category"
                                            :entityTypeGuid="EntityType.LearningCourse"
                                            :multiple="false" />

                            <ImageUploader v-model="imageBinaryFile"
                                           label="Image"
                                           :binaryFileTypeGuid="imageFileTypeGuid" />

                            <TextBox
                                     v-model="summary"
                                     label="Summary"
                                     textMode="multiline" />

                            <div class="course-requirements-container">
                                <h4>Requirements</h4>
                                <div class="course-requirements-list" v-if="courseRequirements?.length > 0">
                                    <div class="row text-muted course-requirements-row" v-for="(req, index) in courseRequirements">
                                        <div class="col-xs-12 col-md-7">
                                            <span v-if="req.requiredLearningCourseName">
                                                {{ req.requiredLearningCourseName }}
                                            </span>
                                            <span v-if="req.requiredLearningCourseCode">
                                                - {{ req.requiredLearningCourseCode }}
                                            </span>
                                        </div>
                                        <div class="col-xs-12 col-md-3">
                                            {{ RequirementTypeDescription[req.requirementType ?? ""] ?? "" }}
                                        </div>
                                        <div class="col-xs-12 col-md-2">
                                            <button aria-label="Remove this requirement" class="btn btn-default btn-square remove-answer-button" @click.prevent="courseRequirements.splice(index, 1)">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <button @click="onOpenCourseRequirementModalClick" type="button" class="btn btn-add course-requirements-add-button" title="Add a new course requirement.">
                                    <i class="fa fa-plus fa-fw"></i>
                                </button>
                            </div>

                            <Modal v-model="showAddCourseRequirementModal"
                                   :title="'Add Requirement for ' + modelValue.name"
                                   @save="onAddRequirementClicked"
                                   :isSaveButtonDisabled="!addRequirementType"
                                   saveText="Add Requirement">
                                <div class="row">
                                    <div class="col-md-6">
                                        <RadioButtonList
                                                         v-model="addRequirementType"
                                                         label="Requirement Type"
                                                         horizontal
                                                         rules="required"
                                                         :items="requirementTypes" />
                                    </div>
                                    <div class="col-md-6">
                                        <DropDownList
                                                      v-model="requiredCourse"
                                                      :enhanceForLongLists="courseOptions.length > 10"
                                                      :grouped="false"
                                                      :items="courseOptions"
                                                      rules="required"
                                                      label="Course"
                                                      :multiple="false"
                                                      :showBlankItem="false" />
                                    </div>
                                </div>
                            </Modal>
                        </div>
                    </div>

                    <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
                </fieldset>
            </div>
            <div v-else-if="item === 'Description'">
                <StructuredContentEditor
                                         v-model="description" />
            </div>
        </template>
    </TabbedContent>
</template>

<style scoped>
.course-requirements-add-button {
    float: right;
    margin-top: .6em;
}

.course-requirements-row {
    border-bottom: 1px solid lightgray;
    padding-bottom: .5rem;
    padding-top: .5rem;
}
</style>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CategoryPicker from "@Obsidian/Controls/categoryPicker.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import WorkflowTypePicker from "@Obsidian/Controls/workflowTypePicker.obs";
    import TabbedContent from "@Obsidian/Controls/tabbedContent.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import ImageUploader from "@Obsidian/Controls/imageuploader.obs";
    import { RequirementTypeDescription } from "@Obsidian/Enums/Lms/requirementType";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import { enumToListItemBag } from "@Obsidian/Utility/enumUtils";
    import StructuredContentEditor from "@Obsidian/Controls/structuredContentEditor.obs";
    import { useInvokeBlockAction, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { LearningCourseBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningCourseDetail/learningCourseBag";
    import { LearningCourseDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningCourseDetail/learningCourseDetailOptionsBag";
    import { LearningCourseRequirementBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningCourseRequirement/learningCourseRequirementBag";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { BinaryFiletype } from "@Obsidian/SystemGuids/binaryFiletype";

    const invokeBlockAction = useInvokeBlockAction();

    const props = defineProps({
        modelValue: {
            type: Object as PropType<LearningCourseBag>,
            required: true
        },

        options: {
            type: Object as PropType<LearningCourseDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: LearningCourseBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const courseDetailTabs: Array<string> = ["Overview", "Description"];
    const imageFileTypeGuid = BinaryFiletype.Default;
    const showAddCourseRequirementModal = ref(false);

    // Manually exclude 'Corequisite'. This functionality will be added at a later time.
    const requirementTypes = enumToListItemBag(RequirementTypeDescription).filter(l => l.text !== "Corequisite");

    const addRequirementType = ref<string>();
    const requiredCourse = ref<string>("");
    const courseOptions = ref<ListItemBag[]>([]);

    const attributes = ref(props.modelValue.attributes ?? {});
    const attributeValues = ref(props.modelValue.attributeValues ?? {});
    const summary = propertyRef(props.modelValue.summary ?? "", "Summary");
    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const isPublic = propertyRef(props.modelValue.isPublic ?? false, "IsPublic");
    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const category = propertyRef(props.modelValue.category ?? null, "Category");
    const publicName = propertyRef(props.modelValue.publicName ?? "", "PublicName");
    const courseCode = propertyRef(props.modelValue.courseCode ?? "", "CourseCode");
    const credits = propertyRef(props.modelValue.credits ?? 0, "Credits");
    const maxStudents = propertyRef(props.modelValue.maxStudents, "MaxStudents");
    const completionWorkflowType = propertyRef(props.modelValue.completionWorkflowType ?? {}, "CompletionWorkflowType");
    const allowHistoricalAccess = propertyRef(props.modelValue.allowHistoricalAccess ?? false, "AllowHistoricalAccess");
    const enableAnnouncements = propertyRef(props.modelValue.enableAnnouncements ?? false, "EnableAnnouncements");
    const imageBinaryFile = propertyRef(props.modelValue.imageBinaryFile ?? {}, "ImageBinaryFile");
    const courseRequirements = propertyRef(props.modelValue.courseRequirements ?? [], "CourseRequirements");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [
        name
        , publicName
        , courseCode
        , credits
        , maxStudents
        , allowHistoricalAccess
        , enableAnnouncements
        , completionWorkflowType
        , isActive
        , isPublic
        , summary
        , category
        , imageBinaryFile
        , description
        , courseRequirements
    ];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Called when the Add requirement button has been clicked by the indivual.
     */
    async function onOpenCourseRequirementModalClick(): Promise<void> {
        const hasCourseOptions = courseOptions.value.length > 0;
        if (!hasCourseOptions) {
            const courseListItemsResult = await invokeBlockAction<ListItemBag[]>("GetActiveCourses", {
                key: props.modelValue.idKey
            });

            if (courseListItemsResult.isSuccess && courseListItemsResult.data) {
                courseOptions.value = courseListItemsResult.data;
                courseOptions.value.unshift({value: null, text: ""});
                showAddCourseRequirementModal.value = true;
            }
        }
        else {
            showAddCourseRequirementModal.value = true;
        }

    }

    async function onAddRequirementClicked(): Promise<void> {
        const result = await invokeBlockAction<LearningCourseRequirementBag>("GetCourseRequirementDetail", {
            key: props.modelValue.idKey,
            guid: requiredCourse.value,
            requirementType: addRequirementType.value
        });

        if (result.isSuccess && result.data) {
            courseRequirements.value.push(result.data);
            showAddCourseRequirementModal.value = false;
        }
    }

    /**
     * Called when a requirement row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    // async function onDeleteRequirementClick(key: string | null): Promise<void> {
    //     const result = await invokeBlockAction<string>("DeleteCourseRequirement", {
    //         key
    //     });

    //     if (result.isSuccess) {
    //         if (courseRequirements?.value) {
    //             const index = courseRequirements.value.findIndex(r => r["idKey"] === key);

    //             if (index !== -1) {
    //                 courseRequirements.value.splice(index, 1);
    //             }
    //         }
    //     }
    //     else {
    //         await alert(result.errorMessage ?? "Unknown error while trying to delete learning course requirement.");
    //     }
    // }

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(summary, props.modelValue.summary ?? "");
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(isPublic, props.modelValue.isPublic ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(category, props.modelValue.category ?? {});
        updateRefValue(publicName, props.modelValue.publicName ?? "");
        updateRefValue(courseCode, props.modelValue.courseCode ?? "");
        updateRefValue(credits, props.modelValue.credits ?? 0);
        updateRefValue(maxStudents, props.modelValue.maxStudents);
        updateRefValue(completionWorkflowType, props.modelValue.completionWorkflowType ?? {});
        updateRefValue(allowHistoricalAccess, props.modelValue.allowHistoricalAccess ?? false);
        updateRefValue(enableAnnouncements, props.modelValue.enableAnnouncements ?? false);
        updateRefValue(courseRequirements, props.modelValue.courseRequirements ?? []);
        updateRefValue(imageBinaryFile, props.modelValue.imageBinaryFile ?? {});
        updateRefValue(courseRequirements, props.modelValue.courseRequirements ?? []);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: LearningCourseBag = {
            ...props.modelValue,
            attributeValues: attributeValues.value,
            summary: summary.value,
            description: description.value,
            isActive: isActive.value,
            isPublic: isPublic.value,
            name: name.value,
            category: category.value,
            publicName: publicName.value,
            courseCode: courseCode.value,
            credits: credits.value,
            maxStudents: maxStudents.value,
            completionWorkflowType: completionWorkflowType.value,
            allowHistoricalAccess: allowHistoricalAccess.value,
            enableAnnouncements: enableAnnouncements.value,
            imageBinaryFile: imageBinaryFile.value,
            courseRequirements: courseRequirements.value ?? []
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
