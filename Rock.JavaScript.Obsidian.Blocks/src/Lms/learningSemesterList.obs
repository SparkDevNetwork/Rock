<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid
          v-if="hasLoadedData"
          :definition="config.gridDefinition ?? undefined"
          :class="visibleCssClass"
          :data="gridDataSource"
          keyField="idKey"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          :showExport="false"
          :entityTypeGuid="EntityType.LearningSemester"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          itemTerm="Semester"
          tooltipField="name"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    visiblePriority="xs" />

        <DateColumn name="startDate"
                    title="Start Date"
                    field="startDate"
                    visiblePriority="xs" />

        <DateColumn name="endDate"
                    title="End Date"
                    field="endDate"
                    visiblePriority="sm" />

        <DateColumn name="closeDate"
                    title="Close Date"
                    field="closeDate"
                    visiblePriority="sm" />

        <NumberColumn name="classCount"
                      title="Class Count"
                      field="classCount"
                      visiblePriority="xs" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" :rowDisabled="onDeleteRowDisabled" />
    </Grid>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useBlockBrowserBus, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { NumberColumn, TextColumn, DateColumn, DeleteColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningSemesterListOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningSemesterList/learningSemesterListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { onMounted, reactive, ref } from "vue";
    import { NavigationUrlKey } from "./LearningSemesterList/types.partial";
    import { BlockMessages } from "@Obsidian/Utility/browserBus";

    const config = useConfigurationValues<ListBlockBox<LearningSemesterListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // Use the browser bus to listen for changes to edit mode for any blocks on the page.
    const browserBus = useBlockBrowserBus();
    const hasLoadedData = ref(false);
    const visibleCssClass = ref("show");

    // When another block on the page begins editing hide this block.
    browserBus.subscribe(BlockMessages.BeginEdit, () => {
        visibleCssClass.value = "hidden";
    });

    // When another block begins editing show this block.
    browserBus.subscribe(BlockMessages.EndEdit, () => {
        visibleCssClass.value = "show";
        if (!hasLoadedData.value) {
            gridDataSource.value = loadGridData();
        }
    });

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const canEditProgram = config.options?.canEditProgram ?? false;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            hasLoadedData.value = true;

            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", `0?autoEdit=true&returnUrl=${encodeURIComponent(window.location.href)}`);
        }
    }

    /**
     * Called when a semester row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            alert(result.errorMessage ?? "Unknown error while trying to delete the semester.");
        }
    }

    /**
    * Called when the delete button for a row wants to know if it should be
    * disabled.
    *
    * @param row The row associated with the delete button.
    */
    function onDeleteRowDisabled(row: Record<string, unknown>): boolean {
        return (row.classCount as number) > 0;
    }

    /**
     * undefined if the individual doesn't have permission to edit the program;
     * otherwise a function to be called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    const onSelectItem =
        !canEditProgram ?
            undefined :
            function onSelectItem(key: string): void {
                if (canEditProgram && config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
                    window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key) + "?autoEdit=true&returnUrl=" + encodeURIComponent(window.location.href);
                }
            };

    // #endregion

    onMounted(() => {
        // Because the grid may be hidden when a primary block is hidden
        // only load the grid data if visible. Additionally we need to
        // give time for the autoEdit of detail blocks to emit browserBus events.
        setTimeout(() => {
            if (visibleCssClass.value === "show") {
                gridDataSource.value = loadGridData();
            }
        }, 250);
    });

</script>
