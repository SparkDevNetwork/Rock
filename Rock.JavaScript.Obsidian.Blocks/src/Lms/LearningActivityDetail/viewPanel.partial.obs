<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <ValueDetailList :modelValue="topValues" />

        <div class="row mt-2">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { LearningActivityDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<LearningActivityBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<LearningActivityDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const descriptionAsHtml = props.modelValue?.descriptionAsHtml ?? "";
        if (descriptionAsHtml.length > 0) {
            valueBuilder.addHtmlValue("", descriptionAsHtml);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const averageGradePercentText = props.modelValue?.averageGradePercent?.toFixed(1).toString() ?? "0";
        const labelType = props.modelValue.averageGradeIsPassing ? "success" : "warning";
        const averageScoreHtml = `<span class="label label-${labelType}">${props.modelValue.averageGrade ?? ""} (${averageGradePercentText}%)</span>`;

        valueBuilder.addHtmlValue("Average Score", averageScoreHtml);

        const availableDateText = props.modelValue?.availableDateDescription ?? "";
        if (availableDateText.length > 0){
            valueBuilder.addTextValue("Available", availableDateText);
        }

        const checkmarkIconOrEmpty = props.modelValue.isStudentCommentingEnabled ? "<i class='fa fa-check'></i>" : "";
        if (checkmarkIconOrEmpty.length > 0){
            valueBuilder.addHtmlValue("Student Commenting Enabled", checkmarkIconOrEmpty);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the right side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const pointsText = props.modelValue?.points.toString() ?? "";
        if (pointsText.length > 0) {
            valueBuilder.addTextValue("Points", pointsText);
        }

        const dueDateDescription = props.modelValue?.dueDateDescription ?? "";
        if (dueDateDescription.length > 0){
            valueBuilder.addTextValue("Due Date", dueDateDescription);
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
