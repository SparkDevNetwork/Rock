<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-12">
                <TextBox v-model="description"
                         textMode="multiline"
                         label="Description" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <RadioButtonList v-model="assignTo"
                                 label="Completed By"
                                 horizontal
                                 rules="required"
                                 help="Determines if the activity will be completed by the student or the facilitator."
                                 :items="assignTos" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <DropDownList v-model="availabilityCriteria"
                              :grouped="false"
                              :items="availabilityCriteriaOptions"
                              rules="required"
                              label="Availability Criteria"
                              help="Determines how the date the assignment is available is determined."
                              :multiple="false"
                              :showBlankItem="false" />
            </div>
            <div class="col-md-6">
                <template v-if="availabilityCriteria == AvailabilityCriteria.SpecificDate.toString()">

                    <DatePicker v-model="availableDateDefault"
                                rules="required"
                                label="Available Date" />
                </template>

                <template v-if="[
                    AvailabilityCriteria.ClassStartOffset.toString(),
                    AvailabilityCriteria.EnrollmentOffset.toString()
                ].includes(availabilityCriteria)">

                    <NumberBox v-model="availableDateOffset"
                               label="Available Date Offset"
                               rules="required"
                               help="The number of days from the calculation reference to add before the assignment is available."
                               inputGroupClasses="input-width-md">
                        <template #inputGroupAppend>
                            <span class="input-group-addon">days</span>
                        </template>
                    </NumberBox>
                </template>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <DropDownList v-model="dueDateCriteria" :grouped="false" :items="dueDateCriteriaOptions" rules="required" label="Due Date Criteria" help="Determines how the date the assignment is due is determined." :multiple="false" :showBlankItem="false" />
            </div>
            <div class="col-md-6">
                <template v-if="dueDateCriteria == DueDateCriteria.SpecificDate.toString()">
                    <DatePicker v-model="dueDateDefault" rules="required"
                                label="Due Date" />
                </template>

                <template v-if="[
                    DueDateCriteria.ClassStartOffset.toString(),
                    DueDateCriteria.EnrollmentOffset.toString()
                ].includes(dueDateCriteria)">

                    <NumberBox v-model="dueDateOffset"
                               label="Due Date Offset"
                               rules="required"
                               help="The number of days from the calculation reference to add before the assignment is due."
                               inputGroupClasses="input-width-md">
                        <template #inputGroupAppend>
                            <span class="input-group-addon">days</span>
                        </template>
                    </NumberBox>
                </template>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <DropDownList v-model="activityComponentValue" :grouped="false" :items="activityComponentListItems" rules="required" label="Activity Type" :multiple="false" :showBlankItem="true" />
            </div>

            <div class="col-md-6">
                <NumberBox v-model="points"
                           label="Points"
                           help="This is the total number of points available for this activity."
                           inputGroupClasses="input-width-md" />
            </div>
        </div>

        <!-- Pass the configuration and completion json values to the component. -->
        <activityTypeComponent v-model:activityBag="activityBag" :screenToShow="ComponentScreen.Configuration" />

        <!-- Advanced Settings -->
        <Panel title="Advanced Settings" :hasCollapse="true">
            <div class="row">
                <div class="col-md-6">
                    <WorkflowTypePicker v-model="completionWorkflowType" label="Completion Workflow Type" help="The workflow to launch when an individual completes the activity." />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <CheckBox v-model="isStudentCommentingEnabled" label="Enable Student Commenting" help="Allow students to comment on this assignment." />
                </div>

                <div class="col-md-6">
                    <CheckBox v-model="sendNotificationCommunication" label="Send Notification Communication" help="Determines if a notification should be sent when this activity is available." />
                </div>
            </div>
        </Panel>

    </fieldset>
</template>

<script setup lang="ts">
    import { Component, PropType, computed, defineAsyncComponent, ref, watch } from "vue";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import WorkflowTypePicker from "@Obsidian/Controls/workflowTypePicker.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { ComponentScreen } from "@Obsidian/Controls/Internal/LearningActivity/learningActivity";
    import { setPropertiesBoxValue } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { LearningActivityDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { LearningActivityComponentBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityComponent/learningActivityComponentBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { enumToListItemBag } from "@Obsidian/Utility/enumUtils";
    import { AssignTo, AssignToDescription } from "@Obsidian/Enums/Lms/assignTo";
    import { AvailabilityCriteria } from "@Obsidian/Enums/Lms/availabilityCriteria";
    import { DueDateCriteria } from "@Obsidian/Enums/Lms/dueDateCriteria";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<LearningActivityBag>>,
            required: true
        },

        options: {
            type: Object as PropType<LearningActivityDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<LearningActivityBag>): void
    }>();

    // #region Values

    // Keep track of the configuration if the user switches activity type components.
    const typeConfigMap = new Map<string, string>();

    const assignTos = ref<ListItemBag[]>(enumToListItemBag(AssignToDescription ?? []));
    const activityComponentListItems = ref<ListItemBag[]>(props.options?.activityTypeListItems ?? []);
    const activityComponents = ref<LearningActivityComponentBag[]>(props.options.activityTypes ?? []);
    const activityBag = ref(props.modelValue.bag ?? {} as LearningActivityBag);

    const isNew = activityBag.value.idKey?.length === 0;

    const attributes = ref(activityBag.value?.attributes ?? {});
    const attributeValues = ref(activityBag.value?.attributeValues ?? {});
    const name = propertyRef(activityBag.value?.name ?? "", "Name");
    const description = propertyRef(activityBag.value?.description ?? "", "Description");
    const assignTo = propertyRef(activityBag.value?.assignTo?.toString() ?? "0", "AssignTo");
    const isStudentCommentingEnabled = propertyRef(activityBag.value?.isStudentCommentingEnabled ?? false, "EnableStudentCommenting");
    const availabilityCriteria = propertyRef(activityBag.value?.availabilityCriteria?.toString() ?? "", "AvailabilityCriteria");
    const availableDateDefault = propertyRef(activityBag.value?.availableDateDefault, "AvailableDateDefault");
    const availableDateOffset = propertyRef(activityBag.value?.availableDateOffset, "AvailableDateOffset");
    const dueDateCriteria = propertyRef(activityBag.value?.dueDateCriteria?.toString() ?? "", "DueDateCriteria");
    const dueDateDefault = propertyRef(activityBag.value?.dueDateDefault, "DueDateDefault");
    const dueDateOffset = propertyRef(activityBag.value?.dueDateOffset, "DueDateOffset");
    const sendNotificationCommunication = propertyRef(activityBag.value?.sendNotificationCommunication ?? false, "SendNotificationCommunication");
    const completionWorkflowType = propertyRef(activityBag.value?.completionWorkflowType ?? {}, "CompletionWorkflowType");
    const activityComponentSettingsJson = propertyRef(activityBag.value?.activityComponentSettingsJson ?? "", "ActivityComponentSettingsJson");
    const activityComponent = propertyRef(activityBag.value?.activityComponent ?? {} as LearningActivityComponentBag, "ActivityComponent");

    const points = propertyRef(isNew ? 10 : activityBag.value?.points ?? 10, "Points");

    const activityComponentValue = ref(activityBag.value?.activityComponent?.guid ?? "");

    const availabilityCriteriaOptions = ref<ListItemBag[]>(props.options.availabilityCriteriaOptions ?? []);
    const dueDateCriteriaOptions = ref<ListItemBag[]>(props.options.dueDateCriteriaOptions ?? []);

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [
        name
        , description
        , assignTo
        , isStudentCommentingEnabled
        , availabilityCriteria
        , availableDateDefault
        , availableDateOffset
        , dueDateCriteria
        , dueDateDefault
        , dueDateOffset
        , sendNotificationCommunication
        , completionWorkflowType
        , activityComponent
        , activityComponentSettingsJson
        , points
    ];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Event Handlers

    // #endregion

    const activityTypeComponent = computed((): Component | null => {
        activityComponent.value = activityComponents.value.find(c => c.guid === activityComponentValue.value) ?? {};

        const componentUrl = activityComponent.value?.componentUrl ?? "";
        if (componentUrl.length > 0) {
            return defineAsyncComponent(() => import(componentUrl));
        }
        return null;
    });

    // Make sure the configuration json is in sync with the selected activity type.
    // This will prevent users from losing their configuration when switching activity types.
    // We also need an empty configuration in order to instantiate the defaults in useLearningComponent.
    watch(activityComponentValue, (newValue, oldValue) => {
        const configLength = activityBag.value?.activityComponentSettingsJson?.length ?? 0;
        if (oldValue != null && oldValue.length > 0 && configLength > 0) {
            // Set the old configuraton and map it to the activity type.
            typeConfigMap.set(oldValue, activityComponentSettingsJson.value);
        }

        // Look for a configuration for the new activity type if there was a previous one.
        // Otherwise clear it out so the default constructor can be used to
        // properly generate the refs in the dynamic component.
        activityBag.value.activityComponentSettingsJson = typeConfigMap.has(newValue) ? typeConfigMap.get(newValue) : "";
    });

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.bag?.attributes ?? {});

        updateRefValue(attributeValues, props.modelValue.bag?.attributeValues ?? {});
        updateRefValue(name, props.modelValue.bag?.name ?? "");
        updateRefValue(description, props.modelValue.bag?.description ?? "");
        updateRefValue(assignTo, props.modelValue.bag?.assignTo?.toString() ?? "");
        updateRefValue(isStudentCommentingEnabled, props.modelValue.bag?.isStudentCommentingEnabled ?? false);
        updateRefValue(availabilityCriteria, props.modelValue.bag?.availabilityCriteria?.toString() ?? "");
        updateRefValue(availableDateDefault, props.modelValue.bag?.availableDateDefault);
        updateRefValue(availableDateOffset, props.modelValue.bag?.availableDateOffset);
        updateRefValue(dueDateCriteria, props.modelValue.bag?.dueDateCriteria?.toString() ?? "");
        updateRefValue(dueDateDefault, props.modelValue.bag?.dueDateDefault);
        updateRefValue(dueDateOffset, props.modelValue.bag?.dueDateOffset);
        updateRefValue(sendNotificationCommunication, props.modelValue.bag?.sendNotificationCommunication ?? false);
        updateRefValue(completionWorkflowType, props.modelValue.bag?.completionWorkflowType ?? {});
        updateRefValue(activityComponent, props.modelValue.bag?.activityComponent ?? {});
        updateRefValue(activityComponentSettingsJson, props.modelValue.bag?.activityComponentSettingsJson ?? "{}");
        updateRefValue(points, props.modelValue.bag?.points ?? 0);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        activityBag.value = { ...props.modelValue.bag } as LearningActivityBag;

        const newValue: ValidPropertiesBox<LearningActivityBag> = {
            bag: activityBag.value
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "assignTo", parseInt(assignTo.value) as AssignTo);
        setPropertiesBoxValue(newValue, "isStudentCommentingEnabled", isStudentCommentingEnabled.value);
        setPropertiesBoxValue(newValue, "availabilityCriteria", parseInt(availabilityCriteria.value) as AvailabilityCriteria);
        setPropertiesBoxValue(newValue, "availableDateDefault", availableDateDefault.value);
        setPropertiesBoxValue(newValue, "availableDateOffset", availableDateOffset.value);
        setPropertiesBoxValue(newValue, "dueDateCriteria", parseInt(dueDateCriteria.value) as DueDateCriteria);
        setPropertiesBoxValue(newValue, "dueDateDefault", dueDateDefault.value);
        setPropertiesBoxValue(newValue, "dueDateOffset", dueDateOffset.value);
        setPropertiesBoxValue(newValue, "sendNotificationCommunication", sendNotificationCommunication.value);
        setPropertiesBoxValue(newValue, "completionWorkflowType", completionWorkflowType.value);
        setPropertiesBoxValue(newValue, "activityComponent", activityComponent.value);
        setPropertiesBoxValue(newValue, "activityComponentSettingsJson", activityComponentSettingsJson.value);
        setPropertiesBoxValue(newValue, "points", points.value);

        emit("update:modelValue", newValue);
    });

    watch(activityBag, () => {
        activityComponentSettingsJson.value = activityBag.value?.activityComponentSettingsJson ?? "";
    });
</script>
