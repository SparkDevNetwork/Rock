<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          :class="visibleCssClass"
          keyField="idKey"
          title="Learning Plan Completion Status"
          :entityTypeGuid="EntityType.LearningActivityCompletion"
          :isCountMessageVisible="false"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddCompletionClick : undefined"
          @selectItem="onSelectItem">
        <SelectColumn />

        <PersonColumn name="student"
                      title="Student"
                      field="student"
                      :filter="pickExistingValueFilter"
                      :filterValue="getPersonNameFilterValue"
                      width="15%"
                      visiblePriority="xs">
        </PersonColumn>

        <DateTimeColumn name="completionDate"
                        title="Completion Date"
                        field="completionDate"
                        width="15%"
                        :filter="dateValueFilter"
                        visiblePriority="xs" />

        <DateColumn name="dueDate"
                    title="Due Date"
                    field="dueDate"
                    width="8%"
                    :filter="dateValueFilter"
                    visiblePriority="xs">
            <template #format="{ row }">
                <span :class="{ 'text-warning': row.hadExtension }">
                    {{ RockDateTime.parseISO(row.dueDate as string)?.toLocaleString({
        dateStyle: "short"
    }) }}</span>
            </template>
        </DateColumn>

        <Column name="grade"
                title="Grade"
                field="grade"
                width="10%"
                :filter="numberValueFilter"
                :filterValue="getGradePercentFilterValue"
                visiblePriority="xs">
            <template #format="{ row }">
                <span v-if="!row.isCompleted"></span>
                <span v-else-if="row.isPassingGrade" class="label label-success">{{ row.grade }}</span>
                <span v-else class="label label-warning">{{ row.grade }}</span>
            </template>
        </Column>
        <Column name="statuses"
                title="Statuses"
                field="statuses"
                width="15%"
                :filter="textValueFilter"
                :filterValue="getRowStatusesFilterValue"
                visiblePriority="xs">
            <template #format="{ row }">
                <span v-if="getRequiresScoring(row)" class="mr-1 mb-1 label label-warning">Requires Scoring</span>
                <span v-if="getIsLate(row)" class="mr-1 mb-1 label label-warning">Late</span>
            </template>
        </Column>

        <Column name="comments"
                title="Comments"
                field="comments"
                width="10%"
                :filter="textValueFilter"
                :filterValue="getRowCommentsFilterValue"
                visiblePriority="xs">
            <template #format="{ row }">
                <span v-if="hasValue(row.studentComment)" class="mr-1 mb-1 label label-info">Student</span>
                <span v-if="hasValue(row.facilitatorComment)" class="mr-1 mb-1 label label-default">Facilitator</span>
            </template>
        </Column>
    </Grid>

    <Modal v-model="isAddCompletionModalVisible"
           title="Add Activity"
           @save="onSaveCompletionClick"
           saveText="Add"
           cancelText="Cancel"
           @close="onCloseCompletionModal">

        <DropDownList v-model="studentGuidToAdd"
                      :items="studentsWithoutActivity"
                      label="For Student"
                      help="Select the student to add the activity for." />

    </Modal>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useBlockBrowserBus, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { numberValueFilter, dateValueFilter, textValueFilter, Column, DateColumn, DateTimeColumn, PersonColumn, SelectColumn, pickExistingValueFilter } from "@Obsidian/Controls/grid";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningActivityCompletionListOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityCompletionList/learningActivityCompletionListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./LearningActivityCompletionList/types.partial";
    import { computed, reactive, ref } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { BlockMessages } from "@Obsidian/Utility/browserBus";

    const config = useConfigurationValues<ListBlockBox<LearningActivityCompletionListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const reloadBlock = useReloadBlock();
    onConfigurationValuesChanged(reloadBlock);

    // Use the browser bus to listen for changes to edit mode for any blocks on the page.
    const browserBus = useBlockBrowserBus();
    const visibleCssClass = ref("show");

    // When another block on the page begins editing hide this block.
    browserBus.subscribe(BlockMessages.BeginEdit, () => {
        visibleCssClass.value = "hidden";
    });

    // When another block begins editing show this block.
    browserBus.subscribe(BlockMessages.EndEdit, () => {
        visibleCssClass.value = "show";
    });

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isAddCompletionModalVisible = ref(false);

    const allStudents = ref(config.options?.students ?? []);
    const studentGuidToAdd = ref<string>("");

    // #endregion

    // #region Computed Functions

    const studentsWithoutActivity = computed(() =>
        allStudents.value.filter(s =>
            !gridData?.rows?.find(r => s.value === r["studentGuid"])
        )
    );

    // #endregion

    // #region Functions

    /**
     * Gets the filter value text to use for the statuses column.
     *
     * @param row The row to be filtered.
     */
    function getGradePercentFilterValue(row: Record<string, unknown>): number {
        return row.isCompleted ? (row.gradePercent as number) : -1;
    }

    /**
    * Gets the filter value text to use for the name column.
    *
    * @param row The row to be filtered.
    */
    function getPersonNameFilterValue(row: Record<string, unknown>): string {
        const person = row["individual"] as PersonFieldBag;
        return !person ? "" : `${person.nickName} ${person.lastName}`;
    }

    /**
     * Gets the filter value text to use for the statuses column.
     *
     * @param row The row to be filtered.
     */
    function getRowStatusesFilterValue(row: Record<string, unknown>): string {
        return [
            getRequiresScoring(row) ? "requires scoring" : "",
            getIsLate(row) ? "late: " : "",
        ].join(" ");
    }

    /**
     * Determines whether the activity completion requires scoring.
     * @param row The row from the grid for determining if scoring is required.
     * @returns true if the row requires scoring; otherwise false.
     */
    function getRequiresScoring(row: Record<string, unknown>): boolean {
        const availablePoints = Number(row.points);
        return row.isFacilitatorCompleted === false && row.isStudentCompleted === true && availablePoints > 0;
    }

    /**
     * Determines whether the activity completion is currently or was completed late.
     * @param row The row from the grid for determining if completed late.
     * @returns true if the row is currently or was completed late; otherwise false.
     */
    function getIsLate(row: Record<string, unknown>): boolean {
        const dueDate = RockDateTime.parseISO(row.dueDate as string);
        const isLate = dueDate != null && dueDate >= RockDateTime.now();
        const isStudentCompleted = row.isStudentCompleted === true;
        const wasCompletedLate = isStudentCompleted && row.wasCompletedOnTime === false;
        return (isLate && !isStudentCompleted) || wasCompletedLate;
    }

    /**
     * Gets the filter value text to use for the comments column.
     *
     * @param row The row to be filtered.
     */
    function getRowCommentsFilterValue(row: Record<string, unknown>): string {
        // Include the comments as well as the keyword of the label.
        return [
            hasValue(row.studentComment as string) ? "student: " + row.studentComment as string : "",
            hasValue(row.facilitatorComment as string) ? "facilitator: " + row.studentComment as string : "",
        ].join(" ");
    }

    function hasValue(text: string): boolean {
        return text?.length > 0;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);

            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when the Add button has been clicked by the individual.
     */
    function onAddCompletionClick(): void {
        isAddCompletionModalVisible.value = true;
    }

    /**
     * Called when the Add button has been clicked in the Add Student modal.
     */
    async function onSaveCompletionClick(): Promise<void> {
        const result = await invokeBlockAction<GridDataBag>("AddStudent", {
            participantGuid: studentGuidToAdd.value
        });

        if (result.isSuccess) {
            isAddCompletionModalVisible.value = false;
            reloadBlock();
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to add student.");
        }
    }

    /**
     * Called when the Cancel button of the Add Completion modal has been clicked by the individual.
     */
    function onCloseCompletionModal(): void {
        isAddCompletionModalVisible.value = true;
    }

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
