<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock
                 v-if="!blockError"
                 v-model:mode="panelMode"
                 :isFullScreenVisible="false"
                 :isAuditHidden="false"
                 :name="panelName"
                 :alwaysShowLabels="true"
                 :labels="blockLabels"
                 :entityKey="entityKey"
                 :entityTypeGuid="entityTypeGuid"
                 entityTypeName="Activity"
                 :isBadgesVisible="false"
                 :isSecurityHidden="true"
                 :footerSecondaryActions="footerSecondaryActions"
                 :isEditVisible="isEditable"
                 @cancelEdit="onCancelEdit"
                 @edit="onEdit"
                 @save="onSave">
        <template #view>
            <ViewPanel :modelValue="learningActivityViewBag" :options="options" :hasFullScreen="false" />
        </template>
        <template #edit>
            <EditPanel v-model="learningActivityEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" :hasFullScreen="false" />

            <Modal
                   v-model="showDueDateChangeConfirmation"
                   title="Confirm Due Date Change"
                   saveText="Update All"
                   saveThenAddText="Update Matching"
                   :onSave="onSaveWithUpdateAllDueDatesConfirmed"
                   @saveThenAdd="onSaveWithUpdateMatchingDueDatesConfirmed">
                You are about to change the due date for this assignment.
                Please select how you want these changes applied.
                You can update the due date for all students, only those with the original due date, or cancel if you don't want to proceed.
            </Modal>

            <Modal
                   v-model="showAvailabilityChangeConfirmation"
                   title="Confirm Availability Change"
                   saveText="Update All"
                   :onSave="onSaveAvailabilityConfirmed">
                You are about to change the availability date for this assignment.
                This update will apply to all students in the class.
                Please confirm if you would like to proceed or cancel.
            </Modal>
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { onConfigurationValuesChanged, useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { LearningActivityDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import EditPanel from "./LearningActivityDetail/editPanel.partial.obs";
    import ViewPanel from "./LearningActivityDetail/viewPanel.partial.obs";
    import { NavigationUrlKey } from "./LearningActivityDetail/types.partial";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { DueDateChangeType } from "@Obsidian/Enums/Lms/dueDateChangeType";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { AvailabilityCriteria } from "@Obsidian/Enums/Lms/availabilityCriteria";
    import { DueDateCriteria } from "@Obsidian/Enums/Lms/dueDateCriteria";
    import { PromiseCompletionSource } from "@Obsidian/Utility/promiseUtils";

    const config = useConfigurationValues<DetailBlockBox<LearningActivityBag, LearningActivityDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    const entityTypeGuid = EntityType.LearningActivity;

    // #region Values

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const blockError = ref("");
    const errorMessage = ref("");
    const showDueDateChangeConfirmation = ref(false);
    const showAvailabilityChangeConfirmation = ref(false);

    const learningActivityViewBag = ref(config.entity);
    const learningActivityEditBag = ref<ValidPropertiesBox<LearningActivityBag>>({
        bag: {} as LearningActivityBag
    });

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: learningActivityEditBag
    });

    const isNewActivity = !learningActivityViewBag.value?.idKey;

    // #endregion

    // #region Computed Values

    // If the due or available date criteria is changed
    // we will compare the new values to the original
    // and prompt the individual to confirm the change
    // as well the method for updating (Due Dates only).
    const originalDueDateCriteria = computed(() => learningActivityViewBag.value?.dueDateCriteria);
    const originalDueDateDefault = computed(() => RockDateTime.parseISO(learningActivityViewBag.value?.dueDateDefault ?? ""));
    const originalDueDateOffset = computed(() => learningActivityViewBag.value?.dueDateOffset);
    const originalAvailabilityCriteria = computed(() => learningActivityViewBag.value?.availabilityCriteria);
    const originalAvailableDateDefault = computed(() => RockDateTime.parseISO(learningActivityViewBag.value?.availableDateDefault ?? ""));
    const originalAvailableDateOffset = computed(() => learningActivityViewBag.value?.availableDateOffset);

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value === DetailPanelMode.Add) {
            return labels;
        }

        labels.push({
            title: `Completions: ${learningActivityViewBag.value?.completeCount ?? "0"} (${learningActivityViewBag.value?.percentComplete?.toFixed(0) ?? 0}%)`,
            type: "info",
            iconCssClass: "fa fa-group"
        });

        if (learningActivityViewBag.value?.isPastDue) {
            labels.push({
                title: "Past Due",
                type: "warning"
            });
        }

        return labels;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): LearningActivityDetailOptionsBag => {
        return config.options ?? { hasCompletions: false, availabilityCriteriaOptions: [], dueDateCriteriaOptions: [] };
    });

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return learningActivityViewBag.value?.name ?? "";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return learningActivityViewBag.value?.idKey ?? "";
    });

    /**
     * The footer secondary actions for the block panel.
     */
    const footerSecondaryActions = computed((): PanelAction[] => {
        if (panelMode.value != DetailPanelMode.View) {
            return [];
        }

        const secondaryActions: PanelAction[] = [];

        if (isEditable.value === true) {
            secondaryActions.push({
                iconCssClass: "fa fa-copy",
                title: "Copy Activity",
                type: "default",
                handler: onCopy
            });
        }

        return secondaryActions;
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Called when the copy icon on the detail block has been clicked.
     */
    async function onCopy(): Promise<void> {
        errorMessage.value = "";
        var result = await invokeBlockAction<string>("Copy", {
            key: learningActivityViewBag.value?.idKey ?? ""
        });
        if (result.isSuccess && result.data && typeof result.data === "string") {
            window.location.href = makeUrlRedirectSafe(result.data);
            return;
        }
        errorMessage.value = result.errorMessage ?? "Unknown error while trying to copy activity.";
    }

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        if (!learningActivityEditBag.value?.bag?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                return config.navigationUrls[NavigationUrlKey.ParentPage];
            }

            return false;
        }

        return true;
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<LearningActivityBag>>("Edit", {
            key: learningActivityViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            learningActivityEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };

            return true;
        }
        else {
            return false;
        }
    }

    /** Determines whether the available date configuration has had any changes since the last save. */
    const hasAvailabilityChanges = computed((): boolean => {
        const currentDateMs = RockDateTime.parseISO(learningActivityEditBag.value?.bag?.availableDateDefault ?? "")?.toMilliseconds() ?? 0;
        const originalDateMs = originalAvailableDateDefault.value?.date.toMilliseconds() ?? 0;

        return !isNewActivity
            && (learningActivityEditBag.value?.bag?.availabilityCriteria !== originalAvailabilityCriteria.value
                || currentDateMs !== originalDateMs
                || learningActivityEditBag.value?.bag?.availableDateOffset !== originalAvailableDateOffset.value);
    });

    /** Determines whether the due date configuration has had any changes since the last save. */
    const hasDueDateChanges = computed((): boolean => {
        const currentDateMs = RockDateTime.parseISO(learningActivityEditBag.value?.bag?.dueDateDefault ?? "")?.toMilliseconds() ?? 0;
        const originalDateMs = originalDueDateDefault.value?.date.toMilliseconds() ?? 0;

        return !isNewActivity
            && (learningActivityEditBag.value?.bag?.dueDateCriteria !== originalDueDateCriteria.value
                || currentDateMs !== originalDateMs
                || learningActivityEditBag.value?.bag?.dueDateOffset !== originalDueDateOffset.value);
    });

    /**
     * Calls to the block action for updating activity completion instance records
     * for all records.
     */
    async function onSaveWithUpdateAllDueDatesConfirmed(): Promise<void> {
        console.warn("onSaveWithUpdateAllDueDatesConfirmed", dueDateCriteriaConfirmedSource);
        if (learningActivityEditBag.value?.bag && !isNewActivity) {
            learningActivityEditBag.value.bag.dueDateChangeType = DueDateChangeType.UpdateAll;
        }

        showDueDateChangeConfirmation.value = false;
        dueDateCriteriaConfirmedSource.resolve();
    }

    /**
     * Calls to the block action for updating activity completion instance records
     * where the due date matches the previous value.
     */
    async function onSaveWithUpdateMatchingDueDatesConfirmed(): Promise<void> {
        console.warn("onSaveWithUpdateMatchingDueDatesConfirmed", dueDateCriteriaConfirmedSource);
        if (learningActivityEditBag.value?.bag && !isNewActivity) {
            learningActivityEditBag.value.bag.dueDateChangeType = DueDateChangeType.UpdateMatching;
        }

        showDueDateChangeConfirmation.value = false;
        dueDateCriteriaConfirmedSource.resolve();
    }

    async function onSaveAvailabilityConfirmed(): Promise<void> {
        console.warn("onSaveAvailabilityConfirmed", availabilityCriteriaConfirmedSource);
        showAvailabilityChangeConfirmation.value = false;
        availabilityCriteriaConfirmedSource.resolve();
    }

    /**
     * Removes availableDateDefault and/or availableDateOffset values for
     * availabilityCriteria where those fields are not applicable.
     */
    function removeUnsetAvailabilityDateFields(): void {
        if (!learningActivityEditBag.value.bag) {
            return;
        }

        if (learningActivityEditBag.value.bag.availabilityCriteria !== AvailabilityCriteria.SpecificDate) {
            learningActivityEditBag.value.bag.availableDateDefault = null;
        }

        const offsetBasedCriteria: AvailabilityCriteria[] = [AvailabilityCriteria.ClassStartOffset, AvailabilityCriteria.EnrollmentOffset];
        if (!offsetBasedCriteria.includes(learningActivityEditBag.value.bag.availabilityCriteria)) {
            learningActivityEditBag.value.bag.availableDateOffset = null;
        }
    }

    /**
     * Removes dueDateDefault and/or dueDateOffset values for
     * dueDateCriteria where those fields are not applicable.
     */
    function removeUnsetDueDateFields(): void {
        if (!learningActivityEditBag.value.bag) {
            return;
        }

        if (learningActivityEditBag.value.bag.dueDateCriteria !== DueDateCriteria.SpecificDate) {
            learningActivityEditBag.value.bag.dueDateDefault = null;
        }

        const offsetBasedCriteria: DueDateCriteria[] = [DueDateCriteria.ClassStartOffset, DueDateCriteria.EnrollmentOffset];
        if (!offsetBasedCriteria.includes(learningActivityEditBag.value.bag.dueDateCriteria)) {
            learningActivityEditBag.value.bag.dueDateOffset = null;
        }
    }

    /** The promise sources for the confirmation of date criteria changes  */
    let availabilityCriteriaConfirmedSource = new PromiseCompletionSource<void>();
    let dueDateCriteriaConfirmedSource = new PromiseCompletionSource<void>();

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        if (hasDueDateChanges.value === false) {
            // If the due date criteria has not changed
            // resolve the confirmation promise.
            dueDateCriteriaConfirmedSource.resolve();
        }
        else {
            // If the due date criteria has changed
            // update any other due date fields as necessary
            // and create a new confirmation promise.
            removeUnsetDueDateFields();
            showDueDateChangeConfirmation.value = true;
            dueDateCriteriaConfirmedSource = new PromiseCompletionSource<void>();
        }

        if (hasAvailabilityChanges.value === false) {
            // If the available date criteria has not changed
            // resolve the confirmation promise.
            availabilityCriteriaConfirmedSource.resolve();
        }
        else {
            // If the availability date criteria has changed
            // update any other availability date fields as necessary
            // and create a new confirmation promise.
            removeUnsetAvailabilityDateFields();
            showAvailabilityChangeConfirmation.value = true;
            availabilityCriteriaConfirmedSource = new PromiseCompletionSource<void>();
        }

        // Wait for confirmations before saving.
        return await Promise.all([dueDateCriteriaConfirmedSource.promise, availabilityCriteriaConfirmedSource.promise]).then(
            async () => {
                // On confirmed try to save.
                errorMessage.value = "";

                await onSaveInternal();
                const hasError = errorMessage.value;

                return !hasError;
            }, async () => {
                // onrejected hide any additional modals.
                showDueDateChangeConfirmation.value = false;
                showAvailabilityChangeConfirmation.value = false;
                return false;
            });
    }

    /** Shared method for saving the activity details (after any modals have been shown). */
    async function onSaveInternal(): Promise<void> {
        const result = await invokeBlockAction<ValidPropertiesBox<LearningActivityBag> | string>("Save", {
            box: learningActivityEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                learningActivityViewBag.value = result.data.bag;
            }
        }

        if (!result.isSuccess) {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save the learning activity.";
        }

        panelMode.value = DetailPanelMode.View;
    }

    // #endregion

</script>
