<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

</fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { LearningClassBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningClassDetail/learningClassBag";
    import { LearningClassDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningClassDetail/learningClassDetailOptionsBag";
    import { ConfigurationMode } from "@Obsidian/Enums/Lms/configurationMode";

    const props = defineProps({
    modelValue: {
    type: Object as PropType<LearningClassBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<LearningClassDetailOptionsBag>,
            required: true
        }
    });

    // #region Values


    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.description) {
            valueBuilder.addTextValue("", props.modelValue.description);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const courseName = props.modelValue.courseName ?? "";
        if (courseName.length > 0) {
            valueBuilder.addTextValue("Course", courseName);
        }

        if (props.options.programConfigurationMode === ConfigurationMode.AcademicCalendar) {
            const semesterText = props.modelValue.semester?.text ?? "";

            if (semesterText.length > 0) {
                valueBuilder.addTextValue("Semester", semesterText);
            }
        }

        const facilitatorsText = props.modelValue.facilitators?.map(f => {
            return `<li><a href="/person/${f.idKey}">${f.facilitatorName}</a><span class="ml-1 text-muted">${f.facilitatorRole}</span></li>`;
        }).join("") ?? "";

        if (facilitatorsText.length > 0) {
            valueBuilder.addHtmlValue("Facilitators", `<ul>${facilitatorsText}</ul>`);
        }
        return valueBuilder.build();
    });

    /** The values to display at half-width on the right side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        const courseCode = props.modelValue.courseCode ?? "";
        if (courseCode.length > 0) {
            valueBuilder.addTextValue("Course Code", courseCode);
        }

        const schedule = props.modelValue.schedule?.text ?? "";
        let fieldText = props.modelValue.location?.text  ?? "";
        if (schedule.length > 0) {
            fieldText += (fieldText.length > 0 ? " - " : "") + schedule;
        }

        if (fieldText.length > 0){
            valueBuilder.addTextValue("Location / Schedule",  fieldText);
        }

        const gradeText = props.modelValue.gradingSystem?.text ?? "";
        if (gradeText.length > 0){
            valueBuilder.addTextValue("Grading System", gradeText);
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
