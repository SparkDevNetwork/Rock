<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          :showExport="false"
          itemTerm="Completion"
          :entityTypeGuid="EntityType.LearningProgramCompletion"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem">
        <SelectColumn />

        <PersonColumn
                      name="individual"
                      title="Individual"
                      field="individual"
                      :filter="pickExistingValueFilter"
                      :filterValue="getPersonNameFilterValue"
                      visiblePriority="sm" />

        <TextColumn
                    name="campus"
                    title="Campus"
                    field="campus"
                    :filter="textValueFilter"
                    visiblePriority="sm" />

        <TextColumn
                    v-if="config.options?.showSemesterColumn"
                    name="semester"
                    title="Semester"
                    field="semester"
                    :filter="textValueFilter"
                    visiblePriority="sm" />

        <DateColumn
                    name="startDate"
                    title="Start Date"
                    field="startDate"
                    :filter="dateValueFilter"
                    visiblePriority="sm" />

        <DateColumn
                    name="endDate"
                    title="End Date"
                    field="endDate"
                    :filter="dateValueFilter"
                    visiblePriority="sm" />

        <Column
                name="status"
                title="Status"
                field="status"
                :filter="pickExistingValueFilter"
                width="10%"
                visiblePriority="sm">
            <template #format="{ row }">
                <span :class="'label label-' + statusLabelTypeMap[row.status] + ' category-label'">
                    {{ CompletionStatusDescription[row.status] }}
                </span>
            </template>
        </Column>

        <Column
                name="profile"
                title=""
                width="48px"
                visiblePriority="md">
            <template #format="{ row }">
                <i class="fa fa-user pr-3" @click="onPersonProfileClick(row.individual?.idKey)"></i>
            </template>
        </Column>
    </Grid>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { textValueFilter, dateValueFilter, pickExistingValueFilter, Column, TextColumn, DateColumn, PersonColumn, SelectColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningProgramCompletionListOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramCompletionList/learningProgramCompletionListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./LearningProgramCompletionList/types.partial";
    import { reactive, ref } from "vue";
    import { CompletionStatusDescription } from "@Obsidian/Enums/Lms/completionStatus";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const config = useConfigurationValues<ListBlockBox<LearningProgramCompletionListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const statusLabelTypeMap: Array<string> = ["default", "default", "success", "warning"];

    // #endregion

    // #region Functions

    /**
    * Gets the filter value text to use for the name column.
    *
    * @param row The row to be filtered.
    */
    function getPersonNameFilterValue(row: Record<string, unknown>): string {
        const person = row["individual"] as PersonFieldBag;
        return !person ? "" : `${person.nickName} ${person.lastName}`;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    function onPersonProfileClick(idKey: string): void {
        if (idKey?.length > 0) {
            window.location.href = `/person/${idKey}`;
        }
    }

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
