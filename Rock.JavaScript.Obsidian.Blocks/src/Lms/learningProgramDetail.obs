<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <DetailBlock
                    v-if="!blockError"
                    v-model:mode="panelMode"
                    :alwaysShowLabels="true"
                    :isFullScreenVisible="false"
                    :isAuditHidden="true"
                    :name="panelName"
                    :labels="blockLabels"
                    :entityKey="entityKey"
                    :entityTypeGuid="entityTypeGuid"
                    entityTypeName="LearningProgram"
                    :isBadgesVisible="false"
                    :isSecurityHidden="isSecurityHidden"
                    :footerSecondaryActions="footerSecondaryActions"
                    :headerActions="headerSecondaryActions"
                    :isEditVisible="showEditButton"
                    :onDelete="onDelete"
                    @cancelEdit="onCancelEdit"
                    @edit="onEdit"
                    @save="onSave">
        <template #view>
            <ViewPanel :modelValue="learningProgramViewBag" :options="options" :hasFullScreen="false" />

            <Modal v-model="showDetailsModal" title="Additional Details">
                <AdditionalDetailsModal :modelValue="learningProgramAdditionalDetailsBag" />
            </Modal>
        </template>
        <template #edit>
            <EditPanel v-model="learningProgramEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" :hasFullScreen="false" />
        </template>
    </DetailBlock>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import Modal from "@Obsidian/Controls/modal.obs";
    import EditPanel from "./LearningProgramDetail/editPanel.partial.obs";
    import ViewPanel from "./LearningProgramDetail/viewPanel.partial.obs";
    import AdditionalDetailsModal from "./LearningProgramDetail/additionalDetailsModal.obs";
    import { onConfigurationValuesChanged, useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./LearningProgramDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { LearningProgramBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramDetail/learningProgramBag";
    import { LearningProgramDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramDetail/learningProgramDetailOptionsBag";
    import { ConfigurationModeDescription } from "@Obsidian/Enums/Lms/configurationMode";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<LearningProgramBag, LearningProgramDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");
    const showDetailsModal = ref(false);

    const learningProgramViewBag = ref(config.entity);
    const learningProgramEditBag = ref<ValidPropertiesBox<LearningProgramBag>>({bag: {} as LearningProgramBag});
    const learningProgramAdditionalDetailsBag = ref(config.entity);
    const displayMode = ref(config.options?.displayMode ?? "Summary");

    const entityTypeGuid = EntityType.LearningProgram;

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: learningProgramEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => learningProgramViewBag.value?.name ?? "");

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => learningProgramViewBag.value?.idKey ?? "");

    const headerSecondaryActions = computed((): PanelAction[] => {
        return [
            {
                iconCssClass: "fa fa-ellipsis-v",
                title: "Additional Details",
                type: "default",
                handler: async () => {
                    if (await onViewAdditionalDetailsModal()) {
                        showDetailsModal.value = true;
                    }
                }
            }
        ];
    });

    /** Whether the security icon should be hidden. */
    const isSecurityHidden = computed(() => displayMode.value === "Summary");

    /**
     * Additional labels to display in the block panel.
     */
    const blockLabels = computed((): PanelAction[] | undefined => {
        const labels: PanelAction[] = [];

        if (panelMode.value === DetailPanelMode.Add) {
            return undefined;
        }

        if (learningProgramViewBag.value?.configurationMode != null) {

            labels.push({
                title: ConfigurationModeDescription[learningProgramViewBag.value.configurationMode],
                type: "default"
            });
        }

        if (learningProgramViewBag.value?.category) {
            labels.push({
                title: learningProgramViewBag.value?.category.text ?? "",
                type: learningProgramViewBag.value?.categoryColor ?? "info"
            });
        }

        if (learningProgramViewBag.value?.isPublic === true) {
            labels.push({
                title: "Public",
                type: "success"
            });
        }
        else {
            labels.push({
                title: "Internal",
                type: "warning"
            });
        }

        if (learningProgramViewBag.value?.isActive === true) {
            labels.push({
                iconCssClass: "fa fa-lightbulb",
                title: "Active",
                type: "success"
            });
        }
        else {
            labels.push({
                iconCssClass: "far fa-lightbulb",
                title: "Inactive",
                type: "danger"
            });
        }

        return labels;
    });

    /**
     * The footer secondary actions for the block panel.
     */
    const footerSecondaryActions = computed((): PanelAction[] => {
        if (panelMode.value != DetailPanelMode.View) {
            return [];
        }

        const secondaryActions: PanelAction[] = [];

        if (displayMode.value === "Summary") {
            secondaryActions.push({
                iconCssClass: "fa fa-cog",
                title: "Configure",
                type: "default",
                handler: async () => {
                    await onConfigure();
                }
            });
        }

        return secondaryActions;
    });

    const isEditable = computed((): boolean => config.isEditable === true);

    const options = computed((): LearningProgramDetailOptionsBag => {
        return config.options ?? { displayMode: "Summary" };
    });

    const showEditButton = computed((): boolean => {
        return displayMode.value === "Detail" && isEditable.value;
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        if (!learningProgramEditBag.value?.bag?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                return config.navigationUrls[NavigationUrlKey.ParentPage];
            }

            return false;
        }

        return true;
    }

    /**
     * Event handler for the Configure button being clicked (the Cog icon).
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
     async function onConfigure(): Promise<boolean | string>{
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage];
        }

        return false;
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<false | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<string>("Delete", {
            key: learningProgramViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete learning program.";

            return false;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<LearningProgramBag>>("Edit", {
            key: learningProgramViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            learningProgramEditBag.value.bag = result.data.bag;

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<LearningProgramBag> | string>("Save", {
            box: learningProgramEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                learningProgramViewBag.value = result.data.bag;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save the learning program.";

        return false;
    }

    /**
     * Event handler for the Additional Details Modal button being clicked.
     * Request all attribute details from the server and then show the modal.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onViewAdditionalDetailsModal(): Promise<boolean> {
        errorMessage.value = "";

        const result = await invokeBlockAction<LearningProgramBag | string>("GetEntityBagWithAllAttributes");

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                learningProgramAdditionalDetailsBag.value = result.data;
                return true;
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to get additional details.";
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to get additional details.";
        return false;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified learning program could not be viewed.";
    }
    else if (!config.entity.idKey) {
        learningProgramEditBag.value.bag = config.entity;
        panelMode.value = DetailPanelMode.Add;
    }

</script>
