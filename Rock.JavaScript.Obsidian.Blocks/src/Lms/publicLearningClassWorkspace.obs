<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="workspace-page-container">
        <div v-html="headerHtml"></div>

        <div class="workspace-block-error-notification">
            <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

            <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>
        </div>

        <div class="workspace-block-container">
            <div class="workspace-tab-bar panel-toolbar panel-toolbar-shadow" v-if="isAcademicCalendarMode">
                <ul class="nav nav-pills nav-sm">
                    <li v-for="tab in tabs" role="presentation" :class="{ 'active': tab === selectedTab }">
                        <a href="#" @click.preventDefault="onSelectTab(tab)">{{ tab }}</a>
                    </li>
                </ul>

                <div class="pull-right" v-if="isFacilitator">
                    <a :href="facilitatorPortalUrl">Facilitator Portal</a>
                </div>
            </div>

            <div class="content-page-section" v-if="selectedContentTab">
                <div class="content-page-container">
                    <div class="content-page-title h3">
                        {{ selectedContentTab.title }}
                    </div>
                    <div class="content-page-content">
                        <span v-html="selectedContentTab.content"></span>
                    </div>
                </div>
            </div>

            <div class="workspace-class-overview" v-if="selectedTab === overviewTab">
                <div class="main-content">
                    <div class="notifications-header h3">
                        Notifications
                    </div>
                    <div class="notifications-section">
                        <template v-for="notification in notifications" ::key="notification.idKey">
                            <div class="notification-container">
                                <div class="notification-badge">
                                    <span :class="'badge badge-' + notification.labelType">
                                        {{ notification.labelText }}
                                    </span>
                                </div>
                                <div class="notification-title">
                                    {{ notification.title }}
                                </div>
                                <div class="notification-content">
                                    {{ notification.content }}
                                </div>
                            </div>
                        </template>
                    </div>

                    <div class="announcements-section">
                        <div class="announcements-header h3">
                            Announcements
                        </div>
                        <template v-for="announcement in announcements" :key="announcement.idKey">
                            <div class="announcement-container">
                                <div class="announcement-date">
                                    {{ formattedDate(announcement.publishDateTime) }}
                                </div>
                                <div class="announcement-title">
                                    {{ announcement.title }}
                                </div>
                                <div class="announcement-content">
                                    <span v-html="announcement.description"></span>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
                <div class="side-content">
                    <div class="class-progress-section">
                        <div class="facilitators-label h4">
                            {{ facilitatorsLabel }}
                        </div>
                        <div class="facilitators-list d-flex flex-column">
                            <span v-for="f in facilitators" :key="f.idKey ?? ''" class="facilitator-list-item">
                                <a v-if="f.facilitatorEmail" :href="'mailto:' + f.facilitatorEmail"> {{f.facilitatorEmail}}</a>
                                {{ f.facilitatorName }}
                            </span>
                        </div>

                        <div class="class-progress-label h4 mt-4">
                            Class Progress
                        </div>
                        <div class="class-progress-bar">
                            <ProgressBar :percent="percentComplete" />
                        </div>
                        <div class="class-progress-tasks">
                            {{ completedActivitiesCount }} out of {{ activities.length }} {{ pluralize('task', activities.length) }} completed
                        </div>

                        <div class="current-grade-label h4 mt-4" v-if="showGrades">
                            Current Grade
                        </div>
                        <div class="current-grade" v-if="showGrades && currentGrade">
                            <span v-if="showGrades && currentGrade"
                                :class="['label', currentGrade.isPassing ? 'label-success' : 'label-warning']">
                                {{ currentGrade.name ?? '' }}
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="workspace-block-content" v-if="selectedTab === activitiesTab">
                <div class="workspace-navigation-pane">
                    <div class="activity-navigation-item-container"
                         @click="selectActivity(activity)"
                         :class="getActivityContainerClasses(activity)"
                         v-for="(activity, index) in activities" :key="activity.idKey ?? activity.activityBag?.idKey ?? ''">
                        <div>
                            <span class="icon-stack-container fa-stack">
                                <i :class="activityIconStackClasses(activity)"></i>
                                <i class="icon fa-stack-1x" :class="activity.activityBag?.activityComponent?.iconCssClass"></i>
                            </span>
                        </div>
                        <div class="activity-item-details">
                            <div class="activity-item-name">
                                {{ activity?.activityBag?.name }}
                            </div>
                            <div class="activity-item-time" :class="{'text-warning' : isDueSoonAndIncomplete(activity) }">
                                <div>{{ getActivityTimeText(activity) }}</div>
                                <div v-if="activity.facilitatorComment" class="label comments-label"><i class="fa fa-comment"></i>Comments</div>
                            </div>
                            <div class="activity-item-status text-right">
                                <span v-if="activity.isStudentCompleted" class="pull-right px-1 badge badge-success">
                                    {{ badgeText(activity) }}
                                </span>
                            </div>
                        </div>

                        <div class="activity-stepper visible-xs-block visible-sm-block">
                            <button :disabled="hasAvailableBefore(index)"><i class="fa fa-chevron-up" @click.prevent="selectPrevious(index)"></i></button>
                            <button :disabled="hasAvailableAfter(index)"><i class="fa fa-chevron-down" @click.prevent="selectNext(index)"></i></button>
                        </div>
                    </div>
                </div>
                <div class="workspace-main-content">
                    <div class="h1">
                        {{ viewingCompletionBag.activityBag?.name ?? "" }}
                    </div>
                    <div class="activity-time">
                        {{ getActivityTimeText(viewingCompletionBag) }}
                    </div>
                    <activityTypeComponent
                                           v-model:activityBag="viewingCompletionBag.activityBag"
                                           v-model:completionBag="viewingCompletionBag"
                                           :screenToShow="screenToShow"
                                           @completed="onCompleted" />
                </div>
            </div>
        </div>
    </div>
</template>
<style scoped>
.workspace-page-container {
    background-color: var(--color-interface-softer);

}

.workspace-block-error-notification {
    margin-top: 3.5em;
}

.workspace-tab-bar,
.workspace-main-content,
.main-content,
.side-content {
    background-color: var(--color-interface-softest);
    padding: 16px;
    border-radius: 12px;
}

/* muted-text */
.announcement-date,
.announcement-content,
.notification-content,
.class-progress-tasks,
.activity-time {
    opacity: 0.8;
}

.workspace-class-overview {
    display: flex;
    margin-top: 24px;

    .main-content {
        flex-grow: 1;
    }

    .side-content {
        flex-shrink: 1;
        margin-left: 24px;
    }
}

.class-progress-tasks {
    margin-top: -8px;
}

.notifications-section {
    display: flex;
    margin-bottom: 24px;

    .notification-container {
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
        max-width: 300px;
        border: 1px solid var(--theme-color-light);
        border-radius: 12px;
        padding: 16px;
        margin-right: 8px;

        .notification-badge {
            margin-bottom: 8px;
        }

        .notification-title {
            font-weight: bold;
            width: fit-content;
        }
    }
}

.announcements-section {
    display: flex;
    flex-direction: column;

    .announcement-title {
        font-weight: bold;
        margin-bottom: 8px;
    }

    .announcement-container {
        background-color: var(--interface-softer);
        padding: 16px;
    }

    .announcement-date {
        font-weight: bold;
        margin-bottom: 8px;
    }
}

.class-workspace-tabs {
    > ul li.active > span {
        background-color: var(--color-primary);
        color: var(--theme-white);
    }
}

.workspace-block-container {
    display: flex;
    flex-direction: column;
    padding-top: 1em;
    padding-bottom: 1em;
    padding-left: 3em;
    padding-right: 3em;
    background-color: var(--color-interface-softest);

    .workspace-header-bar {
        flex-grow: 1;
    }

    .workspace-block-content {
        @media (min-width: 992px) {
            display: flex;
            flex-basis: 30%;

            .workspace-navigation-pane {
                margin-top: 1.5em;
            }
        }
    }
}

.workspace-page-header {
    margin-bottom: 20px;
    align-items: center;
    border-radius: 12px;
    height: 280px;

    .workspace-header-text-block {
        display: flex;
        flex-direction: column;
        text-align: center;
        background-color: var(--theme-white);
        border-radius: 12px;

        /* For smaller devices don't apply margins and use the full width. */
        @media (min-width: 992px) {
            width: 80%;
            margin-left: 10%;
            margin-right: 10%;
        }

        .sub-text {
            padding-left: 20%;
            padding-right: 20%;
            padding-bottom: 12px;
        }
    }

    .workspace-header-text-block:not(.no-course-image) {
        position: relative;
        top: 220px;
        background-size: cover;
    }
}

.comments-label{
    color: var(--color-interface-strongest);
    background-color: var(--color-interface-soft);
}

.workspace-navigation-pane {
    background-color: var(--theme-lightest);
    border-radius: 12px;
    min-width: 350px;

    .activity-navigation-item-container {
        /* padding: 4px; */
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-top: 1px solid var(--theme-color-light);
        border-bottom: 1px solid var(--theme-color-light);
        min-height: 100px;
        padding-left: 12px;
        padding-right: 12px;
        border-radius: 12px;

        * {
            margin-right: .5em;
        }

        .activity-item-name {
            font-weight: bold;
        }

        .activity-item-details {
            width: 100%;
            display: grid;
            grid-template-columns: 2;
            grid-template-rows: 2;
            gap: 8px;

            .activity-item-name {
                grid-row: 1;
                grid-column: 1 / 2;
            }

            .activity-item-time {
                grid-row: 2;
                grid-column: 1;
            }

            .activity-item-status {
                grid-row: 2;
                grid-column: 2;
            }
        }
    }

    .activity-navigation-item-container.is-selected {
        background-color: var(--color-interface-softest);

    }

    .activity-navigation-item-container.not-available {
        opacity: .5
    }
}

.workspace-main-content {
    width: 100%;
    min-height: 80vh;
    padding-left: 3em;
}

/* Activity Icon */
span.icon-stack-container i.icon {
    color: white;
}

/* For smaller devices use a stepper control instead of the left-hand navigation pane. */
.activity-stepper {
    display: flex;
    flex-direction: column;
    justify-self: flex-end;
    justify-content: space-between;

    > button {
        background-color: white;
        border: none;

        > * {
            color: var(--color-primary);
        }
    }
}

/* Only show the currently selected activity for smaller devices. The stepper will be visible for changing selections. */
@media (max-width: 993px) {
    .workspace-navigation-pane > .activity-navigation-item-container:not(.is-selected) {
        display: none;
    }
}
</style>

<script setup lang="ts">
    import { Component, computed, defineAsyncComponent, onMounted, ref, toValue } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import ProgressBar from "@Obsidian/Controls/progressBar.obs";
    import { useConfigurationValues, useInvokeBlockAction, useReloadBlock, onConfigurationValuesChanged } from "@Obsidian/Utility/block";
    import { LearningActivityCompletionBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityCompletionDetail/learningActivityCompletionBag";
    import { PublicLearningClassWorkspaceBox } from "@Obsidian/ViewModels/Blocks/Lms/PublicLearningClassWorkspace/publicLearningClassWorkspaceBox";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { ComponentScreen } from "@Obsidian/Controls/Internal/LearningActivity/learningActivity";
    import { ConfigurationMode } from "@Obsidian/Enums/Lms/configurationMode";
    import { NavigationUrlKey } from "./PublicLearningClassWorkspace/types.partial";
    import { AvailabilityCriteria } from "@Obsidian/Enums/Lms/availabilityCriteria";
    import { pluralize } from "@Obsidian/Utility/stringUtils";

    const config = useConfigurationValues<PublicLearningClassWorkspaceBox>();
    const invokeBlockAction = useInvokeBlockAction();
    onConfigurationValuesChanged(useReloadBlock());

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const headerHtml = config.headerHtml ?? "";
    const screenToShow = ref(ComponentScreen.Completion);

    const params = new URLSearchParams(window.location.search);
    const selectedActivityIdKey = params.get("activity") ?? "";

    const activities = ref<LearningActivityCompletionBag[]>(config.activities ?? []);

    const viewingCompletionBag = ref((
        selectedActivityIdKey.length > 0 ?
            activities.value?.find(a => a.idKey === selectedActivityIdKey) :
            activities.value?.find(a => a.isAvailable)
    ) ?? {} as LearningActivityCompletionBag);

    const announcements = ref(config.announcements ?? []);
    const isAcademicCalendarMode = ref(config.programConfigurationMode === ConfigurationMode.AcademicCalendar);
    const isFacilitator = ref(config.isCurrentPersonFacilitator ?? false);
    const facilitatorPortalUrl = ref(config.navigationUrls?.[NavigationUrlKey.FacilitatorPortalPage] ?? "");
    const facilitators = ref(config.facilitators ?? []);
    const notificationsToShow = ref(config.numberOfNotificationsToShow);
    const notifications = ref(config.notifications?.filter((_, i) => i < notificationsToShow.value) ?? []);
    const showGrades = ref(config.showGrades);
    const currentGrade = ref(config.currentGrade);

    const overviewTab = ref("Class Overview");
    const activitiesTab = ref("Activities / Assignments");
    const contentTabs = ref(config.contentPages ?? []);

    const activityTypeComponent = ref<Component | null>(null);

    // #endregion

    // #region Computed Values

    /** An array of completed activities. */
    const completedActivitiesCount = computed(() => activities.value.filter(a => !!a.completedDate).length);

    /** The activityComponent.componentUrl from the ActivityBag or an empty string. */
    const componentUrl = computed(() => viewingCompletionBag.value?.activityBag?.activityComponent?.componentUrl ?? "");

    /** The properly pluralized text for the Facilitator(s). */
    const facilitatorsLabel = computed(() => facilitators.value.length > 1 ? "Facilitators" : "Facilitator");

    /** The percentage (0 - 100) of completed activities. */
    const percentComplete = computed(() => activities.value.length > 0 ? (completedActivitiesCount.value / activities.value.length * 100) : 0);

    /** The name of the currently selected content tab (or null). */
    const selectedContentTab = computed(() => contentTabs.value.find(t => t.title?.toLowerCase() === selectedTab.value?.toLowerCase()));

    /** The list of all tab names (overview, activities and all content pages). */
    const tabs = computed(() =>
        [overviewTab.value, activitiesTab.value]
            .concat(contentTabs.value.map(t => t.title ?? "")
                .filter(t => t.length > 0))
    );

    // #endregion

    // #region Functions

    function badgeText(activity: LearningActivityCompletionBag): string | undefined {
        if (activity.isStudentCompleted && activity.gradeName) {
            return activity.gradeName;
        }
    }

    function isDueSoonAndIncomplete(activity: LearningActivityCompletionBag): boolean {
        return !activity.isStudentCompleted && (activity.isDueSoon || activity.isPastDue);
    }

    /** The CSS classes to apply to the activity container. */
    function getActivityContainerClasses(activity: LearningActivityCompletionBag): string[] {
        const classes = activity.isAvailable === true ? ["available"] : ["not-available"];

        if (activity.idKey === viewingCompletionBag.value?.idKey) {
            classes.push("is-selected");
        }

        if (activity.completedDate) {
            classes.push("is-completed");
        }

        return classes;
    }

    /** Classes to apply to the activity icon stack. */
    function activityIconStackClasses(activity: LearningActivityCompletionBag): string[] {
        const completionStatusClass = activity.isStudentCompleted ? "text-success" : "text-muted";
        return ["fa", "fa-circle", "fa-stack-2x", completionStatusClass];
    }

    /** Gets the text for the activity's relevant time (e.g. completed when, due when etc.). */
    function getActivityTimeText(activity: LearningActivityCompletionBag): string {
        if (activity.isStudentCompleted) {
            return `Completed: ${getElapsedTime(activity.completedDate?.toString() ?? "")}`;
        }
        else if (activity.isDueSoon || activity.isPastDue) {
            return `Due: ${getElapsedTime(activity.dueDate?.toString() ?? "")}`;
        }
        else if (!activity.isAvailable) {
            return activity.availableDate == null ?
                "Prerequisite Step Not Met" :
                `Available: ${getElapsedTime(activity.availableDate?.toString() ?? "")}`;
        }

        return "";
    }

    /** The function that formats the date for display. */
    function formattedDate(date: string | null | undefined): string {
        return RockDateTime.parseISO(date ?? "")?.localDateTime?.toASPString("MMMM d, yyyy") ?? "";
    }

    /** The time elapsed since the specified date in a human-readable format. */
    function getElapsedTime(date: string): string {
        return RockDateTime.parseISO(date)?.localDateTime.toElapsedString() ?? "";
    }

    /** Whether the activity at the current index has an available activity after it. */
    function hasAvailableAfter(currentIndex: number): boolean {
        return activities.value.find((a, i) => i > currentIndex && a.isAvailable) != null;
    }

    /** Whether the activity at the current index has an available activity before it. */
    function hasAvailableBefore(currentIndex: number): boolean {
        return activities.value.find((a, i) => i < currentIndex && a.isAvailable) != null;
    }

    /** Selects the specified activity and updates the component being viewed. */
    function selectActivity(activity: LearningActivityCompletionBag): void {
        const currentIdKey = toValue(viewingCompletionBag)?.idKey;
        const newSelectedIndex = activities.value.findIndex(a => a.idKey == activity.idKey);
        const currentSelectedIndex = activities.value.findIndex(a => a.idKey == currentIdKey);

        // Don't allow selecting the unavailable activities or the currently selected activity.
        if (activity.isAvailable === false || activities.value[newSelectedIndex].idKey === currentIdKey) {
            return;
        }

        // Update the current selection before moving to the new selection.
        // This ensures that any work completed by the student isn't lost when clicking to another task.
        if (currentSelectedIndex >= 0 && viewingCompletionBag.value) {
            activities.value[currentSelectedIndex] = viewingCompletionBag.value;
        }

        const queryParams = new URLSearchParams(window.location.search);
        queryParams.set("activity", activity.idKey?.toString() ?? "");
        history.pushState(null, "", "?" + queryParams.toString());
        viewingCompletionBag.value = activity;

        // Update the activity component.
        activityTypeComponent.value = defineAsyncComponent(() => import(componentUrl.value));
    }

    /** Selects the next available activity. */
    function selectNext(currentIndex: number): void {
        const next = activities.value.find((a, i) => i > currentIndex && a.isAvailable);

        if (next != null) {
            selectActivity(next);
        }
    }

    /** Selects the next previous available activity. */
    function selectPrevious(currentIndex: number): void {
        const previous = activities.value.find((a, i) => i < currentIndex && a.isAvailable);

        if (previous != null) {
            selectActivity(previous);
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when activity component's complete emit is fired.
     *
     * @param wasSuccessful True if the complete button was clicked; false otherwise.
     *
     * @returns `true` if the operation succeeded; otherwise `false`.
     */
    async function onCompleted(wasSuccessful: boolean): Promise<boolean> {
        if (wasSuccessful) {
            var result = await invokeBlockAction<LearningActivityCompletionBag>("CompleteActivity", {
                activityCompletionBag: viewingCompletionBag.value
            });

            if (result.statusCode === 200 && result.data != null) {
                viewingCompletionBag.value = result.data;

                // If the result was successful, update the activity with the new values.
                const index = activities.value?.findIndex(a => a.activityBag?.idKey === viewingCompletionBag.value.activityBag?.idKey) ?? -1;

                if (activities.value && index >= 0) {
                    activities.value[index] = viewingCompletionBag.value;

                    // If there's a subsequent activity and it becomes available upon completion of the previous
                    // then mark it available.
                    const nextActivityIndex = index + 1;
                    const hasNextActivity = nextActivityIndex < activities.value?.length ?? -1;
                    const nextActivity = hasNextActivity ? activities.value[nextActivityIndex] : null;

                    if (nextActivity != null && nextActivity.activityBag?.availabilityCriteria === AvailabilityCriteria.AfterPreviousCompleted) {
                        nextActivity.availableDate = viewingCompletionBag.value.completedDate;
                        nextActivity.isAvailable = true;
                    }
                }

                // Reload the activity component.
                activityTypeComponent.value = defineAsyncComponent(() => import(componentUrl.value));
                return true;
            }
            else if ((result.errorMessage ?? "").length > 0) {
                blockError.value = result.errorMessage ?? "";
            }
        }

        return false;
    }

    /** Called when a new tab is selected by the individual.  */
    function onSelectTab(tabName: string): void {
        const queryParams = new URLSearchParams(window.location.search);
        queryParams.set("tab", tabName ?? "");
        history.pushState(null, "", "?" + queryParams.toString());
        selectedTab.value = tabName;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }

    onMounted(() => {
        if (componentUrl.value.length > 0) {
            activityTypeComponent.value = defineAsyncComponent(() => import(componentUrl.value));
        }
    });

    // Set the initially selected tab.
    const queryParams = new URLSearchParams(window.location.search);
    const tab = queryParams.has("tab") ? queryParams.get("tab") : "";

    // If this is not academic calendar mode then we only have access to the Activities tab.
    const selectedTab = isAcademicCalendarMode.value === true ?
        ref(tabs.value.find(t => t.toLowerCase() === tab?.toLowerCase()) ?? overviewTab.value) :
        activitiesTab;

</script>
