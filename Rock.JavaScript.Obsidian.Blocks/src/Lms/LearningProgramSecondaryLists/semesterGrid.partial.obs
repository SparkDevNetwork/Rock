<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
        <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          :isTitleHidden="true"
          :hideFilterHeaderRow="true"
          :isSearchVisible="false"
          :isCountMessageVisible="false"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          :showExport="false"
          :entityTypeGuid="EntityType.LearningSemester"
          :expectedRowCount="3"
          stickyHeader
          liveUpdates
          @onSelect="onRowClicked"
          :onAddItem="isAddEnabled ? onAddItemClicked : undefined">

          <template #gridHeaderPrepend>
            <div class="grid-title-heading">
                <div class="grid-title">
                    {{ entityName }}
                </div>

                <div class="grid-badges mr-3">
                    <span v-for="label in labels" :class="'mr-2 label label-' + label.type">
                        {{ label.title }}
                    </span>
                </div>

            </div>
            <div class="grid-custom-tab-bar">
                <TabbedBar :tabs="tabs" v-model="selectedTab" v-on:update:modelValue="onSelectTab" />
            </div>

            <!-- This causes a break on extra small and small devices. -->
            <div style="height: 0; border-bottom: 1px solid #dfe0e1; flex-basis: 100%;" class="d-md-none grid-header-separator"></div>
            <div class="flex-grow-1 d-md-none grid-header-fill" style="min-width: 1px;"></div>
        </template>
        <TextColumn name="name"
                    title="Name"
                    field="name"
                    visiblePriority="xs" />

        <DateColumn name="startDate"
                    title="Start Date"
                    field="startDate"
                    visiblePriority="xs" />

        <DateColumn name="endDate"
                    title="End Date"
                    field="endDate"
                    visiblePriority="xs" />

        <DateColumn name="closeDate"
                    title="Close Date"
                    field="closeDate"
                    visiblePriority="xs" />

        <NumberColumn name="classCount"
                      title="Class Count"
                      field="classCount"
                      visiblePriority="xs" />

        <DeleteColumn v-if="isDeleteEnabled" @click="onDeleteClick" :rowDisabled="onDeleteRowDisabled" />
    </Grid>
</template>
<style scoped>
    .grid-custom-tab-bar {
        background-color: #efefef;
    }
</style>

<script setup lang="ts">
    import { PropType, reactive, ref } from "vue";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { DateColumn, TextColumn, DeleteColumn } from "@Obsidian/Controls/grid";
    import TabbedBar from "@Obsidian/Controls/tabbedBar.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LearningProgramDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningProgramDetail/learningProgramDetailOptionsBag";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";

    const config = useConfigurationValues<ListBlockBox<LearningProgramDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    const selectedTab = ref("Semesters");

    const emit = defineEmits<{
        (e: "rowClick", idKey: string, gridData: GridDataBag | undefined): void;
        (e: "deleteClick", idKey: string, gridData: GridDataBag | undefined): void;
        (e: "addClick"): void;
        (e: "tabChange", tabIndex: number): void;
    }>();

    const props = defineProps({

        /** The name of the entity to show in the grid title. */
        entityName: {
            type: String as PropType<string>,
            required: true
        },

        isAddEnabled: {
            type: Object as PropType<boolean>,
            required: true,
            default: false
        },

        isDeleteEnabled: {
            type: Object as PropType<boolean>,
            required: true,
            default: false
        },

        /** The labels to show in the grid header. */
        labels: {
            type: Array as PropType<PanelAction[]>,
            required: false
        },

        /** The list of tabs to show in the grid header. */
        tabs: {
            type: Array as PropType<string[]>,
            default: []
        }
    });

    // #region Values

    //const config = useConfigurationValues<ListBlockBox<LearningProgramCompletionListOptionsBag>>();
    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isAddEnabled = ref(props.isAddEnabled);
    const isDeleteEnabled = ref(props.isDeleteEnabled);

    // #endregion

    // #region Functions

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onRowClicked(key: string): void {
        emit("rowClick", key, gridData);
    }

    function onAddItemClicked(): void {
        emit("addClick");
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetSemesters");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);

            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load semester grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a semester row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
     async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            alert(result.errorMessage ?? "Unknown error while trying to delete the semester.");
        }
    }

    /**
    * Called when the delete button for a row wants to know if it should be
    * disabled.
    *
    * @param row The row associated with the delete button.
    */
    function onDeleteRowDisabled(row: Record<string, unknown>): boolean {
        return (row.classCount as number) > 0;
    }

    function onSelectTab(tabName: string): void {
        const queryParams = new URLSearchParams(window.location.search);
        const newTabName = tabName.toString() ?? "";
        queryParams.set("tab", newTabName);
        history.pushState(null, "", "?" + queryParams.toString());

        const newTabIndex = (props.tabs ?? []).findIndex(t => t === newTabName);
        emit("tabChange", newTabIndex);
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
