<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <Panel if="!blockError" :title="panelName">
        <template #headerActions>
            <span v-if="businessDetailViewBag?.recordStatus?.value" :class="statusClass">{{ status }}</span>
            <div v-if="showActions" :class="customActionClass" style="position: relative;">
                <button type="button" class="btn btn-default" data-toggle="dropdown" aria-expanded="false" @click="onActionContextDropdownClick">
                    Actions <i class="fa fa-caret-down"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-right" v-html="customActions">

                </ul>
            </div>
        </template>

        <template v-if="panelMode == DetailPanelMode.View && showBadges" #subheaderRight>
            <BadgeList :entityTypeGuid="EntityType.Person" :entityKey="entityKey" :badgeTypeGuids="badgeTypeGuids" />
        </template>

        <template v-if="panelMode === DetailPanelMode.View">
            <ViewPanel :modelValue="businessDetailViewBag" :options="options" />
        </template>

        <template v-else>
            <RockForm v-model:submit="submitForm" @submit="onSave">
                <EditPanel v-model="businessDetailEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" />
            </RockForm>
        </template>

        <template #footerActions>
            <RockButton v-if="panelMode === DetailPanelMode.View"
                        :btnSize="BtnSize.Default"
                        :btnType="BtnType.Primary"
                        @click="onEdit">Edit</RockButton>
            <RockButton v-if="panelMode === DetailPanelMode.Edit || panelMode === DetailPanelMode.Add"
                        :btnSize="BtnSize.Default"
                        :btnType="BtnType.Primary"
                        :isLoading="isSaving"
                        @click="onSaveClick">
                Save
            </RockButton>
            <RockButton v-if="panelMode === DetailPanelMode.Edit"
                        btnType="link"
                        @click="onCancelEdit"
                        autoDisable>Cancel</RockButton>
        </template>
    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref, onMounted } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import EditPanel from "./BusinessDetail/editPanel.partial.obs";
    import ViewPanel from "./BusinessDetail/viewPanel.partial.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { useConfigurationValues, useInvokeBlockAction, useEntityDetailBlock, onConfigurationValuesChanged, useReloadBlock } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./BusinessDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { BusinessDetailBag } from "@Obsidian/ViewModels/Blocks/Finance/BusinessDetail/businessDetailBag";
    import { BusinessDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/BusinessDetail/businessDetailOptionsBag";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { DefinedValue } from "@Obsidian/SystemGuids/definedValue";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import BadgeList from "@Obsidian/Controls/badgeList.obs";
    import { useStore } from "@Obsidian/PageState";

    const config = useConfigurationValues<DetailBlockBox<BusinessDetailBag, BusinessDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");
    const isSaving = ref(false);
    const submitForm = ref(false);
    const customActionClassList = ref(["action", "panel-action-context", "clickable"]);
    const store = useStore();

    const businessDetailViewBag = ref(config.entity);
    const businessDetailEditBag = ref<ValidPropertiesBox<BusinessDetailBag>>({
        bag: {} as BusinessDetailBag
    });

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);
    const customActions = businessDetailViewBag.value?.customActions;

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: businessDetailEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        if (panelMode.value == DetailPanelMode.View) {
            return "Business Details";
        }
        else {
            return !businessDetailViewBag.value?.businessName ? "Add Business" : `Edit ${businessDetailViewBag.value?.businessName}`;
        }
    });

    const statusClass = computed((): string => {
        if (businessDetailViewBag.value?.recordStatus?.value?.toUpperCase() == DefinedValue.PersonRecordStatusPending) {
            return "label label-warning";
        }
        else if (businessDetailViewBag.value?.recordStatus?.value?.toUpperCase() == DefinedValue.PersonRecordStatusInactive) {
            return "label label-danger";
        }
        else {
            return "label label-success";
        }
    });

    const status = computed((): string => {
        if (businessDetailViewBag.value?.recordStatus?.value?.toUpperCase() == DefinedValue.PersonRecordStatusPending) {
            return "Pending";
        }
        else if (businessDetailViewBag.value?.recordStatus?.value?.toUpperCase() == DefinedValue.PersonRecordStatusInactive) {
            return "Inactive";
        }
        else {
            return "Active";
        }
    });

    const options = computed((): BusinessDetailOptionsBag => {
        return config.options ?? {} as BusinessDetailOptionsBag;
    });

    const showActions = computed((): boolean => {
        return customActions !== null && panelMode.value === DetailPanelMode.View;
    });

    /**
    * The identifier key value for this entity.
    */
    const entityKey = computed((): string => {
        return businessDetailViewBag.value?.idKey ?? "";
    });

    const badgeTypeGuids = computed((): string[] => {
        return businessDetailViewBag.value?.badgeTypeGuids ?? [];
    });

    const showBadges = computed((): boolean => {
        const badgeTypeGuids = businessDetailViewBag.value?.badgeTypeGuids ?? [];
        return badgeTypeGuids.length > 0;
    });

    const customActionClass = computed((): string => {
        return customActionClassList.value.join(" ");
    });


    // #endregion

    // #region Event Handlers

    /**
    * Event handler for the Save button being clicked.
    * Alerts the form to begin validation and submit form if no errors are found
    */
    const onSaveClick = (): void => {
        submitForm.value = true;
    };

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<void> {
        if (!businessDetailEditBag.value?.bag?.idKey) {
            if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
                window.location.href = makeUrlRedirectSafe(config.navigationUrls[NavigationUrlKey.ParentPage]);
            }
        }
        else {
            store.setAreSecondaryBlocksShown(true);
            panelMode.value = DetailPanelMode.View;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<void> {
        const result = await invokeBlockAction<ValidPropertiesBox<BusinessDetailBag>>("Edit", {
            key: businessDetailViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            businessDetailEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };

            panelMode.value = DetailPanelMode.Edit;
            store.setAreSecondaryBlocksShown(false);
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";
        isSaving.value = true;

        const result = await invokeBlockAction<ValidPropertiesBox<BusinessDetailBag> | string>("Save", {
            box: businessDetailEditBag.value
        });

        isSaving.value = false;

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                businessDetailViewBag.value = result.data.bag;
                store.setAreSecondaryBlocksShown(true);
                panelMode.value = DetailPanelMode.View;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                window.location.href = makeUrlRedirectSafe(result.data);
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save Business.";
        }

        submitForm.value = false;
    }

    /**
     * Event Handler for the Custom actions dropdown click. Toggles between opening and closing the dropdown list.
     */
    function onActionContextDropdownClick(event: MouseEvent): void {
        event.stopPropagation();
        if (!customActionClassList.value.includes("open")) {
            customActionClassList.value.push("open");
        }
        else {
            customActionClassList.value = customActionClassList.value.filter(c => c !== "open");
        }
    }


    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified business could not be viewed.";
    }
    else if (!config.entity.idKey) {
        businessDetailEditBag.value = { bag: config.entity };
        panelMode.value = DetailPanelMode.Add;
    }

    onMounted(() => {
        if (config.entity?.idKey) {
            store.setAreSecondaryBlocksShown(true);
        }
        else {
            store.setAreSecondaryBlocksShown(false);
        }
    });

    onConfigurationValuesChanged(useReloadBlock());

</script>
