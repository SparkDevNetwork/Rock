<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-3">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>

            <div class="col-md-3">
                <CheckBox v-model="isPublic"
                          label="Public" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <CodeEditor v-model="publicDescription"
                    label="Public Description HTML"
                    mode="lava"
                    theme="rock"
                    :editorHeight="250"
                    help="Additional HTML content to include with the account." />

        <div class="row">
            <div class="col-md-6">
                <AccountPicker v-model="parentAccount"
                               label="Parent Account"
                               enhanceForLongLists />

                <DefinedValuePicker v-model="accountTypeValue"
                                    label="Account Type"
                                    :definedTypeGuid="DefinedType.FinancialAccountType" />

                <TextBox v-model="publicName"
                         label="PublicName" />

                <CampusPicker v-model="campus"
                              label="Campus"
                              showBlankItem
                              includeInactive />

                <TextBox v-model="url"
                         label="URL" />

                <ImageUploader v-model="imageBinaryFile"
                               label="Image"
                               :uploadAsTemporary="true"
                               uploadButtonText="Upload"
                               :showDeleteButton="true" />
            </div>
            <div class="col-md-6">
                <TextBox v-model="glCode" label="GL Code" />
                <DatePicker v-model="startDate" label="Start Date" />
                <DatePicker v-model="endDate" label="End Date" />
                <CheckBox v-model="isTaxDeductible" label="Tax Deductible" />
            </div>
        </div>

        <div>
            <label>Account Participants</label>
            <div class="panel-body">
                <div class="grid grid-panel">
                    <Grid :data="accountParticipantsGridData" keyField="key" itemTerm="Account Participant" liveUpdates light @addItem="onAddAccount">
                        <TextColumn name="name" field="name" title="Person" />
                        <TextColumn name="purposeKey" field="purposeKey" title="Purpose" />
                        <DeleteColumn @click="onDeleteAccount" disableConfirmation />
                    </Grid>
                </div>
            </div>


            <Modal v-model="isModalOpen" title="Page Attributes" @save="onSaveAccount" saveText="Save">

                <fieldset>
                    <PersonPicker v-model="personAlias"
                                  label="Person"
                                  rules="required" />

                    <DropDownList v-model="purposeKey"
                                  label="Purpose"
                                  :items="purposeKeyOptions"
                                  :showBlankItem="false"
                                  rules="required" />
                </fieldset>

            </Modal>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, reactive, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CodeEditor from "@Obsidian/Controls/codeEditor.obs";
    import AccountPicker from "@Obsidian/Controls/accountPicker.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import ImageUploader from "@Obsidian/Controls/imageUploader.obs";
    import Grid, { DeleteColumn, TextColumn } from "@Obsidian/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { FinancialAccountBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialAccountDetail/financialAccountBag";
    import { FinancialAccountDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialAccountDetail/financialAccountDetailOptionsBag";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { FinancialAccountParticipantBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialAccountDetail/financialAccountParticipantBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<FinancialAccountBag>>,
            required: true
        },

        options: {
            type: Object as PropType<FinancialAccountDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<FinancialAccountBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue?.bag?.isActive ?? true, "IsActive");
    const isPublic = propertyRef(props.modelValue?.bag?.isPublic ?? true, "IsPublic");
    const isTaxDeductible = propertyRef(props.modelValue?.bag?.isTaxDeductible ?? false, "IsTaxDeductible");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const publicDescription = propertyRef(props.modelValue?.bag?.publicDescription ?? "", "PublicDescription");
    const glCode = propertyRef(props.modelValue?.bag?.glCode ?? "", "GlCode");
    const publicName = propertyRef(props.modelValue?.bag?.publicName ?? "", "PublicName");
    const url = propertyRef(props.modelValue?.bag?.url ?? "", "Url");
    const startDate = propertyRef(props.modelValue?.bag?.startDate ?? "", "startDate");
    const endDate = propertyRef(props.modelValue?.bag?.endDate ?? "", "EndDate");
    const parentAccount = propertyRef(props.modelValue?.bag?.parentAccount ?? {}, "ParentAccount");
    const accountTypeValue = propertyRef(props.modelValue?.bag?.accountTypeValue ?? {}, "AccountTypeValue");
    const campus = propertyRef(props.modelValue?.bag?.campus ?? {}, "Campus");
    const imageBinaryFile = propertyRef(props.modelValue?.bag?.imageBinaryFile ?? {}, "ImageBinaryFileId");
    const accountParticipants = ref(props.modelValue?.bag?.accountParticipants ?? []);
    const purposeKeyOptions = ref(props.options.purposeKeyOptions ?? []);
    const isModalOpen = ref(false);
    const personAlias = ref<ListItemBag | undefined>();
    const purposeKey = ref("");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, isPublic, isTaxDeductible, name, publicDescription, glCode, publicName, url, startDate, endDate, parentAccount, accountTypeValue, campus, imageBinaryFile];

    // #endregion

    // #region Computed Values
    const accountParticipantsGridData: GridDataBag = reactive<GridDataBag>({
        rows: accountParticipants.value.map(x => convertToAccountParticipantsGridRowItem(x))
    });
    // #endregion

    // #region Functions
    function convertToAccountParticipantsGridRowItem(participant: FinancialAccountParticipantBag): Record<string, unknown> {
        return {
            key: participant.personAlias?.value,
            name: participant.personFullName,
            purposeKey: purposeKeyOptions.value.find(x => x.value == participant.purposeKey)?.text
        };
    }
    // #endregion

    // #region Event Handlers
    async function onAddAccount(): Promise<void> {
        resetModal();
        isModalOpen.value = true;
    }

    const onDeleteAccount = async (key: string): Promise<void> => {
        isModalOpen.value = false;
        accountParticipants.value = accountParticipants.value.filter(s => s.personAlias?.value !== key);

        // Update the grid.
        if (accountParticipantsGridData.rows) {
            const index = accountParticipantsGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                accountParticipantsGridData.rows?.splice(index, 1);
            }
        }
    };

    function onSaveAccount(): void {

        if (personAlias.value) {
            const newParticipant = {
                personAlias: personAlias.value,
                personFullName: personAlias.value.text,
                purposeKey: purposeKey.value
            } as FinancialAccountParticipantBag;
            accountParticipants.value.push(newParticipant);

            // Add new RowItem to the grid to represent the newly added attribute.
            const newRowItem = convertToAccountParticipantsGridRowItem(newParticipant);
            accountParticipantsGridData.rows?.push(newRowItem);

            resetModal();
            isModalOpen.value = false;
        }
    }

    function resetModal(): void {
        personAlias.value = undefined;
        purposeKey.value = "";
    }

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue?.bag?.isActive ?? true);
        updateRefValue(isPublic, props.modelValue?.bag?.isPublic ?? true);
        updateRefValue(isTaxDeductible, props.modelValue?.bag?.isTaxDeductible ?? false);
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(publicDescription, props.modelValue?.bag?.publicDescription ?? "");
        updateRefValue(glCode, props.modelValue?.bag?.glCode ?? "");
        updateRefValue(publicName, props.modelValue?.bag?.publicName ?? "");
        updateRefValue(url, props.modelValue?.bag?.url ?? "");
        updateRefValue(startDate, props.modelValue?.bag?.startDate ?? "");
        updateRefValue(endDate, props.modelValue?.bag?.endDate ?? "");
        updateRefValue(parentAccount, props.modelValue?.bag?.parentAccount ?? {});
        updateRefValue(accountTypeValue, props.modelValue?.bag?.accountTypeValue ?? {});
        updateRefValue(campus, props.modelValue?.bag?.campus ?? {});
        updateRefValue(accountParticipants, props.modelValue?.bag?.accountParticipants ?? []);
        updateRefValue(imageBinaryFile, props.modelValue?.bag?.imageBinaryFile ?? {});
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, accountParticipants, ...propRefs], () => {
        const newValue: ValidPropertiesBox<FinancialAccountBag> = {
            bag: { ...props.modelValue.bag } as FinancialAccountBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "isPublic", isPublic.value);
        setPropertiesBoxValue(newValue, "isTaxDeductible", isTaxDeductible.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "publicDescription", publicDescription.value);
        setPropertiesBoxValue(newValue, "glCode", glCode.value);
        setPropertiesBoxValue(newValue, "publicName", publicName.value);
        setPropertiesBoxValue(newValue, "url", url.value);
        setPropertiesBoxValue(newValue, "startDate", startDate.value);
        setPropertiesBoxValue(newValue, "endDate", endDate.value);
        setPropertiesBoxValue(newValue, "parentAccount", parentAccount.value);
        setPropertiesBoxValue(newValue, "accountTypeValue", accountTypeValue.value);
        setPropertiesBoxValue(newValue, "campus", campus.value);
        setPropertiesBoxValue(newValue, "accountParticipants", accountParticipants.value);
        setPropertiesBoxValue(newValue, "imageBinaryFile", imageBinaryFile.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
