<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />

</fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { FinancialAccountBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialAccountDetail/financialAccountBag";
    import { FinancialAccountDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/FinancialAccountDetail/financialAccountDetailOptionsBag";
import { asTrueOrFalseString } from "@Obsidian/Utility/booleanUtils";

    const props = defineProps({
    modelValue: {
    type: Object as PropType<FinancialAccountBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<FinancialAccountDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.description) {
            valueBuilder.addTextValue("", props.modelValue.description);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.publicName) {
            valueBuilder.addTextValue("Public Name", props.modelValue.publicName);
        }

        if (props.modelValue.campus?.text) {
            valueBuilder.addTextValue("Campus", props.modelValue.campus.text);
        }

        if (props.modelValue.glCode) {
            valueBuilder.addTextValue("GLCode", props.modelValue.glCode);
        }

        valueBuilder.addTextValue("Is Tax Deductible", asTrueOrFalseString(props.modelValue.isTaxDeductible));

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if(props.modelValue.accountParticipants && props.modelValue.accountParticipants.length > 0) {
            const accountParticipantsHtml = props.modelValue.accountParticipants.map(a => `${a.personFullName} (${a.purposeKeyDescription})`).join("<br>");
            valueBuilder.addHtmlValue("Account Participants", accountParticipantsHtml);
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
