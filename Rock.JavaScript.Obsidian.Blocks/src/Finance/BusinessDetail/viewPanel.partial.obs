<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <h1>{{ businessName }}</h1>

        <EntityTagList v-if="options.displayTags" :entityTypeGuid="EntityType.Person" :entityKey="entityKey" :categoryGuid="tagCategoryGuid ?? undefined" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" :showCategoryLabel="false" />

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { BusinessDetailBag } from "@Obsidian/ViewModels/Blocks/Finance/BusinessDetail/businessDetailBag";
    import { BusinessDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/BusinessDetail/businessDetailOptionsBag";
    import EntityTagList from "@Obsidian/Controls/tagList.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { Guid } from "@Obsidian/Types";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<BusinessDetailBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<BusinessDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});
    const businessName = ref(props.modelValue?.businessName ?? "");
    const entityKey = ref(props.modelValue?.idKey ?? "");
    const tagCategoryGuid = ref<Guid | null>(toGuidOrNull(props.options?.tagCategoryGuid));

    // #endregion

    // #region Computed Values

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.addressAsHtml) {
            valueBuilder.addHtmlValue("Address", props.modelValue.addressAsHtml);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.displayPhoneNumber) {
            valueBuilder.addTextValue("Phone Number", props.modelValue.displayPhoneNumber);
        }

        if (props.modelValue.emailTag) {
            valueBuilder.addHtmlValue("Email Address", props.modelValue.emailTag);
        }

        return valueBuilder.build();
    });

    // #endregion
</script>
