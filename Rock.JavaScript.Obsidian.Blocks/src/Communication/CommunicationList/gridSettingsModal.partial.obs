<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Apply Fliters"
           saveText="Apply"
           @save="onSave">

        <div class="communication-list-filters-performance-tips well">
            <h5>Performance Tips</h5>
            <div class="performance-tips-detail">
                The more filtered your data is, the faster the grid will load. Try filtering by Created By, Send Date Range, or Recipient Count to optimize loading performance.
            </div>
        </div>

        <PersonPicker v-if="showCreatedByFilter"
                      v-model="createdBy"
                      label="Created By"
                      :enableSelfSelection="true" />

        <CheckBox v-model="hideDrafts" label="Hide Drafts" />

        <SlidingDateRangePicker v-model="slidingDateRange"
                                label="Send Date Range"
                                :enabledSlidingDateRangeUnits="enabledSlidingDateRangeUnits" />

        <NumberRangeBox v-model="recipientCountRange" label="Recipient Count" />

        <DefinedValuePicker v-model="topic"
                            label="Topic"
                            :definedTypeGuid="DefinedType.CommunicationTopic"
                            :showBlankItem="true" />

        <TextBox v-model="name"
                 label="Name"
                 placeholder="Enter communication name..."
                 :isClearable="true" />

        <TextBox v-model="content"
                 label="Content"
                 placeholder="Enter communication content..."
                 :isClearable="true" />

        <div class="communication-list-filters-content-filter-warning">
            Note: Content filter will significantly impact performance.
        </div>

    </Modal>
</template>

<style scoped>
.communication-list-filters-performance-tips h5 {
    margin-top: 0;
}

.performance-tips-detail {
    font-size: var(--font-size-small);
    color: var(--color-interface-medium);
}

.communication-list-filters-content-filter-warning {
    font-size: var(--font-size-small);
    color: var(--color-interface-medium);
}
</style>

<script setup lang="ts">
    import { nextTick, PropType, ref, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import NumberRangeBox from "@Obsidian/Controls/numberRangeBox.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import SlidingDateRangePicker from "@Obsidian/Controls/slidingDateRangePicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { RangeType, SlidingDateRange } from "@Obsidian/Utility/slidingDateRange";
    import { deepEqual } from "@Obsidian/Utility/util";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        showCreatedByFilter: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        defaultSlidingDateRange: {
            type: Object as PropType<SlidingDateRange>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const enabledSlidingDateRangeUnits: RangeType[] = [
        RangeType.Last,
        RangeType.Current,
        RangeType.DateRange,
        RangeType.Previous
    ];

    // #region Values

    const createdBy = ref(props.modelValue.createdBy);
    const hideDrafts = ref(props.modelValue.hideDrafts);
    const slidingDateRange = ref<SlidingDateRange | null>(props.modelValue.slidingDateRange ?? props.defaultSlidingDateRange);
    const recipientCountRange = ref(props.modelValue.recipientCountRange);
    const topic = ref(props.modelValue.topic);
    const name = ref(props.modelValue.name);
    const content = ref(props.modelValue.content);
    const isVisible = useVModelPassthrough(props, "visible", emit);

    // #endregion Values

    // #region Event Handlers

    /**
     * Called when the save button is clicked.
     */
    function onSave(): void {
        const value: GridSettingsOptions = {
            createdBy: createdBy.value,
            hideDrafts: hideDrafts.value,
            slidingDateRange: slidingDateRange.value,
            recipientCountRange: recipientCountRange.value,
            topic: topic.value,
            name: name.value,
            content: content.value
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    // #endregion Event Handlers

    // #region Watchers

    watch(() => props.modelValue, () => {
        createdBy.value = props.modelValue.createdBy;
        hideDrafts.value = props.modelValue.hideDrafts;
        slidingDateRange.value = props.modelValue.slidingDateRange ?? props.defaultSlidingDateRange;
        recipientCountRange.value = props.modelValue.recipientCountRange;
        topic.value = props.modelValue.topic;
        name.value = props.modelValue.name;
        content.value = props.modelValue.content;
    });

    watch(slidingDateRange, () => {
        nextTick(() => {
            if (!slidingDateRange.value) {
                slidingDateRange.value = props.defaultSlidingDateRange;
            }
        });
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });

    // #endregion Watchers
</script>
