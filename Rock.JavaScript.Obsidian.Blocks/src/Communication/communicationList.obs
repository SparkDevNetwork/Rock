<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Communication"
          :entityTypeGuid="EntityType.Communication"
          stickyHeader
          liveUpdates
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onGridSettingsClick"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <Column name="typeIcon"
                visiblePriority="md"
                width="150px">
            <template #format="{ row }">
                <div class="text-center"><i :class="communicationTypeIcons[row.communicationType]"></i></div>
            </template>
        </Column>

        <TextColumn name="subject"
                    title="Subject"
                    field="subject"
                    :filter="textValueFilter"
                    width="20%"
                    visiblePriority="xs" />

        <Column name="status"
                title="Status"
                field="status"
                :filter="pickExistingValueFilter"
                :filterValue="getStatusFilterValue"
                visiblePriority="md">
            <template #format="{ row }">
                {{ CommunicationStatusDescription[row.status] }}
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <Column name="details"
                title="Details"
                visiblePriority="md">
            <template #format="{ row }">
                <div class="text-md">
                    <div v-if="row.sender">
                        Created on {{ dateTimeText(row.createdDateTime) }} by
                        <a class='' :href="getPersonLink(row)">{{ formatName(row.sender) }}</a>
                    </div>
                    <div v-if="row.reviewer">
                        Reviewed on {{ dateTimeText(row.reviewedDateTime) }} by
                        <a class='' :href='getPersonLink(row)'>{{ formatName(row.reviewer) }}</a>
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <DateTimeColumn name="sendDateTime"
                        title="Sent"
                        field="sendDateTime"
                        itemClass="grid-item-pull-left"
                        :filter="dateValueFilter"
                        visiblePriority="xs" />

        <Column name="details"
                title="Recipients"
                visiblePriority="xs">
            <template #format="{ row }">
                <span v-if="row.openedRecipients > 0" class="badge badge-success" title="Opened">
                    {{ row.openedRecipients }}
                </span>
                <span v-if="row.deliveredRecipients > 0" class="badge badge-info" title="Delivered">
                    {{ row.deliveredRecipients }}
                </span>
                <span v-if="row.pendingRecipients > 0" class="badge badge-none" title="Pending">
                    {{ row.pendingRecipients }}
                </span>
                <span v-if="row.cancelledRecipients > 0" class="badge badge-warning" title="Cancelled">
                    {{ row.cancelledRecipients }}
                </span>
                <span v-if="row.failedRecipients > 0" class="badge badge-danger" title="Failed">
                    {{ row.failedRecipients }}
                </span>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <ButtonColumn name="copy"
                      title="Copy"
                      iconClass="fa fa-clone"
                      visiblePriority="md"
                      @click="onCopyClick" />

        <DeleteColumn :rowDisabled="onDeleteRowDisabled" @click="onDeleteClick" />
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :communcationTypeItems="config.options?.communicationTypeItems ?? []"
                       :statusItems="config.options?.statusItems ?? []" />
</template>

<style>
.grid-item-pull-left {
    flex-direction: column;
    align-items: end;
}
</style>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { dateValueFilter, TextColumn, textValueFilter, pickExistingValueFilter, Column, DateTimeColumn, ButtonColumn, DeleteColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { CommunicationListOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationList/communicationListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, PreferenceKey, GridSettingsOptions } from "./CommunicationList/types.partial";
    import { computed, reactive, ref, watch } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";
    import { CommunicationStatusDescription } from "@Obsidian/Enums/Communication/communicationStatus";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import GridSettingsModal from "./CommunicationList/gridSettingsModal.partial.obs";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const config = useConfigurationValues<ListBlockBox<CommunicationListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;
    const communicationTypeIcons: Record<number, string> = {
        0: "fa fa-user fa-lg",
        1: "fa fa-envelope fa-lg",
        2: "fa fa-comment fa-lg",
        3: "fa fa-bell fa-lg",
    };

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        subject: preferences.getValue(PreferenceKey.FilterSubject),
        communicationType: preferences.getValue(PreferenceKey.FilterCommunicationType),
        status: preferences.getValue(PreferenceKey.FilterStatus),
        createdBy: getCreatedByFilter(),
        createdDateRange: {
            lowerValue: preferences.getValue(PreferenceKey.FilterCreatedDateRangeFrom) || RockDateTime.now().addDays(-7).date.toISOString(),
            upperValue: preferences.getValue(PreferenceKey.FilterCreatedDateRangeTo)
        },
        sentDateRange: {
            lowerValue: preferences.getValue(PreferenceKey.FilterSentDateRangeFrom),
            upperValue: preferences.getValue(PreferenceKey.FilterSentDateRangeTo)
        },
        content: preferences.getValue(PreferenceKey.FilterContent),
        recipientCount: {
            lower: toNumberOrNull(preferences.getValue(PreferenceKey.FilterRecipientCountRangeFrom)),
            upper: toNumberOrNull(preferences.getValue(PreferenceKey.FilterRecipientCountRangeTo))
        },
    });

    // #endregion

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.subject
            || !!gridSettings.value.communicationType
            || !!gridSettings.value.status
            || !!gridSettings.value.createdBy?.value
            || (!!gridSettings.value.createdDateRange?.lowerValue || !!gridSettings.value.createdDateRange?.upperValue)
            || (!!gridSettings.value.sentDateRange?.lowerValue || !!gridSettings.value.sentDateRange?.upperValue)
            || !!gridSettings.value.content
            || (!!gridSettings.value.recipientCount?.lower || !!gridSettings.value.recipientCount?.upper);
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
    * Called when a row's delete button has been clicked by the individual. This
    * happens only if they have confirmed the delete action.
    */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete communication.");
        }
    }

    /**
    * Called when a row's copy button has been clicked by the individual.
    * This sends a request to the server to create a new Communication
    * based on the clicked entity and redirects the user to the specified
    * detail page with the communication id.
    */
    async function onCopyClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Copy", {
            key
        });

        if (result.isSuccess) {
            if (result.data) {
                window.location.href = result.data;
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to copy communication.");
        }
    }

    /**
     * Generates a link to the current person's profile page.
     * @param row The current row.
     */
    function getPersonLink(row: Record<string, unknown>): string {
        const urlTemplate = config.navigationUrls?.[NavigationUrlKey.RootUrl];
        const idKey = row["idKey"] as string;
        if (!urlTemplate || !idKey) {
            return "#";
        }

        return `${urlTemplate}Person/${idKey}`;
    }

    /**
     * Returns the full name of the specified person.
     * @param value
     */
    function formatName(value: PersonFieldBag | null): string {

        if (!value || typeof value !== "object") {
            return "";
        }

        return `${value.nickName ?? ""} ${value.lastName ?? ""}`;
    }

    /**
     * If the current user can approve new communications and no filter value
     * has been saved for the CreatedBy filter default to the Current person.
     * If an empty JSON object has been saved then the previous filter was cleared
     * by the user, thus return an empty value.
     */
    function getCreatedByFilter(): ListItemBag | undefined {
        const createdByJson = preferences.getValue(PreferenceKey.FilterCreatedBy);
        let createdBy = JSON.parse(createdByJson || "{}");

        if (!config.options?.canApprove || !createdByJson) {
            createdBy = config.options?.currentPerson;
        }

        return createdBy;
    }

    /**
     * Formats the specified datetime string.
     * @param dateTime the dateTime string.
     */
    function dateTimeText(dateTime: string): string {
        const date = RockDateTime.parseISO(dateTime);
        return date?.localDateTime.toASPString("d") ?? "";
    }

    /**
    * Called when the grid setting icon is clicked, displays the block filters.
    *
    */
    function onGridSettingsClick(): void {
        isGridSettingsVisible.value = true;
    }

    /**
    * Called when the delete button for a row wants to know if it should be
    * disabled.
    *
    * @param row The row associated with the delete button.
    */
    function onDeleteRowDisabled(row: Record<string, unknown>): boolean {
        return (row.deliveredRecipients as number) > 0;
    }

    /**
    * Gets the filter value to use for the status column.
    *
    * @param row The row to be filtered.
    */
    function getStatusFilterValue(row: Record<string, unknown>): string {
        const status = row["status"] as number;
        return CommunicationStatusDescription[status];
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(PreferenceKey.FilterSubject, gridSettings.value.subject ?? "");
        preferences.setValue(PreferenceKey.FilterCommunicationType, gridSettings.value.communicationType ?? "");
        preferences.setValue(PreferenceKey.FilterStatus, gridSettings.value.status ?? "");
        preferences.setValue(PreferenceKey.FilterContent, gridSettings.value.content ?? "");
        preferences.setValue(PreferenceKey.FilterCreatedDateRangeFrom, gridSettings.value.createdDateRange?.lowerValue ?? RockDateTime.now().addDays(-7).date.toISOString());
        preferences.setValue(PreferenceKey.FilterCreatedDateRangeTo, gridSettings.value.createdDateRange?.upperValue ?? "");
        preferences.setValue(PreferenceKey.FilterSentDateRangeFrom, gridSettings.value.sentDateRange?.upperValue ?? "");
        preferences.setValue(PreferenceKey.FilterSentDateRangeTo, gridSettings.value.sentDateRange?.lowerValue ?? "");
        preferences.setValue(PreferenceKey.FilterRecipientCountRangeFrom, gridSettings.value.recipientCount?.lower?.toString() ?? "");
        preferences.setValue(PreferenceKey.FilterRecipientCountRangeTo, gridSettings.value.recipientCount?.upper?.toString() ?? "");

        const createdBy = gridSettings.value.createdBy ?? {};
        preferences.setValue(PreferenceKey.FilterCreatedBy, config.options?.canApprove ? JSON.stringify(createdBy) : "");

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
