<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="config.errorMessage" :alertType="AlertType.Warning">
        {{ config.errorMessage }}
    </NotificationBox>

    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Communication"
          title="List of Communications"
          liveUpdates
          stickyHeader
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          @gridSettingsClick="isGridSettingsVisible = true"
          @selectItem="onSelectItem">

        <template #gridHeaderPrepend>
            <div class="communication-list-grid-header-button-filters d-flex flex-column flex-sm-row justify-content-sm-between px-3 py-2">
                <div class="buttons-created-by">
                    <template v-if="showCreatedByFilter">
                        <RockButton :btnType="createdByMeBtnType"
                                    :btnSize="BtnSize.Small"
                                    class="mr-1"
                                    @click="onCreatedByMeClick">
                            Created By Me
                        </RockButton>
                        <RockButton :btnType="createdByAnyoneBtnType"
                                    :btnSize="BtnSize.Small"
                                    @click="onCreatedByAnyoneClick">
                            Created By Anyone
                        </RockButton>
                    </template>
                </div>
                <div :class="mediaButtonsCssClass">
                    <RockButton v-if="showFilterToEmailButton"
                                :btnType="filterToEmailBtnType"
                                :btnSize="BtnSize.Small"
                                :title="`Filter to ${CommunicationTypeDescription[CommunicationType.Email]}`"
                                class="mr-1"
                                @click="onToggleCommunicationTypeFilter(CommunicationType.Email, $event)">
                        <i class="ti ti-mail"></i>
                    </RockButton>
                    <RockButton v-if="showFilterToSMSButton"
                                :btnType="filterToSMSBtnType"
                                :btnSize="BtnSize.Small"
                                :title="`Filter to ${CommunicationTypeDescription[CommunicationType.SMS]}`"
                                class="mr-1"
                                @click="onToggleCommunicationTypeFilter(CommunicationType.SMS, $event)">
                        <i class="ti ti-message"></i>
                    </RockButton>
                    <RockButton v-if="showFilterToPushButton"
                                :btnType="filterToPushBtnType"
                                :btnSize="BtnSize.Small"
                                :title="`Filter to ${CommunicationTypeDescription[CommunicationType.PushNotification]}`"
                                class="mr-1"
                                @click="onToggleCommunicationTypeFilter(CommunicationType.PushNotification, $event)">
                        <i class="ti ti-device-mobile"></i>
                    </RockButton>
                    <RockButton :btnType="filterToRecipientPreferenceBtnType"
                                :btnSize="BtnSize.Small"
                                :title="`Filter to ${CommunicationTypeDescription[CommunicationType.RecipientPreference]}`"
                                @click="onToggleCommunicationTypeFilter(CommunicationType.RecipientPreference, $event)">
                        <i class="ti ti-user-circle"></i>
                    </RockButton>
                </div>
            </div>
        </template>

        <Column name="communicationType"
                field="type"
                :exportValue="getCommunicationTypeTextValue"
                :hideOnScreen="true" />

        <Column name="name" field="name" :hideOnScreen="true" />
        <Column name="summary" field="summary" :hideOnScreen="true" />

        <Column name="displayName"
                field="displayName"
                title="Name"
                sortField="name"
                width="40%"
                :quickFilterValue="getDisplayNameTextValue"
                :excludeFromExport="true">
            <template #format="{ row }">
                <DisplayName :row="(row as Row)" />
            </template>
        </Column>

        <Column name="inferredStatus"
                field="inferredStatus"
                title="Status"
                visiblePriority="sm"
                :filter="pickExistingValueFilter"
                :filterValue="getCommunicationStatusTextValue"
                :quickFilterValue="getCommunicationStatusTextValue">
            <template #format="{ row }">
                <StatusLabel :row="(row as Row)" />
            </template>
        </Column>

        <Column name="recipientCount"
                field="recipientCount"
                title="Recipients"
                visiblePriority="sm"
                :filter="numberValueFilter"
                :quickFilterValue="getRecipientCountFilterTextValue">
            <template #format="{ row }">
                <Badge :badgeType="BadgeType.Info" class="grid-cell-recipients">
                    <i class="ti ti-users"></i> {{ asFormattedString(row.recipientCount) }}
                </Badge>
            </template>
        </Column>

        <Column name="deliveredCount" field="deliveredCount" :hideOnScreen="true" />
        <Column name="openedCount" field="openedCount" :hideOnScreen="true" />
        <Column name="failedCount" field="failedCount" :hideOnScreen="true" />
        <Column name="unsubscribedCount" field="unsubscribedCount" :hideOnScreen="true" />

        <LabelColumn name="topic"
                     field="topic"
                     title="Topic"
                     defaultLabelClass="outline"
                     visiblePriority="xl"
                     :filter="pickExistingValueFilter" />

        <Column name="sendDateTime"
                field="sendDateTime"
                title="Send Date"
                visiblePriority="lg"
                :filter="dateValueFilter"
                :filterValue="getSendDateTimeIsoValue"
                :quickFilterValue="getSendDateTimeTextValue"
                :sortValue="getSendDateTimeIsoValue"
                :exportValue="getSendDateTimeTextValue">
            <template #format="{ row }">
                <div class="communication-list-grid-cell-send-date">
                    <template v-if="row.sendDateTime">
                        {{ getFormattedDateTime(row.sendDateTime) }}
                    </template>
                    <template v-else-if="row.futureSendDateTime">
                        <i class="ti ti-clock align-self-center"></i>
                        {{ getFormattedDateTime(row.futureSendDateTime) }}
                    </template>
                </div>
            </template>
        </Column>

        <PersonColumn name="sentByPerson"
                      field="sentByPerson"
                      title="Sent By"
                      visiblePriority="xl"
                      :hideAvatar="true"
                      :showAsLink="true"
                      :filter="pickExistingValueFilter"
                      :filterValue="getSentByPersonTextValue"
                      :quickFilterValue="getSentByPersonTextValue" />

        <DeleteColumn v-if="config.isDeleteEnabled"
                      visiblePriority="xl"
                      :rowDisabled="getIsDeleteDisabled"
                      @click="onDeleteClick" />

    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :showCreatedByFilter="showCreatedByFilter"
                       :defaultSlidingDateRange="defaultSlidingDateRange" />
</template>

<style scoped>
.communication-list-grid-header-button-filters {
    background-color: var(--theme-light);
}

.grid-cell-recipients {
    font-size: var(--font-size-small);
}
</style>

<script setup lang="ts">
    import { computed, reactive, ref, watch } from "vue";
    import DisplayName from "./CommunicationList/displayName.partial.obs";
    import GridSettingsModal from "./CommunicationList/gridSettingsModal.partial.obs";
    import StatusLabel from "./CommunicationList/statusLabel.partial.obs";
    import { GridSettingsOptions, NavigationUrlKey, PreferenceKey, Row } from "./CommunicationList/types.partial";
    import Badge from "@Obsidian/Controls/badge.obs";
    import Grid, { Column, dateValueFilter, DeleteColumn, LabelColumn, numberValueFilter, PersonColumn, pickExistingValueFilter } from "@Obsidian/Controls/grid";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { InferredCommunicationStatusDescription } from "@Obsidian/Enums/Communication/inferredCommunicationStatus";
    import { CommunicationType, CommunicationTypeDescription } from "@Obsidian/Enums/Communication/communicationType";
    import { AlertType } from "@Obsidian/Enums/Controls/alertType";
    import { BadgeType } from "@Obsidian/Enums/Controls/badgeType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { useStore } from "@Obsidian/PageState";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock, usePersonPreferences } from "@Obsidian/Utility/block";
    import { asBoolean, asTrueOrFalseString } from "@Obsidian/Utility/booleanUtils";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { asFormattedString, toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { parseSlidingDateRangeString, RangeType, SlidingDateRange, slidingDateRangeToString, TimeUnit } from "@Obsidian/Utility/slidingDateRange";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { CommunicationListOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationList/communicationListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { CurrentPersonBag } from "@Obsidian/ViewModels/Crm/currentPersonBag";
    import { formatAspDate } from "@Obsidian/Utility/aspDateFormat";
    import { CancellationTokenSource, ICancellationToken } from "@Obsidian/Utility/cancellation";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { debounceAsync } from "@Obsidian/Utility/util";

    const config = useConfigurationValues<ListBlockBox<CommunicationListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;
    const store = useStore();

    onConfigurationValuesChanged(useReloadBlock());

    // We'll enforce a default date range of the last 6 months - to be applied
    // if the individual doesn't have a preference - as the [Communication] table
    // can have a large number of rows.
    const defaultSlidingDateRange: SlidingDateRange = {
        rangeType: RangeType.Last,
        timeUnit: TimeUnit.Month,
        timeValue: 6
    };

    // Ensure rapid filter selection changes result in using only the latest
    // filter values before saving person preferences or making a request to the
    // server for new grid data.
    let filterCancellationTokenSource: CancellationTokenSource | null = null;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        createdBy: JSON.parse(preferences.getValue(PreferenceKey.FilterCreatedBy) || "{}"),
        hideDrafts: asBoolean(preferences.getValue(PreferenceKey.FilterHideDrafts)),
        slidingDateRange: parseSlidingDateRangeString(preferences.getValue(PreferenceKey.FilterSendDateRange)) ?? defaultSlidingDateRange,
        recipientCountRange: {
            lower: toNumberOrNull(preferences.getValue(PreferenceKey.FilterRecipientCountLower)),
            upper: toNumberOrNull(preferences.getValue(PreferenceKey.FilterRecipientCountUpper))
        },
        topic: JSON.parse(preferences.getValue(PreferenceKey.FilterTopic) || "{}"),
        name: preferences.getValue(PreferenceKey.FilterName),
        content: preferences.getValue(PreferenceKey.FilterContent)
    });

    const filterCommunicationTypes = ref(
        (
            preferences.getValue(PreferenceKey.FilterCommunicationTypes)
                ?.split("|")
                .filter(t => t)
        ) ?? []
    );

    // #endregion Values

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.createdBy
            || !!gridSettings.value.slidingDateRange
            || !!gridSettings.value.recipientCountRange
            || !!gridSettings.value.topic
            || !!gridSettings.value.name
            || !!gridSettings.value.content;
    });

    /** `true` if the "Created By" filter controls should be displayed. */
    const showCreatedByFilter = computed((): boolean => {
        return config.options?.showCreatedByFilter ?? false;
    });

    /** `true` if the "Filter to Email" button should be displayed. */
    const showFilterToEmailButton = computed((): boolean => {
        return !!config.options?.hasActiveEmailTransport;
    });

    /** `true` if the "Filter to SMS" button should be displayed. */
    const showFilterToSMSButton = computed((): boolean => {
        return !!config.options?.hasActiveSmsTransport;
    });

    /** `true` if the "Filter to Push Notifications" button should be displayed. */
    const showFilterToPushButton = computed((): boolean => {
        return !!config.options?.hasActivePushTransport;
    });

    /** The CSS class[es] to use for the media filter buttons element. */
    const mediaButtonsCssClass = computed((): string => {
        return `buttons-media${showCreatedByFilter.value ? " pt-1 pt-sm-0" : " align-self-end align-self-stretch-sm"}`;
    });

    /** The person that is currently authenticated. */
    const currentPerson = computed((): CurrentPersonBag | null => {
        return store.state.currentPerson;
    });

    const filteredByPersonGuidLower = computed((): string | undefined => {
        return gridSettings.value.createdBy?.value?.toLowerCase();
    });

    /** The button type to use for the "Created By Me" button. */
    const createdByMeBtnType = computed((): BtnType => {
        let isFilteredByMe = !!(
            filteredByPersonGuidLower.value
            && filteredByPersonGuidLower.value === currentPerson.value?.primaryAliasGuid.toLowerCase()
        );

        return isFilteredByMe
            ? BtnType.Primary
            : BtnType.Default;
    });

    /** The button type to use for the "Created By Anyone" button. */
    const createdByAnyoneBtnType = computed((): BtnType => {
        return !filteredByPersonGuidLower.value
            ? BtnType.Primary
            : BtnType.Default;
    });

    /** `true` if the grid is currently filtered to "Email" communications. */
    const isFilteredToEmail = computed((): boolean => {
        return filterCommunicationTypes.value.includes(CommunicationType.Email.toString());
    });

    /** `true` if the grid is currently filtered to "SMS" communications. */
    const isFilteredToSMS = computed((): boolean => {
        return filterCommunicationTypes.value.includes(CommunicationType.SMS.toString());
    });

    /** `true` if the grid is currently filtered to "Push Notification" communications. */
    const isFilteredToPush = computed((): boolean => {
        return filterCommunicationTypes.value.includes(CommunicationType.PushNotification.toString());
    });

    /** `true` if the grid is currently filtered to "Recipient Preference" communications. */
    const isFilteredToRecipientPreference = computed((): boolean => {
        return filterCommunicationTypes.value.includes(CommunicationType.RecipientPreference.toString());
    });

    /** The button type to use for the "Filter to Email" button. */
    const filterToEmailBtnType = computed((): BtnType => {
        return isFilteredToEmail.value
            ? BtnType.Action
            : BtnType.Default;
    });

    /** The button type to use for the "Filter to SMS" button. */
    const filterToSMSBtnType = computed((): BtnType => {
        return isFilteredToSMS.value
            ? BtnType.Action
            : BtnType.Default;
    });

    /** The button type to use for the "Filter to Push" button. */
    const filterToPushBtnType = computed((): BtnType => {
        return isFilteredToPush.value
            ? BtnType.Action
            : BtnType.Default;
    });

    /** The button type to use for the "Filter to Recipient Preference" button. */
    const filterToRecipientPreferenceBtnType = computed((): BtnType => {
        return isFilteredToRecipientPreference.value
            ? BtnType.Action
            : BtnType.Default;
    });

    // #endregion Computed Values

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     *
     * @param cancellationToken A cancellation token that will instruct this
     * function to exit early and discard results.
     */
    async function loadGridData(cancellationToken?: ICancellationToken): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (cancellationToken?.isCancellationRequested) {
            return {};
        }

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Saves the currently-selected person preferences.
     *
     * @param cancellationToken A cancellation token that will instruct this
     * function to exit early and discard results.
     */
    async function savePreferences(cancellationToken?: ICancellationToken): Promise<void> {
        if (cancellationToken?.isCancellationRequested) {
            return;
        }

        await preferences.save();

        // Reload grid data to apply new person preference selections.
        gridDataSource.value = loadGridData(cancellationToken);
    }

    /**
     * Debounces calls to the `savePreferences` function so it will only be
     * called once during the specified delay period (500ms). We're building in
     * this debounce because the block's design encourages rapid filter
     * selection by way of the medium and "Created By .." buttons.
     */
    const savePreferencesDebounce = debounceAsync(savePreferences, { delay: 500 });

    /**
     * Gets the text value for the "Type" column.
     *
     * @param row The row whose value to get.
     */
    function getCommunicationTypeTextValue(row: Record<string, unknown>): string {
        return CommunicationTypeDescription[(row as Row).type];
    }

    /**
     * Gets the text value for the "[Display]Name" column.
     *
     * @param row The row whose value to get.
     */
    function getDisplayNameTextValue(row: Record<string, unknown>): string {
        return (row as Row).name?.toString() ?? "";
    }

    /**
     * Gets the text value for the "Status" column.
     *
     * @param row The row whose value to get.
     */
    function getCommunicationStatusTextValue(row: Record<string, unknown>): string {
        return InferredCommunicationStatusDescription[(row as Row).inferredStatus];
    }

    /**
     * Gets the text value for the "Recipient" column.
     *
     * @param row The row whose value to get.
     */
    function getRecipientCountFilterTextValue(row: Record<string, unknown>): string {
        return (row as Row).recipientCount.toString();
    }

    /**
     * Gets the text value for the "Send Date" column.
     *
     * @param row The row whose value to get.
     */
    function getSendDateTimeIsoValue(row: Record<string, unknown>): string {
        const r = row as Row;

        if (r.sendDateTime) {
            return r.sendDateTime;
        }

        return r.futureSendDateTime ?? "";
    }

    /**
     * Gets the text value for the "Send Date" column.
     *
     * @param row The row whose value to get.
     */
    function getSendDateTimeTextValue(row: Record<string, unknown>): string {
        const r = row as Row;

        if (r.sendDateTime) {
            return getFormattedDateTime(r.sendDateTime);
        }

        return getFormattedDateTime(r.futureSendDateTime ?? "");
    }

    /**
     * Gets a formatted date time from the provided date time string.
     *
     * @param dateTimeString The date time string to format.
     */
    function getFormattedDateTime(dateTimeString: string): string {
        const rockDateTime = RockDateTime.parseISO(dateTimeString);
        if (!rockDateTime) {
            return "";
        }

        return formatAspDate(rockDateTime, "g");
    }

    /**
     * Gets the text value for the "Sent By" column.
     *
     * @param row The row whose value to get.
     */
    function getSentByPersonTextValue(row: Record<string, unknown>): string {
        const person = (row as Row).sentByPerson;
        return !person ? "" : `${person.nickName} ${person.lastName}`;
    }

    /**
     * `true` if delete is disabled for this row.
     *
     * @param row The row whose delete disabled status to get.
     */
    function getIsDeleteDisabled(row: Record<string, unknown>): boolean {
        return (row as Row).isDeleteDisabled;
    }

    // #endregion Functions

    // #region Event Handlers

    /**
     * Called when the "Created By Me" button is clicked.
     *
     * @param event The mouse event.
     */
    function onCreatedByMeClick(event: MouseEvent): void {
        (event.currentTarget as HTMLElement)?.blur();

        gridSettings.value = {
            ...gridSettings.value,
            createdBy: {
                value: currentPerson.value?.primaryAliasGuid,
                text: currentPerson.value?.fullName,
            }
        };
    }

    /**
     * Called when the "Created By Anyone" button is clicked.
     *
     * @param event The mouse event.
     */
    function onCreatedByAnyoneClick(event: MouseEvent): void {
        (event.currentTarget as HTMLElement)?.blur();

        gridSettings.value = {
            ...gridSettings.value,
            createdBy: undefined
        };
    }

    /**
     * Called when a communication type filter button is clicked.
     *
     * @param communicationType The communication type filter to toggle.
     * @param event The mouse event.
     */
    async function onToggleCommunicationTypeFilter(communicationType: CommunicationType, event: MouseEvent): Promise<void> {
        // Cancel any in-process filtering.
        filterCancellationTokenSource?.cancel();
        filterCancellationTokenSource = new CancellationTokenSource();

        (event.currentTarget as HTMLElement)?.blur();

        // Add or remove the communication type filter.
        const communicationTypeString = communicationType.toString();
        if (!filterCommunicationTypes.value.includes(communicationTypeString)) {
            // Add it.
            filterCommunicationTypes.value = [
                ...filterCommunicationTypes.value,
                communicationTypeString
            ];
        }
        else {
            // Remove it.
            filterCommunicationTypes.value = filterCommunicationTypes.value
                .filter(t => t !== communicationTypeString);
        }

        // Set the preference.
        preferences.setValue(PreferenceKey.FilterCommunicationTypes, filterCommunicationTypes.value.join("|"));

        await savePreferencesDebounce(filterCancellationTokenSource.token);
    }

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => (r["idKey"] === key));

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete communication.");
        }
    }

    // #endregion Event Handlers

    // #region Watchers

    watch(gridSettings, async () => {
        // Cancel any in-process filtering.
        filterCancellationTokenSource?.cancel();
        filterCancellationTokenSource = new CancellationTokenSource();

        const slidingDateRangeString = gridSettings.value.slidingDateRange
            ? slidingDateRangeToString(gridSettings.value.slidingDateRange)
            : slidingDateRangeToString(defaultSlidingDateRange);

        preferences.setValue(PreferenceKey.FilterCreatedBy, JSON.stringify(gridSettings.value.createdBy));
        preferences.setValue(PreferenceKey.FilterHideDrafts, asTrueOrFalseString(gridSettings.value.hideDrafts));
        preferences.setValue(PreferenceKey.FilterSendDateRange, slidingDateRangeString);
        preferences.setValue(PreferenceKey.FilterRecipientCountLower, gridSettings.value.recipientCountRange?.lower?.toString() ?? "");
        preferences.setValue(PreferenceKey.FilterRecipientCountUpper, gridSettings.value.recipientCountRange?.upper?.toString() ?? "");
        preferences.setValue(PreferenceKey.FilterTopic, JSON.stringify(gridSettings.value.topic));
        preferences.setValue(PreferenceKey.FilterName, gridSettings.value.name);
        preferences.setValue(PreferenceKey.FilterContent, gridSettings.value.content);

        await savePreferencesDebounce(filterCancellationTokenSource.token);
    });

    // #endregion Watchers

    gridDataSource.value = loadGridData();
</script>
