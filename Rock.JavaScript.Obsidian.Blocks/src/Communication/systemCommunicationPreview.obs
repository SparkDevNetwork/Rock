<template>
    <Panel :title="systemCommunicationName" class="panel-analytics">
        <div class="row row-eq-height-md">
            <!-- Left Menu -->
            <div class="col-md-3 filter-options">
                <div class="form-group static-control ">
                    <label class="control-label">System Communication</label>
                    <div class="control-wrapper">
                        <div class="form-control-static">
                            {{ systemCommunicationName }}
                        </div>
                    </div>
                </div>
                <!-- Dropdown for Message Date -->
                <DropDownList v-if="hasSendDate && messageDateOptions.length > 0"
                              v-model="selectedMessageDate"
                              :items="messageDateOptions"
                              :isRequiredIndicatorHidden="true"
                              label="Message Date"
                              help="Date to use when previewing the message. The default date is today's date." />

                <!-- Person Picker -->
                <PersonPicker @update:modelValue="handlePersonSelected"
                              label="Target Person"
                              help="Person used to customize the email preview." />

                <!-- Update Button -->
                <RockButton btnType="primary" @click="updatePreview">Update</RockButton>
            </div>

            <!-- Email Preview -->
            <div class="col-md-9">
                <div class="card card-message-preview" :class="{ 'mobile-preview': isMobileView }">
                    <div class="card-header bg-white py-2 px-0">
                        <!-- Email Preview Headers -->
                        <div class="row no-gutters p-2">
                            <div class="col-xs-3 text-right"><span class="text-muted pr-md-4 text-nowrap">From</span></div>
                            <div class="col-xs-9"><span class="font-weight-bold">{{ fromName }} </span><span>{{ emailFrom }}</span></div>
                        </div>
                        <div class="row no-gutters p-2">
                            <div class="col-xs-3 text-right"><span class="text-muted pr-md-4 text-nowrap">Subject</span></div>
                            <div class="col-xs-9 font-weight-bold">{{ emailSubject }}</div>
                        </div>
                        <div class="row no-gutters p-2">
                            <div class="col-xs-3 text-right"><span class="text-muted pr-md-4 text-nowrap">Date</span></div>
                            <div class="col-xs-9 font-weight-bold">{{ emailDate }}</div>
                        </div>
                    </div>
                    <div class="card-header py-1 bg-white position-relative d-flex justify-content-end">
                        <div class="inset-0 d-flex align-items-center justify-content-center">
                            <div class="btn-group btn-group-view-control" role="group" aria-label="View Mode">
                                <RockButton :btnSize="'xs'" :btnType="isMobileView ? 'default' : 'info'" @click="isMobileView = false">Desktop</RockButton>
                                <RockButton :btnSize="'xs'" :btnType="isMobileView ? 'info' : 'default'" @click="isMobileView = true">Mobile</RockButton>
                            </div>
                        </div>
                        <div class="justify-self-end z-10">
                            <RockButton btnType="primary" :btnSize="'xs'" @click="openSendTestModal">Send Test</RockButton>
                        </div>
                    </div>
                    <!-- Email Preview Content -->
                    <div class="card-body p-0 styled-scroll" ref="emailPreviewContainer">
                        <div v-html="emailContent" class="email-content"></div>
                    </div>
                </div>
            </div>
        </div>
    </Panel>

    <!-- Modal for Sending Test Email -->
    <Modal v-model="isSendTestModalVisible" :title="'Send Test Email'">
        <div v-if="emailError">
            <NotificationBox alertType="danger" :dismissible="true">
                {{ emailMessage }}
            </NotificationBox>
        </div>
        <div v-if="emailSuccess">
            <NotificationBox alertType="success" :dismissible="true">
                {{ emailMessage }}
            </NotificationBox>
        </div>
        <div class="form-group">
            <EmailBox v-model="testEmail" label="Email" required />
        </div>
        <div>
            <RockButton btnType="primary" @click="sendTest">Send</RockButton>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { SystemCommunicationPreviewInitializationBox } from "@Obsidian/ViewModels/Blocks/Communication/SystemCommunicationPreview/systemCommunicationPreviewInitializationBox";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import Panel from "@Obsidian/Controls/panel.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";

    // #region Values

    const config = useConfigurationValues<SystemCommunicationPreviewInitializationBox>();
    const { hasSendDate } = config;
    const invokeBlockAction = useInvokeBlockAction();

    const targetPersonId = ref<number>(0);
    const systemCommunicationName = ref<string>(config.title || "System Communication Preview");
    const fromName = ref<string | null | undefined>(config.fromName);
    const fromEmail = ref<string | null | undefined>(config.from);
    const emailSubject = ref<string | null | undefined>(config.subject);
    const emailDate = ref<string | null | undefined>(config.date);
    const emailContent = ref<string | null | undefined>(config.body);
    const testEmail = ref<string>("");
    const emailFrom = computed(() => {
        // Use the default email if config.from is null or an empty string
        const emailAddress = config.from && config.from.trim() !== "" ? config.from : "info@organizationname.com";
        return `<${emailAddress}>`;
    });

    const currentDate = formatDate(new Date());
    const formattedCurrentDate = formatDate(currentDate);
    const selectedMessageDate = ref<string>(formattedCurrentDate);
    const systemCommunicationId = ref<number>(0);

    const isSendTestModalVisible = ref<boolean>(false);
    const messageDateOptions = ref<ListItemBag[]>([]);
    const isMobileView = ref<boolean>(false);
    const emailError = ref<boolean>(false);
    const emailSuccess = ref<boolean>(false);
    const emailMessage = ref<string>("");
    const emailPreviewContainer = ref<HTMLElement | null>(null);

    // #endregion

    // #region Functions

    /**
     * Adjusts the CSS in the email content for the mobile view preview
     */
    function adjustEmailContentForMobile(): void {
        if (!emailPreviewContainer) return;

        // Adjusting styles for table.body
        const bodyTables = emailPreviewContainer.value?.querySelectorAll("table.body");
        bodyTables?.forEach(table => {
            let element = table as HTMLElement;
            element.style.width = "100%";
            element.style.maxWidth = isMobileView.value ? "75%" : "100%";
        });

        // Adjusting styles for table.row.header
        const headerTables = emailPreviewContainer.value?.querySelectorAll("table.row.header");
        headerTables?.forEach(table => {
            let element = table as HTMLElement;
            element.style.width = "100%";
            element.style.maxWidth = isMobileView.value ? "75%" : "";
        });

        // Adjusting styles for table.container, table.twelve.columns, table.row, and table.row.footer
        const containerTables = emailPreviewContainer.value?.querySelectorAll("table.container, table.twelve.columns, table.row, table.row.footer");
        containerTables?.forEach(table => {
            let element = table as HTMLElement;
            element.style.width = isMobileView.value ? "100%" : "580px";
            element.style.maxWidth = isMobileView.value ? "75%" : "";
            element.style.margin = isMobileView.value ? "0" : "auto";
        });

        // Adjusting styles for table.six.columns
        const sixColumnTables = emailPreviewContainer.value?.querySelectorAll("table.six.columns");
        sixColumnTables?.forEach(table => {
            let element = table as HTMLElement;
            element.style.width = isMobileView.value ? "100%" : "280px";
            element.style.maxWidth = isMobileView.value ? "75%" : "";
        });

        // Resetting styles for paragraphs and table data
        emailPreviewContainer.value?.querySelectorAll("p, td").forEach(element => {
            let htmlElement = element as HTMLElement;
            htmlElement.style.fontSize = isMobileView.value ? "12px" : "";
        });

        emailPreviewContainer.value?.querySelectorAll("center").forEach(element => {
            let htmlElement = element as HTMLElement;
            htmlElement.style.minWidth = isMobileView.value ? "412px" : "580px";
        });
    }

    /**
     * Opens the modal for sending a test email upon user entering a valid email
     */
    function openSendTestModal(): void {
        isSendTestModalVisible.value = true;
    }

    /**
     * Fetches the date options for the message date dropdown
     */
    async function fetchDateOptions(): Promise<void> {
        try {
            const result = await invokeBlockAction<ListItemBag[]>("GetDateOptions");
            if (result.isSuccess && result.data) {
                messageDateOptions.value = result.data;
            }
            else {
                console.error("Failed to fetch date options:", result.errorMessage);
            }
        }
        catch (error) {
            console.error("Error fetching date options:", error);
        }
    }

    /**
     * Formats the date string to 'YYYY-MM-DD'
     * @param dateString The date string to format
     */
    function formatDate(dateString): string {
        // Check if the dateString is valid and in the expected format 'YYYYMMDD'
        if (!/^\d{8}$/.test(dateString)) {
            return "";
        }

        // Extract year, month, and day using substring
        const year = dateString.substring(0, 4);
        const month = dateString.substring(4, 6);
        const day = dateString.substring(6, 8);

        // Return formatted date string 'YYYY-MM-DD'
        return `${year}-${month}-${day}`;
    }

    /**
     * Handles the person selected event from the PersonPicker
     * @param selectedPerson The selected person
     */
    async function handlePersonSelected(selectedPerson): Promise<void> {
        if (selectedPerson && selectedPerson.value) {
            try {
                const bag = { personAliasGuid: selectedPerson.value };
                const result = await invokeBlockAction("GetTargetPerson", { bag });
                if (result.isSuccess && result.data) {
                    // Update the targetPersonId with the returned person ID
                    targetPersonId.value = (result.data as { id?: number }).id || 0;
                    // Proceed with updating the URL parameters and preview
                    updateUrlParameters();
                    updatePreview();
                }
            }
            catch (error) {
                console.error("Error fetching person data:", error);
            }
        }
    }

    /**
     * Updates the preview content based on the selected Person and message date if provided
     */
    async function updatePreview(): Promise<void> {
        const publicationDate = formatDate(selectedMessageDate.value);

        try {
            const box: SystemCommunicationPreviewInitializationBox = {
                id: systemCommunicationId.value,
                targetPersonId: targetPersonId.value,
                publicationDate: publicationDate,
                hasSendDate: false
            };

            const result = await invokeBlockAction<SystemCommunicationPreviewInitializationBox>("SetSystemCommunication", { box });

            if (result.isSuccess && result.data) {
                emailContent.value = result.data.body;
                emailSubject.value = result.data.subject;
                emailDate.value = result.data.date || "";
                updateEmailFrom(result.data.fromName || "", result.data.from || "");
            }

            updateUrlParameters();
        }
        catch (error) {
            console.error("Error updating preview:", error);
        }
    }

    /**
     * Updates the From Name and From Email fields
     * @param newFromName The new From Name
     * @param newFromEmail The new From Email
     */
    function updateEmailFrom(newFromName: string, newFromEmail: string): void {
        fromName.value = newFromName;
        fromEmail.value = newFromEmail;
    }

    /**
     * Sends a test email to the entered email address
     */
    async function sendTest(): Promise<void> {
        if (!testEmail.value) {
            emailError.value = true;
            emailMessage.value = "Please enter a valid email address.";
            return;
        }

        emailError.value = false;
        emailSuccess.value = false;

        // Invoke block action to send test email
        try {
            const box: SystemCommunicationPreviewInitializationBox = {
                id: systemCommunicationId.value,
                email: testEmail.value,
                targetPersonId: targetPersonId.value,
                hasSendDate: false
            };

            const result = await invokeBlockAction("SendTestEmail", { box });

            if (result.isSuccess) {
                emailSuccess.value = true;
                emailMessage.value = "Test email sent successfully.";
            }
            else {
                emailError.value = true;
                emailMessage.value = result.errorMessage || "Failed to send email.";
            }
        }
        catch (error) {
            emailError.value = true;
            emailMessage.value = "Failed to send email.";
            console.error("Error sending test email:", error);
        }
    }

    /**
     * Updates the URL parameters with the selected Person and message date
     */
    function updateUrlParameters(): void {
        const queryParams = new URLSearchParams(window.location.search);
        // The systems communication ID will be retrieved from the URL parameters
        const systemCommunicationIdParam = queryParams.get("SystemCommunicationId");
        systemCommunicationId.value = systemCommunicationIdParam ? parseInt(systemCommunicationIdParam) : 0;
        queryParams.set("TargetPersonId", targetPersonId.value.toString());
        queryParams.set("PublicationDate", selectedMessageDate.value);

        history.pushState(null, "", "?" + queryParams.toString());
    }

    /**
     * Reads the URL parameters and sets the targetPersonId and selectedMessageDate
     */
    function readUrlParameters(): void {
        const queryParams = new URLSearchParams(window.location.search);
        const urlPersonId = queryParams.get("TargetPersonId");
        const urlDate = queryParams.get("PublicationDate");

        if (urlPersonId) {
            targetPersonId.value = parseInt(urlPersonId);
        }
        else {
            // set targetPersonId to CurrentPerson's ID
            targetPersonId.value = 4;
        }

        if (urlDate) {
            selectedMessageDate.value = urlDate;
        }
        else {
            selectedMessageDate.value = currentDate;
        }
    }

    // #endregion

    // #region Watchers

    // Watcher for changes to the date dropdown
    watch(selectedMessageDate, () => {
        updatePreview();
    });

    // Watcher for isMobileView to adjust content when toggled
    watch(isMobileView, () => {
        adjustEmailContentForMobile();
    });

    // #endregion

    function onInit(): void {
        fetchDateOptions();
        readUrlParameters();
        updateUrlParameters();
    }

    onInit();

</script>
