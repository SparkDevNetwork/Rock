<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="phoneNumber"
                         label="Phone Number"
                         rules="required"
                         help="The phone number in the format of +16235553324." />
            </div>

            <div class="col-md-6">
                <PersonPicker v-model="assignedToPersonAlias"
                              label="Assigned to Person"
                              help="The person who should receive responses to the SMS number. This person must have a phone number with SMS enabled or no response will be sent." />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <CheckBox v-model="isSmsEnabled"
                          label="SMS Enabled"
                          help="Determines if SMS features should be enabled for this phone number." />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isSmsForwardingEnabled"
                          label="SMS Forwarding"
                          help="Determines if messages received on this number should be forwarded to the assigned person." />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <WorkflowTypePicker v-model="smsReceivedWorkflowType"
                                    label="SMS Received Workflow"
                                    help="The workflow type to launch when a response is received. Additionally if the workflow type has any of the following attribute keys defined, those attribute values will also be set: FromPhone, Message, SMSFromDefinedValue, FromPerson, ToPerson." />
            </div>

            <div class="col-md-6">
                <GroupPicker v-model="smsNotificationGroup"
                             label="SMS Notification Group"
                             help="Active members of this group will recieve notifications when new SMS messages are received." />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <DropDownList v-model="mobileApplication"
                              label="Mobile Application"
                              help="Determines which mobile application to use when sending notifications."
                              :items="options.mobileSites ?? []" />
            </div>
            <div class="col-md-6">
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import GroupPicker from "@Obsidian/Controls/groupPicker.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import WorkflowTypePicker from "@Obsidian/Controls/workflowTypePicker.obs";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { SystemPhoneNumberBag } from "@Obsidian/ViewModels/Blocks/Communication/SystemPhoneNumberDetail/systemPhoneNumberBag";
    import { SystemPhoneNumberDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/SystemPhoneNumberDetail/systemPhoneNumberDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<SystemPhoneNumberBag>,
            required: true
        },

        options: {
            type: Object as PropType<SystemPhoneNumberDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: SystemPhoneNumberBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue.attributes ?? {});
    const attributeValues = ref(props.modelValue.attributeValues ?? {});
    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const phoneNumber = propertyRef(props.modelValue.number ?? "", "Number");
    const assignedToPersonAlias = propertyRef(props.modelValue.assignedToPersonAlias ?? undefined, "AssignedToPersonAliasId");
    const isSmsEnabled = propertyRef(props.modelValue.isSmsEnabled ?? false, "IsSmsEnabled");
    const isSmsForwardingEnabled = propertyRef(props.modelValue.isSmsForwardingEnabled ?? false, "IsSmsForwardingEnabled");
    const smsReceivedWorkflowType = propertyRef(props.modelValue.smsReceivedWorkflowType ?? undefined, "SmsReceivedWorkflowTypeId");
    const smsNotificationGroup = propertyRef(props.modelValue.smsNotificationGroup ?? undefined, "SmsNotificationGroupId");
    const mobileApplication = propertyRef(props.modelValue.mobileApplicationSite?.value ?? "", "MobileApplicationSiteId");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, phoneNumber, assignedToPersonAlias, isSmsEnabled, isSmsForwardingEnabled, smsReceivedWorkflowType, smsNotificationGroup, mobileApplication];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(phoneNumber, props.modelValue.number ?? "");
        updateRefValue(assignedToPersonAlias, props.modelValue.assignedToPersonAlias ?? undefined);
        updateRefValue(isSmsEnabled, props.modelValue.isSmsEnabled ?? false);
        updateRefValue(isSmsForwardingEnabled, props.modelValue.isSmsForwardingEnabled ?? false);
        updateRefValue(smsReceivedWorkflowType, props.modelValue.smsReceivedWorkflowType ?? undefined);
        updateRefValue(smsNotificationGroup, props.modelValue.smsNotificationGroup ?? undefined);
        updateRefValue(mobileApplication, props.modelValue.mobileApplicationSite?.value ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: SystemPhoneNumberBag = {
            ...props.modelValue,
            attributeValues: attributeValues.value,
            description: description.value,
            isActive: isActive.value,
            name: name.value,
            number: phoneNumber.value,
            assignedToPersonAlias: assignedToPersonAlias.value,
            isSmsEnabled: isSmsEnabled.value,
            isSmsForwardingEnabled: isSmsForwardingEnabled.value,
            smsReceivedWorkflowType: smsReceivedWorkflowType.value,
            smsNotificationGroup: smsNotificationGroup.value,
            mobileApplicationSite: mobileApplication.value ? { value: mobileApplication.value } : null
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
