<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel v-if="deliveryBreakdown" title="Delivery Breakdown">

        <template #headerActions>
            <div v-if="recipientCountLabel" class="action">
                <HighlightLabel labelType="primary">
                    {{ recipientCountLabel }}
                </HighlightLabel>
            </div>
        </template>

        <div class="communication-delivery-breakdown-bar">
            <div class="communication-delivery-breakdown-bar-pending"
                 :style="`width:${pendingPercentage}%`"
                 :data-original-title="tooltips[statuses.pending]"
                 :ref="applyTooltip">
                <span v-if="labels[statuses.pending]">
                    {{ labels[statuses.pending] }}
                </span>
            </div>
            <div class="communication-delivery-breakdown-bar-delivered"
                 :style="`width:${deliveredPercentage}%`"
                 :data-original-title="tooltips[statuses.delivered]"
                 :ref="applyTooltip">
                <span v-if="labels[statuses.delivered]">
                    {{ labels[statuses.delivered] }}
                </span>
            </div>
            <div class="communication-delivery-breakdown-bar-failed"
                 :style="`width:${failedPercentage}%`"
                 :data-original-title="tooltips[statuses.failed]"
                 :ref="applyTooltip">
                <span v-if="labels[statuses.failed]">
                    {{ labels[statuses.failed] }}
                </span>
            </div>
            <div class="communication-delivery-breakdown-bar-cancelled"
                 :style="`width:${cancelledPercentage}%`"
                 :data-original-title="tooltips[statuses.cancelled]"
                 :ref="applyTooltip">
                <span v-if="labels[statuses.cancelled]">
                    {{ labels[statuses.cancelled] }}
                </span>
            </div>
        </div>

        <div class="communication-delivery-breakdown-legend">
            <div class="communication-delivery-breakdown-legend-pending">
                <div class="communication-delivery-breakdown-legend-swatch"></div>
                Pending ({{ asFormattedString(pendingCount) }})
            </div>
            <div class="communication-delivery-breakdown-legend-delivered">
                <div class="communication-delivery-breakdown-legend-swatch"></div>
                Delivered ({{ asFormattedString(deliveredCount) }})
            </div>
            <div class="communication-delivery-breakdown-legend-failed">
                <div class="communication-delivery-breakdown-legend-swatch"></div>
                Failed ({{ asFormattedString(failedCount) }})
            </div>
            <div class="communication-delivery-breakdown-legend-cancelled">
                <div class="communication-delivery-breakdown-legend-swatch"></div>
                Cancelled ({{ asFormattedString(cancelledCount) }})
            </div>
        </div>

    </Panel>
</template>

<style scoped>
.communication-delivery-breakdown-bar {
    display: flex;
    height: 80px;
    border-radius: var(--rounded-tiny);
    overflow: hidden;
}

.communication-delivery-breakdown-bar > div {
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: var(--font-weight-semibold);
}

.communication-delivery-breakdown-bar-pending,
.communication-delivery-breakdown-legend-pending > div {
    color: var(--color-interface-strong);
    background: var(--color-interface-soft);
}

.communication-delivery-breakdown-bar-delivered,
.communication-delivery-breakdown-legend-delivered > div {
    color: var(--color-success-strong);
    background: var(--color-success-soft);
}

.communication-delivery-breakdown-bar-failed,
.communication-delivery-breakdown-legend-failed > div {
    color: var(--color-danger-strong);
    background: var(--color-danger-soft);
}

.communication-delivery-breakdown-bar-cancelled,
.communication-delivery-breakdown-legend-cancelled > div {
    color: var(--color-warning-strong);
    background: var(--color-warning-soft);
}

.communication-delivery-breakdown-legend {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-large);
    padding-top: var(--spacing-medium);
    font-size: var(--font-size-small);
    font-weight: var(--font-weight-semibold);
}

.communication-delivery-breakdown-legend > div {
    display: flex;
    flex-wrap: nowrap;
    align-items: center;
    gap: var(--spacing-xsmall);
}

.communication-delivery-breakdown-legend-swatch {
    width: var(--spacing-large);
    height: var(--spacing-large);
    border-radius: var(--rounded-tiny);
}
</style>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import { useMediumFilter } from "./utils.partial";
    import HighlightLabel from "@Obsidian/Controls/highlightLabel.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { CommunicationTypeDescription } from "@Obsidian/Enums/Communication/communicationType";
    import { asFormattedString } from "@Obsidian/Utility/numberUtils";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import { CommunicationDeliveryBreakdownBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationDetail/communicationDeliveryBreakdownBag";

    const mediumFilter = useMediumFilter();

    const statuses = {
        pending: "Pending",
        delivered: "Delivered",
        failed: "Failed",
        cancelled: "Cancelled"
    };

    const props = defineProps({
        deliveryBreakdown: {
            type: Object as PropType<CommunicationDeliveryBreakdownBag | null | undefined>,
            required: true
        }
    });

    const minimumPercentage = 0.5;

    // #region Computed Values

    const recipientCountLabel = computed((): string => {
        if (!props.deliveryBreakdown || !mediumFilter.value) {
            return "";
        }

        return `${CommunicationTypeDescription[mediumFilter.value]}: ${asFormattedString(props.deliveryBreakdown.recipientCount)}`;
    });

    const pendingCount = computed((): number => {
        return props.deliveryBreakdown?.pendingCount ?? 0;
    });

    const pendingPercentage = computed((): number => {
        return props.deliveryBreakdown?.pendingPercentage || minimumPercentage;
    });

    const deliveredCount = computed((): number => {
        return props.deliveryBreakdown?.deliveredCount ?? 0;
    });

    const deliveredPercentage = computed((): number => {
        return props.deliveryBreakdown?.deliveredPercentage || minimumPercentage;
    });

    const failedCount = computed((): number => {
        return props.deliveryBreakdown?.failedCount ?? 0;
    });

    const failedPercentage = computed((): number => {
        return props.deliveryBreakdown?.failedPercentage || minimumPercentage;
    });

    const cancelledCount = computed((): number => {
        return props.deliveryBreakdown?.cancelledCount ?? 0;
    });

    const cancelledPercentage = computed((): number => {
        return props.deliveryBreakdown?.cancelledPercentage || minimumPercentage;
    });

    const percentageEntries = computed((): [string, number][] => {
        const percentages = !props.deliveryBreakdown
            ? {}
            : {
                [statuses.pending]: props.deliveryBreakdown.pendingPercentage,
                [statuses.delivered]: props.deliveryBreakdown.deliveredPercentage,
                [statuses.failed]: props.deliveryBreakdown.failedPercentage,
                [statuses.cancelled]: props.deliveryBreakdown.cancelledPercentage
            };

        return Object.entries(percentages);
    });

    const showPercentageLabel = computed((): boolean => {
        // This is an arbitrary value, but the idea is to only show a label for
        // the top percentage value if its slice in the UI will be wide enough
        // to actually display the label. Otherwise, all values will be
        // displayed in tooltips. Note that this doesn't necessarily take mobile
        // viewports into consideration.
        const minimumPercentage = 24.99;

        return pendingPercentage.value > minimumPercentage
            || deliveredPercentage.value > minimumPercentage
            || failedPercentage.value > minimumPercentage
            || cancelledCount.value > minimumPercentage;
    });

    const labels = computed((): Record<string, string> => {
        if (!showPercentageLabel.value) {
            return {};
        }

        return Object.fromEntries(
            percentageEntries.value
                .sort((a, b) => b[1] - a[1])    // Sort descending.
                .slice(0, 1)                    // Take top 1.
                .map(([key, value]) => [key, `${value}% ${key}`])
        );
    });

    const tooltips = computed((): Record<string, string> => {
        const tooltipCount = showPercentageLabel.value
            ? 3 // top 3 (lowest 3).
            : 4; // all

        return Object.fromEntries(
            percentageEntries.value
                .sort((a, b) => a[1] - b[1])    // Sort ascending.
                .slice(0, tooltipCount)
                .map(([key, value]) => [key, `${value}% ${key}`])
        );
    });

    // #endregion Computed Values

    // #region Functions

    /**
     * Applies a tooltip to an element. The element should have an
     * `data-original-title` attribute containing the tooltip text.
     *
     * Typical use, `:ref="applyTooltip"`
     */
    function applyTooltip(el: unknown): void {
        const htmlElement = el as HTMLElement;
        if (htmlElement) {
            tooltip(htmlElement);
        }
    }

    // #endregion Functions
</script>
