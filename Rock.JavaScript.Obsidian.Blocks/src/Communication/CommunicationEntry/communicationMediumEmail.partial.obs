<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="errorMessage"
                     heading="Please correct the following:"
                     alertType="validation">
        <ul>
            <li>{{ errorMessage }}</li>
        </ul>
    </NotificationBox>

    <template v-if="!mediumOptions">
        <Delay :delayMs="250">
            <LoadingIndicator v-if="isLoadingMediumOptions" />
            <NotificationBox v-else
                             alertType="error">
                <ul>
                    <li>Unable to load</li>
                </ul>
            </NotificationBox>
        </Delay>
    </template>

    <template v-else>
        <NotificationBox v-if="isInvalidTransportNotificationVisible"
                         alertType="warning"
                         :dismissible="true"
                         heading="Warning"
                         @dismiss="onDismissInvalidTransportNotification">
            The Email medium does not have an active transport configured. The communication will not be delivered until the transport is configured correctly.
        </NotificationBox>

        <RockForm v-model:submit="submitFormTrigger"
                  @visibleValidationChanged="onFormValidationChanged"
                  @submit="onFormSubmitted">
            <div class="row">
                <div class="col-sm-12">
                    <RecipientPicker v-if="!config.communication || !internalCommunicationListGroupGuid"
                                     v-model="internalRecipients"
                                     v-model:disabled="internalDisabled"
                                     :isAddHidden="config.mode !== Mode.Full"
                                     :isForBulkCommunication="isBulkCommunication"
                                     label="Recipients"
                                     mediumType="email"
                                     :minimumRecipientCount="minimumRecipientCount" />
                    <template v-else>
                        <RockLabel>Recipients</RockLabel>
                        <StaticFormControl :modelValue="`Communication List: ${config.communication.communicationListName} (${recipients.length} individuals)`">
                            <template #default="{ value }">
                                {{ value }} <RockButton btnType="link" btnSize="sm" :disabled="disabled" @click="onConvertListToRecipients">Convert List to Recipients</RockButton>
                            </template>
                        </StaticFormControl>
                    </template>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <EmailBox v-if="config.areAdditionalEmailRecipientsAllowed"
                              v-model="internalAdditionalEmailAddresses"
                              :allowLava="false"
                              :allowMultiple="true"
                              :disabled="internalDisabled"
                              help="Enter additional email addresses to receive this communication. Addresses can be separated by either a space or a comma. Please note that Lava-merging with Person fields is not available when entering email addresses."
                              label="Additional Email Recipients" />
                </div>
            </div>

            <div class="row d-sm-flex">
                <div class="col-sm-6">
                    <DropDownList v-if="config.mode === Mode.Full"
                                  v-model="templateGuidOrEmptyString"
                                  :disabled="disabled"
                                  :items="mediumOptions.templates ?? undefined"
                                  label="Template" />
                </div>
                <div v-if="!isBulkEmailThresholdExceeded && config.mode === Mode.Full"
                     class="col-sm-6 align-self-center">
                    <div class="float-right">
                        <Switch v-model="internalIsBulkCommunication"
                                :disabled="disabled"
                                text="Bulk Communication" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <TextBox v-if="config.mode === Mode.Full"
                             v-model="internalFromName"
                             :disabled="disabled"
                             label="From Name"
                             rules="required" />
                    <StaticFormControl v-else
                                       :modelValue="internalFromName"
                                       label="From Name" />
                </div>
                <div class="col-sm-6">
                    <EmailBox v-if="config.mode === Mode.Full"
                              v-model="internalFromAddress"
                              :disabled="disabled"
                              label="From Address"
                              rules="required" />
                    <StaticFormControl v-else
                                       :modelValue="internalFromAddress"
                                       label="From Address" />
                </div>
            </div>

            <div class="row d-sm-flex">
                <div class="col-sm-6">
                    <EmailBox v-if="config.mode === Mode.Full"
                              v-model="internalReplyAddress"
                              :disabled="disabled"
                              label="Reply To Address" />
                    <StaticFormControl v-else-if="internalReplyAddress"
                                       :modelValue="internalReplyAddress"
                                       label="Reply To Address" />
                </div>
                <div v-if="config.isCcBccEntryAllowed" class="col-sm-6 align-self-center">
                    <div class="float-right">
                        <RockButton btnType="link"
                                    :disabled="disabled"
                                    @click="isCcShown = !isCcShown">{{ isCcShown ? 'Hide' : 'Show' }} CC/BCC</RockButton>
                    </div>
                </div>
            </div>

            <VerticalTransitionCollapse v-if="config.isCcBccEntryAllowed">
                <div v-if="isCcShown" class="row">
                    <div class="col-sm-6">
                        <EmailBox v-model="internalCcAddresses"
                                  :allowLava="config.isLavaEnabled"
                                  :allowMultiple="true"
                                  :disabled="disabled"
                                  :help="`Any address in this field will be copied on the email sent to every recipient.${(config.isLavaEnabled ? ' Lava can be used to access recipient data. <span class=\'tip tip-lava\'></span>' : '')}`"
                                  label="CC Addresses" />
                    </div>
                    <div class="col-sm-6">
                        <EmailBox v-model="internalBccAddresses"
                                  :allowLava="config.isLavaEnabled"
                                  :allowMultiple="true"
                                  :disabled="disabled"
                                  :help="`Any address in this field will be blind copied on the email sent to every recipient.${(config.isLavaEnabled ? ' Lava can be used to access recipient data. <span class=\'tip tip-lava\'></span>' : '')}`"
                                  label="BCC Addresses" />
                    </div>
                </div>
            </VerticalTransitionCollapse>

            <div class="row d-sm-flex">
                <div class="col-sm-6">
                    <TextBox v-model="internalSubject"
                             :disabled="disabled"
                             :help="config.isLavaEnabled ? '<span class=\'tip tip-lava\'></span>' : ''"
                             label="Subject"
                             rules="required" />
                </div>
                <div class="col-sm-4 align-self-center">
                    <ScheduleSend v-if="config.mode === Mode.Full"
                                  v-model="internalScheduleSendIsoString"
                                  :disabled="disabled" />
                </div>
                <div v-if="mediumOptions.isAttachmentUploaderShown"
                     class="col-sm-2 align-self-center">
                    <div class="float-right">
                        <RockButton btnType="link"
                                    :disabled="disabled"
                                    @click="areAttachmentsShown = !areAttachmentsShown">{{ attachmentsText }}</RockButton>
                    </div>
                </div>
            </div>

            <VerticalTransitionCollapse>
                <div v-if="areAttachmentsShown" class="row">
                    <div class="col-sm-12">
                        <AttachmentPicker v-model="internalAttachments"
                                          :binaryFileTypeGuid="mediumOptions.binaryFileTypeGuid"
                                          :disabled="disabled" />
                    </div>
                </div>
            </VerticalTransitionCollapse>

            <div v-if="isDuplicatePreventionOptionShown">
                <CheckBox label="Prevent Duplicate Email Addresses"
                          help="Check this option to prevent communications from being sent to people with the same email addresses.This will mean two people who share an address will not receive a personalized communication, only one of them will."
                          v-model="internalExcludeDuplicateRecipientAddress" />
            </div>

            <HtmlEditor v-model="internalMessage"
                        :disabled="disabled"
                        :editorHeight="600"
                        :help="`${config.isLavaEnabled ? '<span class=\'tip tip-lava\'></span> ' : ''}<span class='tip tip-html'>`"
                        label="Message"
                        :mergeFields="messageMergeFields" />

            <div class="actions">
                <RockButton id="btnSubmit"
                            :btnType="BtnType.Primary"
                            :disabled="disabled"
                            @click="() => onClickSend()">{{ sendButtonText }}</RockButton>

                <RockButton v-if="config.mode === Mode.Full"
                            id="btnTest"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickTest()">Send Test</RockButton>

                <RockButton v-if="!(config.isEditMode && config.authorization?.isBlockApproveActionAuthorized && config.communication?.status === CommunicationStatus.PendingApproval) && config.mode === Mode.Full"
                            id="btnSave"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickSave()">Save as Draft</RockButton>

                <RockButton v-if="config.isEditMode && config.authorization?.isBlockApproveActionAuthorized && config.communication?.status === CommunicationStatus.PendingApproval"
                            id="btnCancel"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickCancel()">Cancel</RockButton>
            </div>
        </RockForm>

        <NotificationBox v-if="testResult?.messageHtml"
                         :alertType="getAlertType(testResult.messageType)"
                         class="margin-t-md"
                         id="nbTestResult">
            <span ref="testResultElement" v-html="testResult.messageHtml"></span>
        </NotificationBox>
    </template>
</template>

<style scoped>
.float-right {
    float: right;
}
</style>

<script setup lang="ts">
    import { PropType, computed, nextTick, onMounted, ref, watch } from "vue";
    import Delay from "./delay.partial.obs";
    import AttachmentPicker from "./attachmentPicker.partial.obs";
    import RecipientPicker from "./recipientPicker.partial.obs";
    import ScheduleSend from "./scheduleSend.partial.obs";
    import { getAlertType, removeQueryParams, scrollToTopOfWindow, useSelectedMediumType, useTemplate } from "./utils.partial";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import HtmlEditor from "@Obsidian/Controls/htmlEditor.obs";
    import LoadingIndicator from "@Obsidian/Controls/loadingIndicator.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import StaticFormControl from "@Obsidian/Controls/staticFormControl.obs";
    import Switch from "@Obsidian/Controls/switch.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import VerticalTransitionCollapse from "@Obsidian/Controls/transitionVerticalCollapse.obs";
    import { MediumType } from "@Obsidian/Enums/Blocks/Communication/CommunicationEntry/mediumType";
    import { Mode } from "@Obsidian/Enums/Blocks/Communication/CommunicationEntry/mode";
    import { CommunicationStatus } from "@Obsidian/Enums/Communication/communicationStatus";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { Guid } from "@Obsidian/Types";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { CommunicationEntryCommunicationBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryCommunicationBag";
    import { CommunicationEntryEmailMediumOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryEmailMediumOptionsBag";
    import { CommunicationEntryInitializationBox } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryInitializationBox";
    import { CommunicationEntryMediumOptionsBaseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryMediumOptionsBaseBag";
    import { CommunicationEntryRecipientBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryRecipientBag";
    import { CommunicationEntrySaveRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySaveRequestBag";
    import { CommunicationEntrySaveResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySaveResponseBag";
    import { CommunicationEntrySendRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendRequestBag";
    import { CommunicationEntrySendResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendResponseBag";
    import { CommunicationEntryTestRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryTestRequestBag";
    import { CommunicationEntryTestResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryTestResponseBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";

    const invokeBlockAction = useInvokeBlockAction();
    const props = defineProps({
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        isBulkCommunication: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        recipients: {
            type: Array as PropType<CommunicationEntryRecipientBag[]>,
            required: true
        },

        /** The schedule send datetime value in ISO 8601 format. */
        scheduleSendIsoString: {
            type: String as PropType<string>,
            required: true
        },

        communicationListGroupGuid: {
            type: String as PropType<Guid | null | undefined>,
            required: true
        },

        isDuplicatePreventionOptionShown: {
            type: Boolean as PropType<boolean>,
            required: false
        },

        emailAttachmentBinaryFiles: {
            type: Object as PropType<ListItemBag[]>,
            required: true
        },

        communicationTemplateGuid: {
            type: String as PropType<Guid | null | undefined>,
            required: true
        },

        fromName: {
            type: String as PropType<string>,
            required: true
        },

        fromAddress: {
            type: String as PropType<string>,
            required: true
        },

        replyAddress: {
            type: String as PropType<string>,
            required: true
        },

        ccAddresses: {
            type: String as PropType<string>,
            required: true
        },

        bccAddresses: {
            type: String as PropType<string>,
            required: true
        },

        subject: {
            type: String as PropType<string>,
            required: true
        },

        message: {
            type: String as PropType<string>,
            required: true
        },

        additionalEmailAddresses: {
            type: String as PropType<string>,
            required: true
        },

        excludeDuplicateRecipientAddress: {
            type: Boolean as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        /** Emits an error message. */
        (e: "error", value: string): void;
        /** Emits a save result. */
        (e: "saved", value: CommunicationEntrySendResponseBag): void;
        /** Emits a send result. */
        (e: "sent", value: CommunicationEntrySendResponseBag): void;
        /** Emits a test result. */
        (e: "tested", value: CommunicationEntryTestResponseBag): void;
        /** Emits an event indicating the disabled state should be updated. */
        (e: "update:disabled", value: boolean): void;
        /** Emits an event indicating the recipients state should be updated. */
        (e: "update:recipients", value: CommunicationEntryRecipientBag[]): void;
        /** Emits an event indicating the scheduleSendIsoString state should be updated. */
        (e: "update:scheduleSendIsoString", value: string): void;
        /** Emits an event indicating the isBulkCommunication state should be updated. */
        (e: "update:isBulkCommunication", value: boolean): void;
        /** Emits an event indicating the communication list unique identifier should be updated. */
        (e: "update:communicationListGroupGuid", value: Guid | null | undefined): void;
        /** Emits an event indicating the email attachment binary files should be updated. */
        (e: "update:emailAttachmentBinaryFiles", value: ListItemBag[]): void;
        /** Emits an event indicating the communication template unique identifier should be updated. */
        (e: "update:communicationTemplateGuid", value: Guid | null | undefined): void;
        /** Emits an event indicating the from name should be updated. */
        (e: "update:fromName", value: string): void;
        /** Emits an event indicating the from address should be updated. */
        (e: "update:fromAddress", value: string): void;
        /** Emits an event indicating the reply address should be updated. */
        (e: "update:replyAddress", value: string): void;
        /** Emits an event indicating the CC address should be updated. */
        (e: "update:ccAddresses", value: string): void;
        /** Emits an event indicating the BCC address should be updated. */
        (e: "update:bccAddresses", value: string): void;
        /** Emits an event indicating the subject should be updated. */
        (e: "update:subject", value: string): void;
        /** Emits an event indicating the message should be updated. */
        (e: "update:message", value: string): void;
        /** Emits an event indicating the additional email addresses should be updated. */
        (e: "update:additionalEmailAddresses", value: string): void;
        /** Emits an event indicating the exclude duplicated recipient address value should be updated. */
        (e: "update:excludeDuplicateRecipientAddress", value: boolean): void;
    }>();

    const config = useConfigurationValues<CommunicationEntryInitializationBox>();
    const selectedMediumType = useSelectedMediumType();
    const template = useTemplate();

    //#region Values

    const internalRecipients = useVModelPassthrough(props, "recipients", emit);
    const internalDisabled = useVModelPassthrough(props, "disabled", emit);
    const internalIsBulkCommunication = useVModelPassthrough(props, "isBulkCommunication", emit);
    const internalScheduleSendIsoString = useVModelPassthrough(props, "scheduleSendIsoString", emit);
    const internalCommunicationListGroupGuid = useVModelPassthrough(props, "communicationListGroupGuid", emit);
    const internalAttachments = useVModelPassthrough(props, "emailAttachmentBinaryFiles", emit);
    const internalCommunicationTemplateGuid = useVModelPassthrough(props, "communicationTemplateGuid", emit);
    const internalFromName = useVModelPassthrough(props, "fromName", emit);
    const internalFromAddress = useVModelPassthrough(props, "fromAddress", emit);
    const internalReplyAddress = useVModelPassthrough(props, "replyAddress", emit);
    const internalCcAddresses = useVModelPassthrough(props, "ccAddresses", emit);
    const internalBccAddresses = useVModelPassthrough(props, "bccAddresses", emit);
    const internalSubject = useVModelPassthrough(props, "subject", emit);
    const internalMessage = useVModelPassthrough(props, "message", emit);
    const internalAdditionalEmailAddresses = useVModelPassthrough(props, "additionalEmailAddresses", emit);
    const internalExcludeDuplicateRecipientAddress = useVModelPassthrough(props, "excludeDuplicateRecipientAddress", emit);

    const disabledMessage = ref<string | null | undefined>();
    const testResultElement = ref<HTMLElement | undefined>();

    // Show CC and BCC fields if the loaded communication has either value.
    const isCcShown = ref<boolean>(!!(internalCcAddresses.value || internalBccAddresses.value));
    const areAttachmentsShown = ref<boolean>(false);
    const communicationGuid = ref<Guid>(template.value?.communicationGuid ?? emptyGuid);
    const mediumOptions = ref<CommunicationEntryEmailMediumOptionsBag | null>(isEmailMediumOptions(config.mediumOptions) ? config.mediumOptions : null);

    /** Programmatically submits the form when set to true. */
    const submitFormTrigger = ref<boolean>(false);
    const actionToExecuteOnSubmit = ref<() => PromiseLike<void>>();
    const minimumRecipientCount = ref<number>(0);
    const testResult = ref<CommunicationEntryTestResponseBag | null | undefined>();
    const errorMessage = ref<string | null | undefined>();
    const isInvalidTransportNotificationDismissed = ref<boolean>(false);
    const isLoadingMediumOptions = ref<boolean>(true);

    //#endregion

    //#region Computed Values

    const templateGuidOrEmptyString = computed<string>({
        get(): string {
            return internalCommunicationTemplateGuid.value ?? "";
        },
        set(value: string): void {
            internalCommunicationTemplateGuid.value = toGuidOrNull(value);
        }
    });

    const isInvalidTransportNotificationVisible = computed<boolean>(() => {
        return mediumOptions.value?.hasActiveTransport === false && !isInvalidTransportNotificationDismissed.value;
    });

    const messageMergeFields = computed<string[] | undefined>(() => {
        if (!config.isLavaEnabled) {
            // Lava is disabled.
            return undefined;
        }
        else {
            const mergeFields: string[] = [];

            if (config.mode === Mode.Full) {
                // Full mode.
                mergeFields.push(
                    "GlobalAttribute",
                    "Rock.Model.Person",
                    "Communication.Subject|Subject",
                    "Communication.FromName|From Name",
                    "Communication.FromEmail|From Address",
                    "Communication.ReplyToEmail|Reply To",
                    "UnsubscribeOption"
                );
            }
            else {
                // Simple mode.
                mergeFields.push("Rock.Model.Person");
            }

            if (mediumOptions.value?.additionalMergeFields) {
                mergeFields.push(...mediumOptions.value.additionalMergeFields);
            }

            return mergeFields;
        }
    });

    const isBulkEmailThresholdExceeded = computed<boolean>(() => {
        const threshold = mediumOptions.value?.bulkEmailThreshold ?? null;
        if (threshold == null) {
            // There is no threshold so it can't be exceeded.
            return false;
        }
        else {
            return props.recipients.length > threshold;
        }
    });

    const attachmentsText = computed<string>(() => {
        if (areAttachmentsShown.value) {
            return "Hide Attachments";
        }

        const attachmentCount = internalAttachments.value.length;

        if (attachmentCount > 0) {
            return `Show Attachments (${attachmentCount})`;
        }
        else {
            return "Show Attachments";
        }
    });

    const sendButtonText = computed<string>(() => {
        if (config.isEditMode && config.authorization?.isBlockApproveActionAuthorized) {
            // The block is in edit mode and the logged in person is authorized to approve.
            return "Save";
        }
        else if (props.recipients.length > config.maximumRecipientsBeforeApprovalRequired) {
            if (config.authorization?.isBlockApproveActionAuthorized) {
                // The communication requires approval and the logged in person can approve it.
                return "Send Communication";
            }
            else {
                // The communication requires approval and the logged in person cannot approve it.
                return "Submit Communication";
            }
        }
        else {
            // The communication does not require approval.
            return "Send Communication";
        }
    });

    //#endregion

    //#region Functions

    function raiseError(error: string): void {
        errorMessage.value = error;
        scrollToTopOfWindow();

        emit("error", error);
    }

    function raiseTested(testResponse: CommunicationEntryTestResponseBag): void {
        testResult.value = testResponse;
        emit("tested", testResponse);
    }

    function raiseSaved(response: CommunicationEntrySendResponseBag): void {
        communicationGuid.value = response.communicationGuid;
        emit("saved", response);
        scrollToTopOfWindow();
    }

    function raiseSent(response: CommunicationEntrySendResponseBag): void {
        communicationGuid.value = response.communicationGuid;
        emit("sent", response);
        scrollToTopOfWindow();
    }

    function isEmailMediumOptions(options: CommunicationEntryMediumOptionsBaseBag | null | undefined): options is CommunicationEntryEmailMediumOptionsBag {
        return options?.mediumType === MediumType.Email;
    }

    function splitDelimitedValues(delimitedValues: string): string[] | null {
        if (!delimitedValues) {
            return null;
        }

        const regex = /[\s|,;]+/g;

        return delimitedValues.replace(regex, ",").split(",").filter(s => !!s);
    }

    async function setRecipientsRequired(): Promise<void> {
        if (minimumRecipientCount.value === 0) {
            minimumRecipientCount.value = 1;
            return await nextTick();
        }
        else {
            // Nothing to do.
        }
    }

    /**  */
    async function setRecipientsNotRequired(): Promise<void> {
        if (minimumRecipientCount.value !== 0) {
            minimumRecipientCount.value = 0;
            return await nextTick();
        }
        else {
            // Nothing to do.
        }
    }

    //#endregion

    //#region Event Handlers

    /**
     * Converts the communication list to a regular list of recipients.
     */
    function onConvertListToRecipients(): void {
        // We already have the communication list recipients in memory.
        // Just remove the unique identifier link and trigger a UI update.
        internalCommunicationListGroupGuid.value = null;
    }

    /**
     * Dismisses the invalid transport notification message.
     */
    function onDismissInvalidTransportNotification(): void {
        isInvalidTransportNotificationDismissed.value = true;
    }

    /**
     * Cancels.
     */
    async function onClickCancel(): Promise<void> {
        if (config.isEditMode && config.authorization?.isBlockApproveActionAuthorized) {
            // Redirect back to the same page without the edit param.
            const url = new URL(window.location.href);
            removeQueryParams(url, "edit");
            window.location.href = url.href;
        }
    }

    /**
     * Saves the communication.
     */
    async function onClickSave(): Promise<void> {
        // Recipients are not required when saving.
        await setRecipientsNotRequired();
        actionToExecuteOnSubmit.value = save;
        await submitForm();
    }

    /**
     * Sends the communication.
     */
    async function onClickSend(): Promise<void> {
        // Recipients are required when sending if not using a communication list.
        if (internalCommunicationListGroupGuid.value) {
            await setRecipientsNotRequired();
        }
        else {
            await setRecipientsRequired();
        }
        actionToExecuteOnSubmit.value = send;
        await submitForm();
    }

    /**
     * Sends the communication.
     */
    async function onClickTest(): Promise<void> {
        // Recipients are required when sending a test if not using a communication list.
        if (internalCommunicationListGroupGuid.value) {
            await setRecipientsNotRequired();
        }
        else {
            await setRecipientsRequired();
        }
        actionToExecuteOnSubmit.value = test;
        await submitForm();
    }

    /**
     * Triggers form submission.
     *
     * This programmatic form submission is needed because
     * form validation changes dynamically depending on which
     * button is pressed.
     */
    async function submitForm(): Promise<void> {
        if (!submitFormTrigger.value) {
            submitFormTrigger.value = true;
        }
        else {
            // Form is already submitted so resubmit it on the next tick.
            submitFormTrigger.value = false;
            await nextTick();
            submitFormTrigger.value = true;
        }
    }

    /**
     * Event handler for the form validation being changed.
     */
    function onFormValidationChanged(errors: unknown[]): void {
        if (errors?.length) {
            scrollToTopOfWindow();
        }
    }

    /**
     * Event handler for the form being submitted.
     *
     * This happens *after* the form is validated. The `actionToExecuteOnSubmit` will be executed and then set to `undefined`.
     */
    async function onFormSubmitted(): Promise<void> {
        const action = actionToExecuteOnSubmit.value;
        actionToExecuteOnSubmit.value = undefined;

        if (!action) {
            return;
        }

        await action();
    }

    /**
     * Disables the component.
     */
    function disable(message: string): void {
        disabledMessage.value = message;
        internalDisabled.value = true;
    }

    /**
     * Enables the component.
     */
    function enable(): void {
        disabledMessage.value = null;
        internalDisabled.value = false;
    }

    /**
     * Saves the communication.
     */
    async function save(): Promise<void> {
        try {
            disable("Saving communication...");

            const bag: CommunicationEntrySaveRequestBag = {
                isBulkCommunication: internalIsBulkCommunication.value,
                bccAddresses: internalBccAddresses.value,
                ccAddresses: internalCcAddresses.value,
                status: CommunicationStatus.Transient,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                communicationTemplateGuid: internalCommunicationTemplateGuid.value,
                emailAttachmentBinaryFiles: internalAttachments.value ?? [],
                fromAddress: internalFromAddress.value,
                fromName: internalFromName.value,
                futureSendDateTime: internalScheduleSendIsoString.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumEmail,
                message: internalMessage.value,
                recipients: internalRecipients.value,
                replyAddress: internalReplyAddress.value,
                subject: internalSubject.value,
                communicationGuid: communicationGuid.value,
                additionalEmailAddresses: splitDelimitedValues(internalAdditionalEmailAddresses.value),
                excludeDuplicateRecipientAddress: internalExcludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntrySaveResponseBag>("Save", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while saving. Please try again.");
            }
            else {
                raiseSaved(result.data);
            }

        }
        finally {
            enable();
        }
    }

    /**
     * Sends the communication.
     */
    async function send(): Promise<void> {
        try {
            disable("Sending communication...");

            const bag: CommunicationEntrySendRequestBag = {
                isBulkCommunication: internalIsBulkCommunication.value,
                bccAddresses: internalBccAddresses.value,
                ccAddresses: internalCcAddresses.value,
                status: CommunicationStatus.Transient,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                communicationTemplateGuid: internalCommunicationTemplateGuid.value,
                emailAttachmentBinaryFiles: internalAttachments.value,
                fromAddress: internalFromAddress.value,
                fromName: internalFromName.value,
                futureSendDateTime: internalScheduleSendIsoString.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumEmail,
                message: internalMessage.value,
                recipients: internalRecipients.value,
                replyAddress: internalReplyAddress.value,
                subject: internalSubject.value,
                communicationGuid: communicationGuid.value,
                additionalEmailAddresses: splitDelimitedValues(internalAdditionalEmailAddresses.value),
                excludeDuplicateRecipientAddress: internalExcludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntrySendResponseBag>("Send", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while sending. Please try again.");
            }
            else {
                raiseSent(result.data);
            }

        }
        finally {
            enable();
        }
    }

    /**
     * Sends the test communication
     */
    async function test(): Promise<void> {
        try {
            disable("Sending test communication...");

            testResult.value = undefined;

            const bag: CommunicationEntryTestRequestBag = {
                isBulkCommunication: internalIsBulkCommunication.value,
                bccAddresses: internalBccAddresses.value,
                ccAddresses: internalCcAddresses.value,
                status: CommunicationStatus.Transient,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                communicationTemplateGuid: internalCommunicationTemplateGuid.value,
                emailAttachmentBinaryFiles: internalAttachments.value ?? [],
                fromAddress: internalFromAddress.value,
                fromName: internalFromName.value,
                futureSendDateTime: internalScheduleSendIsoString.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumEmail,
                message: internalMessage.value,
                recipients: internalRecipients.value,
                replyAddress: internalReplyAddress.value,
                subject: internalSubject.value,
                communicationGuid: communicationGuid.value,
                additionalEmailAddresses: splitDelimitedValues(internalAdditionalEmailAddresses.value),
                excludeDuplicateRecipientAddress: internalExcludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntryTestResponseBag>("Test", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while sending a test communication. Please try again.");
            }
            else {
                raiseTested(result.data);
            }
        }
        finally {
            enable();
        }
    }

    //#endregion

    //#region Watchers

    /**
     * Populate fields whenever the template is changed.
     */
    watch(internalCommunicationTemplateGuid, async () => {
        if (internalCommunicationTemplateGuid.value) {
            const result = await invokeBlockAction<CommunicationEntryCommunicationBag>("GetTemplate", { templateGuid: internalCommunicationTemplateGuid.value });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while getting the template.");
            }
            else {
                template.value = result.data;
            }
        }
    });

    /**
     * Update controls whenever the template changes.
     */
    watch(template, (template, oldTemplate) => {
        if (!template) {
            return;
        }

        // Only overwrite the from name and email.
        if (template.fromName) {
            internalFromName.value = template.fromName;
        }
        if (template.fromAddress) {
            internalFromAddress.value = template.fromAddress;
        }

        internalReplyAddress.value = template.replyAddress ?? "";
        internalCcAddresses.value = template.ccAddresses ?? "";
        internalBccAddresses.value = template.bccAddresses ?? "";

        // Only update the subject if the current subject is empty
        // or if it is the old template's subject.
        if (!internalSubject.value || internalSubject.value === oldTemplate?.subject) {
            internalSubject.value = template.subject ?? "";
        }

        internalAttachments.value = template.emailAttachmentBinaryFiles ?? [];
        internalMessage.value = template.message ?? "";
    });

    /**
     * Overrides is bulk whenever the threshold is exceeded.
     */
    watch(isBulkEmailThresholdExceeded, isBulkForced => {
        if (isBulkForced && !props.isBulkCommunication) {
            internalIsBulkCommunication.value = true;
        }
    }, {
        immediate: true
    });

    /**
     * Whenever the selected medium changes, mark the invalid transport notification
     * as not dismissed so it can be shown again if this medium is revisited.
     */
    watch(selectedMediumType, () => {
        if (isInvalidTransportNotificationDismissed.value) {
            isInvalidTransportNotificationDismissed.value = false;
        }
    });

    //#endregion

    /**
     * Load the options if they haven't been loaded yet.
     * This is necessary when switching to a different medium (Email or SMS) after the block is loaded.
     */
    onMounted(async () => {
        try {
            isLoadingMediumOptions.value = true;

            if (mediumOptions.value) {
                return;
            }

            const response = await invokeBlockAction<CommunicationEntryEmailMediumOptionsBag>("GetMediumOptions", {
                mediumEntityTypeGuid: EntityType.CommunicationMediumEmail
            });

            if (!response?.data || response.isError || !isEmailMediumOptions(response.data)) {
                raiseError(response.errorMessage ?? "An error occurred while loading the communication. Please try again.");
                return;
            }

            mediumOptions.value = response.data;

            if (!internalFromAddress.value) {
                internalFromAddress.value = mediumOptions.value.fromAddress ?? "";
            }
            if (!internalFromName.value) {
                internalFromName.value = mediumOptions.value.fromName ?? "";
            }
        }
        finally {
            isLoadingMediumOptions.value = false;
        }
    });
</script>