<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="errorMessage"
                     heading="Please correct the following:"
                     alertType="validation">
        <ul>
            <li>{{ errorMessage }}</li>
        </ul>
    </NotificationBox>

    <template v-if="!mediumOptions">
        <Delay :delayMs="250">
            <LoadingIndicator v-if="isLoadingMediumOptions" />
            <NotificationBox v-else
                             alertType="error">
                <ul>
                    <li>Unable to load</li>
                </ul>
            </NotificationBox>
        </Delay>
    </template>

    <template v-else>
        <NotificationBox v-if="isInvalidTransportNotificationVisible"
                         alertType="warning"
                         :dismissible="true"
                         heading="Warning"
                         @dismiss="onDismissInvalidTransportNotification">
            The SMS medium does not have an active transport configured. The communication will not be delivered until the transport is configured correctly.
        </NotificationBox>

        <RockForm v-model:submit="submitFormTrigger"
                  @visibleValidationChanged="onFormValidationChanged"
                  @submit="onFormSubmitted">
            <div class="row">
                <div class="col-sm-12">
                    <RecipientPicker v-if="!config.communication || !internalCommunicationListGroupGuid"
                                     v-model="internalRecipients"
                                     v-model:disabled="internalDisabled"
                                     :isAddHidden="config.mode !== Mode.Full"
                                     :isForBulkCommunication="isBulkCommunication"
                                     label="Recipients"
                                     mediumType="sms"
                                     :minimumRecipientCount="minimumRecipientCount"
                                     :recipientManagerDisabledMessage="disabledMessage" />
                    <template v-else>
                        <RockLabel>Recipients</RockLabel>
                        <StaticFormControl :modelValue="`Communication List: ${config.communication.communicationListName} (${config.communication.communicationListRecipientCount} individuals)`">
                            <template #default="{ value }">
                                {{ value }} <RockButton btnType="link" btnSize="sm" @click="onConvertListToRecipients">Convert List to Recipients</RockButton>
                            </template>
                        </StaticFormControl>
                    </template>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <DropDownList v-model="fromNumberGuidOrEmptyString"
                                  :disabled="disabled"
                                  help="The number to originate message from (configured under Admin Tools > Communications > System Phone Numbers)."
                                  :items="mediumOptions.smsFromNumbers ?? undefined"
                                  label="From Phone"
                                  rules="required"
                                  :showBlankItem="false" />
                </div>

                <div v-if="isFullMode" class="col-xs-12 col-sm-6 d-sm-flex justify-content-sm-end">
                    <ScheduleSend v-model="internalScheduleSendIsoString"
                                  class="mr-sm-3"
                                  :disabled="disabled"
                                  :label="breakpointHelper.isSmOrLarger ? ' ' : ''" />

                    <Switch v-model="internalIsBulkCommunication"
                            :disabled="disabled"
                            :label="breakpointHelper.isSmOrLarger ? ' ' : ''"
                            text="Bulk Communication" />
                </div>
            </div>

            <div v-if="isDuplicatePreventionOptionShown">
                <CheckBox label="Prevent Duplicate SMS Addresses"
                          help="Check this option to prevent communications from being sent to people with the same SMS addresses.This will mean two people who share an address will not receive a personalized communication, only one of them will."
                          v-model="excludeDuplicateRecipientAddress" />
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <SmsMessageEditor v-model="message"
                                      :disabled="disabled"
                                      :editorHeight="200"
                                      :isCountDownShown="mediumOptions.characterLimit > 0"
                                      :countDownMaxChars="mediumOptions.characterLimit"
                                      :mergeFields="['GlobalAttribute', 'Rock.Model.Person']"
                                      toolbarLabel="Message"
                                      rules="required" />

                </div>

                <div class="col-sm-6" v-if="isFullMode">
                    <FileUploader :modelValue="attachment"
                                  :binaryFileTypeGuid="mediumOptions.binaryFileTypeGuid"
                                  :disabled="disabled"
                                  label="Attachment"
                                  @error="onAttachmentError"
                                  @update:modelValue="onAttachmentAdded" />
                </div>
            </div>

            <div class="actions">
                <RockButton id="btnSubmit"
                            :btnType="BtnType.Primary"
                            :disabled="disabled"
                            @click="() => onClickSend()">{{ sendButtonText }}</RockButton>

                <RockButton v-if="config.mode === Mode.Full"
                            id="btnTest"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickTest()">Send Test</RockButton>

                <RockButton v-if="!(config.isEditMode && config.authorization?.isBlockApproveActionAuthorized && config.communication?.status === CommunicationStatus.PendingApproval) && config.mode === Mode.Full"
                            id="btnSave"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickSave()">Save as Draft</RockButton>

                <RockButton v-if="config.isEditMode && config.authorization?.isBlockApproveActionAuthorized && config.communication?.status === CommunicationStatus.PendingApproval"
                            id="btnCancel"
                            :btnType="BtnType.Link"
                            :disabled="disabled"
                            @click="() => onClickCancel()">Cancel</RockButton>
            </div>
        </RockForm>

        <NotificationBox v-if="testResult?.messageHtml"
                         :alertType="getAlertType(testResult.messageType)"
                         class="margin-t-md"
                         id="nbTestResult">
            <span ref="testResultElement" v-html="testResult.messageHtml"></span>
        </NotificationBox>
    </template>
</template>

<script setup lang="ts">
    import { PropType, computed, nextTick, onMounted, ref, watch } from "vue";
    import Delay from "./delay.partial.obs";
    import RecipientPicker from "./recipientPicker.partial.obs";
    import ScheduleSend from "./scheduleSend.partial.obs";
    import { getAlertType, scrollToTopOfWindow, useSelectedMediumType, useBreakpointHelper, removeQueryParams } from "./utils.partial";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import FileUploader from "@Obsidian/Controls/fileUploader.obs";
    import LoadingIndicator from "@Obsidian/Controls/loadingIndicator.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import SmsMessageEditor from "@Obsidian/Controls/smsMessageEditor.obs";
    import StaticFormControl from "@Obsidian/Controls/staticFormControl.obs";
    import Switch from "@Obsidian/Controls/switch.obs";
    import { MediumType } from "@Obsidian/Enums/Blocks/Communication/CommunicationEntry/mediumType";
    import { Mode } from "@Obsidian/Enums/Blocks/Communication/CommunicationEntry/mode";
    import { CommunicationStatus } from "@Obsidian/Enums/Communication/communicationStatus";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { Guid } from "@Obsidian/Types";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { CommunicationEntryInitializationBox } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryInitializationBox";
    import { CommunicationEntryMediumOptionsBaseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryMediumOptionsBaseBag";
    import { CommunicationEntryRecipientBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryRecipientBag";
    import { CommunicationEntrySaveRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySaveRequestBag";
    import { CommunicationEntrySaveResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySaveResponseBag";
    import { CommunicationEntrySendRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendRequestBag";
    import { CommunicationEntrySendResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySendResponseBag";
    import { CommunicationEntrySmsMediumOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntrySmsMediumOptionsBag";
    import { CommunicationEntryTestRequestBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryTestRequestBag";
    import { CommunicationEntryTestResponseBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntry/communicationEntryTestResponseBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";

    const props = defineProps({
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        isBulkCommunication: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        recipients: {
            type: Array as PropType<CommunicationEntryRecipientBag[]>,
            required: true
        },

        /** The schedule send datetime value in ISO 8601 format. */
        scheduleSendIsoString: {
            type: String as PropType<string>,
            required: true
        },

        communicationListGroupGuid: {
            type: String as PropType<Guid | null | undefined>,
            required: true
        },

        isDuplicatePreventionOptionShown: {
            type: Boolean as PropType<boolean>,
            required: false
        },
    });

    const emit = defineEmits<{
        /** Emits an error message. */
        (e: "error", value: string): void;
        /** Emits a save result. */
        (e: "saved", value: CommunicationEntrySendResponseBag): void;
        /** Emits a send result. */
        (e: "sent", value: CommunicationEntrySendResponseBag): void;
        /** Emits a test result. */
        (e: "tested", value: CommunicationEntryTestResponseBag): void;
        /** Emits an event indicating the disabled state should be updated. */
        (e: "update:disabled", value: boolean): void;
        /** Emits an event indicating the isBulkCommunication state should be updated. */
        (e: "update:isBulkCommunication", value: boolean): void;
        /** Emits an event indicating the recipients state should be updated. */
        (e: "update:recipients", value: CommunicationEntryRecipientBag[]): void;
        /** Emits an event indicating the scheduleSendIsoString state should be updated. */
        (e: "update:scheduleSendIsoString", value: string): void;
        /** Emits an event indicating the communication list unique identifier should be updated. */
        (e: "update:communicationListGroupGuid", value: Guid | null | undefined): void;
    }>();

    const config = useConfigurationValues<CommunicationEntryInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();
    const selectedMediumType = useSelectedMediumType();
    const breakpointHelper = useBreakpointHelper();

    //#region Values

    const internalRecipients = useVModelPassthrough(props, "recipients", emit);
    const internalDisabled = useVModelPassthrough(props, "disabled", emit);
    const internalIsBulkCommunication = useVModelPassthrough(props, "isBulkCommunication", emit);
    const internalScheduleSendIsoString = useVModelPassthrough(props, "scheduleSendIsoString", emit);
    const internalCommunicationListGroupGuid = useVModelPassthrough(props, "communicationListGroupGuid", emit);
    const disabledMessage = ref<string | null | undefined>();
    const testResultElement = ref<HTMLElement | undefined>();
    const fromNumberGuidOrEmptyString = ref<string>(config.communication?.smsFromSystemPhoneNumberGuid ?? "");
    const mediumOptions = ref<CommunicationEntrySmsMediumOptionsBag | null>(isSmsMediumOptions(config.mediumOptions) ? config.mediumOptions : null);
    const errorMessage = ref<string | null | undefined>();
    const message = ref<string>(config.communication?.smsMessage ?? "");
    const isInvalidTransportNotificationDismissed = ref<boolean>(false);
    const submitFormTrigger = ref<boolean>(false);
    const actionToExecuteOnSubmit = ref<() => PromiseLike<void>>();
    const attachmentErrorMessage = ref<string | null | undefined>();
    const attachment = ref<ListItemBag | null | undefined>(config.communication?.smsAttachmentBinaryFiles?.[0]);
    const minimumRecipientCount = ref<number>(0);
    const testResult = ref<CommunicationEntryTestResponseBag | null | undefined>();
    const communicationGuid = ref<Guid>(config.communication?.communicationGuid ?? emptyGuid);
    const isLoadingMediumOptions = ref<boolean>(true);
    const excludeDuplicateRecipientAddress = ref<boolean>(config.communication?.excludeDuplicateRecipientAddress ?? false);

    //#endregion

    //#region Computed Values

    const isInvalidTransportNotificationVisible = computed<boolean>(() => {
        return mediumOptions.value?.hasActiveTransport === false && !isInvalidTransportNotificationDismissed.value;
    });

    const isFullMode = computed<boolean>(() => {
        return config.mode === Mode.Full;
    });

    const sendButtonText = computed<string>(() => {
        if (config.isEditMode && config.authorization?.isBlockApproveActionAuthorized) {
            // The block is in edit mode and the logged in person is authorized to approve.
            return "Save";
        }
        else if (props.recipients.length > config.maximumRecipientsBeforeApprovalRequired) {
            if (config.authorization?.isBlockApproveActionAuthorized) {
                // The communication requires approval and the logged in person can approve it.
                return "Send Communication";
            }
            else {
                // The communication requires approval and the logged in person cannot approve it.
                return "Submit Communication";
            }
        }
        else {
            // The communication does not require approval.
            return "Send Communication";
        }
    });

    //#endregion

    //#region Event Handlers

    /**
     * Converts the communication list to a regular list of recipients.
     */
    function onConvertListToRecipients(): void {
        // We already have the communication list recipients in memory.
        // Just remove the unique identifier link and trigger a UI update.
        internalCommunicationListGroupGuid.value = null;
    }

    function onAttachmentError(error: string): void {
        attachmentErrorMessage.value = error;
    }

    function onAttachmentAdded(file: ListItemBag | undefined): void {
        // SMS only supports one attachment currently.
        if (file) {
            attachment.value = file;
        }
        else {
            attachment.value = null;
        }
    }

    function onDismissInvalidTransportNotification(): void {
        isInvalidTransportNotificationDismissed.value = true;
    }

    /**
     * Event handler for the Send button being clicked.
     *
     * Sends the communication.
     */
    async function onClickSend(): Promise<void> {
        await setSendValidation();
        actionToExecuteOnSubmit.value = send;
        await submitForm();
    }

    /**
     * Event handler for the Test button being clicked.
     *
     * Sends a test communication.
     */
    async function onClickTest(): Promise<void> {
        await setTestValidation();
        actionToExecuteOnSubmit.value = test;
        await submitForm();
    }

    /**
     * Event handler for the Save button being clicked.
     *
     * Saves the communication.
     */
    async function onClickSave(): Promise<void> {
        await setSaveValidation();
        actionToExecuteOnSubmit.value = save;
        await submitForm();
    }

    /**
     * Cancels.
     */
    async function onClickCancel(): Promise<void> {
        if (config.isEditMode && config.authorization?.isBlockApproveActionAuthorized) {
            // Redirect back to the same page without the edit param.
            const url = new URL(window.location.href);
            removeQueryParams(url, "edit");
            window.location.href = url.href;
        }
    }

    /**
     * Event handler for the form validation being changed.
     *
     * Scrolls to the top of the window when a form validation error occurs.
     */
    function onFormValidationChanged(errors: unknown[]): void {
        if (errors?.length) {
            scrollToTopOfWindow();
        }
    }

    /**
     * Event handler for the form being submitted.
     *
     * This happens *after* the form is validated. The `actionToExecuteOnSubmit` will be executed and then set to `undefined`.
     */
    async function onFormSubmitted(): Promise<void> {
        const action = actionToExecuteOnSubmit.value;
        actionToExecuteOnSubmit.value = undefined;

        if (!action) {
            return;
        }

        await action();
    }

    //#endregion

    //#region Functions

    /**
     * Sets the validation required for sending the communication.
     *
     * Will call `nextTick()` if the rules are updated so that the validation rules can update the UI.
     */
    async function setSendValidation(): Promise<void> {
        // Recipients are required when sending the communication.
        if (minimumRecipientCount.value === 0) {
            minimumRecipientCount.value = 1;
            return await nextTick();
        }
        else {
            // Validation already set up.
        }
    }

    /**
     * Sets the validation required for sending a test communication.
     *
     * Will call `nextTick()` if the rules are updated so that the validation rules can update the UI.
     */
    async function setTestValidation(): Promise<void> {
        // Recipients are required when sending a test communication.
        if (minimumRecipientCount.value === 0) {
            minimumRecipientCount.value = 1;
            return await nextTick();
        }
        else {
            // Validation already set up.
        }
    }

    /**
     * Sets the validation required for saving the communication.
     *
     * Will call `nextTick()` if the rules are updated so that the validation rules can update the UI.
     */
    async function setSaveValidation(): Promise<void> {
        // Recipients are not required when saving the communication.
        if (minimumRecipientCount.value !== 0) {
            minimumRecipientCount.value = 0;
            return await nextTick();
        }
        else {
            // Validation already set up.
        }
    }

    /**
     * Triggers form submission.
     *
     * This programmatic form submission is needed because
     * form validation changes dynamically depending on which
     * button is pressed.
     */
    async function submitForm(): Promise<void> {
        if (!submitFormTrigger.value) {
            submitFormTrigger.value = true;
        }
        else {
            // Form has already been submitted, so resubmit it on the next tick.
            submitFormTrigger.value = false;
            await nextTick();
            submitFormTrigger.value = true;
        }
    }

    /** Sends the communication. */
    async function send(): Promise<void> {
        try {
            disable("Sending communication...");

            const bag: CommunicationEntrySendRequestBag = {
                communicationGuid: communicationGuid.value,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                isBulkCommunication: internalIsBulkCommunication.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumSms,
                recipients: internalRecipients.value,
                smsAttachmentBinaryFiles: attachment.value ? [attachment.value] : null,
                smsFromSystemPhoneNumberGuid: toGuidOrNull(fromNumberGuidOrEmptyString.value),
                smsMessage: message.value,
                status: CommunicationStatus.Transient,
                excludeDuplicateRecipientAddress: excludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntrySendResponseBag>("Send", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while sending. Please try again.");
            }
            else {
                raiseSent(result.data);
            }
        }
        finally {
            enable();
        }
    }

    /** Sends a test communication. */
    async function test(): Promise<void> {
        try {
            disable("Sending test communication...");

            testResult.value = undefined;

            const bag: CommunicationEntryTestRequestBag = {
                communicationGuid: communicationGuid.value,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                isBulkCommunication: internalIsBulkCommunication.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumSms,
                recipients: internalRecipients.value,
                smsAttachmentBinaryFiles: attachment.value ? [attachment.value] : null,
                smsFromSystemPhoneNumberGuid: toGuidOrNull(fromNumberGuidOrEmptyString.value),
                smsMessage: message.value,
                status: CommunicationStatus.Transient,
                excludeDuplicateRecipientAddress: excludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntryTestResponseBag>("Test", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while sending a test communication. Please try again.");
            }
            else {
                raiseTested(result.data);
            }
        }
        finally {
            enable();
        }
    }

    /**
     * Saves the communication.
     */
    async function save(): Promise<void> {
        try {
            disable("Saving communication...");

            const bag: CommunicationEntrySaveRequestBag = {
                communicationGuid: communicationGuid.value,
                communicationListGroupGuid: internalCommunicationListGroupGuid.value,
                futureSendDateTime: internalScheduleSendIsoString.value,
                isBulkCommunication: internalIsBulkCommunication.value,
                mediumEntityTypeGuid: EntityType.CommunicationMediumSms,
                recipients: internalRecipients.value,
                smsAttachmentBinaryFiles: attachment.value ? [attachment.value] : null,
                smsFromSystemPhoneNumberGuid: toGuidOrNull(fromNumberGuidOrEmptyString.value),
                smsMessage: message.value,
                status: CommunicationStatus.Transient,
                excludeDuplicateRecipientAddress: excludeDuplicateRecipientAddress.value
            };

            const result = await invokeBlockAction<CommunicationEntrySaveResponseBag>("Save", { bag });

            if (result.isError || !result.data) {
                raiseError(result.errorMessage || "An error occurred while saving. Please try again.");
            }
            else {
                raiseSaved(result.data);
            }
        }
        finally {
            enable();
        }
    }

    function disable(reason: string): void {
        disabledMessage.value = reason;
        internalDisabled.value = true;
    }

    function enable(): void {
        disabledMessage.value = null;
        internalDisabled.value = false;
    }

    function isSmsMediumOptions(options: CommunicationEntryMediumOptionsBaseBag | null | undefined): options is CommunicationEntrySmsMediumOptionsBag {
        return options?.mediumType === MediumType.Sms;
    }

    function raiseError(error: string): void {
        errorMessage.value = error;
        scrollToTopOfWindow();

        emit("error", error);
    }

    function raiseTested(testResponse: CommunicationEntryTestResponseBag): void {
        testResult.value = testResponse;
        emit("tested", testResponse);
    }

    function raiseSaved(response: CommunicationEntrySendResponseBag): void {
        communicationGuid.value = response.communicationGuid;
        emit("saved", response);
        scrollToTopOfWindow();
    }

    function raiseSent(response: CommunicationEntrySendResponseBag): void {
        communicationGuid.value = response.communicationGuid;
        emit("sent", response);
        scrollToTopOfWindow();
    }

    //#endregion

    //#region Watchers

    // Whenever the selected medium changes, mark the invalid transport notification
    // as not dismissed so it can be shown again if this medium is revisited.
    watch(selectedMediumType, () => {
        if (isInvalidTransportNotificationDismissed.value) {
            isInvalidTransportNotificationDismissed.value = false;
        }
    });

    //#endregion

    //#region Hooks

    /**
     * Load the options if they haven't been loaded yet.
     * This is necessary when switching to a different medium (Email or SMS) after the block is loaded.
     */
    onMounted(async () => {
        try {
            isLoadingMediumOptions.value = true;

            if (!mediumOptions.value) {
                const response = await invokeBlockAction<CommunicationEntrySmsMediumOptionsBag>("GetMediumOptions", {
                    mediumEntityTypeGuid: EntityType.CommunicationMediumSms
                });

                if (!response?.data || response.isError || !isSmsMediumOptions(response.data)) {
                    raiseError(response.errorMessage ?? "An error occurred while loading the communication. Please try again.");
                }
                else {
                    mediumOptions.value = response.data;
                }
            }
        }
        finally {
            isLoadingMediumOptions.value = false;
        }
    });

    //#endregion
</script>