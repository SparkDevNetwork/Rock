<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>
            <div class="col-md-3">
                <CheckBox v-model="isPersonalAllowed"
                          label="Is Personal Allowed" />
            </div>
            <div class="col-md-3">
                <CheckBox v-model="isSharedAllowed"
                          label="Is Shared Allowed" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <TextBox v-model="helpText"
                 label="Help Text"
                 textMode="multiline" />

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { SnippetTypeBag } from "@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeBag";
    import { SnippetTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeDetailOptionsBag";

    const props = defineProps({
    modelValue: {
    type: Object as PropType<SnippetTypeBag>,
            required: true
        },

        options: {
            type: Object as PropType<SnippetTypeDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: SnippetTypeBag): void,
        (e: "propertyChanged", value: string): void
        }>();

        // #region Values

        const attributes = ref(props.modelValue.attributes ?? {});
        const attributeValues = ref(props.modelValue.attributeValues ?? {});
        const description = propertyRef(props.modelValue.description ?? "", "Description");
        const name = propertyRef(props.modelValue.name ?? "", "Name");
        const helpText = propertyRef(props.modelValue.helpText ?? "", "HelpText");
        const isPersonalAllowed = propertyRef(props.modelValue.isPersonalAllowed, "IsPersonalAllowed");
        const isSharedAllowed = propertyRef(props.modelValue.isSharedAllowed, "IsSharedAllowed");

        // The properties that are being edited. This should only contain
        // objects returned by propertyRef().
        const propRefs = [description, name, helpText, isPersonalAllowed, isSharedAllowed];

        // #endregion

        // #region Computed Values

        // #endregion

        // #region Functions

        // #endregion

        // #region Event Handlers

        // #endregion

        // Watch for parental changes in our model value and update all our values.
        watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.attributeValues ?? {});
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(helpText, props.modelValue.helpText ?? "");
        updateRefValue(isPersonalAllowed, props.modelValue.isPersonalAllowed);
        updateRefValue(isSharedAllowed, props.modelValue.isSharedAllowed);
        });

        // Determines which values we want to track changes on (defined in the
        // array) and then emit a new object defined as newValue.
        watch([attributeValues, ...propRefs], () => {
        const newValue: SnippetTypeBag = {
        ...props.modelValue,
        attributeValues: attributeValues.value,
        description: description.value,
        name: name.value,
        helpText: helpText.value,
        isPersonalAllowed: isPersonalAllowed.value,
        isSharedAllowed: isSharedAllowed.value,
        };

        emit("update:modelValue", newValue);
        });

        // Watch for any changes to props that represent properties and then
        // automatically emit which property changed.
        watchPropertyChanges(propRefs, emit);
    </script>
