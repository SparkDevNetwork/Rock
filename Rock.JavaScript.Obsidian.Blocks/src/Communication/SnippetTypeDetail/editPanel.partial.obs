<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>
            <div class="col-md-3">
                <CheckBox v-model="isPersonalAllowed"
                          label="Is Personal Allowed" />
            </div>
            <div class="col-md-3">
                <CheckBox v-model="isSharedAllowed"
                          label="Is Shared Allowed" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <TextBox v-model="helpText"
                 label="Help Text"
                 textMode="multiline" />

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { SnippetTypeBag } from "@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeBag";
    import { SnippetTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Communication/SnippetTypeDetail/snippetTypeDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<SnippetTypeBag>>,
            required: true
        },

        options: {
            type: Object as PropType<SnippetTypeDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<SnippetTypeBag>): void,
        (e: "propertyChanged", value: string): void
        }>();

        // #region Values

        const attributes = ref(props.modelValue?.bag?.attributes ?? {});
        const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
        const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
        const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
        const helpText = propertyRef(props.modelValue?.bag?.helpText ?? "", "HelpText");
        const isPersonalAllowed = propertyRef(props.modelValue?.bag?.isPersonalAllowed ?? false, "IsPersonalAllowed");
        const isSharedAllowed = propertyRef(props.modelValue?.bag?.isSharedAllowed ??  false, "IsSharedAllowed");

        // The properties that are being edited. This should only contain
        // objects returned by propertyRef().
        const propRefs = [description, name, helpText, isPersonalAllowed, isSharedAllowed];

        // #endregion

        // #region Computed Values

        // #endregion

        // #region Functions

        // #endregion

        // #region Event Handlers

        // #endregion

        // Watch for parental changes in our model value and update all our values.
        watch(() => props.modelValue, () => {
            updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
            updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
            updateRefValue(description, props.modelValue?.bag?.description ?? "");
            updateRefValue(name, props.modelValue?.bag?.name ?? "");
            updateRefValue(helpText, props.modelValue?.bag?.helpText ?? "");
            updateRefValue(isPersonalAllowed, props.modelValue?.bag?.isPersonalAllowed ?? false);
            updateRefValue(isSharedAllowed, props.modelValue?.bag?.isSharedAllowed ??  false);
        });

        // Determines which values we want to track changes on (defined in the
        // array) and then emit a new object defined as newValue.
        watch([attributeValues, ...propRefs], () => {
            const newValue: ValidPropertiesBox<SnippetTypeBag> = {
                bag: { ...props.modelValue.bag } as SnippetTypeBag
            };
            setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value),
            setPropertiesBoxValue(newValue, "description", description.value),
            setPropertiesBoxValue(newValue, "name", name.value),
            setPropertiesBoxValue(newValue, "helpText", helpText.value),
            setPropertiesBoxValue(newValue, "isPersonalAllowed", isPersonalAllowed.value),
            setPropertiesBoxValue(newValue, "isSharedAllowed", isSharedAllowed.value),

            emit("update:modelValue", newValue);
        });

        // Watch for any changes to props that represent properties and then
        // automatically emit which property changed.
        watchPropertyChanges(propRefs, emit);
    </script>
