<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="confirmation-preview-panel email">
        <div class="email-preview">
            <div class="email-header">
                <h3>{{ fromName }} &lt;{{ fromAddress }}&gt;</h3>
                <h4>Subject: {{ subject }}</h4>
                <div class="row">
                    <div class="col-xs-6">
                        To: {{ to }}
                    </div>
                    <div class="col-xs-6">
                        CC: {{ ccEmails || 'N/A' }}
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-6">
                        Reply To: {{ replyToEmail }}
                    </div>
                    <div class="col-xs-6">
                        BCC: {{ bccEmails || 'N/A' }}
                    </div>
                </div>
            </div>

            <div class="email-body">
                <iframe ref="iframeElement" :srcdoc="message"></iframe>
            </div>
        </div>
    </div>
</template>

<style scoped>
.confirmation-preview-panel {
    display: flex;
    align-items: flex-start;
    width: 100%;

    margin-top: calc(0px - var(--panel-body-padding));
    margin-bottom: calc(0px - var(--panel-body-padding));
    padding: var(--panel-body-padding);

    background-color: var(--color-interface-soft);
}

.confirmation-preview-panel.email {
    min-height: 880px;
    max-height: 880px;
    overflow-y: auto;
}

.email-preview {
    width: 100%;

    background-color: white;
    border: 2px solid white;
}

.email-header {
    flex: 0;
    padding: var(--spacing-large);
}

.email-header h3 {
    color: var(--color-info-strong);
}

.email-body {
    display: flex;
}

.email-body iframe {
    width: 100%;
}
</style>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";

    defineProps({
        bccEmails: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        ccEmails: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        fromAddress: {
            type: String as PropType<string>,
            required: true
        },

        fromName: {
            type: String as PropType<string>,
            required: true
        },

        message: {
            type: String as PropType<string>,
            required: true
        },

        replyToEmail: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        subject: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        to: {
            type: String as PropType<string | null | undefined>,
            required: true
        }
    });

    // #region Values

    const iframeElement = ref<HTMLIFrameElement | undefined>();

    // #endregion Values

    // #region Hooks

    watch(iframeElement, (iframe) => {
        if (iframe) {
            iframe.addEventListener("load", () => {
                const minHeight = 450;
                const iframeContentHeight = iframe.contentWindow?.document.body.scrollHeight ?? minHeight;

                iframe.style.height = iframeContentHeight + "px";
                iframe.style.minHeight = `${minHeight}px`;
            });
        }
    });

    // #endregion Hooks
</script>