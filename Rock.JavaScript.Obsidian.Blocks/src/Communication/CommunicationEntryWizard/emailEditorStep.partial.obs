<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="email-editor-step">
        <Panel :hasFullscreen="true"
               :headerSecondaryActions="[{
                title: 'Save As Template', type: 'default',
                handler: onSaveAsTemplate
            }]"
               panelBodyCssClass="panel-body-wizard"
               type="block">
            <template #title>
                <div class="email-editor-panel-title">
                    <span>{{ title }}</span>
                    <div class="email-editor-panel-title-right">
                        <HighlightLabel v-if="isSaveSuccessMessageShown"
                                        labelType="success">
                            The communication has been saved.
                            <button type="button" class="close btn-dismiss-alert" aria-label="Hide This Alert" @click.prevent="isSaveSuccessMessageShown = false">
                                <i class="fa fa-times" aria-hidden="true"></i>
                            </button>
                        </HighlightLabel>

                        <HighlightLabel v-if="isSendTestErrorMessageShown"
                                        labelType="danger"
                                        :dismissible="true"
                                        @dismiss="isSendTestErrorMessageShown = false">
                            <div v-html="sendTestErrorMessage" style="font-weight: var(--font-weight-regular)"></div>
                            <button type="button" class="close btn-dismiss-alert" aria-label="Hide This Alert" @click.prevent="isSendTestErrorMessageShown = false">
                                <i class="fa fa-times" aria-hidden="true"></i>
                            </button>
                        </HighlightLabel>

                        <HighlightLabel labelType="info">
                            <template v-if="isFetchingRecipients"><i class="fas fa-spinner fa-pulse"></i> Recipients</template>
                            <template v-else>{{ recipientsLabel }}</template>
                        </HighlightLabel>
                    </div>
                </div>
            </template>

            <template #headerActions>
                <span class="action panel-action-preview clickable"
                      :disabled="isDisabled"
                      @click="onClickPreview">
                    <i ref="previewElement"
                       data-toggle="tooltip"
                       title="Preview"
                       class="fa fa-eye"></i>
                </span>

                <span class="action panel-action-save clickable"
                      :disabled="isDisabled"
                      @click="onSaveCommunication">
                    <i ref="saveElement"
                       data-toggle="tooltip"
                       title="Save Draft"
                       class="fa fa-save"></i>
                </span>
            </template>

            <template #default>
                <div class="panel-body-contents">
                    <EmailEditor ref="emailEditorElement"
                                 :html="html"
                                 :getHtmlRequest="getHtmlRequest"
                                 :imageComponentBinaryFileTypeGuid="imageComponentBinaryFileTypeGuid"
                                 :disabled="isDisabled"
                                 :mergeFields="mergeFields"
                                 :shortLinkCheckToken="shortLinkCheckToken"
                                 :shortLinkGetPageId="shortLinkGetPageId"
                                 :shortLinkSites="shortLinkSites"
                                 :shortLinkTokenMinLength="shortLinkTokenMinLength"
                                 :recipientPersonIds="recipientPersonIds"
                                 :videoProviderNames="videoProviderNames" />

                    <LoadingOverlay :isVisible="isDisabled"
                                    targetSelector=".email-editor-step" />
                </div>
            </template>

            <template #footerActions>
                <RockButton v-shortcut="!areNavigationShortcutsDisabled && 'ArrowLeft'"
                            :disabled="isDisabled"
                            @click="onPreviousClicked">Previous</RockButton>
            </template>

            <template #footerSecondaryActions>
                <RockButton :disabled="isDisabled"
                            @click="isSendTestModalShown = true">
                    <i class="fa fa-paper-plane-o"></i> Send Test
                </RockButton>

                <RockButton v-shortcut="!areNavigationShortcutsDisabled && 'ArrowRight'"
                            btnType="primary"
                            :disabled="isDisabled"
                            @click="onNextClicked">{{ nextStepTitle ? `Next: ${nextStepTitle}` : 'Next' }}</RockButton>
            </template>
        </Panel>

        <Modal v-model="isPreviewOpen" title="Email Preview">
            <div class="preview">
                <ButtonGroup v-model="previewDevice"
                             :items="[
                                { text: 'Desktop', value: 'desktop' },
                                { text: 'Mobile', value: 'mobile' }
                            ]" />

                <div :class="previewDevice === 'desktop' ? 'device-browser' : 'device-mobile'">
                    <iframe :srcdoc="previewHtml"></iframe>
                </div>
            </div>
        </Modal>

        <Modal v-model="isSendTestModalShown"
               saveText="Send"
               @save="onSendTestCommunication">
            <EmailBox v-model="internalTestEmailAddress"
                      help="This will temporarily change your email address during the test, but it will be changed back after the test is complete."
                      label="Email"
                      rules="required" />
        </Modal>
    </div>
</template>

<style scoped>
@import "/Styles/RockFont/style.css";
@import "/Styles/Blocks/Shared/Devices.css";

:deep(.panel-body-wizard) {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    padding: 0;
}

.panel-body-contents {
    flex: 1;
    overflow: hidden;
}

:deep(.panel-sub-header) {
    background-color: var(--color-interface-softer);
    border-color: var(--color-interface-soft);
}

:deep(.panel-body .actions:last-of-type) {
    margin: 0;
}

.preview {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-medium);
}

.preview > .btn-group {
    width: 100%;
}

.device-browser {
    height: 568px;
    position: relative;
}

.device-mobile {
    height: 693px;
    position: relative;
}

.preview iframe {
    width: 100%;
    height: 100%;
}

:deep(.email-editor-side-panel-heading) {
    background-color: var(--color-interface-softest);
}

.email-editor-panel-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.email-editor-panel-title-right {
    display: flex;
    flex-direction: row;
    gap: var(--spacing-xsmall);
}

.btn-dismiss-alert {
    font-size: var(--font-size-xsmall);
}

.btn-dismiss-alert.close i {
    display: inline-block;
}
</style>


<script setup lang="ts">
    import { computed, onMounted, onUnmounted, PropType, ref, watch } from "vue";
    import EmailEditor, { EmailEditorApi, GetHtmlRequest } from "@Obsidian/Controls/emailEditor";
    import LoadingOverlay from "./loadingOverlay.partial.obs";
    import { BlockActionCallbacks } from "./types.partial";
    import ButtonGroup from "@Obsidian/Controls/buttonGroup.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import { GetHtmlResponse } from "@Obsidian/Controls/emailEditor";
    import HighlightLabel from "@Obsidian/Controls/highlightLabel.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { vShortcut } from "@Obsidian/Directives/shortcut";
    import { Guid } from "@Obsidian/Types";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        areNavigationShortcutsDisabled: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        communicationTemplateGuid: {
            type: String as PropType<Guid | null | undefined>,
            required: true
        },

        communicationTemplates: {
            type: Object as PropType<ListItemBag[]>,
            required: true
        },

        imageComponentBinaryFileTypeGuid: {
            type: String as PropType<Guid>,
            required: true
        },

        isFetchingRecipients: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        mergeFields: {
            type: Object as PropType<string[] | undefined>,
            required: true
        },

        message: {
            type: String as PropType<string>,
            required: true
        },

        nextStepTitle: {
            type: String as PropType<string | null | undefined>,
            required: true
        },

        previewHtmlProcessor: {
            type: Object as PropType<((previewHtml: string) => string | null | undefined | Promise<string | null | undefined>) | undefined>,
            required: true
        },

        recipientPersonIds: {
            type: Object as PropType<number[] | null | undefined>,
            required: true
        },

        recipientsLabel: {
            type: String as PropType<string>,
            required: true
        },

        shortLinkCheckToken: {
            type: Object as PropType<((token: string, siteId: number) => Promise<string>) | null | undefined>,
            required: true
        },

        shortLinkGetPageId: {
            type: Object as PropType<((pageGuid: Guid) => Promise<number | null | undefined>) | null | undefined>,
            required: true
        },

        shortLinkSites: {
            type: Object as PropType<ListItemBag[] | null | undefined>,
            required: true
        },

        shortLinkTokenMinLength: {
            type: Number as PropType<number | null | undefined>
        },

        testEmailAddress: {
            type: String as PropType<string>,
            required: true
        },

        title: {
            type: String as PropType<string>,
            required: true
        },

        videoProviderNames: {
            type: Object as PropType<string[] | null | undefined>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "nextStep"): void;
        (e: "previousStep"): void;
        (e: "sendTestCommunication", value: string, callbacks: BlockActionCallbacks): void;
        (e: "saveCommunication", value: BlockActionCallbacks): void;
        (e: "saveAsTemplate", value: GetHtmlResponse, api: EmailEditorApi): void;
        (e: "update:message", value: string): void;
        (e: "update:communicationTemplateGuid", value: Guid | null | undefined): void;
        (e: "update:testEmailAddress", value: string): void;
    }>();

    // #region Values

    // UI state.
    const emailEditorElement = ref<InstanceType<typeof EmailEditor> | null>(null);
    const previewElement = ref<HTMLElement | undefined>();
    const saveElement = ref<HTMLElement | undefined>();
    const previewHtml = ref<string>("");
    const selectedComponentElement = ref<HTMLElement | null | undefined>();
    const isPreviewLoading = ref<boolean>(false);
    const isPreviewOpen = ref<boolean>(false);
    const previewDevice = ref<string>("desktop");
    const isSaveSuccessMessageShown = ref<boolean>(false);
    const isSendTestErrorMessageShown = ref<boolean>(false);
    const sendTestErrorMessage = ref<string>("");
    const isSaving = ref<boolean>(false);
    const isSendingTest = ref<boolean>(false);
    const isSendTestModalShown = ref<boolean>(false);
    const getHtmlRequest = ref<GetHtmlRequest | null | undefined>();
    // Initialize html to the message value.
    const html = ref<string>(props.message);

    // Communication state.
    const internalTestEmailAddress = useVModelPassthrough(props, "testEmailAddress", emit);

    // #endregion

    // #region Computed Values

    const isDisabled = computed<boolean>(() => {
        return isSaving.value || isSendingTest.value || isPreviewLoading.value;
    });

    // #endregion Computed Values

    // #region Event Handlers

    function onSaveAsTemplate(): void {
        getHtmlRequest.value = {
            onSuccess(response: GetHtmlResponse): void {
                const api = emailEditorElement.value?.getApi();

                if (api) {
                    emit("saveAsTemplate", response, api);
                }
            }
        };
    }

    function onSendTestCommunication(): void {
        if (isSendingTest.value) {
            return;
        }

        isSendingTest.value = true;
        isSendTestErrorMessageShown.value = false;

        getHtmlRequest.value = {
            onSuccess({ html }): void {
                emit("sendTestCommunication", html, {
                    onSuccess() {
                        isSendingTest.value = false;
                    },

                    onError(error?: string | null | undefined) {
                        isSendingTest.value = false;
                        isSendTestErrorMessageShown.value = true;
                        sendTestErrorMessage.value = error ?? "An error occurred while sending the test email.";
                    }
                });
            }
        };

        isSendTestModalShown.value = false;
    }

    function onPreviousClicked(): void {
        // Update the message before moving to the previous step.
        getHtmlRequest.value = {
            onSuccess({ html }): void {
                emit("update:message", html);
                emit("previousStep");
            }
        };
    }

    function onNextClicked(): void {
        // Update the message before moving to the previous step.
        getHtmlRequest.value = {
            onSuccess({ html }): void {
                emit("update:message", html);
                emit("nextStep");
            }
        };
    }

    function onSaveCommunication(): void {
        if (isSaving.value) {
            return;
        }

        isSaving.value = true;

        selectedComponentElement.value = null;

        getHtmlRequest.value = {
            onSuccess({ html }): void {
                emit("update:message", html);

                emit("saveCommunication", {
                    onSuccess() {
                        isSaveSuccessMessageShown.value = true;
                        isSaving.value = false;
                    },

                    onError() {
                        isSaving.value = false;
                    }
                });
            }
        };
    }

    function onClickPreview(): void {
        // Deselect component before generating preview.
        selectedComponentElement.value = null;

        isPreviewLoading.value = true;

        getHtmlRequest.value = {
            async onSuccess({ html }): Promise<void> {
                emit("update:message", html);

                if (props.previewHtmlProcessor) {
                    let result = props.previewHtmlProcessor(html);

                    if (isPromise(result)) {
                        result = await result;
                    }

                    html = result ?? "An error occurred.";
                }

                previewHtml.value = html;
                isPreviewOpen.value = true;
                isPreviewLoading.value = false;
            }
        };
    }

    function onKeyDownEscape(event: KeyboardEvent): void {
        if (event.key === "Escape") {
            console.debug("onKeyDownEscape");
            selectedComponentElement.value = null;
            event.stopImmediatePropagation();
        }
    }

    // #endregion

    // #region Watchers

    watch(saveElement, element => {
        if (element) {
            tooltip(element);
        }
    });

    watch(previewElement, element => {
        if (element) {
            tooltip(element);
        }
    });

    // #endregion Watchers

    // #region Hooks

    onMounted(async () => {
        // Add handlers for delete and escape keys being pressed.
        // This happens outside of the iframe since the iframe has custom drag-drop behavior that interferes with custom key handling.
        window.removeEventListener("keydown", onKeyDownEscape);
        window.addEventListener("keydown", onKeyDownEscape);
    });

    onUnmounted(() => {
        // Remove handlers for delete and escape keys being pressed.
        window.removeEventListener("keydown", onKeyDownEscape);
    });

    // #endregion Hooks
</script>
