<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Data View"
          title="Persisted Data View List"
          :entityTypeGuid="EntityType.Dataview"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    width="25%"
                    visiblePriority="xs" />

        <TextColumn name="persistedInterval"
                    title="Persisted Interval"
                    field="persistedInterval"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <NumberColumn name="persistedLastRunDurationMilliseconds"
                      title="Time to build (ms)"
                      field="persistedLastRunDurationMilliseconds"
                      :filter="numberValueFilter"
                      visiblePriority="md" />

        <NumberColumn name="runCount"
                      title="Run Count"
                      field="runCount"
                      :filter="numberValueFilter"
                      visiblePriority="md" />

        <DateTimeColumn name="lastRunDateTime"
                        title="Last Run Date Time"
                        field="lastRunDateTime"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        :filter="dateValueFilter"
                        visiblePriority="md" />

        <DateTimeColumn name="persistedLastRefreshDateTime"
                        title="Last Refresh"
                        field="persistedLastRefreshDateTime"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right"
                        :filter="dateValueFilter"
                        visiblePriority="xs"
                        width="200" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { NumberColumn, numberValueFilter, dateValueFilter, TextColumn, textValueFilter, DateTimeColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { PersistedDataViewListOptionsBag } from "@Obsidian/ViewModels/Blocks/Reporting/PersistedDataViewList/persistedDataViewListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./PersistedDataViewList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<PersistedDataViewListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
