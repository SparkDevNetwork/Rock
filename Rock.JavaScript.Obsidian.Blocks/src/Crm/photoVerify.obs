<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
        :data="gridDataSource"
        keyField="idKey"
        itemTerm="Verify Photo"
        emptyDataText="No one to show."
        :entityTypeGuid="EntityType.GroupMember"
        stickyHeader
        liveUpdates
        :isFooterHidden="false"
        :showLaunchWorkflow="false"
        :isCountMessageVisible="false"
        :showMergeTemplate="false"
        :showExport="false"
        gridSettings
        :gridSettingsActive="hasSettingsFilters"
        @gridSettingsClick="isGridSettingsVisible = true"
        @selectItem="onSelectItem"
        @selectedKeysChanged="onSelectedKeysChanged">

        <template #gridHeaderPrepend v-if="processVerificationMessage">
            <NotificationBox class="m-3" :alertType="notificationMessageType">{{ processVerificationMessage }}</NotificationBox>
        </template>

        <SelectColumn />

        <Column name="photo"
            field="photo"
            title="Photo">
            <template #format="{ row }">
                <img :src="row.photo" :width="config.options?.photoSize" :height="config.options?.photoSize" class="img-fluid">
            </template>
        </Column>

        <DateTimeColumn name="created" title="Created" field="created" visiblePriority="sm" width="5%" />

        <TextColumn name="name" title="Name" field="name" width="10%" :filter="textValueFilter" />

        <TextColumn name="gender" title="Gender" field="gender" width="5%" visiblePriority="sm" :filter="pickExistingValueFilter" />

        <TextColumn name="email" title="Email" field="email" width="15%" :filter="textValueFilter" visiblePriority="md" />

        <Column name="status" title="Status" field="status" width="5%" :filter="pickExistingValueFilter">
            <template #format="{ row }">
                <span v-if="row.status === GroupMemberStatus.Inactive" class='label label-danger'>Opted-Out</span>
                <span v-else-if="row.status === GroupMemberStatus.Active" class='label label-success'>Verified</span>
                <span v-else-if="row.status === GroupMemberStatus.Pending" class='label label-warning'>Pending</span>
            </template>
        </Column>

        <ButtonColumn name="user" @click="onSelectItem" iconClass="fa fa-user" />

        <DeleteColumn @click="onDeleteClick" />

        <template #gridFooterAppend>
            <RockButton class="btn btn-primary btn-grid-custom-action pull-left m-2" type="button" :btnType="BtnType.Primary" @click="onVerifyClick" v-if="gridData?.rows?.length">Verify</RockButton>
        </template>
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible" />

</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, usePersonPreferences, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { Column, TextColumn, textValueFilter, SelectColumn, ButtonColumn, DeleteColumn, DateTimeColumn, pickExistingValueFilter } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { PhotoVerifyListOptionsBag } from "@Obsidian/ViewModels/Blocks/Crm/PhotoVerifyList/photoVerifyListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { GroupMemberStatus } from "@Obsidian/Enums/Group/groupMemberStatus";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { asBoolean } from "@Obsidian/Utility/booleanUtils";
    import { computed, reactive, ref, watch } from "vue";
    import { IGridState } from "@Obsidian/Types/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { GridSettingsOptions, PreferenceKey } from "./PhotoVerify/types.partial";
    import GridSettingsModal from "./PhotoVerify/gridSettingsModal.partial.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";

    // #region Values
    const config = useConfigurationValues<ListBlockBox<PhotoVerifyListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    const gridDataSource = ref<Promise<GridDataBag>>();
    const selectedKeys = ref<string[]>([]);
    let gridData: GridDataBag | undefined;
    const processVerificationMessage = ref<string | null>(null);
    const notificationMessageType = ref<string>("warning");

    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        showVerifiedPhotos: preferences.getValue(PreferenceKey.FilterShowVerifiedPhotos)
    });

    // #endregion

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return asBoolean(gridSettings.value.showVerifiedPhotos);
    });

    // #endregion

    // #region Functions

    /**
     * Called when a row has been selected by the person.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        const personIdKey = gridData?.rows?.find(r => r["idKey"] === key)?.personIdKey as string;
        window.location.href = `/Person/${personIdKey}`;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        processVerificationMessage.value = "";
        const result = await invokeBlockAction<GridDataBag>("GetGridData");
        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Called when the individual changes which rows are selected.
     *
     * @param state The state object that describes the grid.
     */
     function onSelectedKeysChanged(state: IGridState): void {
        selectedKeys.value = [...state.selectedKeys];
    }

    /**
     * Called when a row's delete button has been clicked by the individual.
     */
     async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            alert(result.errorMessage ?? "Unknown error while trying to delete photo request.");
        }
    }

     async function onVerifyClick(): Promise<void> {
        const result = await invokeBlockAction("VerifySelectedMembers", {
            selectedGroupMembers: selectedKeys.value
        });

        if (result.isSuccess) {
            gridDataSource.value = loadGridData();
            var successfullyVerifiedCount = selectedKeys.value.length;
            processVerificationMessage.value = `Verified ${successfullyVerifiedCount} ${successfullyVerifiedCount === 1 ? "photo" : "photos"}.`;
            notificationMessageType.value = "success";
        }
        else {
            processVerificationMessage.value = result.errorMessage;
            notificationMessageType.value = "warning";
        }
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(PreferenceKey.FilterShowVerifiedPhotos, gridSettings.value.showVerifiedPhotos ?? "");

        await preferences.save();

        gridDataSource.value = loadGridData();
    });

    onConfigurationValuesChanged(useReloadBlock());

    gridDataSource.value = loadGridData();
</script>