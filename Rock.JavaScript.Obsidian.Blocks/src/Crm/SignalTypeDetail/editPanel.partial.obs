<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <NotificationBox v-if="!isEditable" alertType="info"><strong>Note</strong> You are not authorized to edit this signal type.</NotificationBox>

        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required"
                         :maxLength="100"
                         :disabled="!isEditable" />
            </div>

        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline"
                 :disabled="!isEditable" />

        <div class="row">
            <div class="col-md-6">
                <ColorPicker label="Color"
                             help="The color that will be used when displaying this signal."
                             rules="required"
                             v-model="signalColor"
                             :maxLength="100"
                             :disabled="!isEditable" />
            </div>
            <div class="col-md-6">
                <TextBox v-model="signalIconCssClass"
                         label="Icon CSS Class"
                         :maxLength="100"
                         :disabled="!isEditable" />
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import ColorPicker from "@Obsidian/Controls/colorPicker.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { SignalTypeBag } from "@Obsidian/ViewModels/Blocks/Crm/SignalTypeDetail/signalTypeBag";
    import { SignalTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Crm/SignalTypeDetail/signalTypeDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<SignalTypeBag>>,
            required: true
        },

        options: {
            type: Object as PropType<SignalTypeDetailOptionsBag>,
            required: true
        },

        isEditable: {
            type: Object as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<SignalTypeBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const signalColor = propertyRef(props.modelValue?.bag?.signalColor ?? "", "SignalColor");
    const signalIconCssClass = propertyRef(props.modelValue?.bag?.signalIconCssClass ?? "", "SignalIconCssClass");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, name, signalColor, signalIconCssClass];

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(signalColor, props.modelValue?.bag?.signalColor ?? "");
        updateRefValue(signalIconCssClass, props.modelValue?.bag?.signalIconCssClass ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: ValidPropertiesBox<SignalTypeBag> = {
            bag: { ...props.modelValue.bag } as SignalTypeBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "signalColor", signalColor.value);
        setPropertiesBoxValue(newValue, "signalIconCssClass", signalIconCssClass.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
