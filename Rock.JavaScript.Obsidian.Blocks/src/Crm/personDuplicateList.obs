<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="personId"
          itemTerm="Person Duplicate"
          :entityTypeGuid="EntityType.PersonDuplicate"
          stickyHeader
          disablePreferences
          @selectItem="onSelectItem">
        
        <Column name="maxConfidenceScore"
                title="Confidence"
                field="maxConfidenceScore"
                visiblePriority="xs"
                width="7%" >
            <template #format="{ row }">
                <div v-if="row.maxConfidenceScore" :class="'label label-' + (config.options?.confidenceScoreHigh && row.maxConfidenceScore >= config.options?.confidenceScoreHigh ? 'success' : (config.options?.confidenceScoreLow && row.maxConfidenceScore <= config.options?.confidenceScoreLow ? 'default' : 'warning'))">
                    {{ row.maxConfidenceScore }}%
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="campus"
                    title="Campus"
                    field="campus"
                    visiblePriority="md" 
                    v-if="config.options?.hasMultipleCampuses" />

        <Column name="accountProtectionProfile"
                title="Account Protection Profile"
                field="accountProtectionProfile"
                visiblePriority="xs" 
                width="15%" >
            <template #format="{ row }">
                <div :class="'label label-' + (accountProtectionLabelColors[row.accountProtectionProfile])">
                    {{ AccountProtectionProfileDescription[row.accountProtectionProfile] }}
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="firstName"
                    title="First Name"
                    field="firstName"
                    visiblePriority="xs" />

        <TextColumn name="lastName"
                    title="Last Name"
                    field="lastName"
                    visiblePriority="xs" />

        <TextColumn name="suffixValue"
                    title="Suffix"
                    field="suffixValue"
                    visiblePriority="md"
                    width="7%" />

        <NumberColumn name="matchCount"
                      title="Match Count"
                      field="matchCount"
                      visiblePriority="sm"
                      width="7%" />

        <DateTimeColumn name="personModifiedDateTime"
                        title="Modified"
                        field="personModifiedDateTime"
                        visiblePriority="md" />

        <TextColumn name="createdBy"
                    title="Created By"
                    field="createdBy"
                    visiblePriority="md" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, TextColumn, DateTimeColumn, NumberColumn, Column, PersonColumn } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { PersonDuplicateListOptionsBag } from "@Obsidian/ViewModels/Blocks/Crm/PersonDuplicateList/personDuplicateListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./PersonDuplicateList/types.partial";
    import { reactive, ref } from "vue";
    import { AccountProtectionProfile, AccountProtectionProfileDescription } from "@Obsidian/Enums/Blocks/Crm/PersonDuplicateList/accountProtectionProfile";

    const config = useConfigurationValues<ListBlockBox<PersonDuplicateListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const accountProtectionLabelColors = ref<Record<string, string>>({
        [AccountProtectionProfile.Extreme] :"danger",
        [AccountProtectionProfile.High] :"primary",
        [AccountProtectionProfile.Medium] :"warning",
        [AccountProtectionProfile.Low] :"success"
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
