<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Assessment Type"
          :entityTypeGuid="EntityType.AssessmentType"
          stickyHeader
          liveUpdates
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="isGridSettingsVisible = true"
          :showLaunchWorkflow="false"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="title"
                    title="Title"
                    field="title"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="40%" />

        <BooleanColumn name="requiresRequest"
                       title="Requires Request"
                       field="requiresRequest"
                       visiblePriority="xs"
                       width="5%" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       visiblePriority="xs"
                       width="5%" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, BooleanColumn, TextColumn, textValueFilter, DeleteColumn, SecurityColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { AssessmentTypeListOptionsBag } from "@Obsidian/ViewModels/Blocks/Crm/AssessmentTypeList/assessmentTypeListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridSettingsOptions, NavigationUrlKey, PreferenceKey } from "./AssessmentTypeList/types.partial";
    import { computed, reactive, ref, watch } from "vue";
    import GridSettingsModal from "./AssessmentTypeList/gridSettingsModal.partial.obs";

    const config = useConfigurationValues<ListBlockBox<AssessmentTypeListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;
    const isGridSettingsVisible = ref(false);

    const gridSettings = ref<GridSettingsOptions>({
        title: preferences.getValue(PreferenceKey.FilterTitle),
        active: preferences.getValue(PreferenceKey.FilterActive),
        request: preferences.getValue(PreferenceKey.FilterRequest),
    });

    // #endregion

    // #region Computed Values

    /**
     * Returns `true` if the grid settings filters are active; otherwise `false`.
     */
    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.active ||
            !!gridSettings.value.request ||
            !!gridSettings.value.title;
    });

    // #endregion

    // #region Watchers

    /**
     * Watch for changes to the grid settings and update the preferences as needed.
     */
    watch(gridSettings, async () => {
        // Handle the potential null or undefined values for each setting
        const activeValue = gridSettings.value.active ?? "";
        const requestValue = gridSettings.value.request ?? "";
        const titleValue = gridSettings.value.title ?? "";

        // Set the preferences with the appropriate values
        preferences.setValue(PreferenceKey.FilterActive, activeValue);
        preferences.setValue(PreferenceKey.FilterRequest, requestValue);
        preferences.setValue(PreferenceKey.FilterTitle, titleValue);

        // Save the preferences
        await preferences.save();

        // Reload the grid data
        gridDataSource.value = loadGridData();
    });

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete assessment type.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
