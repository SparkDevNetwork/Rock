<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <CheckBox v-model="showVerifiedPhotos"
                          label="Show Verified Photos" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { asBoolean, asTrueFalseOrNull } from "@Obsidian/Utility/booleanUtils";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const showVerifiedPhotos = ref(asBoolean(props.modelValue.showVerifiedPhotos));
    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            showVerifiedPhotos: asTrueFalseOrNull(showVerifiedPhotos.value),
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        showVerifiedPhotos.value = asBoolean(props.modelValue.showVerifiedPhotos);
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
