<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <TextBox v-model="title"
                         label="Title" />
            </div>

            <div class="col-md-4">
                <DropDownList v-model="request" :items="requiresRequest"
                         label="Requires Request" />
            </div>

            <div class="col-md-4">
                <DropDownList v-model="active" :items="activeStatus"
                              label="Is Active" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },
        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();


    const requiresRequest: ListItemBag[] = [
        {
            text: "Yes",
            value: "Yes"
        },
        {
            text: "No",
            value: "No"
        },
        {
            text: "",
            value: ""
        },
    ];

    const activeStatus: ListItemBag[] = [
        {
            text: "Yes",
            value: "Yes"
        },
        {
            text: "No",
            value: "No"
        },
        {
            text: "",
            value: ""
        },
    ];

    const title = ref(props.modelValue.title ?? "");
    const active = ref(props.modelValue.active ?? "");
    const request = ref(props.modelValue.request ?? "");
    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            title: title.value,
            active: active.value,
            request: request.value,
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        title.value = props.modelValue.title ?? "";
        active.value = props.modelValue.active ?? "";
        request.value = props.modelValue.request ?? "";
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
