<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <Panel type="block" :title="panelName">
        <RockForm v-model:submit="submitForm" @submit="onSave" :formResetKey="resetKey">
            <template #default>
                <ViewPanel v-if="panelMode == DetailPanelMode.View"
                           :modelValue="webFarmNodeViewBag"
                           :options="options" />
                <EditPanel v-if="panelMode === DetailPanelMode.Add || panelMode === DetailPanelMode.Edit"
                           v-model="webFarmNodeEditBag"
                           :options="options"
                           @propertyChanged="baseBlock.onPropertyChanged" />
            </template>

        </RockForm>
        <template #footerActions>
            <!-- <div v-if="panelMode === DetailPanelMode.View">
                <RockButton :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            @click="onEdit">
                    Edit
                </RockButton>
            </div> -->
            <div v-if="panelMode === DetailPanelMode.Add || panelMode === DetailPanelMode.Edit">
                <RockButton :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            @click="onSubmit">
                    Save
                </RockButton>
                <RockButton :btnSize="BtnSize.Default"
                            :btnType="BtnType.Link"
                            @click="onCancelEdit">
                    Cancel
                </RockButton>
            </div>
        </template>
    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import EditPanel from "./WebFarmNodeDetail/editPanel.partial.obs";
    import ViewPanel from "./WebFarmNodeDetail/viewPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { useConfigurationValues, useInvokeBlockAction, useEntityDetailBlock } from "@Obsidian/Utility/block";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { WebFarmNodeBag } from "@Obsidian/ViewModels/Blocks/WebFarm/WebFarmNodeDetail/webFarmNodeBag";
    import { WebFarmNodeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/WebFarm/WebFarmNodeDetail/webFarmNodeDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<WebFarmNodeBag, WebFarmNodeDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const webFarmNodeViewBag = ref(config.entity);
    const webFarmNodeEditBag = ref<ValidPropertiesBox<WebFarmNodeBag>>({
        bag: {} as WebFarmNodeBag
    });
    const submitForm = ref(false);
    const resetKey = ref("");

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: webFarmNodeEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return `Web Farm Node: ${webFarmNodeViewBag.value?.nodeName}`;
    });

    const options = computed((): WebFarmNodeDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion


    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<void> {
        resetKey.value = "reset-errors";
        panelMode.value = DetailPanelMode.View;
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<void> {
        const result = await invokeBlockAction<ValidPropertiesBox<WebFarmNodeBag>>("Edit", {
            key: webFarmNodeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            webFarmNodeEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };
            panelMode.value = DetailPanelMode.Edit;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<WebFarmNodeBag> | string>("Save", {
            box: webFarmNodeEditBag.value
        });

        if (result.isSuccess && result.data) {
            if (typeof result.data === "object") {
                webFarmNodeViewBag.value = result.data.bag;
                panelMode.value = DetailPanelMode.View;
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save web farm node.";
        }

    }

    async function onSubmit(): Promise<void> {
        submitForm.value = true;
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified web farm node could not be viewed.";
    }
    else if (!config.entity.idKey) {
        webFarmNodeEditBag.value = { bag: config.entity };
        panelMode.value = DetailPanelMode.Add;
    }
</script>
