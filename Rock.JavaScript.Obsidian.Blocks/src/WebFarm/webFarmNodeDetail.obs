<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

    <RockForm v-model:submit="submitForm" @submit="onSave" :formResetKey="resetKey">
        <Panel type="block" :title="panelName">
            <template #default>
                <ViewPanel v-if="panelMode == DetailPanelMode.View"
                           :modelValue="webFarmNodeViewBag"
                           :options="options" />
                <EditPanel v-if="panelMode === DetailPanelMode.Add || panelMode === DetailPanelMode.Edit"
                           v-model="webFarmNodeEditBag"
                           :options="options"
                           @propertyChanged="onPropertyChanged" />
            </template>
            <template v-if="panelMode === DetailPanelMode.Edit || panelMode === DetailPanelMode.Add" #footerActions>
                <div>
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Primary"
                                @click="onStartSubmitForm">
                        Save
                    </RockButton>
                    <RockButton :btnSize="BtnSize.Default"
                                :btnType="BtnType.Link"
                                @click="onCancelEdit">
                        Cancel
                    </RockButton>
                </div>
            </template>
        </Panel>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import EditPanel from "./WebFarmNodeDetail/editPanel.partial.obs";
    import ViewPanel from "./WebFarmNodeDetail/viewPanel.partial.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { getSecurityGrant, provideSecurityGrant, refreshDetailAttributes, useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { debounce } from "@Obsidian/Utility/util";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { WebFarmNodeBag } from "@Obsidian/ViewModels/Blocks/WebFarm/WebFarmNodeDetail/webFarmNodeBag";
    import { WebFarmNodeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/WebFarm/WebFarmNodeDetail/webFarmNodeDetailOptionsBag";

    const config = useConfigurationValues<DetailBlockBox<WebFarmNodeBag, WebFarmNodeDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const securityGrant = getSecurityGrant(config.securityGrantToken);

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const webFarmNodeViewBag = ref(config.entity);
    const webFarmNodeEditBag = ref<WebFarmNodeBag>({} as WebFarmNodeBag);
    const submitForm = ref(false);
    const resetKey = ref("");

    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    // The properties that are being edited in the UI. This is used to
    // inform the server which incoming values have valid data in them.
    const validProperties = [
        "attributeValues",
        "isActive",
        "isLeader",
        "nodeName"
    ];

    const refreshAttributesDebounce = debounce(() => refreshDetailAttributes(webFarmNodeEditBag, validProperties, invokeBlockAction), undefined, true);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return `Web Farm Node: ${webFarmNodeViewBag.value?.nodeName}`;
    });

    const options = computed((): WebFarmNodeDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<void> {
        resetKey.value = "reset-errors";
        panelMode.value = DetailPanelMode.View;
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<DetailBlockBox<WebFarmNodeBag, WebFarmNodeDetailOptionsBag>>("Edit", {
            key: webFarmNodeViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.entity) {
            webFarmNodeEditBag.value = result.data.entity;

            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for when a value has changed that has an associated
     * C# property name. This is used to detect changes to values that
     * might cause qualified attributes to either show up or not show up.
     *
     * @param propertyName The name of the C# property that was changed.
     */
    function onPropertyChanged(propertyName: string): void {
        // If we don't have any qualified attribute properties or this property
        // is not one of them then do nothing.
        if (!config.qualifiedAttributeProperties || !config.qualifiedAttributeProperties.some(n => n.toLowerCase() === propertyName.toLowerCase())) {
            return;
        }

        refreshAttributesDebounce();
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";

        const data: DetailBlockBox<WebFarmNodeBag, WebFarmNodeDetailOptionsBag> = {
            entity: webFarmNodeEditBag.value,
            isEditable: true,
            validProperties: validProperties
        };

        const result = await invokeBlockAction<WebFarmNodeBag | string>("Save", {
            box: data
        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "object") {
                webFarmNodeViewBag.value = result.data;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save web farm node.";

        return false;
    }

    const onStartSubmitForm = (): void => {
        submitForm.value = true;
    };

    // #endregion

    provideSecurityGrant(securityGrant);

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified web farm node could not be viewed.";
    }
    else if (!config.entity.idKey) {
        webFarmNodeEditBag.value = config.entity;
        panelMode.value = DetailPanelMode.Add;
    }
</script>
