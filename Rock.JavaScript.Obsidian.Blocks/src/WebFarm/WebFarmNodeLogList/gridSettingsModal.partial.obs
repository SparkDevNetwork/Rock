<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isVisible"
           title="Settings"
           saveText="Save"
           @save="onSave">
        <SectionHeader title="Filters" />

        <div class="row">
            <div class="col-md-4">
                <SlidingDateRangePicker v-model="dateRange"
                                        label="Date"
                                        :enabledSlidingDateRangeUnits="[RangeType.Previous, RangeType.Last, RangeType.Current, RangeType.Next, RangeType.Upcoming, RangeType.DateRange]"
                                        :enabledTimeUnits="[TimeUnit.Hour, TimeUnit.Day, TimeUnit.Week, TimeUnit.Month, TimeUnit.Year]" />
            </div>
        </div>
    </Modal>
</template>

<script setup lang="ts">
    import SlidingDateRangePicker from "@Obsidian/Controls/slidingDateRangePicker.obs";
    import { RangeType, SlidingDateRange, TimeUnit, slidingDateRangeToString, parseSlidingDateRangeString } from "@Obsidian/Utility/slidingDateRange";
    import Modal from "@Obsidian/Controls/modal.obs";
    import SectionHeader from "@Obsidian/Controls/sectionHeader.obs";
    import { ref, PropType, watch } from "vue";
    import { GridSettingsOptions } from "./types.partial";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { deepEqual } from "@Obsidian/Utility/util";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GridSettingsOptions>,
            required: true
        },

        visible: {
            type: Boolean as PropType<boolean>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GridSettingsOptions): void;
        (e: "update:visible", value: boolean): void;
        (e: "close"): void;
    }>();

    const dateRange = ref(parseSlidingDateRangeString(props.modelValue.dateRange ?? ""));
    const isVisible = useVModelPassthrough(props, "visible", emit);

    function onSave(): void {
        const value: GridSettingsOptions = {
            dateRange: dateRange.value ? slidingDateRangeToString(dateRange.value as SlidingDateRange) : "",
        };

        if (!deepEqual(value, props.modelValue, true)) {
            emit("update:modelValue", value);
        }

        isVisible.value = false;
    }

    watch(() => props.modelValue, () => {
        dateRange.value = parseSlidingDateRangeString(props.modelValue.dateRange ?? "");
    });

    watch(isVisible, () => {
        if (!isVisible.value) {
            emit("close");
        }
    });
</script>
