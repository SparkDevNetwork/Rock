<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <NotificationBox v-if="isSystem && !isStandAlone" alertType="info">
            <strong>Note</strong> Because this defined type is used by Rock, editing is not enabled.
        </NotificationBox>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <div  class="grid">
                    <Grid v-if="isGridVisible" :data="attributesGridData" keyField="key" itemTerm="Attribute" liveUpdates light @addItem="onAddAttribute">
                        <ReorderColumn v-if="!isStandAlone" @orderChanged="onOrderChanged" />
                        <TextColumn field="name" name="attribute" title="Attributes for Defined Type" />
                        <EditColumn v-if="!isStandAlone" @click="onEditAttribute" />
                        <DeleteColumn v-if="!isStandAlone" @click="onDeleteAttribute" />
                    </Grid>
                </div>
                <Modal v-model="isAttributeModalOpen" title="Defined Type Attributes" saveText="Save" @save="onSaveAttribute">
                    <NotificationBox v-show="attributeErrors.length > 0" alertType="validation">
                        Please correct the following:
                        <ul>
                            <li v-for="error of attributeErrors">
                                {{ error }}
                            </li>
                        </ul>
                    </NotificationBox>
                    <AttributeEditor v-model="definedTypeAttribute" :reservedKeyNames="reservedKeyNames" />
                </Modal>

            </div>
        </div>

        <AttributeValuesContainer :modelValue="attributeValues" :attributes="attributes" :numberOfColumns="2" />

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType, reactive, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import Grid, { EditColumn, TextColumn, DeleteColumn, ReorderColumn } from "@Obsidian/Controls/grid";
    import Modal from "@Obsidian/Controls/modal.obs";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { DefinedTypeBag } from "@Obsidian/ViewModels/Blocks/Core/DefinedTypeDetail/definedTypeBag";
    import { DefinedTypeDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/DefinedTypeDetail/definedTypeDetailOptionsBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<DefinedTypeBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<DefinedTypeDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    const attributes = ref(props.modelValue?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.attributeValues ?? {});

    const definedTypeAttributes = ref(props.modelValue?.definedTypeAttributes ?? []);
    const isAttributeModalOpen = ref(false);
    const definedTypeAttribute = ref<PublicEditableAttributeBag | null>(null);
    const reservedKeyNames = ref<string[]>([]);
    const attributeErrors = ref<string[]>([]);
    const invokeBlockAction = useInvokeBlockAction();

    // #endregion

    // #region Computed Values

    const isSystem = computed((): boolean => props.modelValue?.isSystem ?? false);
    const isStandAlone = computed((): boolean => props.modelValue?.isStandAlone ?? false);

    const isGridVisible = computed((): boolean => {
        const hasAttributes = props.modelValue?.definedTypeAttributes !== null && props.modelValue?.definedTypeAttributes !== undefined && props.modelValue.definedTypeAttributes.length > 0;
        return !props.modelValue?.isStandAlone || hasAttributes;
    });

    const attributesGridData: GridDataBag = reactive<GridDataBag>({
        rows: definedTypeAttributes.value.map(x => convertToAttributeGridRowItem(x))
    });

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.description) {
            valueBuilder.addTextValue("", props.modelValue.description);
        }

        if (props.modelValue.helpText) {
            valueBuilder.addHtmlValue("Help Text", props.modelValue.helpText);
        }

        if (props.modelValue.category?.text && !props.modelValue?.isStandAlone) {
            valueBuilder.addTextValue("Category", props.modelValue.category.text);
        }

        if(props.modelValue.reportDetailPageUrl) {
            valueBuilder.addHtmlValue("Categorized Values", `<a href='${props.modelValue.reportDetailPageUrl}'>Edit Value Categories</a>`);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions
    function convertToAttributeGridRowItem(attribute: PublicEditableAttributeBag): Record<string, unknown> {

        if (attribute.key && !reservedKeyNames.value.includes(attribute.key)) {
            reservedKeyNames.value.push(attribute.key);
        }

        return {
            key: attribute.key,
            name: attribute.name,
            guid: attribute.guid
        };
    }
    // #endregion

    // #region Event Handlers
    // #region Event Handlers
    async function onAddAttribute(): Promise<void> {
        definedTypeAttribute.value = {} as PublicEditableAttributeBag;
        isAttributeModalOpen.value = true;
        attributeErrors.value = [];
    }

    const onEditAttribute = async (key: string): Promise<void> => {
        attributeErrors.value = [];
        const selectedAttribute = definedTypeAttributes.value.find(x => x.key === key);
        // If attribute exists set it as current attribute for editing.
        if (selectedAttribute) {
            definedTypeAttribute.value = selectedAttribute;
            isAttributeModalOpen.value = true;
        }
        else {
            onAddAttribute();
        }
    };

    async function onDeleteAttribute(key: string): Promise<void> {
        // Close modal and remove deleted attribute from the current collection of attributes.
        isAttributeModalOpen.value = false;

        const deletedAttribute = definedTypeAttributes.value.find(a => a.key == key);

        if (deletedAttribute) {
            if (deletedAttribute.guid) {
                const data = {
                    guid: deletedAttribute.guid,
                };

                const result = await invokeBlockAction("DeleteAttribute", data);

                if (result.isSuccess) {
                    removeAttributeFromGrid(key);
                }
            }
            else {
                removeAttributeFromGrid(key);
            }
        }
    }

    function removeAttributeFromGrid(key: string): void {
        definedTypeAttributes.value = definedTypeAttributes.value.filter(s => s.key !== key);

        // Update the grid.
        if (attributesGridData.rows) {
            const index = attributesGridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                attributesGridData.rows?.splice(index, 1);
            }
        }
    }

    async function onSaveAttribute(): Promise<void> {
        attributeErrors.value = [];
        const isExistingKey = reservedKeyNames.value.includes(definedTypeAttribute.value?.key ?? "") && !definedTypeAttribute.value?.guid;

        if (isExistingKey) {
            attributeErrors.value.push("There is already an existing property with the key value you entered or the key has illegal characters. Please select a different key value and use only letters, numbers and underscores.");
        }
        else {

            if (definedTypeAttribute.value) {
                const data = {
                    idKey: props.modelValue?.idKey,
                    attributeBag: definedTypeAttribute.value
                };

                const result = await invokeBlockAction<PublicEditableAttributeBag>("SaveAttribute", data);

                if (result.isSuccess && result.data) {
                    definedTypeAttribute.value = result.data;
                    const index = definedTypeAttributes.value.findIndex(a => a.key === definedTypeAttribute.value?.key);
                    if (index !== -1) {
                        // Get the updated attribute and rowItem.
                        let editedAttribute = definedTypeAttributes.value.find(a => a.key == definedTypeAttribute.value?.key);
                        let rowItem = attributesGridData.rows?.find(x => x.key == definedTypeAttribute.value?.key);

                        if (editedAttribute) {
                            // Replace old attribute with updated attribute.
                            editedAttribute = definedTypeAttribute.value;
                            definedTypeAttributes.value.splice(index, 1, editedAttribute);
                        }

                        if (rowItem && attributesGridData.rows && editedAttribute) {
                            // Update GridRowItem so changes are reflected in the UI.
                            const rowIndex = attributesGridData.rows.findIndex(r => r.key === definedTypeAttribute.value?.key);
                            rowItem = convertToAttributeGridRowItem(editedAttribute);
                            attributesGridData.rows?.splice(rowIndex, 1, rowItem);
                        }
                    }
                    else {
                        definedTypeAttributes.value.push(definedTypeAttribute.value);

                        // Add new RowItem to the grid to represent the newly added attribute.
                        const newRowItem = convertToAttributeGridRowItem(definedTypeAttribute.value);
                        attributesGridData.rows?.push(newRowItem);
                    }
                }

                isAttributeModalOpen.value = false;
            }
        }
    }

    /**
    * Called when a row has been dragged from one position to a new position.
    *
    * @param item The item that was moved to a new position.
    * @param beforeItem The item that the first item was dropped before.
    *
    * @returns `true` if the operation succeeded; otherwise `false`.
    */
    async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
        const data = {
            idKey: props.modelValue?.idKey,
            guid: item["guid"],
            beforeGuid: beforeItem?.["guid"] ?? null
        };

        const result = await invokeBlockAction<string>("ReorderAttributes", data);

        return result.isSuccess;
    }
    // #endregion
</script>
