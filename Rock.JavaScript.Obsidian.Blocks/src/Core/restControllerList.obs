<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Rest Controller"
          :entityTypeGuid="EntityType.RestController"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Controller Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="25%" />

        <TextColumn name="className"
                    title="Controller Type"
                    field="className"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="50%" />

        <NumberColumn name="actions"
                      title="Actions"
                      field="actions"
                      :filter="numberValueFilter"
                      visiblePriority="xs"
                      width="1%" />

        <Column name="actionsWithPublicCachingHeaders"
                title=""
                field="actionsWithPublicCachingHeaders"
                width="1%">
            <template #format="{ row }">
                <i v-if="row.actionsWithPublicCachingHeaders > 0"
                   class="text-success fa fa-tachometer-alt"
                   :title="row.actionsWithPublicCachingHeaders"
                   data-toggle="tooltip"></i>
            </template>
        </Column>

        <SecurityColumn :itemTitle="'name'" />
    </Grid>


    <div class="actions">
        <button type="button" class="btn btn-link" @click="refreshControllerList">Requery REST Data</button>
    </div>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, textValueFilter, numberValueFilter, SecurityColumn, NumberColumn, Column } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { RestControllerListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/RestControllerList/restControllerListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./RestControllerList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<RestControllerListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the individual clicks the "Requery REST Data" button.
     */

    async function refreshControllerList(): Promise<void> {
        const result = await invokeBlockAction("RefreshControllerList");

        if (result.isSuccess) {
            gridDataSource.value = loadGridData();
        }
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */

    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }


    // #endregion

    gridDataSource.value = loadGridData();
</script>
