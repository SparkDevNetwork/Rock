<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         :rules="tagnameValidators" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <CategoryPicker v-model="category"
                                label="Category"
                                :multiple="false"
                                :entityTypeGuid="tagEntityTypeGuid" />

                <RadioButtonList v-model="scope"
                                 label="Scope"
                                 horizontal
                                 :items="scopeItems" />

                <PersonPicker v-if="isPersonalScope"
                              v-model="owner"
                              label="Owner" />

                <TextBox v-model="iconCssClass"
                         label="Icon Css Class" />

            </div>

            <div class="col-md-6">

                <EntityTypePicker v-model="entityType"
                                  :multiple="false"
                                  :showBlankItem="true"
                                  :enhanceForLongLists="true"
                                  label="Entity Type" />

                <TextBox v-model="entityTypeQualifierColumn"
                         label="Entity Type Qualifier Column" />

                <TextBox v-model="entityTypeQualifierValue"
                         label="Entity Type Qualifier Value" />

                <ColorPicker v-model="backgroundColor"
                             label="Background Color"
                             help="The background color to use when displaying tag." />
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch, computed } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CategoryPicker from "@Obsidian/Controls/categoryPicker.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import ColorPicker from "@Obsidian/Controls/colorPicker.obs";
    import EntityTypePicker from "@Obsidian/Controls/entityTypePicker.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { TagBag } from "@Obsidian/ViewModels/Blocks/Core/TagDetail/tagBag";
    import { TagDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/TagDetail/tagDetailOptionsBag";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ValidationResult, ValidationRule } from "@Obsidian/Types/validationRules";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<TagBag>>,
            required: true
        },

        options: {
            type: Object as PropType<TagDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<TagBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue?.bag?.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const category = propertyRef(props.modelValue?.bag?.category ?? undefined, "CategoryId");
    const scope = ref(props.modelValue?.bag?.ownerPersonAlias ? "personal" : "organizational");
    const owner = propertyRef(props.modelValue?.bag?.ownerPersonAlias ?? undefined, "OwnerPersonAliasId");
    const iconCssClass = propertyRef(props.modelValue?.bag?.iconCssClass ?? "", "IconCssClass");
    const entityType = propertyRef(props.modelValue?.bag?.entityType ?? null, "EntityTypeId");
    const entityTypeQualifierColumn = propertyRef(props.modelValue?.bag?.entityTypeQualifierColumn ?? "", "EntityTypeQualifierColumn");
    const entityTypeQualifierValue = propertyRef(props.modelValue?.bag?.entityTypeQualifierValue ?? "", "EntityTypeQualifierValue");
    const backgroundColor = propertyRef(props.modelValue?.bag?.backgroundColor ?? "", "BackgroundColor");
    const personal = "personal";
    const organizational = "organizational";
    const scopeItems: ListItemBag[] = [
        {
            value: organizational,
            text: "Organizational"
        },
        {
            value: personal,
            text: "Personal"
        }
    ];
    const tagEntityTypeGuid = EntityType.Tag;

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name, category, iconCssClass, entityType, entityTypeQualifierColumn, entityTypeQualifierValue, backgroundColor, owner];

    // #endregion

    // #region Computed Values

    const isPersonalScope = computed((): boolean => {
        const isPersonal = scope.value === personal;
        return isPersonal;
    });

    const tagNameBlackListRegex = computed((() => props.options.tagNameBlackListRegex ? new RegExp(props.options.tagNameBlackListRegex) : null));

    // #endregion

    // #region Functions

    const tagnameValidators: ValidationRule[] = [
        "required",
        (value: unknown, _params: unknown[] | undefined): ValidationResult => {
            if (typeof value !== "string" || !value?.trim()) {
                return "Name is required.";
            }

            if (tagNameBlackListRegex.value && !tagNameBlackListRegex.value.test(value)) {
                return "Invalid characters have been entered for the tag name. Angle brackets, percent, and ampersand are not allowed.";
            }

            return true;
        }
    ];

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue?.bag?.isActive ?? false);
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(category, props.modelValue?.bag?.category ?? undefined);
        updateRefValue(owner, props.modelValue?.bag?.ownerPersonAlias ?? undefined);
        updateRefValue(iconCssClass, props.modelValue?.bag?.iconCssClass ?? "");
        updateRefValue(entityType, props.modelValue?.bag?.entityType ?? {});
        updateRefValue(entityTypeQualifierColumn, props.modelValue?.bag?.entityTypeQualifierColumn ?? "");
        updateRefValue(entityTypeQualifierValue, props.modelValue?.bag?.entityTypeQualifierValue ?? "");
        updateRefValue(backgroundColor, props.modelValue?.bag?.backgroundColor ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, scope, ...propRefs], () => {
        const newValue: ValidPropertiesBox<TagBag> = {
            bag: { ...props.modelValue.bag } as TagBag
        };
        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value),
        setPropertiesBoxValue(newValue, "description", description.value),
        setPropertiesBoxValue(newValue, "isActive", isActive.value),
        setPropertiesBoxValue(newValue, "name", name.value),
        setPropertiesBoxValue(newValue, "category", category.value),
        setPropertiesBoxValue(newValue, "ownerPersonAlias", scope.value === organizational ? null : owner.value),
        setPropertiesBoxValue(newValue, "iconCssClass", iconCssClass.value),
        setPropertiesBoxValue(newValue, "entityType", entityType.value),
        setPropertiesBoxValue(newValue, "entityTypeQualifierColumn", entityTypeQualifierColumn.value),
        setPropertiesBoxValue(newValue, "entityTypeQualifierValue", entityTypeQualifierValue.value),
        setPropertiesBoxValue(newValue, "backgroundColor", backgroundColor.value),

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
