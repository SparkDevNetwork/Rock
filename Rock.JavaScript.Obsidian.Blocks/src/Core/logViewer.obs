<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="error" alertType="danger">{{ error }}</NotificationBox>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="guid"
          exportTitle="RockLogs"
          liveUpdates
          itemTerm="Log"
          title="Logs"
          :showMergeTemplate="false"
          :showLaunchWorkflow="false"
          :isCountMessageVisible="false"
          :customActions="customActions"
          :isSearchVisible="true">

        <DateTimeColumn name="dateTime"
                        title="Date"
                        field="datetime"
                        visiblePriority="xs"
                        width="17%">
            <template #format="{ row }">
                <span v-if="row.datetime">{{ RockDateTime.parseISO(row.datetime)?.toASPString("d") }} {{ RockDateTime.parseISO(row.datetime)?.toASPString("HH:mm:ss.fff tt") }}</span>
                <span v-else>no date</span>
            </template>
        </DateTimeColumn>

        <TextColumn name="level"
                    title="Level"
                    field="level"
                    visiblePriority="md"
                    width="7%" />

        <TextColumn name="category"
                    title="Category"
                    field="category"
                    visiblePriority="md"
                    width="20%"
                    itemClass="category-wrap" />

        <TextColumn name="message"
                    title="Message"
                    field="message"
                    visiblePriority="xs"
                    width="60%" />

        <ButtonColumn name="exception"
                      field="exception"
                      iconClass="ti ti-bug"
                      visiblePriority="md"
                      :visible="(row) => !!row.exception"
                      @click="onExceptionClick" />
    </Grid>

    <Modal v-model="isExceptionModalVisible"
           title="Exception"
           cancelText="Close">
        <pre>{{ exceptionText }}</pre>
    </Modal>
</template>

<style>
.category-wrap {
    word-break: break-all;
}
</style>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, useBlockActionUrl } from "@Obsidian/Utility/block";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import Grid, { ButtonColumn, DateTimeColumn, TextColumn } from "@Obsidian/Controls/grid";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { ref, reactive } from "vue";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { RockLogEventsBag } from "@Obsidian/ViewModels/Blocks/Core/LogViewer/RockLogEventsBag";
    import { GridAction } from "@Obsidian/Types/Controls/grid";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { newGuid } from "@Obsidian/Utility/guid";

    // #region Values

    const config = useConfigurationValues<ListBlockBox<RockLogEventsBag>>();
    const blockActionUrl = useBlockActionUrl();
    const invokeBlockAction = useInvokeBlockAction();

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const customActions = [{
        title: "Download",
        iconCssClass: "fa fa-download",
        tooltip: "Download Logs",
        handler: onDownloadClick,
    } as GridAction];

    const error = ref("");

    const isExceptionModalVisible = ref(false);
    const exceptionText = ref("");

    // #endregion

    // #region Functions

    /**
    * Called when the grid is requesting the row data be loaded.
    */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (!result.isSuccess || !result.data) {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }

        result.data.rows?.forEach(r => r["guid"] = newGuid());
        gridData = reactive(result.data);

        return gridData;
    }

    function onDownloadClick(): void {
        const url = blockActionUrl("DownloadLogs");
        window.location.href = url;
    }

    function onExceptionClick(key: string): void {
        const row = gridData?.rows?.find(r => r.guid === key);

        if (!row) {
            return;
        }

        exceptionText.value = (row.exception as string) ?? "";
        isExceptionModalVisible.value = true;
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>