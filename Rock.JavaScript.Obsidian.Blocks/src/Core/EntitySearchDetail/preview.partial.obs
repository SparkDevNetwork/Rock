<template>
    <Modal v-model="isModalVisible" title="Preview Search Results" cancelText="Close">
        <NotificationBox v-if="errorMessage" alertType="warning">
            {{ errorMessage }}
        </NotificationBox>

        <Loading v-else :isLoading="isLoading">
            <div class="d-flex gap mb-2">
                <span class="label" :class="durationClass" title="The total number of milliseconds the query or queries took to execute.">Duration: {{ asFormattedString(duration, 2) }}ms</span>
                <span class="label" :class="queryCountClass" title="The total number of queries generated to get all the data.">Query Count: {{ asFormattedString(queryCount, 0) }}</span>
            </div>

            <div v-html="previewContent" class="preview-content"></div>
        </Loading>
    </Modal>
</template>

<style scoped>
.preview-content {
    white-space: pre-wrap;
    max-height: 400px;
    overflow-y: auto;
}
</style>

<script setup lang="ts">
    import Loading from "@Obsidian/Controls/loading.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import HighlightJs from "@Obsidian/Libs/highlightJs";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { asFormattedString } from "@Obsidian/Utility/numberUtils";
    import { EntitySearchBag } from "@Obsidian/ViewModels/Blocks/Core/EntitySearchDetail/entitySearchBag";
    import { EntitySearchDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/EntitySearchDetail/entitySearchDetailOptionsBag";
    import { PreviewResultsBag } from "@Obsidian/ViewModels/Blocks/Core/EntitySearchDetail/previewResultsBag";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { Ref, computed, ref } from "vue";

    const invokeBlockAction = useInvokeBlockAction();
    const isModalVisible = ref(false);
    const isLoading = ref(false);
    const errorMessage = ref("");
    const previewContent = ref("");
    const duration = ref(0);
    const queryCount = ref(0);
    let cancellationToken: Ref<boolean> | undefined;

    defineExpose({
        showPreview
    });

    const durationClass = computed((): string => {
        if (duration.value < 100) {
            return "label-success";
        }
        else if (duration.value < 250) {
            return "label-warning";
        }
        else {
            return "label-danger";
        }
    });

    const queryCountClass = computed((): string => {
        if (queryCount.value <= 1) {
            return "label-success";
        }
        else if (queryCount.value < 25) {
            return "label-warning";
        }
        else {
            return "label-danger";
        }
    });

    /**
     * Shows the preview modal and begins a request to get the preview results.
     *
     * @param data The data to send to the server that contains the current query values.
     */
    async function showPreview(data: DetailBlockBox<EntitySearchBag, EntitySearchDetailOptionsBag>): Promise<void> {
        isModalVisible.value = true;
        isLoading.value = true;
        errorMessage.value = "";
        previewContent.value = "";

        // Cancel any previous preview request.
        if (cancellationToken) {
            cancellationToken.value = true;
        }

        const token = ref(false);
        cancellationToken = token;

        const result = await invokeBlockAction<PreviewResultsBag>("Preview", {
            box: data
        });

        // Check if we have been cancelled.
        if (token.value) {
            return;
        }

        isLoading.value = false;

        if (result.isSuccess && result.data?.data) {
            const json = JSON.stringify(JSON.parse(result.data.data), undefined, 2);

            duration.value = result.data.duration;
            queryCount.value = result.data.queryCount;

            previewContent.value = HighlightJs.highlight(json, {
                language: "json"
            })?.value;

            return;
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to preview search results.";
    }
</script>
