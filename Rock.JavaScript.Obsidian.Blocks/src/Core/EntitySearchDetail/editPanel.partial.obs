<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { EntitySearchBag } from "@Obsidian/ViewModels/Blocks/Core/EntitySearchDetail/entitySearchBag";
    import { EntitySearchDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/EntitySearchDetail/entitySearchDetailOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<EntitySearchBag>,
            required: true
        },

        options: {
            type: Object as PropType<EntitySearchDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: EntitySearchBag): void
    }>();

    // #region Values

    const description = propertyRef(props.modelValue.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.isActive ?? false, "IsActive");
    const name = propertyRef(props.modelValue.name ?? "", "Name");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, isActive, name];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(description, props.modelValue.description ?? "");
        updateRefValue(isActive, props.modelValue.isActive ?? false);
        updateRefValue(name, props.modelValue.name ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([...propRefs], () => {
        const newValue: EntitySearchBag = {
            ...props.modelValue,
            description: description.value,
            isActive: isActive.value,
            name: name.value
        };

        emit("update:modelValue", newValue);
    });
</script>
