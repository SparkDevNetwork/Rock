<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />

                <TextBox v-model="description"
                         label="Description"
                         textMode="multiline" />

                <CategoryPicker label="Parent Category"
                                v-model="parentCategory"
                                :multiple="false"
                                :entityTypeGuid="entityTypeGuid"
                                :entityTypeQualifierColumn="entityTypeQualifierColumn"
                                :entityTypeQualifierValue="entityTypeQualifierValue"
                                :rootCategoryGuid="rootCategoryGuid" />
            </div>
            <div class="col-md-6">
                <TextBox v-model="iconCssClass"
                         label="Icon CSS Class" />

                <ColorPicker v-model="highlightColor"
                             label="Highlight Color" />
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
</fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import CategoryPicker from "@Obsidian/Controls/categoryPicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import ColorPicker from "@Obsidian/Controls/colorPicker.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { CategoryBag } from "@Obsidian/ViewModels/Blocks/Core/CategoryDetail/categoryBag";
    import { CategoryDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/CategoryDetail/categoryDetailOptionsBag";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";
    import { Guid } from "@Obsidian/Types";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<CategoryBag>>,
            required: true
        },

        options: {
            type: Object as PropType<CategoryDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<CategoryBag>): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const attributes = ref(props.modelValue?.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue?.bag?.attributeValues ?? {});
    const description = propertyRef(props.modelValue?.bag?.description ?? "", "Description");
    const name = propertyRef(props.modelValue?.bag?.name ?? "", "Name");
    const parentCategory = propertyRef(props.modelValue?.bag?.parentCategory ?? null, "ParentCategoryId");
    const iconCssClass = propertyRef(props.modelValue?.bag?.iconCssClass ?? "", "IconCssClass");
    const highlightColor = propertyRef(props.modelValue?.bag?.highlightColor ?? "", "HighlightColor");
    const entityTypeGuid = ref<Guid | undefined>(toGuidOrNull(props.modelValue?.bag?.entityType?.value) ?? undefined);
    const entityTypeQualifierColumn = ref(props.modelValue?.bag?.entityTypeQualifierColumn ?? undefined);
    const entityTypeQualifierValue = ref(props.modelValue?.bag?.entityTypeQualifierValue ?? undefined);
    const rootCategoryGuid = ref<Guid | undefined>(toGuidOrNull(props.modelValue?.bag?.rootCategoryGuid) ?? undefined);
    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [description, name, parentCategory, iconCssClass, highlightColor];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue?.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue?.bag?.attributeValues ?? {});
        updateRefValue(description, props.modelValue?.bag?.description ?? "");
        updateRefValue(name, props.modelValue?.bag?.name ?? "");
        updateRefValue(parentCategory, props.modelValue?.bag?.parentCategory ?? null);
        updateRefValue(iconCssClass, props.modelValue?.bag?.iconCssClass ?? "");
        updateRefValue(highlightColor, props.modelValue?.bag?.highlightColor ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, ...propRefs], () => {
        const newValue: ValidPropertiesBox<CategoryBag> = {
            bag: { ...props.modelValue.bag } as CategoryBag
        };
        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "parentCategory", parentCategory.value);
        setPropertiesBoxValue(newValue, "iconCssClass", iconCssClass.value);
        setPropertiesBoxValue(newValue, "highlightColor", highlightColor.value);

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
