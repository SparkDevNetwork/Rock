<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="canView"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Signature Document"
          :entityTypeGuid="EntityType.SignatureDocument"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
            title="Name"
            field="name"
            :filter="textValueFilter"
            visiblePriority="xs"
            width="30%" />

        <TextColumn name="documentType"
            v-if="showDocumentType"
            title="Document Type"
            field="documentType"
            :filter="textValueFilter"
            visiblePriority="md" />
            
        <DateTimeColumn name="lastInviteDate"
            title="Last Invite Date"
            field="lastInviteDate"
            :filter="dateValueFilter"
            visiblePriority="md" />
            
        <DateTimeColumn name="signedDateTime"
            title="Signed Date"
            field="signedDateTime"
            :filter="dateValueFilter"
            visiblePriority="xs" />
        
        <PersonColumn name="appliesToPersonAlias"
            title="Applies To"
            field="appliesToPersonAlias"
            :hideAvatar="true"
            :showAsLink="true"
            visiblePriority="xs" >
        </PersonColumn>

        <PersonColumn name="assignedToPersonAlias"
            title="Assigned To"
            field="assignedToPersonAlias"
            :hideAvatar="true"
            :showAsLink="true"
            visiblePriority="md" >
        </PersonColumn>

        <PersonColumn name="signedByPersonAlias"
            title="Signed By"
            field="signedByPersonAlias"
            :hideAvatar="true"
            :showAsLink="true"
            visiblePriority="xs" >
        </PersonColumn>

        <TextColumn name="status"
            title="Status"
            field="status"
            :filter="textValueFilter"
            visiblePriority="xs"
            width="7%" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />
        
        <Column name="fileText"
            title="Document"
            field="fileText"
            itemClass="grid-columncommand"
            visiblePriority="md"
            width="52px" >
            <template #format="{ row }">
                <a class="js-signature-document-link btn btn-default" :href="'/GetFile.ashx?guid=' + row.fileGuid">
                    <div v-html="row.fileText" />
                </a>
            </template>
        </Column>

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, Column, DateTimeColumn, dateValueFilter, PersonColumn, TextColumn, textValueFilter, DeleteColumn, SecurityColumn, SelectColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { SignatureDocumentListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/SignatureDocumentList/signatureDocumentListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./SignatureDocumentList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<SignatureDocumentListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const showDocumentType = ref<boolean>(config.options?.showDocumentType ?? true);
    const canView = ref<boolean>(config.options?.canView ?? false);

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete signature document.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
