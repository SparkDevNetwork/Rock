<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>

            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>
        </div>

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />

        <div class="row">
            <div class="col-md-6">
                <DefinedValuePicker v-model="campusStatusValue"
                                    label="Status"
                                    :definedTypeGuid="DefinedType.CampusStatus" />

                <DatePicker v-model="openedDate"
                            label="Opened Date" />

                <TextBox v-model="shortCode"
                         label="Code" />

                <DropDownList v-if="isTimeZoneVisible"
                              v-model="timeZoneId"
                              label="Time Zone"
                              help="The time zone you want certain time calculations of the Campus to operate in. Leave this blank to use the default Rock TimeZone."
                              :items="timeZoneOptions" />

                <PersonPicker v-model="leaderPersonAlias"
                              label="Campus Leader" />

                <KeyValueList v-model="serviceTimes"
                              label="Service Times"
                              keyPlaceholder="Day"
                              valuePlaceholder="Time"
                              help="A list of days and times that this campus has services." />
            </div>

            <div class="col-md-6">
                <DefinedValuePicker v-model="campusTypeValue"
                                    label="Type"
                                    :definedTypeGuid="DefinedType.CampusType" />

                <DatePicker v-model="closedDate"
                            label="Closed Date" />

                <UrlLinkBox v-model="url"
                            label="URL" />

                <PhoneNumberBox v-model="phoneNumber"
                                v-model:countryCode="phoneNumberCountryCode"
                                label="Phone Number" />

                <LocationPicker v-model="location"
                                label="Location"
                                help="Select a Campus location."
                                rules="required" />
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <RockLabel>Campus Schedules</RockLabel>
                <Grid :data="scheduleGridData"
                      light
                      liveUpdates
                      itemTerm="Schedule"
                      keyField="guid"
                      :onAddItem="onAddScheduleClick">
                    <TextColumn name="Schedule" title="Schedule" field="schedule" />
                    <TextColumn name="Type" title="Type" field="type" />
                    <EditColumn :onClick="onEditScheduleClick" />
                    <DeleteColumn :onClick="onDeleteScheduleClick"  />
                </Grid>
            </div>

            <div class="col-md-6">
                <RockLabel>Topics</RockLabel>
                <Grid :data="topicGridData"
                      light
                      liveUpdates
                      itemTerm="Topic"
                      keyField="guid"
                      :onAddItem="onAddTopicClick">
                    <TextColumn name="Type" title="Type" field="type" />
                    <TextColumn name="Email" title="Email" field="email" />
                    <BooleanColumn name="Public" title="Public" field="public" />
                    <EditColumn :onClick="onEditTopicClick" />
                    <DeleteColumn :onClick="onDeleteTopicClick"  />
                </Grid>
            </div>
        </div>

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />
    </fieldset>

    <!-- Campus Schedule -->
    <Modal v-model="isScheduleModalVisible"
           title="Campus Schedule"
           saveText="OK"
           @save="onSaveSchedule">
        <SchedulePicker label="Schedule" v-model="schedule" :multiple="false" rules="required" />

        <DefinedValuePicker v-model="campusScheduleType"
                        label="Schedule Type"
                        :definedTypeGuid="DefinedType.ScheduleType"
                        rules="required" />
    </Modal>

    <!-- Campus Topics -->
    <Modal v-model="isTopicsModalVisible"
           title="Campus Topics"
           saveText="OK"
           @save="onSaveTopic">
        <DefinedValuePicker v-model="campusTopicType"
                        label="Topic Type"
                        :definedTypeGuid="DefinedType.TopicType"
                        help="A campus can only have one instance of a topic entry."
                        rules="required" />

        <EmailBox v-model="campusTopicEmail"
                        label="Email"
                        rules="required" />

        <CheckBox v-model="isCampusTopicPublic"
                        label="Public" />
    </Modal>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, shallowRef, watch } from "vue";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import KeyValueList from "@Obsidian/Controls/keyValueList.obs";
    import { KeyValueItem } from "@Obsidian/Types/Controls/keyValueItem";
    import { Guid } from "@Obsidian/Types";
    import LocationPicker from "@Obsidian/Controls/locationItemPicker.obs";
    import PersonPicker from "@Obsidian/Controls/personPicker.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import UrlLinkBox from "@Obsidian/Controls/urlLinkBox.obs";
    import { setPropertiesBoxValue, watchPropertyChanges } from "@Obsidian/Utility/block";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { CampusBag } from "@Obsidian/ViewModels/Blocks/Core/CampusDetail/campusBag";
    import { CampusDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/CampusDetail/campusDetailOptionsBag";
    import { CampusScheduleBag } from "@Obsidian/ViewModels/Blocks/Core/CampusDetail/campusScheduleBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import DatePicker from "@Obsidian/Controls/datePicker.obs";
    import SchedulePicker from "@Obsidian/Controls/schedulePicker.obs";
    import { areEqual, newGuid } from "@Obsidian/Utility/guid";
    import { DefinedValue } from "@Obsidian/SystemGuids/definedValue";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import  Grid,{ DeleteColumn, EditColumn, TextColumn, BooleanColumn } from "@Obsidian/Controls/grid";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<CampusBag>>,
            required: true
        },

        options: {
            type: Object as PropType<CampusDetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<CampusBag>): void;
        (e: "propertyChanged", value: string): void;
    }>();

    // #region Values

    const attributes = ref(props.modelValue.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue.bag?.attributeValues ?? {});
    const campusStatusValue = propertyRef(props.modelValue.bag?.campusStatusValue ?? null, "CampusStatusValueId");
    const campusTypeValue = propertyRef(props.modelValue.bag?.campusTypeValue ?? null, "CampusTypeValueId");
    const description = propertyRef(props.modelValue.bag?.description ?? "", "Description");
    const isActive = propertyRef(props.modelValue.bag?.isActive ?? false, "IsActive");
    const leaderPersonAlias = propertyRef(props.modelValue.bag?.leaderPersonAlias ?? undefined, "LeaderPersonAliasId");
    const location = propertyRef(props.modelValue.bag?.location ?? null, "LocationId");
    const name = propertyRef(props.modelValue.bag?.name ?? "", "Name");
    const phoneNumber = propertyRef(props.modelValue.bag?.phoneNumber ?? "", "PhoneNumber");
    const serviceTimes = propertyRef((props.modelValue.bag?.serviceTimes ?? []).map((s): KeyValueItem => ({ key: s.value, value: s.text })), "ServiceTimes");
    const shortCode = propertyRef(props.modelValue.bag?.shortCode ?? "", "ShortCode");
    const timeZoneId = propertyRef(props.modelValue.bag?.timeZoneId ?? "", "TimeZoneId");
    const url = propertyRef(props.modelValue.bag?.url ?? "", "Url");
    const openedDate = propertyRef(props.modelValue.bag?.openedDate ?? "", "OpenedDate");
    const closedDate = propertyRef(props.modelValue.bag?.closedDate ?? "", "ClosedDate");
    const phoneNumberCountryCode = propertyRef(props.modelValue.bag?.phoneNumberCountryCode ?? "", "PhoneNumber");
    const campusSchedules = ref(props.modelValue.bag?.campusSchedules ?? []);
    const campusTopics = ref(props.modelValue.bag?.campusTopics ?? []);

    // The `editingSchedule` is a global placeholder for the schedule that is being edited in the Modal in the remote device.
    // Incase a new schedule is being added, the `editingSchedule` needs to be set to null.
    let editingSchedule: CampusScheduleBag | null = null;
    const defaultScheduleType: ListItemBag = {
        text: "Weekend Service",
        value: DefinedValue.ScheduleTypeWeekendService
    };

    // variables for the Campus Schedule Modal
    const isScheduleModalVisible = ref(false);
    const schedule = shallowRef<ListItemBag | null>(null);
    const campusScheduleType = shallowRef<ListItemBag | null>(null);

    // variables for the Campus Topic Modal
    const isTopicsModalVisible = ref(false);
    const campusTopicGuid = ref<Guid | null>(null);
    const campusTopicType = shallowRef<ListItemBag | null>(null);
    const campusTopicEmail = ref<string>("");
    const isCampusTopicPublic = ref<boolean>(false);

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [campusStatusValue,
        campusTypeValue,
        description,
        isActive,
        leaderPersonAlias,
        location,
        name,
        phoneNumber,
        serviceTimes,
        shortCode,
        timeZoneId,
        url,
        openedDate,
        closedDate,
        phoneNumberCountryCode];

    // #endregion

    // #region Computed Values

    const isTimeZoneVisible = computed((): boolean => {
        return props.options.isMultiTimeZoneSupported === true;
    });

    const timeZoneOptions = computed((): ListItemBag[] => {
        return props.options.timeZoneOptions ?? [];
    });

    const scheduleGridData = computed((): GridDataBag => {
        return {
            rows: campusSchedules.value?.map(c => ({ schedule: c.schedule?.text, type: c.scheduleTypeValue?.text, guid: c.guid })) ?? []
        };
    });

    const topicGridData = computed((): GridDataBag => {
        return {
            rows: campusTopics.value?.map(c => ({ type: c.type?.text, email: c.email, public: c.isPublic, guid: c.guid })) ?? []
        };
    });


    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Called when the "+" add button on the Campus Schedules grid is clicked.
     */
     const onAddScheduleClick = (): void => {
        editingSchedule = null;
        // Default the Schedule Type to the Weekend Service : Copying over the logic from the old Webform Block.
        campusScheduleType.value = defaultScheduleType;
        isScheduleModalVisible.value = true;
    };

    /**
     * Called when the "+" add button on the Campus Topics grid is clicked.
     */
     function onAddTopicClick(): void {
        campusTopicGuid.value = null;
        campusTopicType.value = null;
        campusTopicEmail.value = "";
        isCampusTopicPublic.value = false;
        isTopicsModalVisible.value = true;
    }

    /**
     * Called when the "x" button on the Campus Schedules grid is clicked.
     *
     * @param key The schedule key to be deleted.
     */
     const onDeleteScheduleClick = (key: string): void => {
        campusSchedules.value = campusSchedules.value.filter(s => s.guid !== key) ?? [];
    };

    /**
     * Called when the "x" button on the Campus Topics grid is clicked.
     *
     * @param key The topic key to be deleted.
     */
     const onDeleteTopicClick = (key: string): void => {
        if(campusTopics.value == null) {
            return;
        }

        const index = campusTopics.value.findIndex(s => areEqual(s.guid, key));
        if (index >= 0) {
            campusTopics.value.splice(index, 1);
        }
    };

    /**
     * Called when the pencil/edit button on the Campus Schedules grid is clicked.
     *
     * @param campusSchedule The schedule to be edited.
     */
    const onEditScheduleClick = (key: string): void => {
        editingSchedule = campusSchedules.value.find(s => areEqual(s.guid, key)) ?? null;
        schedule.value = editingSchedule?.schedule ?? null;
        campusScheduleType.value = editingSchedule?.scheduleTypeValue ?? defaultScheduleType;
        isScheduleModalVisible.value = true;
    };

    /**
     * Called when the pencil/edit button on the Campus Topic grid is clicked.
     *
     * @param campusTopic The topic to be edited.
     */
    const onEditTopicClick = (key: string): void => {
        const campusTopic = campusTopics.value.find(s => areEqual(s.guid, key)) ?? null;
        campusTopicGuid.value = campusTopic?.guid ?? null;
        campusTopicType.value = campusTopic?.type ?? null;
        campusTopicEmail.value = campusTopic?.email ?? "";
        isCampusTopicPublic.value = campusTopic?.isPublic ?? false;
        isTopicsModalVisible.value = true;
    };

     /**
     * Called when a schedule is ready to be saved.
     */
     function onSaveSchedule(): void {
        if(campusSchedules.value == null) {
            return;
        }
        // The `editingSchedule` variable happens to be null if a new schedule is being added.
        // The "if block" contains the logic to add the new schedule if needed.
        if (editingSchedule == null) {
            editingSchedule = {
                guid: newGuid()
            };
            campusSchedules.value.push(editingSchedule);
        }
        editingSchedule.schedule = {
            value: schedule?.value?.value,
            text: schedule?.value?.text
        };
        editingSchedule.scheduleTypeValue = campusScheduleType.value;

        // Close the model on save.
        isScheduleModalVisible.value = false;
    }


     /**
     * Called when a topic is ready to be saved.
     */
     function onSaveTopic(): void {
        if(campusTopics.value == null) {
            return;
        }
        // The `editingTopic` variable happens to be null if a new topic is being added.
        // The "if block" contains the logic to add the new topic if needed.

        let editingTopic = campusTopics.value.find(c => c.type?.value === campusTopicType.value?.value ?? false) || null;

        if(editingTopic === null && campusTopicGuid.value !== null) {
            editingTopic = campusTopics.value.find(c => c.guid === campusTopicGuid.value ?? false) || null;
        }

        if (editingTopic === null) {
            editingTopic = {
                guid: newGuid()
            };
            campusTopics.value.push(editingTopic);
        }

        editingTopic.type = { ...campusTopicType.value };
        editingTopic.email = campusTopicEmail.value;
        editingTopic.isPublic = isCampusTopicPublic.value;

        // Close the model on save.
        isTopicsModalVisible.value = false;
    }

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(attributes, props.modelValue.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.bag?.attributeValues ?? {});
        updateRefValue(campusStatusValue, props.modelValue.bag?.campusStatusValue ?? null);
        updateRefValue(campusTypeValue, props.modelValue.bag?.campusTypeValue ?? null);
        updateRefValue(description, props.modelValue.bag?.description ?? "");
        updateRefValue(isActive, props.modelValue.bag?.isActive ?? false);
        updateRefValue(leaderPersonAlias, props.modelValue.bag?.leaderPersonAlias ?? undefined);
        updateRefValue(location, props.modelValue.bag?.location ?? null);
        updateRefValue(name, props.modelValue.bag?.name ?? "");
        updateRefValue(phoneNumberCountryCode, props.modelValue.bag?.phoneNumberCountryCode ?? "");
        updateRefValue(phoneNumber, props.modelValue.bag?.phoneNumber ?? "");
        updateRefValue(serviceTimes, (props.modelValue.bag?.serviceTimes ?? []).map((s): KeyValueItem => ({ key: s.value, value: s.text })));
        updateRefValue(shortCode, props.modelValue.bag?.shortCode ?? "");
        updateRefValue(timeZoneId, props.modelValue.bag?.timeZoneId ?? "");
        updateRefValue(url, props.modelValue.bag?.url ?? "");
        updateRefValue(openedDate, props.modelValue.bag?.openedDate ?? "");
        updateRefValue(closedDate, props.modelValue.bag?.closedDate ?? "");
        updateRefValue(campusSchedules, props.modelValue.bag?.campusSchedules ?? []);
        updateRefValue(campusTopics, props.modelValue.bag?.campusTopics ?? []);
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([attributeValues, campusSchedules, campusTopics, ...propRefs], () => {
        const newValue: ValidPropertiesBox<CampusBag> = {
            bag: { ...props.modelValue.bag } as CampusBag
        };

        setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);
        setPropertiesBoxValue(newValue, "campusStatusValue", campusStatusValue.value);
        setPropertiesBoxValue(newValue, "campusTypeValue", campusTypeValue.value);
        setPropertiesBoxValue(newValue, "description", description.value);
        setPropertiesBoxValue(newValue, "isActive", isActive.value);
        setPropertiesBoxValue(newValue, "leaderPersonAlias", leaderPersonAlias.value);
        setPropertiesBoxValue(newValue, "location", location.value);
        setPropertiesBoxValue(newValue, "name", name.value);
        setPropertiesBoxValue(newValue, "phoneNumberCountryCode", phoneNumberCountryCode.value);
        setPropertiesBoxValue(newValue, "phoneNumber", phoneNumber.value);
        setPropertiesBoxValue(newValue, "serviceTimes", serviceTimes.value.map((s): ListItemBag => ({ value: s.key ?? "", text: s.value ?? "" })));
        setPropertiesBoxValue(newValue, "shortCode", shortCode.value);
        setPropertiesBoxValue(newValue, "timeZoneId", timeZoneId.value);
        setPropertiesBoxValue(newValue, "url", url.value);
        setPropertiesBoxValue(newValue, "openedDate", openedDate.value);
        setPropertiesBoxValue(newValue, "closedDate", closedDate.value);
        setPropertiesBoxValue(newValue, "campusSchedules", campusSchedules.value);
        setPropertiesBoxValue(newValue, "campusTopics", campusTopics.value);

        emit("update:modelValue", newValue);
    }, { deep: true });

    watchPropertyChanges(propRefs, emit);
</script>
