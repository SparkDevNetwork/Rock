<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <DropDownList
                    v-model="signalType"
                    label="Signal Type"
                    rules="required"
                    :items="signalTypeOptions" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <PersonPicker v-model="ownerAlias"
                    label="Owner"
                    rules="required"
                    :disabled="!isEditable" />
            </div>
            <div class="col-md-6">
                <DatePicker v-model="expirationDate"
                    label="Expiration Date"
                    help="Once this date has been reached the signal will automatically be removed." />
            </div>
        </div>
        <TextBox v-model="note"
            label="Note"
            textMode="multiline" />
    </fieldset>
</template>

<script setup lang="ts">
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
import { PropType, ref, computed, watch } from "vue";
import DropDownList from "@Obsidian/Controls/dropDownList.obs";
import TextBox from "@Obsidian/Controls/textBox.obs";
import PersonPicker from "@Obsidian/Controls/personPicker.obs";
import DatePicker from "@Obsidian/Controls/datePicker.obs";
import { PersonSignalListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/PersonSignalList/personSignalListOptionsBag";
import { PersonSignalBag } from "@Obsidian/ViewModels/Blocks/Core/PersonSignalList/PersonSignalBag";
import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
import { setPropertiesBoxValue } from "@Obsidian/Utility/block";
import { updateRefValue } from "@Obsidian/Utility/component";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<PersonSignalBag>>,
            required: true
        },

        options: {
            type: Object as PropType<PersonSignalListOptionsBag>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<PersonSignalBag>): void;
    }>();

    // #region Values
    const signalType = ref<string>(props.modelValue.bag?.signalType?.value ?? "");
    const ownerAlias = ref<ListItemBag | undefined>(props.modelValue.bag?.owner ?? undefined);
    const expirationDate = ref(props.modelValue.bag?.expirationDate ?? "");
    const note = ref(props.modelValue.bag?.note ?? "");
    const isEditable = ref(true);

    // #endregion

    // #region Computed Values

    const signalTypeOptions = computed((): ListItemBag[] => {
        return props.options.signalTypeOptions ?? [];
    });

    // #endregion

    watch(() => props.modelValue, () => {

        updateRefValue(signalType, signalType.value);
        updateRefValue(ownerAlias, ownerAlias.value);
        updateRefValue(expirationDate, expirationDate.value);
        updateRefValue(note, note.value);
        });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([
        signalType,
        ownerAlias,
        expirationDate,
        note], () => {
        const newValue: ValidPropertiesBox<PersonSignalBag> = {
            bag: { ...props.modelValue.bag } as PersonSignalBag
        };

        setPropertiesBoxValue(newValue, "signalType", signalTypeOptions?.value?.find(s => s.value == signalType.value));
        setPropertiesBoxValue(newValue, "owner", ownerAlias.value);
        setPropertiesBoxValue(newValue, "expirationDate", expirationDate.value);
        setPropertiesBoxValue(newValue, "note", note.value);

        emit("update:modelValue", newValue);
    });

</script>
