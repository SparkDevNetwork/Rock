<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Person Signal"
          :entityTypeGuid="EntityType.PersonSignal"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name" title="Name" field="name" :filter="textValueFilter" width="16%" visiblePriority="xs" />

        <PersonColumn name="owner" title="Owner" field="owner" width="16%" visiblePriority="xs" />

        <TextColumn name="note" title="Note" field="note" :filter="textValueFilter" width="70%" visiblePriority="lg" />

        <DateColumn name="expirationDate" title="Expiration Date" field="expirationDate" :filter="dateValueFilter" visiblePriority="sm" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <Modal v-model="showEditPersonSignalModal" :title="personSignalModalTitle" @closeModal="onCloseModal">
        <RockForm v-model:submit="submitPersonSignal" @submit="savePersonSignal">
            <SignalEditor v-model="personSignalEditBag" :options="options" />
        </RockForm>

        <template #customButtons>
            <RockButton btnType="primary" @click="startSavePersonSignal">Save</RockButton>
        </template>
    </Modal>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, DeleteColumn, SecurityColumn, TextColumn, PersonColumn, DateColumn, textValueFilter, dateValueFilter } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { PersonSignalListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/PersonSignalList/personSignalListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref, computed } from "vue";
    import { useStore } from "@Obsidian/PageState";
    import Modal from "@Obsidian/Controls/modal.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import SignalEditor from "./PersonSignalList/signalEditor.partial.obs";
    import { PersonSignalBag } from "@Obsidian/ViewModels/Blocks/Core/PersonSignalList/PersonSignalBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import { CurrentPersonBag } from "@Obsidian/ViewModels/Crm/currentPersonBag";

    const config = useConfigurationValues<ListBlockBox<PersonSignalListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const store = useStore();

    // #region Values

    // /** True if the add edit signal modal should be visible. */
    const showEditPersonSignalModal = ref<boolean>(false);

    // /** The current signal in an editable format. */
    const personSignalEditBag = ref<ValidPropertiesBox<PersonSignalBag>>({
        bag: {} as PersonSignalBag
    });

    /** True if the edit signal form should attempt to submit it's data. */
    const submitPersonSignal = ref<boolean>(false);

    /** True if individual is editing a person signal */
    const isEditing = ref<boolean>(false);

    // /** The title to display in the add edit signal modal. */
    const personSignalModalTitle = computed((): string => {
        if (isEditing.value) {
            return "Edit Signal";
        }

        return "Add Signal";
    });

    const options = computed((): PersonSignalListOptionsBag => {
        return config.options ?? {};
    });

    const currentPerson = computed((): CurrentPersonBag | null => {
        return store.state.currentPerson;
    });

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Start the save operation by requesting the edit signal form to
     * validate and then trigger the submit event.
     */
     const startSavePersonSignal = (): void => {
        submitPersonSignal.value = true;
    };

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    async function onSelectItem(key: string): Promise<void> {
        const result = await invokeBlockAction<PersonSignalBag>("GetEditPersonSignal", { key });

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to edit person signal.");
        }

        personSignalEditBag.value.bag = result.data;
        isEditing.value = true;
        showEditPersonSignalModal.value = true;
    }

    const savePersonSignal = async (): Promise<void> => {
        const result = await invokeBlockAction<ValidPropertiesBox<PersonSignalBag>>("SavePersonSignal", {
            box: personSignalEditBag.value
        });

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to save person signal.");
        }

        if (result.isSuccess) {
            gridDataSource.value = loadGridData();
        }

        personSignalEditBag.value.bag = {};
        showEditPersonSignalModal.value = false;
        isEditing.value = false;
        submitPersonSignal.value = false;
    };

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete person signal.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        personSignalEditBag.value.bag = {
            owner: {
                text: currentPerson.value?.fullName,
                value: currentPerson.value?.primaryAliasGuid
            }
        };
        showEditPersonSignalModal.value = true;
    }

    /**
     * Called the edit or add modal is closed.
     */
     function onCloseModal(): void {
        personSignalEditBag.value.bag = {};
        isEditing.value = false;
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
