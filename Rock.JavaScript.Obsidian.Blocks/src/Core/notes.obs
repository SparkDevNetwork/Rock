<template>
    <NotesContainer v-if="isBlockVisible"
                    :title="config.title"
                    :titleIconCssClass="config.titleIconCssClass"
                    :notes="config.notes ?? []"
                    :noteTypes="config.noteTypes ?? []"
                    :descending="config.isDescending"
                    :showAlert="config.showAlertCheckBox"
                    :showCreateDateOverride="config.showCreateDateInput"
                    :showNoteTypeHeading="config.displayNoteTypeHeading"
                    :showPrivate="config.showPrivateCheckBox"
                    :showSecurity="config.showSecurityButton"
                    :showAdd="config.showAdd"
                    :alwaysShowAdd="config.addAlwaysVisible"
                    :showAvatar="config.usePersonIcon"
                    :lightMode="config.isLightMode"
                    :autoExpandReplies="config.expandReplies"
                    @editNote="onEditNote"
                    @watchNote="onWatchNote"
                    @saveNote="onSaveNote"
                    @deleteNote="onDeleteNote" />
</template>

<script setup lang="ts">
    import NotesContainer from "@Obsidian/Controls/Internal/notesContainer.obs";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { NotesInitializationBox } from "@Obsidian/ViewModels/Blocks/Core/Notes/notesInitializationBox";
    import { NoteEditBag } from "@Obsidian/ViewModels/Controls/noteEditBag";
    import { SaveNoteRequestBag } from "@Obsidian/ViewModels/Controls/saveNoteRequestBag";
    import { NoteBag } from "@Obsidian/ViewModels/Controls/noteBag";
    import { EditNoteRequestBag } from "@Obsidian/ViewModels/Blocks/Core/Notes/editNoteRequestBag";
    import { WatchNoteRequestBag } from "@Obsidian/ViewModels/Blocks/Core/Notes/watchNoteRequestBag";
    import { DeleteNoteRequestBag } from "@Obsidian/ViewModels/Blocks/Core/Notes/deleteNoteRequestBag";

    const config = useConfigurationValues<NotesInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    // Only show the block if we have a context entity.
    const isBlockVisible = !!config.entityIdKey;

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when a note needs start editing.
     */
    async function onEditNote(idKey: string): Promise<NoteEditBag> {
        const request: EditNoteRequestBag = {
            idKey
        };

        const result = await invokeBlockAction<NoteEditBag>("EditNote", { request });

        if (result.isSuccess && result.data) {
            return result.data;
        }

        throw new Error(result.errorMessage ?? "Unable to edit note.");
    }

    /**
     * Event handler for when a note needs to be watched or unwatched.
     */
    async function onWatchNote(idKey: string, isWatching: boolean): Promise<void> {
        const request: WatchNoteRequestBag = {
            idKey,
            isWatching
        };

        const result = await invokeBlockAction("WatchNote", { request });

        if (!result.isSuccess) {
            throw new Error(result.errorMessage ?? "Unable to update note.");
        }
    }

    /**
     * Event handler for when a note needs to be saved.
     */
    async function onSaveNote(note: SaveNoteRequestBag): Promise<NoteBag> {
        const result = await invokeBlockAction<NoteBag>("SaveNote", { request: note });

        if (result.isSuccess && result.data) {
            return result.data;
        }

        throw new Error(result.errorMessage ?? "Unable to save the note.");
    }

    /**
     * Event handler for when a note needs to be deleted.
     */
    async function onDeleteNote(idKey: string): Promise<void> {
        const request: DeleteNoteRequestBag = {
            idKey: idKey
        };

        const result = await invokeBlockAction("DeleteNote", { request });

        if (!result.isSuccess) {
            throw new Error(result.errorMessage ?? "Unable to delete note.");
        }
    }

    // #endregion

    onConfigurationValuesChanged(useReloadBlock());
</script>
