<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>

        <ValueDetailList :modelValue="topValues" />

        <div class="row">
            <div class="col-md-6">
                <ValueDetailList :modelValue="leftSideValues" />
            </div>

            <div class="col-md-6">
                <ValueDetailList :modelValue="rightSideValues" />
            </div>
        </div>

    </fieldset>
</template>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import ValueDetailList from "@Obsidian/Controls/valueDetailList.obs";
    import { ValueDetailListItemBuilder } from "@Obsidian/Core/Controls/valueDetailListItemBuilder";
    import { ValueDetailListItem } from "@Obsidian/Types/Controls/valueDetailListItem";
    import { AIAgentBag } from "@Obsidian/ViewModels/Blocks/Core/AIAgentDetail/aiAgentBag";
    import { AIAgentDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/AIAgentDetail/aiAgentDetailOptionsBag";
    import { escapeHtml } from "@Obsidian/Utility/stringUtils";
    import { ModelServiceRoleDescription } from "@Obsidian/Enums/Core/AI/Agent/modelServiceRole";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<AIAgentBag | null>,
            required: false
        },

        options: {
            type: Object as PropType<AIAgentDetailOptionsBag>,
            required: true
        }
    });

    // #region Values

    // #endregion

    // #region Computed Values

    /** The values to display full-width at the top of the block. */
    const topValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.description) {
            valueBuilder.addTextValue("Description", props.modelValue.description);
        }

        if (props.modelValue.persona) {
            valueBuilder.addTextValue("Persona", props.modelValue.persona);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the left side of the block. */
    const leftSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        if (props.modelValue.skills?.length) {
            const skillLabels = props.modelValue.skills.map(s => `<span class="label label-info">${escapeHtml(s.text ?? "")}</span>`).join("");
            valueBuilder.addHtmlValue("Skills", `<div class="label-group">${skillLabels}</div>`);
        }

        return valueBuilder.build();
    });

    /** The values to display at half-width on the right side of the block. */
    const rightSideValues = computed((): ValueDetailListItem[] => {
        const valueBuilder = new ValueDetailListItemBuilder();

        if (!props.modelValue) {
            return valueBuilder.build();
        }

        valueBuilder.addTextValue("Role", ModelServiceRoleDescription[props.modelValue.role]);

        return valueBuilder.build();
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion
</script>
