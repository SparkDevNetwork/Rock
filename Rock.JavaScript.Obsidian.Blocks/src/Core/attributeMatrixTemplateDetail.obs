<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning" v-html="blockError"></NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger" v-html="errorMessage"></NotificationBox>

    <RockForm v-model:submit="submitForm" @submit="onSave" :formResetKey="resetKey">
        <Panel :title="panelTitle" :headerSecondaryActions="secondaryActions">

            <EditPanel v-model="attributeMatrixTemplateEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" :isEditable="isEditable" />

            <Modal v-model="showAuditDetailsModal" title="Audit Details">
                <AuditDetail :entityTypeGuid="entityTypeGuid" :entityKey="entityKey" />
            </Modal>

            <template #footerActions>
                <RockButton v-if="isEditable"
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            :isLoading="isSaving"
                            @click="onStartSubmitForm">
                    Save
                </RockButton>
                <RockButton v-if="isEditable"
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Link"
                            @click="onCancel">
                    Cancel
                </RockButton>
                <RockButton v-if="!isEditable"
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Link"
                            @click="onCancel">
                    Close
                </RockButton>
            </template>

        </Panel>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import AuditDetail from "@Obsidian/Controls/auditDetail.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import EditPanel from "./AttributeMatrixTemplateDetail/editPanel.partial.obs";
    import { useConfigurationValues, useEntityDetailBlock, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { NavigationUrlKey } from "./AttributeMatrixTemplateDetail/types.partial";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { AttributeMatrixTemplateBag } from "@Obsidian/ViewModels/Blocks/Core/AttributeMatrixTemplateDetail/attributeMatrixTemplateBag";
    import { AttributeMatrixTemplateDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/AttributeMatrixTemplateDetail/attributeMatrixTemplateDetailOptionsBag";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const config = useConfigurationValues<DetailBlockBox<AttributeMatrixTemplateBag, AttributeMatrixTemplateDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");
    const submitForm = ref(false);
    const resetKey = ref("");
    const showAuditDetailsModal = ref(false);
    const isSaving = ref(false);
    // The properties that are being edited in the UI. This is used to
    // inform the server which incoming values have valid data in them.
    const validProperties = [
        "attributeValues",
        "description",
        "formattedLava",
        "isActive",
        "maximumRows",
        "minimumRows",
        "name",
        "templateAttributes"
    ];

    const attributeMatrixTemplateEditBag = ref<ValidPropertiesBox<AttributeMatrixTemplateBag>>({
        bag: config.entity as AttributeMatrixTemplateBag,
        validProperties: config.entity ? Object.keys(config.entity) : validProperties
    });

    const entityTypeGuid = EntityType.AttributeMatrixTemplate;

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: attributeMatrixTemplateEditBag
    });

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelTitle = computed((): string => {
        if (config.isEditable !== true) {
            return "View Attribute Matrix Template";
        }
        return attributeMatrixTemplateEditBag.value?.bag?.idKey ? "Edit Attribute Matrix Template" : "Add Attribute Matrix Template";
    });
    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return attributeMatrixTemplateEditBag.value?.bag?.idKey ?? "";
    });

    /**
    * Additional labels to display in the block panel.
    */
    const secondaryActions = computed((): PanelAction[] | undefined => {
        const actions: PanelAction[] = [];

        if (attributeMatrixTemplateEditBag?.value?.bag?.idKey) {
            actions.push({
                type: "default",
                title: "Audit Details",
                handler: onAuditClick
            });
        }

        return actions;
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true;
    });

    const options = computed((): AttributeMatrixTemplateDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Event Handlers

    const onAuditClick = (): void => {
        showAuditDetailsModal.value = true;
    };

    /**
     * Event handler for the Cancel button being clicked while in Edit or Add mode.
     * Handles redirect to parent page.
     */
    function onCancel(): void {
        if (config.navigationUrls?.[NavigationUrlKey.ParentPage]) {
            window.location.href = makeUrlRedirectSafe(config.navigationUrls[NavigationUrlKey.ParentPage]);
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";

        const result = await invokeBlockAction<ValidPropertiesBox<AttributeMatrixTemplateBag> | string>("Save", {
            box: attributeMatrixTemplateEditBag.value,

        });

        if (result.isSuccess && result.data) {
            if (result.statusCode === 200 && typeof result.data === "string") {
                window.location.href = makeUrlRedirectSafe(result.data);
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save benevolence type.";
        }
    }

    /**
    * Begins the form submission process.
    */
    const onStartSubmitForm = (): void => {
        submitForm.value = true;
    };

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified attribute matrix template could not be viewed.";
    }
    else if (!config.entity.idKey) {
        attributeMatrixTemplateEditBag.value = { bag: config.entity };
    }

</script>
