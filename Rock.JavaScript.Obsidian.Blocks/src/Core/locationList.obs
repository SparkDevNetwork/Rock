<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="id"
          itemTerm="Location"
          :entityTypeGuid="EntityType.Location"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem">

        <template #gridHeaderPrepend>
            <RockForm class="p-3" @submit="onSubmitFilter">
                <div class="row">
                    <div class="col-lg-4">
                        <TextBox v-model="streetFilter" label="Street Address Starts With" />
                    </div>
                    <div class="col-lg-4">
                        <TextBox v-model="cityFilter" label="City Starts With" />
                    </div>
                    <div class="col-lg-4">
                        <CheckBox v-model="notGeocodedFilter" label="Not Geocoded" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12">
                        <RockButton type="submit" btnType="action" btnSize="xs" class="mr-3">Search</RockButton>
                    </div>
                </div>
            </RockForm>
        </template>

        <TextColumn name="street1"
                    title="Street Address"
                    field="street1"
                    visiblePriority="xs" />

        <TextColumn name="city"
                    title="City"
                    field="city"
                    visiblePriority="xs" />

        <TextColumn name="state"
                    title="State"
                    field="state"
                    visiblePriority="xs" />

        <TextColumn name="postalCode"
                    title="Postal Code"
                    field="postalCode"
                    visiblePriority="xs" />

        <TextColumn name="country"
                    title="Country"
                    field="country"
                    visiblePriority="xs" />

        <BooleanColumn name="isStandardized"
                       title="Is Standardized"
                       field="isStandardized"
                       visiblePriority="xs" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, BooleanColumn } from "@Obsidian/Controls/grid";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { LocationListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/LocationList/locationListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey, PreferenceKey } from "./LocationList/types.partial";
    import { reactive, ref } from "vue";
    import { asBoolean, asTrueOrFalseString } from "@Obsidian/Utility/booleanUtils";

    const config = useConfigurationValues<ListBlockBox<LocationListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const streetFilter = ref(preferences.getValue(PreferenceKey.FilterStreetAddress));
    const cityFilter = ref(preferences.getValue(PreferenceKey.FilterCity));
    const notGeocodedFilter = ref(asBoolean(preferences.getValue(PreferenceKey.FilterNotGeocoded)));

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    async function onSubmitFilter(): Promise<void> {
        preferences.setValue(PreferenceKey.FilterStreetAddress, streetFilter.value);
        preferences.setValue(PreferenceKey.FilterCity, cityFilter.value);
        preferences.setValue(PreferenceKey.FilterNotGeocoded, asTrueOrFalseString(notGeocodedFilter.value));

        await preferences.save();

        gridDataSource.value = loadGridData();
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
