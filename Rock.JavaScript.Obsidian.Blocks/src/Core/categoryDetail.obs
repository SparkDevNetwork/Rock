<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>

    <NotificationBox v-if="errorMessage" alertType="danger" v-html="errorMessage"></NotificationBox>

    <DetailBlock v-if="!blockError && isBlockVisible"
                 v-model:mode="panelMode"
                 :name="panelName"
                 :entityKey="entityKey"
                 :entityTypeGuid="entityTypeGuid"
                 entityTypeName="Category"
                 :isAuditHidden="selectedTab !== 'Details'"
                 :isBadgesVisible="false"
                 :isDeleteVisible="isDeletable"
                 :isEditVisible="isEditable && selectedTab === 'Details'"
                 :isFullScreenVisible="false"
                 :isFollowVisible="false"
                 :isSecurityHidden="selectedTab !== 'Details'"
                 @cancelEdit="onCancelEdit"
                 @delete="onDelete"
                 @edit="onEdit"
                 @save="onSave">
            <template #view>
            <TabbedContent :tabs="tabs" v-model:selectedTab="selectedTab">
                <template #tabpane="{ item }">
                    <div v-if="item === 'Details'">
                        <ViewPanel :modelValue="categoryViewBag" :options="options"  />
                    </div>
                    <div v-else-if="item === 'Child Categories'">
                        <span class="ml-4">Below are the child categories for the {{ panelName }}. From here you can add, delete or reorder the categories as needed.</span>
                        <Grid light
                            :data="gridData"
                            keyField="idKey"
                            itemTerm="Category"
                            :isTitleHidden="true"
                            :isCountMessageVisible="false"
                            :hideFilterHeaderRow="true"
                            :showMergeTemplate="false"
                            :showLaunchWorkflow="false"
                            :showExport="false"
                            @selectItem="onCategoryClick"
                            stickyHeader >
                            <ReorderColumn @orderChanged="onChildCategoryOrderChanged" />

                            <Column name="name"
                                    title="Category"
                                    field="name"
                                    :filter="textValueFilter"
                                    width="15%"
                                    visiblePriority="lg">
                            </Column>

                            <AttributeColumns :attributes="gridDefinition?.attributeFields ?? []" />

                            <DeleteColumn v-if="categoryViewBag?.isDeletable" @click="onDeleteChildCategoryClick" :rowDisabled="(row) => row.isSystem === true"  />

                            <template #gridFooterAppend>
                                <div class="add-button pull-right">
                                    <i class="fa fa-plus-circle" @click.prevent="onNewChildCategoryClick"></i>
                                </div>
                            </template>
                        </Grid>
                    </div>
                </template>
            </TabbedContent>
        </template>

        <template #edit>
            <EditPanel v-model="categoryEditBag" :options="options" @propertyChanged="baseBlock.onPropertyChanged" />
        </template>
    </DetailBlock>
</template>

<style scoped>

.add-button > i.fa-plus-circle {
    color: #BCBCBD;
    padding: 8px;
    cursor: pointer;
}

</style>
<script setup lang="ts">
    import { computed, reactive, ref, watch } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import DetailBlock from "@Obsidian/Templates/detailBlock";
    import { DetailPanelMode } from "@Obsidian/Enums/Controls/detailPanelMode";
    import EditPanel from "./CategoryDetail/editPanel.partial.obs";
    import ViewPanel from "./CategoryDetail/viewPanel.partial.obs";
    import { useConfigurationValues, useInvokeBlockAction, useEntityDetailBlock } from "@Obsidian/Utility/block";
    import { DetailBlockBox } from "@Obsidian/ViewModels/Blocks/detailBlockBox";
    import { CategoryBag } from "@Obsidian/ViewModels/Blocks/Core/CategoryDetail/categoryBag";
    import { CategoryDetailOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/CategoryDetail/categoryDetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";
    import Grid, { Column, textValueFilter, DeleteColumn, ReorderColumn, AttributeColumns } from "@Obsidian/Controls/grid";
    import TabbedContent from "@Obsidian/Controls/tabbedContent.obs";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridDefinitionBag } from "@Obsidian/ViewModels/Core/Grid/gridDefinitionBag";

    const config = useConfigurationValues<DetailBlockBox<CategoryBag, CategoryDetailOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Valuesz

    const blockError = ref("");
    const errorMessage = ref("");

    const categoryViewBag = ref(config.entity);
    const categoryEditBag = ref<ValidPropertiesBox<CategoryBag>>({
        bag: {} as CategoryBag
    });

    const entityTypeGuid = EntityType.Category;
    const isBlockVisible = ref(true);
    const panelMode = ref<DetailPanelMode>(DetailPanelMode.View);

    const baseBlock = useEntityDetailBlock({
        blockConfig: config,
        entity: categoryEditBag
    });
    const tabs = ref(["Details", "Child Categories"]);
    const selectedTab = ref("Details");
    let hasLoadedChildCategories = false;

    watch(selectedTab, () => {
        if (!hasLoadedChildCategories) {
            loadGridData();
        }
    });

    let gridData: GridDataBag | undefined;
    const gridDefinition = ref<GridDefinitionBag | undefined>();

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return categoryViewBag.value?.name ?? "";
    });

    /**
     * The identifier key value for this entity.
     */
    const entityKey = computed((): string => {
        return categoryViewBag.value?.idKey ?? "";
    });

    const isEditable = computed((): boolean => {
        return config.isEditable === true && categoryViewBag.value?.isSystem !== true;
    });

    const isDeletable = computed((): boolean => {
        return isEditable.value && categoryViewBag?.value?.isDeletable === true;
    });

    const options = computed((): CategoryDetailOptionsBag => {
        return config.options ?? {};
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the Cancel button being clicked while in Edit mode.
     * Handles redirect to parent page if creating a new entity.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onCancelEdit(): Promise<boolean | string> {
        const params = new URLSearchParams(window.location.search);
        const categoryId = params.get("CategoryId");

        if (categoryId == "0") {
            params.delete("CategoryId");
            window.location.search = params.toString();
        }

        return true;
    }

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
     function onCategoryClick(key: string): void {
        const params = new URLSearchParams(window.location.search);
        params.set("CategoryId", key);
        params.set("autoEdit", "true");
        params.set("returnUrl", window.location.href);
        params.delete("ParentCategoryId");
        window.location.search = params.toString();
    }

    /**
     * Event handler for the Delete button being clicked. Sends the
     * delete request to the server and then redirects to the target page.
     *
     * @returns false if it should stay on the page; or a string containing a redirect URL.
     */
    async function onDelete(): Promise<false | string> {
        errorMessage.value = "";

        const result = await invokeBlockAction<string>("Delete", {
            key: categoryViewBag.value?.idKey
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to delete category.";

            return false;
        }
    }

    /**
     * Event handler for the Edit button being clicked. Request the edit
     * details from the server and then enter edit mode.
     *
     * @returns true if the panel should enter edit mode; otherwise false.
     */
    async function onEdit(): Promise<boolean> {
        const result = await invokeBlockAction<ValidPropertiesBox<CategoryBag>>("Edit", {
            key: categoryViewBag.value?.idKey
        });

        if (result.isSuccess && result.data && result.data.bag) {
            categoryEditBag.value = {
                bag: result.data.bag,
                validProperties: result.data.validProperties ?? Object.keys(result.data.bag)
            };
            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<boolean | string> {
        errorMessage.value = "";
        const result = await invokeBlockAction<ValidPropertiesBox<CategoryBag> | string>("Save", {
            box: categoryEditBag.value
        });

        if (result.isSuccess && result.data) {
            const params = new URLSearchParams(window.location.search);
            const returnUrl = params.get("returnUrl") ?? "";
            if (returnUrl.length > 0) {
                return returnUrl;
            }

            if (result.statusCode === 200 && typeof result.data === "object") {
                categoryViewBag.value = result.data.bag;

                return true;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                return result.data;
            }
        }

        errorMessage.value = result.errorMessage ?? "Unknown error while trying to save category.";

        return false;
    }


    /**
     * Called at startup to get the definition for the child categories grid.
     */
     async function getGridDefinition(): Promise<void> {
        const result = await invokeBlockAction<GridDefinitionBag>("GetChildCategoriesGridDefinition");

        if (result.isSuccess && result.data) {
            gridDefinition.value = result.data;
            return;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid definition.");
        }
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
     async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetChildCategories", {
            idKey: categoryViewBag.value?.idKey ?? ""
        });

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            hasLoadedChildCategories = true;
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
     async function onDeleteChildCategoryClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete category.");
        }
    }

    function onNewChildCategoryClick(): void {
        const params = new URLSearchParams(window.location.search);
        params.set("CategoryId", "0");
        params.set("ParentCategoryId", categoryViewBag.value?.idKey ?? "");
        params.set("returnUrl", window.location.href);
        window.location.search = params.toString();
    }

    /**
     * When the order of the items in the child categories grid is changed via drag and drop, rearrange the items in the
     * array and update the `order` property to match the array order.
     */
     async function onChildCategoryOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<void> {
        const data: {
            parentCategoryIdKey: string | null | undefined;
            idKey: string;
            beforeIdKey: string | null | undefined;
        } = {
            parentCategoryIdKey: categoryViewBag.value?.idKey,
            idKey: item?.idKey as string ?? "",
            beforeIdKey: beforeItem?.idKey as string ?? ""
        };

        const result = await invokeBlockAction("ReorderChildCategory", data);

        if (!result.isSuccess) {
            alert(result.errorMessage || "Unable to re-order sources, you might need to reload the page.");
            return;
        }
    }

    // #endregion

    const params = new URLSearchParams(window.location.search);
    const categoryId = params.get("CategoryId");

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified category could not be viewed.";
    }
    else if (!config.entity.idKey && categoryId) {

        categoryEditBag.value = {
            bag: config.entity,
            validProperties: Object.keys(config.entity)
        };
        panelMode.value = DetailPanelMode.Add;
    }
    else if (!categoryId) {
        isBlockVisible.value = false;
    }

    getGridDefinition();
</script>
