<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid class="mb-4"
          :definition="config?.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="guid"
          itemTerm="Attribute"
          :entityTypeGuid="EntityType.Attribute"
          stickyHeader
          liveUpdates
          markInactiveRows
          gridSettings
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="showFilterModal = true"
          :onAddItem="config?.isAddEnabled ? onAddAttribute : undefined"
          :onSelectItem="config?.options?.allowSettingOfValues ? onEditAttributeValue : undefined">

        <template #gridHeaderPrepend v-if="showEntityTypePicker">
            <div class="form-inline d-flex justify-content-end p-3">
                <DropDownList v-model="entityTypeGuidFilter"
                              label="Entity Type"
                              grouped
                              enhanceForLongLists
                              :items="entityTypeOptions"
                              style="min-width:250px;" />
            </div>

        </template>

        <ReorderColumn v-if="!(config?.options?.hideColumns ?? []).includes('Ordering')" @orderChanged="onOrderChanged" />

        <TextColumn v-if="!(config?.options?.hideColumns ?? []).includes('Id')" name="id" title="Id" field="id" width="80" />

        <TextColumn v-if="!(config?.options?.hideColumns ?? []).includes('Qualifier')" name="qualifier" title="Qualifier" field="qualifier" :filter="pickExistingValueFilter" />

        <TextColumn name="name" title="Name" field="name" :filter="textValueFilter" />

        <TextColumn v-if="!(config?.options?.hideColumns ?? []).includes('Category')" name="categories" title="Categories" field="categories" :filter="pickExistingValueFilter" />

        <Column v-if="!(config?.options?.hideColumns ?? []).includes('Value')" name="value" title="Value" field="value" :filter="textValueFilter" width="40%">
            <template #format="{ row }">
                <RockField :class="!row.value ? 'text-muted' : ''" :modelValue="row.value || row.defaultValue" :attribute="row.attribute" :showLabel="false" isCondensed isEscaped />
            </template>
        </Column>

        <EditColumn @click="onEditAttribute" />
        <SecurityColumn />
        <DeleteColumn @click="onDeleteAttribute" :rowDisabled="(row) => !row.isDeleteEnabled" />
    </Grid>

    <Modal v-model="showEditAttributeValueModal" :title="editAttributeValueModalTitle" saveText="Save" @save="saveEditAttributeValue">
        <RockField v-model="editAttributeValue" :attribute="editAttribute" isEditMode />
    </Modal>

    <Modal v-model="showEditAttributeModal" :title="editAttributeModalTitle" saveText="Save" @save="saveEditAttribute">
        <div v-if="showEntityTypeQualifier" class="well">
            <DropDownList v-model="entityTypeGuidForEditOrEmptyString"
                          label="Entity Type"
                          grouped
                          enhanceForLongLists
                          :items="entityTypeOptions"
                          rules="required" />
            <div class="row">
                <div class="col-md-6">
                    <TextBox v-model="entityTypeQualifierColumn" label="Qualifier Field" />
                </div>

                <div class="col-md-6">
                    <TextBox v-model="entityTypeQualifierValue" label="Qualifier Value" />
                </div>
            </div>
        </div>

        <AttributeEditor v-model="editableAttribute" :reservedKeyNames="usedKeyNames" :isShowInGridVisible="config?.options?.enableShowInGrid" />
    </Modal>

    <Modal v-model="showFilterModal" title="Filter Options" @save="applyFilters">
        <DropDownList v-model="activeFilter" :items="activeFilterOptions" label="Active Status" />

        <template #customButtons>
            <RockButton type="button" btnType="default" @click="clearFilters">Clear Filters</RockButton>
            <RockButton type="submit" btnType="primary">Apply Filters</RockButton>
        </template>
    </Modal>
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { computed, reactive, ref, watch } from "vue";
    import Grid, { Column, TextColumn, ReorderColumn, SecurityColumn, DeleteColumn, EditColumn, pickExistingValueFilter, textValueFilter } from "@Obsidian/Controls/grid";
    import AttributeEditor from "@Obsidian/Controls/attributeEditor.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import RockField from "@Obsidian/Controls/rockField.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { FieldType } from "@Obsidian/SystemGuids/fieldType";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, usePersonPreferences, useReloadBlock } from "@Obsidian/Utility/block";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { emptyGuid, normalize as normalizeGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { PublicEditableAttributeBag } from "@Obsidian/ViewModels/Utility/publicEditableAttributeBag";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { PreferenceKey } from "./Attributes/types.partial";
    import { asBooleanOrNull } from "@Obsidian/Utility/booleanUtils";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { AttributesOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/Attributes/attributesOptionsBag";

    type EditAttribute = {
        entityTypeQualifierColumn?: string | null;
        entityTypeQualifierValue?: string | null;
        entityTypeGuid?: Guid | null;
        attribute: PublicEditableAttributeBag;
    };

    type GridRow = {
        id: number;
        idKey: string;
        guid: Guid;
        key: string;
        entityTypeGuid: Guid;
        name: string;
        categories: string;
        order: number;
        isActive: boolean;
        qualifier: string;
        attribute: PublicAttributeBag;
        value: string;
        defaultValue: string;
        isDeleteEnabled: boolean;
        isSecurityEnabled: boolean;
    };

    interface IAttributeGridDataBag extends GridDataBag {
        /** Gets or sets the row data to display in the grid. */
        rows?: GridRow[];
    }

    const config = useConfigurationValues<ListBlockBox<AttributesOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    /** True if the entity type picker should be visible on the page. */
    const showEntityTypePicker = computed(() => !config?.options?.entityTypeGuid);

    /** The list of entity types to show in the entity type picker. */
    const entityTypeOptions = computed(() => config?.options?.entityTypes ?? []);

    /** True if the entity type qualifier text boxes should be shown. */
    const showEntityTypeQualifier = computed(() => !config?.options?.entityTypeGuid);

    // #region Attribute Editing

    // Fields for editing an attribute
    const entityTypeGuidForEditOrEmptyString = ref<string>("");
    const entityTypeQualifierColumn = ref("");
    const entityTypeQualifierValue = ref("");

    /** The current attribute in an editable format. */
    const editableAttribute = ref<PublicEditableAttributeBag | null>(null);

    /** True if the edit attribute modal should be visible. */
    const showEditAttributeModal = ref<boolean>(false);

    /** The title to display in the edit attribute modal. */
    const editAttributeModalTitle = computed((): string => {
        if (editableAttribute.value) {
            return `Edit ${editableAttribute.value.name}`;
        }

        return "";
    });

    const usedKeyNames = ref<string[]>([]);

    /**
     * Start editing an attribute on the given row.
     *
     * @param row The row that represents the attribute.
     */
    const onEditAttribute = async (guid: Guid): Promise<void> => {
        const request: {
            attributeGuid: Guid;
        } = {
            attributeGuid: toGuidOrNull(guid) ?? emptyGuid,
        };

        const result = await invokeBlockAction<EditAttribute>("GetEditAttribute", request);

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to edit attribute.");
        }

        entityTypeGuidForEditOrEmptyString.value = result.data.entityTypeGuid ?? entityTypeGuid.value;
        entityTypeQualifierColumn.value = result.data.entityTypeQualifierColumn ?? "";
        entityTypeQualifierValue.value = result.data.entityTypeQualifierValue ?? "";
        editableAttribute.value = result.data.attribute;
        showEditAttributeModal.value = true;
    };

    /**
     * Save the attribute information to the server.
     */
    const saveEditAttribute = async (): Promise<void> => {
        const request: {
            entityTypeGuid: Guid | null;
            entityTypeQualifierColumn: string | null;
            entityTypeQualifierValue: string | null;
            attribute: PublicEditableAttributeBag | null;
        } = {
            entityTypeGuid: toGuidOrNull(entityTypeGuidForEditOrEmptyString.value) ?? toGuidOrNull(entityTypeGuid.value),
            entityTypeQualifierColumn: entityTypeQualifierColumn.value,
            entityTypeQualifierValue: entityTypeQualifierValue.value,
            attribute: editableAttribute.value,
        };

        const result = await invokeBlockAction<GridRow>("SaveEditAttribute", request);

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to save attribute.");
        }

        editableAttribute.value = null;
        showEditAttributeModal.value = false;

        if (!gridData?.rows) {
            return;
        }

        const index = gridData.rows.findIndex(a => a.guid === result.data?.guid);
        const matchesCurrentEntityType = result.data.entityTypeGuid == entityTypeGuid.value;

        const activeFilterVal = asBooleanOrNull(activeFilter.value);
        const matchesCurrentActiveFilter = activeFilterVal === null || result.data.isActive == activeFilterVal;

        if (index !== -1) {
            if (matchesCurrentEntityType && matchesCurrentActiveFilter) {
                // Overwrite the version we have on the client
                gridData.rows.splice(index, 1, result.data);
            }
            else {
                // Delete the version we have because it has switched entity types
                gridData.rows.splice(index, 1);
            }
        }
        else if (matchesCurrentEntityType) {
            // Add as a new row
            gridData.rows.push(result.data);
        }
    };

    /**
     * Event handler for when the add attribute button is clicked.
     */
    const onAddAttribute = (): void => {
        editableAttribute.value = {
            isActive: true,
            fieldTypeGuid: normalizeGuid(FieldType.Text),
            isPublic: false,
            isSystem: false,
            isRequired: false,
            isShowInGrid: false,
            isShowOnBulk: false,
            isAnalytic: false,
            isAllowSearch: false,
            isAnalyticHistory: false,
            isEnableHistory: false,
            isIndexEnabled: false
        };
        showEditAttributeModal.value = true;
        entityTypeGuidForEditOrEmptyString.value = entityTypeGuid.value;
        entityTypeQualifierColumn.value = "";
        entityTypeQualifierValue.value = "";
    };

    /**
     * Event handler for when a delete button on a row is clicked.
     *
     * @param row The row on which the delete button was clicked.
     */
    const onDeleteAttribute = async (key: Guid): Promise<void> => {
        const request: {
            attributeGuid: Guid;
        } = {
            attributeGuid: toGuidOrNull(key) ?? emptyGuid
        };

        const result = await invokeBlockAction<GridRow>("DeleteAttribute", request);

        if (!result.isSuccess) {
            return alert(result.errorMessage || "Unable to delete attribute.");
        }

        if (!gridData?.rows) {
            return;
        }

        const index = gridData.rows.findIndex(a => a.guid === key);

        if (index !== -1) {
            gridData.rows.splice(index, 1);
        }
    };

    // #endregion

    // #region Attribute Value Editing

    /** The current attribute value in an editable format. */
    const editAttributeValue = ref("");
    const editAttribute = ref<PublicAttributeBag>({
        attributeGuid: emptyGuid,
        fieldTypeGuid: emptyGuid,
        isRequired: false,
        order: 0,
    });

    /** True if the edit attribute value modal should be visible. */
    const showEditAttributeValueModal = ref<boolean>(false);

    /** The title to display in the edit attribute value modal. */
    const editAttributeValueModalTitle = computed((): string => {
        if (editAttribute.value) {
            return `${editAttribute.value.name} Value`;
        }

        return "";
    });

    /**
     * Begins editing an attribute's value.
     *
     * @param row The row that initiated the action.
     */
    async function onEditAttributeValue(key: Guid): Promise<void> {
        if (!config?.options?.allowSettingOfValues) {
            return;
        }

        const request: {
            attributeGuid: Guid;
        } = {
            attributeGuid: toGuidOrNull(key) ?? emptyGuid
        };

        const result = await invokeBlockAction<{ attribute: PublicAttributeBag, value: string }>("GetEditAttributeValue", request);

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to edit attribute value.");
        }

        editAttribute.value = result.data.attribute;
        editAttributeValue.value = result.data.value;
        showEditAttributeValueModal.value = true;
    }

    /**
     * Called when a row has been dragged from one position to a new position.
     *
     * @param item The item that was moved to a new position.
     * @param beforeItem The item that the first item was dropped before.
     *
     * @returns `true` if the operation succeeded; otherwise `false`.
     */
    async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
        const result = await invokeBlockAction<string>("ReorderItem", {
            key: item["idKey"],
            beforeKey: beforeItem?.["idKey"] ?? null
        });

        return result.isSuccess;
    }

    /**
     * Performs the save operation for editing an attribute value.
     */
    async function saveEditAttributeValue(): Promise<void> {
        const request: {
            attributeGuid: Guid;
            value: string | null;
        } = {
            attributeGuid: toGuidOrNull(editAttribute.value?.attributeGuid) ?? emptyGuid,
            value: editAttributeValue.value
        };

        const result = await invokeBlockAction<GridRow>("SaveEditAttributeValue", request);

        if (!result.isSuccess || !result.data) {
            return alert(result.errorMessage ?? "Unable to save attribute value.");
        }

        if (gridData?.rows) {

            const index = gridData.rows.findIndex(a => a.guid === result.data?.guid);

            if (index !== -1) {
                gridData.rows.splice(index, 1, result.data);
            }
        }

        editAttribute.value = {
            attributeGuid: emptyGuid,
            fieldTypeGuid: emptyGuid,
            isRequired: false,
            order: 0
        };
        editAttributeValue.value = "";
        showEditAttributeValueModal.value = false;
    }

    // #endregion

    // #region Filters

    const entityTypeGuidFilter = ref(preferences.getValue(PreferenceKey.FilterEntityTypeGuid));
    const categoriesFilter = ref(preferences.getValue(PreferenceKey.FilterCategories));
    const activeFilter = ref(preferences.getValue(PreferenceKey.FilterActive));

    /** The currently selected entity type by the user. */
    const entityTypeGuid = computed(() => config?.options?.entityTypeGuid || entityTypeGuidFilter.value);

    /** True if we have a valid entity type selected or via configuration. */
    const entityTypeSelectionIsValid = computed(() => !!config?.options?.entityTypeGuid || entityTypeGuidFilter.value !== "");

    /** Whether or not the modal for editing filters should be shown */
    const showFilterModal = ref(false);

    /** Possible options to choose from for the "Active" filter. */
    const activeFilterOptions: ListItemBag[] = [
        { value: "", text: "[All]" },
        { value: "true", text: "Active" },
        { value: "false", text: "Inactive" }
    ];

    const hasSettingsFilters = computed<boolean>(() => {
        return !!activeFilter.value;
    });

    function applyFilters(): void {
        showFilterModal.value = false;

        saveFilterValues();
    }

    function clearFilters(): void {
        showFilterModal.value = false;
        activeFilter.value = "";

        saveFilterValues();
    }

    async function saveFilterValues(): Promise<void> {
        preferences.setValue(PreferenceKey.FilterActive, activeFilter.value);

        await preferences.save();

        gridDataSource.value = loadGridData();
    }

    watch(entityTypeGuidFilter, async () => {
        preferences.setValue(PreferenceKey.FilterEntityTypeGuid, entityTypeGuidFilter.value);

        await preferences.save();
        gridDataSource.value = loadGridData();
    });

    // #endregion

    // #region Grid Data

    let gridData: IAttributeGridDataBag | undefined = undefined;
    const gridDataSource = ref<Promise<IAttributeGridDataBag>>(
        entityTypeSelectionIsValid.value
            ? Promise.resolve(gridData ?? { rows: [] })
            : Promise.reject("Please select an entity to display attributes for.")
    );


    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<IAttributeGridDataBag> {
        if (!entityTypeGuid.value) {
            gridData = undefined;
            throw "Please select an entity to display attributes for.";
        }

        const result = await invokeBlockAction<IAttributeGridDataBag>("GetGridData");

        if (!result.isSuccess || !result.data) {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }

        gridData = reactive(result.data);
        usedKeyNames.value = (gridData?.rows ?? []).map(attr => attr.key);

        return gridData;
    }

    // #endregion

    onConfigurationValuesChanged(useReloadBlock());

    gridDataSource.value = loadGridData();
</script>
