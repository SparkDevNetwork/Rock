<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Service Job"
          :entityTypeGuid="EntityType.ServiceJob"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          tooltipField="description"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="30%" />

        <DateTimeColumn name="lastSuccessfulRun"
                        title="Last Successful Run"
                        field="lastSuccessfulRun"
                        :filter="dateValueFilter"
                        visiblePriority="md"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right" />

        <DateTimeColumn name="lastRunDateTime"
                        title="Last Run Date"
                        field="lastRunDateTime"
                        :filter="dateValueFilter"
                        visiblePriority="md"
                        headerClass="text-right"
                        itemClass="justify-content-end text-right" />

        <TextColumn name="lastRunDurationSeconds"
                    title="Last Run Duration"
                    field="lastRunDurationSeconds"
                    :filter="textValueFilter"
                    visiblePriority="md"
                    headerClass="text-center"
                    itemClass="justify-content-center text-center" />

        <Column name="lastStatus"
                title="Last Status"
                field="lastStatus"
                visiblePriority="md"
                :filter="pickExistingValueFilter"
                :filterValue="getlastStatusFilterValue"
                headerClass="text-center"
                itemClass="justify-content-center text-center">
            <template #format="{ row }">
                <span :class='getStatusClass(row)'>{{ row.lastStatus === "Exception" ? "Failed" : row.lastStatus }}</span>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <Column name="lastStatusMessageAsHtml"
                title="Last Status Message"
                field="lastStatusMessageAsHtml"
                width="20%"
                :filter="textValueFilter"
                :filterValue="getlastStatusMessageFilterValue"
                visiblePriority="md">
            <template #format="{ row }">
                <div v-html="row.lastStatusMessageAsHtml">
                </div>
            </template>
        </Column>

        <BooleanColumn name="isSystem"
                       title="System"
                       field="isSystem"
                       visiblePriority="md"
                       :filter="booleanValueFilter"
                       headerClass="text-center"
                       itemClass="justify-content-center text-center"
                       width="5%" />

        <BooleanColumn name="isActive"
                       title="Active"
                       field="isActive"
                       visiblePriority="md"
                       headerClass="text-center"
                       itemClass="justify-content-center text-center"
                       :filter="booleanValueFilter"
                       width="5%" />

        <Column name="history"
                width="52px"
                title="History"
                disableSort
                itemClass="grid-columncommand justify-content-center text-center"
                headerClass="text-center">
            <template #format="{ row }">
                <button v-if="row.guid !== ServiceJob.JobPulse"
                        @click.prevent="onShowHistory(row, $event)"
                        class="btn btn-sm"
                        title="History">
                    <i class="fa fa-history"></i>
                </button>
            </template>
        </Column>

        <Column name="runJob"
                width="52px"
                title="Run Now"
                disableSort
                itemClass="grid-columncommand justify-content-center text-center"
                headerClass="text-center">
            <template #format="{ row }">
                <button v-if="row.guid !== ServiceJob.JobPulse"
                        @click.prevent="onRunNowClick(row, $event)"
                        class="btn btn-sm"
                        title="Run Now">
                    <i class="fa fa-play"></i>
                </button>
            </template>
        </Column>

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { ServiceJob } from "@Obsidian/SystemGuids/serviceJob";
    import Grid, { BooleanColumn, dateValueFilter, TextColumn, textValueFilter, pickExistingValueFilter, booleanValueFilter, DeleteColumn, DateTimeColumn, Column } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { ScheduledJobListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/ScheduledJobList/scheduledJobListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./ScheduledJobList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<ScheduledJobListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    /**
     * Gets the corresponding label for the row's status.
     * @param row The current row.
     */
    function getStatusClass(row: Record<string, unknown>): string {
        const lastStatus = row["lastStatus"] as string || "";
        switch (lastStatus) {
            case "Success":
                return "label label-success";
            case "Running":
                return "label label-info";
            case "Exception":
                return "label label-danger";
            case "Warning":
                return "label label-warning";
            case "":
                return "";
            default:
                return `label label-warning`;
        }
    }

    /**
     * Gets the filter value text to use for the status message column.
     *
     * @param row The row to be filtered.
     */
    function getlastStatusMessageFilterValue(row: Record<string, unknown>): string {
        return row.lastStatusMessage as string;
    }

     /**
     * Gets the filter value text to use for the status column.
     *
     * @param row The row to be filtered.
     */
     function getlastStatusFilterValue(row: Record<string, unknown>): string {
        const status = row.lastStatus as string ?? "";
        return status === "Exception" ? "Failed" : status;
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete service job.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
    * Called when the history button is clicked, redirects the user to the job history page.
    */
    function onShowHistory(row: Record<string, unknown>, event: Event): void {
        event.stopPropagation();

        const key = row["idKey"] as string;
        if (key) {
            if (config.navigationUrls?.[NavigationUrlKey.HistoryPage]) {
                window.location.href = config.navigationUrls[NavigationUrlKey.HistoryPage].replace("((Key))", key);
            }
        }
    }

    /**
    * Called when the run now button is clicked, sends a request to the server to run the job.
    */
    async function onRunNowClick(row: Record<string, unknown>, event: Event): Promise<void> {
        event.stopPropagation();

        const key = row["idKey"] as string;
        const jobName = row["name"] as string;
        if (key) {
            const result = await invokeBlockAction<string>("RunNow", {
                key
            });

            if (result.isSuccess) {
                await alert(`The '${jobName}' job has been started.`);
                gridDataSource.value = loadGridData();
            }
            else {
                await alert(result.errorMessage ?? "Unknown error while trying to delete service job.");
            }
        }
    }

    gridDataSource.value = loadGridData();
</script>
