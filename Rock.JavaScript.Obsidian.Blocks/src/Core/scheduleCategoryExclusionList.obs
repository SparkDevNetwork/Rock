<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="!config.options?.canAdministrate" alertType="danger"><strong>Error</strong> You are not authorized to configure this page</NotificationBox>

    <Grid v-if="config.options?.canAdministrate && config.options?.isBlockVisible"
          :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Exclusion"
          title="Schedule Exclusions"
          :entityTypeGuid="EntityType.ScheduleCategoryExclusion"
          stickyHeader
          liveUpdates
          :showLaunchWorkflow="false"
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">

        <TextColumn name="title"
                    title="Title"
                    field="title"
                    width="40%"
                    :filter="textValueFilter"
                    visiblePriority="xs" />


        <DateColumn name="start"
                    title="Start"
                    field="start"
                    headerClass="title-right"
                    itemClass="justify-content-end text-right"
                    :filter="dateValueFilter"
                    visiblePriority="xs" />

        <DateColumn name="end"
                    title="End"
                    field="end"
                    headerClass="title-right"
                    itemClass="justify-content-end text-right"
                    :filter="dateValueFilter"
                    visiblePriority="xs" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>

    <Modal v-model="isModalOpen" title="Schedule Exclusion" saveText="Save" @save="onSaveExclusion">
        <div class="row">
            <div class="col-md-6">
                <TextBox label="Title" v-model="title" rules="required" />
            </div>
            <div class="col-md-6">
                <DateRangePicker label="Exclude Dates" v-model="dateRange" rules="required" />
            </div>
        </div>
    </Modal>
</template>

<style>
.title-right .grid-column-title {
    text-align: right;
}
</style>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { TextColumn, textValueFilter, dateValueFilter, DeleteColumn, DateColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import DateRangePicker from "@Obsidian/Controls/dateRangePicker.obs";
    import { DateRangeParts } from "@Obsidian/Types/Controls/dateRangePicker";
    import { ScheduleCategoryExclusionListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/ScheduleCategoryExclusionList/scheduleCategoryExclusionListOptionsBag";
    import { ScheduleCategoryExclusionBag } from "@Obsidian/ViewModels/Blocks/Core/ScheduleCategoryExclusionList/scheduleCategoryExclusionBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<ScheduleCategoryExclusionListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;
    const isModalOpen = ref(false);
    const idKey = ref("");
    const title = ref("");
    const dateRange = ref<DateRangeParts | undefined>();

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        resetModal();

        if (gridData && gridData.rows) {
            const row = gridData.rows.find(r => r["idKey"] === key);

            if (row) {
                idKey.value = row["idKey"] as string;
                title.value = row["title"] as string;
                dateRange.value = {} as DateRangeParts;
                dateRange.value.lowerValue = row["start"] as string;
                dateRange.value.upperValue = row["end"] as string;

                isModalOpen.value = true;
            }
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete schedule category exclusion.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        resetModal();
        isModalOpen.value = true;
    }

    /**
     * Sends a request to the server the save the Schedule Exclusion.
     */
    async function onSaveExclusion(): Promise<void> {
        const bag: ScheduleCategoryExclusionBag = {
            idKey: idKey.value,
            startDate: dateRange.value?.lowerValue,
            endDate: dateRange.value?.upperValue,
            title: title.value,
        };

        const result = await invokeBlockAction<string>("Save", {
            bag
        });

        if (result.isSuccess) {
            gridDataSource.value = loadGridData();
            isModalOpen.value = false;
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to save schedule category exclusion.");
        }
    }

    /**
     * Resets the Schedule Exclusion Modal values.
     */
    function resetModal(): void {
        idKey.value = "";
        title.value = "";
        dateRange.value = {};
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
