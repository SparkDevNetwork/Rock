<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Note Watch"
          :entityTypeGuid="EntityType.NoteWatch"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          :showLaunchWorkflow="false"
          @selectItem="onSelectItem">

        <BooleanColumn name="isWatching"
                       title="Watching"
                       field="isWatching"
                       visiblePriority="xs"
                       width="80px"
                       :itemClass="'d-flex justify-content-center align-items-center'" />

        <PersonColumn name="watcher"
                      title="Watcher Person"
                      field="watcher"
                      :filter="textValueFilter"
                      :filterValue="getWatcherRowValue"
                      visiblePriority="xs" />

        <TextColumn name="watcherGroup"
                    title="Watcher Group"
                    field="watcherGroup"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="noteType"
                    title="Watching Note Type"
                    field="noteType"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="entityType"
                    title="Watching Entity Type"
                    field="entityType"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <BooleanColumn name="allowOverride"
                       title="Allow Overrides"
                       field="allowOverride"
                       visiblePriority="xs"
                       width="80px"
                       :itemClass="'d-flex justify-content-center align-items-center'" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, BooleanColumn, PersonColumn, TextColumn, textValueFilter, DeleteColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { NoteWatchListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/NoteWatchList/noteWatchListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./NoteWatchList/types.partial";
    import { reactive, ref } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const config = useConfigurationValues<ListBlockBox<NoteWatchListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    function getWatcherRowValue(row: Record<string, unknown>): string {
        const watcher = row["watcher"] as PersonFieldBag;
        return `${watcher?.nickName} ${watcher.lastName}`;
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete note watch.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
