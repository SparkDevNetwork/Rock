<template>
    <Modal v-model="isVisible"
           title="Placement Configuration"
           cancelText="Cancel"
           saveText="Save"
           @save="onSave">
        <div class="row">
            <div class="col-md-3">
                <CampusPicker v-model="campus" label="Campus Filter" includeInactive showBlankItem :forceVisible="true" />
            </div>
        </div>
        <Panel v-if="inTemplateMode"
               :modelValue="true"
               title="Registration Template Configuration"
               :hasCollapse="true">
            <CheckBox v-model="showRegistrationInstanceName" label="Show Registration Instance Name" />
            <CheckBoxList v-model="includedRegistrationInstanceIds"
                          label="Included Registration Instances"
                          :items="placementConfigurationSettingOptions.registrationInstances ?? []"
                          :enhanceForLongLists="true" />
        </Panel>
        <Panel :modelValue="true"
               title="People To Place Configuration"
               :hasCollapse="true">
            <CheckBox v-model="areFeesDisplayed" label="Show Fees" />
            <DropDownList v-model="sourceAttributesToDisplay"
                          label="Displayed Source Attributes"
                          :items="placementConfigurationSettingOptions.registrantAttributes ?? []"
                          :enhanceForLongLists="true"
                          :multiple="true" />
            <CheckBox v-model="areSourceAttributesDisplayedOnDestinationGroupMembers" text="Display Source Attributes on Destination Group Members" label="" />
        </Panel>
        <Panel :modelValue="true"
               title="Destination Group Configuration"
               :hasCollapse="true">
            <div class="row">
                <div class="col-md-6">
                    <DropDownList v-model="groupAttributesToDisplay"
                                  label="Displayed Group Attributes"
                                  :items="placementConfigurationSettingOptions.groupAttributes ?? []"
                                  :enhanceForLongLists="true"
                                  :multiple="true" />
                </div>
                <div class="col-md-6">
                    <CheckBox v-model="areFullGroupsHidden" label="Hide Full Groups" />
                </div>
            </div>
            <DropDownList v-model="groupMemberAttributesToDisplay"
                          label="Displayed Group Member Attributes"
                          :items="placementConfigurationSettingOptions.groupMemberAttributes ?? []"
                          :enhanceForLongLists="true"
                          :multiple="true" />
        </Panel>
    </Modal>
</template>

<script setup lang="ts">
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, ref, computed, watch, nextTick } from "vue";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import Modal from "@Obsidian/Controls/modal.obs";
    import CampusPicker from "@Obsidian/Controls/campusPicker.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    // import ListBox from "@Obsidian/Controls/listBox.obs"; - Does not work for enhanced functionality on modal.
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { PlacementConfigurationSettingsBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementConfigurationSettingsBag";
    import { PlacementConfigurationSettingOptionsBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementConfigurationSettingOptionsBag";

    const props = defineProps({
        modelValue: {
            type: Boolean as PropType<boolean>,
            required: true
        },
        placementConfigurationSettings: {
            type: Object as PropType<PlacementConfigurationSettingsBag>,
            required: true
        },
        placementConfigurationSettingOptions: {
            type: Object as PropType<PlacementConfigurationSettingOptionsBag>,
            required: true
        },
        inTemplateMode: {
            type: Boolean as PropType<boolean>,
            required: true
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: boolean): void;
        (e: "save", value: PlacementConfigurationSettingsBag): void;
        // (e: "dismissMessage"): void
    }>();

    const isVisible = useVModelPassthrough(props, "modelValue", emit);
    const campus = ref<ListItemBag>(props.placementConfigurationSettings.displayedCampus ?? {});
    const areFeesDisplayed = ref<boolean>(props.placementConfigurationSettings.areFeesDisplayed ?? false);
    const sourceAttributesToDisplay = ref<string[]>(props.placementConfigurationSettings.sourceAttributesToDisplay ?? []);
    const areSourceAttributesDisplayedOnDestinationGroupMembers = ref<boolean>(props.placementConfigurationSettings.areSourceAttributesDisplayedOnDestinationGroupMembers ?? false);
    const groupAttributesToDisplay = ref<string[]>(props.placementConfigurationSettings.groupAttributesToDisplay ?? []);
    const areFullGroupsHidden = ref<boolean>(props.placementConfigurationSettings.areFullGroupsHidden ?? false);
    const groupMemberAttributesToDisplay = ref<string[]>(props.placementConfigurationSettings.groupMemberAttributesToDisplay ?? []);
    const showRegistrationInstanceName = ref<boolean>(props.placementConfigurationSettings.showRegistrationInstanceName ?? false);
    const includedRegistrationInstanceIds = ref<string[]>(props.placementConfigurationSettings.includedRegistrationInstanceIds ?? []);

    function onSave(): void {
        const updatedSettings: PlacementConfigurationSettingsBag = {
            displayedCampus: campus.value,
            areFeesDisplayed: areFeesDisplayed.value,
            sourceAttributesToDisplay: sourceAttributesToDisplay.value,
            areSourceAttributesDisplayedOnDestinationGroupMembers: areSourceAttributesDisplayedOnDestinationGroupMembers.value,
            groupAttributesToDisplay: groupAttributesToDisplay.value,
            areFullGroupsHidden: areFullGroupsHidden.value,
            groupMemberAttributesToDisplay: groupMemberAttributesToDisplay.value,
            showRegistrationInstanceName: showRegistrationInstanceName.value,
            includedRegistrationInstanceIds: includedRegistrationInstanceIds.value
        };

        emit("save", updatedSettings);
    }

    // function onMessageDismissed(): void {
    //     emit("dismissMessage");
    // }
</script>
