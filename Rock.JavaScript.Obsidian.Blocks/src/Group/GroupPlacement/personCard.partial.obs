<template>
    <div v-if="person.personIdKey"
         :class="['person-card', { 'selected': isSelected }]"
         :style="{ borderLeftColor: getPersonBorderColor(person.gender) }"
         @click="onPersonCardClick"
         @mouseenter="toggleIsCardExpandedOnHover(true)"
         @mouseleave="toggleIsCardExpandedOnHover(false)">
        <div class="d-flex justify-content-between align-items-center person-row"
             :class="{ 'expanded': isCardExpanded }">
            <div class="d-flex align-items-center flex-grow-1">
                <div class="mr-3 flex-shrink-0"
                     :style="{ 'width': '32px', 'height': '32px', 'border-radius': '18px', 'background-image': `url('${person.photoUrl}')`, 'background-size': 'cover' }">
                </div>
                {{ displayedPersonName }}
            </div>
            <div v-if="isGroupMemberCard && groupMember?.groupMemberIdKey"
                 :class="['dropdown', 'dropdown-right', { 'open': openDropdownIndex === index }]">
                <button type="button"
                        class="btn btn-xs btn-link btn-overflow"
                        data-toggle="dropdown"
                        aria-haspopup="true"
                        aria-expanded="false"
                        @click.stop="togglePersonDropdown(index)">
                    <i class="fa fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button type="button"
                                class="dropdown-item btn-link"
                                @click.stop="editGroupMember">
                            Edit
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                class="dropdown-item btn-link"
                                @click.stop="removeGroupMember">
                            Remove
                        </button>
                    </li>
                </ul>
            </div>
        </div>
        <TransitionVerticalCollapse>
            <div v-if="isCardExpanded && (hasGroupMemberDetailsToDisplay || hasRegistrantDetailsToDisplay || hasSourceMemberDetailsToDisplay)"
                 class="details-container">
                <template v-if="isGroupMemberCard && hasGroupMemberDetailsToDisplay">
                    <div class="header">
                        Group Member
                    </div>
                    <dl>
                        <template v-for="attribute, key in getAttributesWithCorrespondingValues(destinationGroupMemberAttributes, destinationGroupMemberAttributeValues)"
                                  :key="key">
                            <dt>
                                {{ attribute.name }}
                            </dt>
                            <dd :ref="(el) => addTooltip(el as Element)"
                                data-toggle="tooltip"
                                :data-original-title="getAttributeValueText(destinationGroupMemberAttributeValues, attribute, key)">
                                {{ getAttributeValueText(destinationGroupMemberAttributeValues, attribute, key) }}
                            </dd>
                        </template>
                    </dl>
                </template>
                <template v-if="(!isGroupMemberCard || areSourceAttributesDisplayedOnDestinationGroupMembers) && hasSourceMemberDetailsToDisplay">
                    <div class="header">
                        Source Group Member
                    </div>
                    <dl>
                        <template v-for="attribute, key in getAttributesWithCorrespondingValues(sourceGroupMemberAttributes, sourceGroupMemberAttributeValues)"
                                  :key="key">
                            <dt>
                                {{ attribute.name }}
                            </dt>
                            <dd :ref="(el) => addTooltip(el as Element)"
                                data-toggle="tooltip"
                                :data-original-title="getAttributeValueText(sourceGroupMemberAttributeValues, attribute, key)">
                                {{ getAttributeValueText(sourceGroupMemberAttributeValues, attribute, key) }}
                            </dd>
                        </template>
                    </dl>
                </template>
                <!-- If show instance or show registrants attributes is on then we display this. -->
                <!-- TODO - Come back to this if statement -->
                <template v-if="(isInstanceDisplayed || areFeesDisplayed || (!isGroupMemberCard || areSourceAttributesDisplayedOnDestinationGroupMembers)) && hasRegistrantDetailsToDisplay">
                    <div class="header">
                        {{ registrantHeader }}
                    </div>
                    <template v-for="registrant in person.registrants">
                        <dl v-if="registrant.registrantIdKey"
                            :key="registrant.registrantIdKey">
                            <template v-if="isInstanceDisplayed">
                                <dt>
                                    Instance
                                </dt>
                                <dd :ref="(el) => addTooltip(el as Element)"
                                    data-toggle="tooltip"
                                    :data-original-title="registrant.registrationInstanceName">
                                    {{ registrant.registrationInstanceName }}
                                </dd>
                            </template>
                            <template v-if="(!isGroupMemberCard || areSourceAttributesDisplayedOnDestinationGroupMembers) && registrant.attributes && registrant.attributeValues"
                                      v-for="(attribute, key) in getAttributesWithCorrespondingValues(registrant.attributes, registrant.attributeValues)"
                                      :key="key">
                                <dt>
                                    {{ attribute.name }}
                                </dt>
                                <!-- TODO - tooltip isn't top right... have to rework the title as well -->
                                <dd v-if="registrant.attributeValues"
                                    :ref="(el) => addTooltip(el as Element)"
                                    data-toggle="tooltip"
                                    :data-original-title="getAttributeValueText(registrant.attributeValues, attribute, key)">
                                    <!-- <RockField :attribute="attribute"
                                               :modelValue="registrant.attributeValues[key!]"
                                               :showLabel="false"
                                               class="attribute-value-list" /> -->
                                    {{ getAttributeValueText(registrant.attributeValues, attribute, key) }}
                                </dd>
                            </template>
                            <template v-if="!isGroupMemberCard && areFeesDisplayed && registrant.fees"
                                      v-for="key in Object.keys(registrant.fees)"
                                      :key="key">
                                <dt :ref="(el) => addTooltip(el as Element)"
                                    data-toggle="tooltip"
                                    :data-original-title="registrant.fees[key].text">
                                    {{ registrant.fees[key].text }}
                                </dt>
                                <!-- TODO - tooltip isn't top right... have to rework the title as well -->
                                <dd :ref="(el) => addTooltip(el as Element)"
                                    data-toggle="tooltip"
                                    :data-original-title="registrant.fees[key].value">
                                    {{ registrant.fees[key].value }}
                                </dd>
                            </template>
                        </dl>
                    </template>
                </template>
            </div>
        </TransitionVerticalCollapse>
    </div>
</template>

<style scoped>
.person-card {
    /* display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;*/
    border: 1px solid #dfe0e1;
    border-left: 4px solid var(--color-interface-medium);
    border-radius: 4px;
    width: 100%;
    /* width: 300px; */
    /* height: 48px; */
    /* margin: 10px 0; */
    /* margin: 0 8px 12px 0; */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    color: #343a40;
    cursor: move;
    cursor: -webkit-grab;
    /* cursor: grab; */
    background-color: #fff;
    box-shadow: 0 1px 0 #3321140D
}

.person-row {
    padding: 10px;
}

.person-row.expanded {
    border-bottom: 1px solid var(--color-interface-soft);
    box-shadow: 0 1px 0 #3321140D;
}

.person-card.selected {
    border-color: var(--color-primary) !important;
    background-color: var(--color-interface-softest) !important;
    color: var(--color-interface-stronger) !important;
}

.person-card .details-container {
    /* padding: 6px 8px; */
    padding: 0 0.5rem 0.5rem 0.5rem;
    font-size: 14px;
    /* color: #2d2e31;
    background: rgba(255, 255, 255, 0.8);
    border-bottom-right-radius: 3px;
    border-bottom-left-radius: 3px */
}

.person-card .details-container .header {
    font-weight: var(--font-weight-semibold);
    margin: 0.5rem 0;
}

.person-card .details-container dl {
    display: grid;
    grid-template-columns: 1fr 1fr;
    justify-content: space-between;
    margin: 0;
    row-gap: 0.5rem;
    padding: 10px 0;
    border-bottom: 1px solid var(--color-interface-soft);
}

.person-card .details-container dl {
    padding-top: 0;
}

.person-card .details-container dl:last-child {
    padding-bottom: 0;
    border-bottom: none;
}

.person-card .details-container dt {
    color: var(--color-interface-medium);
    /* min-width: 130px; */
    /* max-width: 170px; */
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.person-card .details-container dd {
    text-align: right;
    color: var(--color-interface-stronger);
    /* min-width: 130px; */
    /* max-width: 170px; */
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* .attribute-value-list {
    text-align: right;
    color: var(--color-interface-stronger);
    min-width: 130px;
    max-width: 170px;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
} */

.person-card .details-container hr {
    color: var(--color-interface-soft);
    height: 1px;
    width: 100%;
}
</style>

<script setup lang="ts">
    import { PropType, ref, computed } from "vue";
    import { PersonBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/personBag";
    import { Gender } from "@Obsidian/Enums/Crm/gender";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse.obs";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import RockField from "@Obsidian/Controls/rockField.obs";
    import { FieldType } from "@Obsidian/SystemGuids/fieldType";
    import { getFieldType } from "@Obsidian/Utility/fieldTypes";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { RegistrantBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/registrantBag";
    import { PlacementMode } from "@Obsidian/Enums/Group/placementMode";
    import { GroupMemberBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/groupMemberBag";

    const props = defineProps({
        isCardExpanded: {
            type: Boolean as PropType<boolean>,
            required: true
        },
        person: {
            type: Object as PropType<PersonBag>,
            required: true
        },
        index: {
            type: Number as PropType<number>,
            required: true
        },
        isSelected: {
            type: Boolean as PropType<boolean>,
            required: false
        },
        isInstanceDisplayed: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
        areFeesDisplayed: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
        isDetailHoverDisabled: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
        isFirstNameLastName: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
        isGenderHighlighting: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
        groupMember: {
            type: Object as PropType<GroupMemberBag>,
            required: false,
        },
        areSourceAttributesDisplayedOnDestinationGroupMembers: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
        placementMode: {
            type: Number as PropType<PlacementMode | null>,
            required: false
        }
    });

    const emit = defineEmits<{
        (e: "toggleCardExpansion"): void;
        (e: "toggleSelection"): void;
        (e: "update:isCardExpanded", value: boolean): void;
        (e: "editGroupMember", value: string): void;
        (e: "removeGroupMember", value: string): void;
    }>();

    const openDropdownIndex = ref<number | null>(null);
    const isCardExpanded = useVModelPassthrough(props, "isCardExpanded", emit);

    const isGroupOrEntityMode = props.placementMode === PlacementMode.GroupMode || props.placementMode === PlacementMode.EntitySetMode;

    const displayedPersonName = computed(() => {
        // TODO - check if they want nickname or first name
        if (props.isFirstNameLastName) {
            return `${props.person.nickname} ${props.person.lastName}`;
        }
        return `${props.person.lastName}, ${props.person.nickname}`;
    });

    const destinationGroupMemberAttributes = computed((): Record<string, PublicAttributeBag> => {
        if (!props.groupMember?.attributes) {
            return {};
        }
        return props.groupMember.attributes;
    });

    const destinationGroupMemberAttributeValues = computed((): Record<string, string> => {
        if (!props.groupMember?.attributeValues) {
            return {};
        }
        return props.groupMember.attributeValues;
    });

    const sourceGroupMemberAttributes = computed((): Record<string, PublicAttributeBag> => {
        if (!props.person.sourceGroupMember?.attributes) {
            return {};
        }
        return props.person.sourceGroupMember.attributes;
    });

    const sourceGroupMemberAttributeValues = computed((): Record<string, string> => {
        if (!props.person.sourceGroupMember?.attributeValues) {
            return {};
        }
        return props.person.sourceGroupMember.attributeValues;
    });

    const isGroupMemberCard = computed(() => {
        const gm = props.groupMember;
        return !!gm && Object.keys(gm).length > 0;
    });

    const registrantHeader = computed(() => props.person.registrants && props.person.registrants.length > 1 ? "Registrants" : "Registrant");

    const hasGroupMemberDetailsToDisplay = computed((): boolean => {
        if (!props.groupMember?.attributes || !props.groupMember.attributeValues) {
            return false;
        }

        return Object.keys(getAttributesWithCorrespondingValues(props.groupMember.attributes, props.groupMember.attributeValues) ?? {}).length > 0;
    });

    const hasRegistrantDetailsToDisplay = computed((): boolean => {
        if (!props.person.registrants || props.person.registrants.length === 0 || isGroupOrEntityMode) {
            return false;
        }

        return props.person.registrants.some(registrant => {
            const hasInstance = props.isInstanceDisplayed && !!registrant.registrationInstanceName;
            const hasFees = props.areFeesDisplayed && Object.keys(registrant.fees ?? {}).length > 0;
            const hasAttributes = (!isGroupMemberCard.value || props.areSourceAttributesDisplayedOnDestinationGroupMembers)
                && registrant.attributes
                && registrant.attributeValues
                && Object.keys(getAttributesWithCorrespondingValues(registrant.attributes, registrant.attributeValues) ?? {}).length > 0;

            return hasInstance || hasAttributes || hasFees;
        });
    });

    const hasSourceMemberDetailsToDisplay = computed((): boolean => {
        if (props.placementMode !== PlacementMode.GroupMode || !props.person.sourceGroupMember) {
            return false;
        }

        return Object.keys(getAttributesWithCorrespondingValues(sourceGroupMemberAttributes.value, sourceGroupMemberAttributeValues.value) ?? {}).length > 0;
    });

    function getPersonBorderColor(gender: Gender) {
        if (props.isGenderHighlighting) {
            switch (gender) {
                case Gender.Male:
                    return "#1A8AE5";
                case Gender.Female:
                    return "#DE69CE";
                case Gender.Unknown:
                default:
                    return "var(--color-interface-medium)";
            }
        }
        return "var(--color-interface-medium)";
    }

    function onPersonCardClick(event: MouseEvent) {
        if (event.ctrlKey || event.metaKey) {
            emit("toggleSelection");
        }
    }

    function getAttributeValueText(attributeValues: Record<string, string> | null, attribute: PublicAttributeBag, key: string): string {
        const fieldTypeGuid = toGuidOrNull(attribute.fieldTypeGuid);
        const fieldType = getFieldType(fieldTypeGuid ?? FieldType.Text);

        const rawValue = attributeValues?.[key] ?? "";
        const configValues = attribute.configurationValues ?? {};

        return fieldType?.getTextValue?.(rawValue, configValues) ?? rawValue;
    }

    function getAttributesWithCorrespondingValues(attributes: Record<string, PublicAttributeBag>, attributeValues: Record<string, string>): Record<string, PublicAttributeBag> | null {
        if (!attributes || !attributeValues) {
            return null;
        }

        const filtered = Object.entries(attributes).filter(([key, attr]) => {
            const value = attributeValues![key];
            return !!value && value !== "";
        });

        return filtered.length > 0
            ? Object.fromEntries(filtered)
            : null;
    }

    function togglePersonDropdown(index: number) {
        openDropdownIndex.value = openDropdownIndex.value === index ? null : index;
    }

    function toggleIsCardExpandedOnHover(value: boolean) {
        // We only want the hover behavior if the parent has set the cards to not be expanded.
        if (!props.isCardExpanded && !props.isDetailHoverDisabled) {
            // TODO - talk with PO and determine if we want hover functionality
            // isCardExpanded.value = value;
        }
    }

    function editGroupMember() {
        // TOOD: When Group Member Detail is converted to Obsidian use idKey.
        // emit("editGroupMember", groupMemberIdKey);
        emit("editGroupMember", props.groupMember?.groupMemberId.toString() ?? "");
        openDropdownIndex.value = null;
    }
    function removeGroupMember() {
        emit("removeGroupMember", props.groupMember?.groupMemberIdKey ?? "");
        openDropdownIndex.value = null;
    }

    function addTooltip(element: Element | null): void {
        if (element) {
            tooltip(element);
        }
    }

</script>