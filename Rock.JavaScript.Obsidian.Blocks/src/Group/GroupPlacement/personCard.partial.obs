<template>
    <div :class="['person-card', { 'selected': isSelected }]"
         :style="{ borderLeftColor: getPersonBorderColor(person.gender) }"
         @click="onPersonCardClick"
         @mouseenter="toggleIsCardExpandedOnHover(true)"
         @mouseleave="toggleIsCardExpandedOnHover(false)">
        <div class="d-flex justify-content-between align-items-center person-row" :class="{ 'expanded': isCardExpanded }">
            <div class="d-flex align-items-center flex-grow-1">
                <div class="mr-3 flex-shrink-0"
                     :style="{ 'width': '32px', 'height': '32px', 'border-radius': '18px', 'background-image': `url('${person.photoUrl}')`, 'background-size': 'cover' }">
                </div>
                {{ person.lastName }}, {{ person.nickname }}
            </div>
            <div :class="['dropdown', 'dropdown-right', { 'open': openDropdownIndex === index }]">
                <button type="button"
                        class="btn btn-xs btn-link btn-overflow"
                        data-toggle="dropdown"
                        aria-haspopup="true"
                        aria-expanded="false"
                        @click.stop="togglePersonDropdown(index)">
                    <i class="fa fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <button type="button"
                                class="dropdown-item btn-link"
                                @click.stop="editPerson(person.personId)">
                            Edit
                        </button>
                    </li>
                    <li>
                        <button type="button"
                                class="dropdown-item btn-link"
                                @click.stop="removePerson(person.personId)">
                            Remove
                        </button>
                    </li>
                </ul>
            </div>
        </div>
        <TransitionVerticalCollapse>
            <div v-if="isCardExpanded" class="details-container">
                <!-- If show instance or show registrants attributes is on then we display this. -->
                <div v-if="person.registrants && person.registrants.length > 1" class="header">Registrants</div>
                <div v-if="person.registrants && person.registrants.length > 0">
                    <dl v-for="registrant in person.registrants" :key="registrant.registrantId">
                        <template v-if="isInstanceDisplayed">
                            <dt>Instance</dt>
                            <dd :ref="(el) => addTooltip(el as Element)"
                                data-toggle="tooltip"
                                :data-original-title="registrant.registrationInstanceName">
                                {{ registrant.registrationInstanceName }}
                            </dd>
                        </template>
                        <template v-if="registrant.attributes && Object.keys(registrant.attributes).length > 0" v-for="(attribute, key) in registrant.attributes" :key="key">
                            <dt>{{ attribute.name }}</dt>
                            <!-- TODO - tooltip isn't top right... have to rework the title as well -->
                            <dd v-if="registrant.attributeValues"
                                :ref="(el) => addTooltip(el as Element)"
                                data-toggle="tooltip"
                                :data-original-title="getAttributeValueText(registrant, attribute, key)">
                                <!-- <RockField :attribute="attribute"
                                           :modelValue="registrant.attributeValues[key!]"
                                           :showLabel="false"
                                           class="attribute-value-list" /> -->
                                {{ getAttributeValueText(registrant, attribute, key) }}
                            </dd>
                        </template>
                    </dl>
                </div>
            </div>
        </TransitionVerticalCollapse>
    </div>
</template>

<style scoped>
.person-card {
    /* display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;*/
    border: 1px solid #dfe0e1;
    border-left: 4px solid var(--color-interface-medium);
    border-radius: 4px;
    width: 300px;
    /* height: 48px; */
    /* margin: 10px 0; */
    /* margin: 0 8px 12px 0; */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    color: #343a40;
    cursor: move;
    cursor: -webkit-grab;
    /* cursor: grab; */
    background-color: #fff;
    box-shadow: 0 1px 0 #3321140D
}

.person-row {
    padding: 10px;
}

.person-row.expanded {
    border-bottom: 1px solid var(--color-interface-soft);
    box-shadow: 0 1px 0 #3321140D;
}

.person-card.selected {
    border-color: var(--color-primary) !important;
    background-color: var(--color-interface-softest) !important;
    color: var(--color-interface-stronger) !important;
}

.person-card .details-container {
    /* padding: 6px 8px; */
    padding: 10px;
    font-size: 14px;
    /* color: #2d2e31;
    background: rgba(255, 255, 255, 0.8);
    border-bottom-right-radius: 3px;
    border-bottom-left-radius: 3px */
}

.person-card .details-container .header {
    font-weight: var(--font-weight-semibold);
    margin-bottom: 0.5rem;
}

.person-card .details-container dl {
    display: grid;
    grid-template-columns: max-content auto;
    justify-content: space-between;
    margin: 0;
    row-gap: 0.5rem;
    padding: 10px 0;
    border-bottom: 1px solid var(--color-interface-soft);
}

.person-card .details-container dl:first-child {
    padding-top: 0;
}

.person-card .details-container dl:last-child {
    padding-bottom: 0;
    border-bottom: none;
}

.person-card .details-container dt {
    color: var(--color-interface-medium);
    min-width: 130px;
    max-width: 170px;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.person-card .details-container dd {
    text-align: right;
    color: var(--color-interface-stronger);
    min-width: 130px;
    max-width: 170px;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.attribute-value-list {
    text-align: right;
    color: var(--color-interface-stronger);
    min-width: 130px;
    max-width: 170px;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.person-card .details-container hr {
    color: var(--color-interface-soft);
    height: 1px;
    width: 100%;
}
</style>

<script setup lang="ts">
    import { PropType, ref, computed } from "vue";
    import { PersonBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/personBag";
    import { Gender } from "@Obsidian/Enums/Crm/gender";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import TransitionVerticalCollapse from "@Obsidian/Controls/transitionVerticalCollapse.obs";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import RockField from "@Obsidian/Controls/rockField.obs";
    import { FieldType } from "@Obsidian/SystemGuids/fieldType";
    import { getFieldType } from "@Obsidian/Utility/fieldTypes";
    import { toGuidOrNull } from "@Obsidian/Utility/guid";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { RegistrantBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/registrantBag";

    const props = defineProps({
        isCardExpanded: {
            type: Boolean as PropType<boolean>,
            required: true
        },
        person: {
            type: Object as PropType<PersonBag>,
            required: true
        },
        index: {
            type: Number as PropType<number>,
            required: true
        },
        isSelected: {
            type: Boolean as PropType<boolean>,
            required: false
        },
        isInstanceDisplayed: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
        isDetailHoverDisabled: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
    });

    const emit = defineEmits<{
        (e: "toggleCardExpansion"): void;
        (e: "toggleSelection"): void;
        (e: "update:isCardExpanded", value: boolean): void;
    }>();

    const openDropdownIndex = ref<number | null>(null);
    const isCardExpanded = useVModelPassthrough(props, "isCardExpanded", emit);

    function getPersonBorderColor(gender: Gender) {
        switch (gender) {
            case Gender.Male:
                return "#1A8AE5";
            case Gender.Female:
                return "#DE69CE";
            case Gender.Unknown:
            default:
                return "var(--color-interface-medium)";
        }
    }

    function onPersonCardClick(event: MouseEvent) {
        if (event.ctrlKey || event.metaKey) {
            emit("toggleSelection");
        }
    }

    function getAttributeValueText(registrant: RegistrantBag, attribute: PublicAttributeBag, key: string): string {
        const fieldTypeGuid = toGuidOrNull(attribute.fieldTypeGuid);
        const fieldType = getFieldType(fieldTypeGuid ?? FieldType.Text);

        const rawValue = registrant.attributeValues?.[key] ?? "";
        const configValues = attribute.configurationValues ?? {};

        return fieldType?.getTextValue?.(rawValue, configValues) ?? rawValue;
    }


    function togglePersonDropdown(index: number) {
        openDropdownIndex.value = openDropdownIndex.value === index ? null : index;
    }

    function toggleIsCardExpandedOnHover(value: boolean) {
        // We only want the hover behavior if the parent has set the cards to not be expanded.
        if (!props.isCardExpanded && !props.isDetailHoverDisabled) {
            // TODO - talk with PO and determine if we want hover functionality
            // isCardExpanded.value = value;
        }
    }

    function editPerson(personId: number) {
        // Logic to edit the person
    }
    function removePerson(personId: number) {
        // Logic to remove the person
    }

    function addTooltip(element: Element | null): void {
        if (element) {
            tooltip(element);
        }
    }

</script>