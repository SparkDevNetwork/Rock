<template>
    <Panel type="default" v-model="isGroupExpanded" :hasCollapse="true" :headerSecondaryActions="secondaryActions">
        <template #title>
            <div class="d-flex align-items-center gap-2">
                {{ destinationGroup.groupName }}
                <Badge :class="[capacityStatusClass]">{{ capacityText }}</Badge>
                <span v-for="role in groupTypeRoles"
                      :key="role.id"
                      :class="['role-count', getRoleCountOverUnderCapacityClass(role.id)]">
                    {{ pluralize(role.name ?? "") }}: {{ getRoleCount(role.id) }}
                </span>
            </div>
        </template>
        <template #headerActions v-if="isGenderHighlighting && !isGroupExpanded">
            <div class="d-flex gap-1 mr-3">
                <Badge class="unknown-badge">{{ genderCounts.unknown }}</Badge>
                <Badge class="male-badge">{{ genderCounts.males }}</Badge>
                <Badge class="female-badge">{{ genderCounts.females }}</Badge>
            </div>
        </template>
        <div v-if="destinationGroup.attributeValues && destinationGroup.attributes && hasNonEmptyGroupAttributeValue" class="panel-inline">
            <div class="panel-heading">
                <AttributeValuesContainer v-model="destinationGroup.attributeValues"
                                          :attributes="destinationGroup.attributes"
                                          :numberOfColumns="4"
                                          columnBreakpoint="lg"
                                          :showCategoryLabel="false" />
            </div>
        </div>
        <div v-for="role in groupTypeRoles" :key=role.id class="panel-inline">
            <div class="panel-heading">
                <h1 class="panel-title d-inline-block mr-2">
                    {{ pluralize(role.name ?? "") }}
                </h1>
                <span :class="['role-count', getRoleCountOverUnderCapacityClass(role.id)]"
                      :ref="(el) => addTooltip(el as Element)"
                      data-toggle="tooltip"
                      :data-html="true"
                      :data-original-title="getRoleCountTooltipText(role.id)">
                    {{ getRoleSubHeaderText(role.id) }}
                </span>
            </div>
            <NotificationBox v-if="getGroupRoleError(destinationGroup.groupId, role.id)"
                             alertType="danger"
                             class="m-3"
                             :dismissible="true"
                             @dismiss="clearGroupRoleError(destinationGroup.groupId, role.id)">
                {{ getGroupRoleError(destinationGroup.groupId, role.id) }}
            </NotificationBox>
            <template v-if="isGenderHighlighting">
                <div class="group-role-wrapper"
                     v-drag-target="dragTargetId"
                     :data-group-section-id="`${destinationGroup.groupId}:${role.id}`">
                    <template v-if="getGroupMembersFilteredByRole(role.id).length">
                        <div class="gender-section">
                            <div v-if="getGroupMembersFilteredByRoleAndGender(role.id, Gender.Male).length > 0">
                                <HighlightLabel customClass="gender-highlight-label male-label" labelType="custom">
                                    Males ({{ getGroupMembersFilteredByRoleAndGender(role.id, Gender.Male).length }})
                                </HighlightLabel>
                                <div class="group-role-wrapper" v-drag-source="groupMemberDragOptions">
                                    <template v-for="(groupMember, index) in getGroupMembersFilteredByRoleAndGender(role.id, Gender.Male)">
                                        <PersonCard v-if="groupMember.person"
                                                    :key="index"
                                                    :isCardExpanded="arePersonCardsExpanded"
                                                    :person="groupMember.person"
                                                    :index="index"
                                                    :isDetailHoverDisabled="true"
                                                    :data-group-id="destinationGroup.groupId"
                                                    :data-group-member-id="groupMember.groupMemberId"
                                                    :isFirstNameLastName="currentSortOrder === SortTypes.SortByFirstName"
                                                    :isGenderHighlighting="isGenderHighlighting"
                                                    :isInstanceDisplayed="isInstanceDisplayed"
                                                    :groupMemberAttributes="groupMember.attributes"
                                                    :groupMemberAttributeValues="groupMember.attributeValues"
                                                    :isGroupMemberCard="true"
                                                    :areSourceAttributesDisplayedOnDestinationGroupMembers="areSourceAttributesDisplayedOnDestinationGroupMembers" />
                                    </template>
                                </div>
                            </div>
                            <div v-if="getGroupMembersFilteredByRoleAndGender(role.id, Gender.Female).length > 0">
                                <HighlightLabel customClass="gender-highlight-label female-label" labelType="custom">
                                    Females ({{ getGroupMembersFilteredByRoleAndGender(role.id, Gender.Female).length }})
                                </HighlightLabel>
                                <div class="group-role-wrapper" v-drag-source="groupMemberDragOptions">
                                    <template v-for="(groupMember, index) in getGroupMembersFilteredByRoleAndGender(role.id, Gender.Female)">
                                        <PersonCard v-if="groupMember.person"
                                                    :key="index"
                                                    :isCardExpanded="arePersonCardsExpanded"
                                                    :person="groupMember.person"
                                                    :index="index"
                                                    :isDetailHoverDisabled="true"
                                                    :data-group-id="destinationGroup.groupId"
                                                    :data-group-member-id="groupMember.groupMemberId"
                                                    :isFirstNameLastName="currentSortOrder === SortTypes.SortByFirstName"
                                                    :isGenderHighlighting="isGenderHighlighting"
                                                    :isInstanceDisplayed="isInstanceDisplayed"
                                                    :groupMemberAttributes="groupMember.attributes"
                                                    :groupMemberAttributeValues="groupMember.attributeValues"
                                                    :isGroupMemberCard="true"
                                                    :areSourceAttributesDisplayedOnDestinationGroupMembers="areSourceAttributesDisplayedOnDestinationGroupMembers" />
                                    </template>
                                </div>
                            </div>
                            <div v-if="getGroupMembersFilteredByRoleAndGender(role.id, Gender.Unknown).length > 0">
                                <HighlightLabel customClass="gender-highlight-label unknown-label" labelType="custom">
                                    Unknown ({{ getGroupMembersFilteredByRoleAndGender(role.id, Gender.Unknown).length }})
                                </HighlightLabel>
                                <div class="group-role-wrapper" v-drag-source="groupMemberDragOptions">
                                    <template v-for="(groupMember, index) in getGroupMembersFilteredByRoleAndGender(role.id, Gender.Unknown)">
                                        <PersonCard v-if="groupMember.person"
                                                    :key="index"
                                                    :isCardExpanded="arePersonCardsExpanded"
                                                    :person="groupMember.person"
                                                    :index="index"
                                                    :isDetailHoverDisabled="true"
                                                    :data-group-id="destinationGroup.groupId"
                                                    :data-group-member-id="groupMember.groupMemberId"
                                                    :isFirstNameLastName="currentSortOrder === SortTypes.SortByFirstName"
                                                    :isGenderHighlighting="isGenderHighlighting"
                                                    :isInstanceDisplayed="isInstanceDisplayed"
                                                    :groupMemberAttributes="groupMember.attributes"
                                                    :groupMemberAttributeValues="groupMember.attributeValues"
                                                    :isGroupMemberCard="true"
                                                    :areSourceAttributesDisplayedOnDestinationGroupMembers="areSourceAttributesDisplayedOnDestinationGroupMembers" />
                                    </template>
                                </div>
                            </div>
                        </div>
                    </template>
                    <div v-else-if="arePeopleLoading" class="loading-section">
                        <Loading :isLoading="arePeopleLoading" />
                    </div>
                    <div v-else class="empty-drop-zone">
                        Drag and Drop Here
                    </div>
                </div>
            </template>
            <div v-else
                 class="group-role-wrapper"
                 v-drag-target="dragTargetId"
                 :data-group-section-id="`${destinationGroup.groupId}:${role.id}`"
                 v-drag-source="groupMemberDragOptions">
                <template v-if="getGroupMembersFilteredByRole(role.id).length">
                    <template v-for="(groupMember, index) in getGroupMembersFilteredByRole(role.id)">
                        <PersonCard v-if="groupMember.person"
                                    :key="index"
                                    :isCardExpanded="arePersonCardsExpanded"
                                    :person="groupMember.person"
                                    :index="index"
                                    :isDetailHoverDisabled="true"
                                    :data-group-id="destinationGroup.groupId"
                                    :data-group-member-id="groupMember.groupMemberId"
                                    :isFirstNameLastName="currentSortOrder === SortTypes.SortByFirstName"
                                    :isGenderHighlighting="isGenderHighlighting"
                                    :isInstanceDisplayed="isInstanceDisplayed"
                                    :groupMemberAttributes="groupMember.attributes"
                                    :groupMemberAttributeValues="groupMember.attributeValues"
                                    :isGroupMemberCard="true"
                                    :areSourceAttributesDisplayedOnDestinationGroupMembers="areSourceAttributesDisplayedOnDestinationGroupMembers" />
                    </template>
                </template>
                <div v-else-if="arePeopleLoading" class="loading-section">
                    <Loading :isLoading="arePeopleLoading" />
                </div>
                <div v-else class="empty-drop-zone">
                    Drag and Drop Here
                </div>
            </div>
        </div>
    </Panel>
</template>

<style scoped>
:deep(.panel.panel-block) {
    height: 100%;
    margin-bottom: 24px;
}

.gender-section {
    grid-column: 1 / -1;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.loading-section {
    grid-column: 1 / -1;
    display: flex;
    align-items: center;
    justify-content: center;
}

.gender-section .group-role-wrapper {
    padding: 0;
    padding-top: 12px;
}

.gender-highlight-label {
    font-size: var(--font-size-small);
    font-weight: var(--font-weight-semibold);
}

.male-label {
    background-color: #E8F3FC;
    color: #1A8AE5;
}

.female-label {
    background-color: #FCE8FA;
    color: #DE69C3;
}

.unknown-label {
    background-color: var(--color-interface-soft);
    color: var(--color-interface-strong);
}

.empty-drop-zone {
    width: 100%;
    grid-column: 1 / -1;
    display: flex;
    justify-content: center;
    padding: 0.5rem;
    border: 1px dashed var(--color-interface-soft);
    color: var(--color-interface-soft);
}

.panel-inline {
    margin-bottom: 0 !important;
    border: none !important;
    border-radius: 0 !important;
    box-shadow: none !important;
    -webkit-bot-shadow: none !important
}

.panel-inline .panel-heading {
    padding: 8px 16px;
    /* background-color: rgba(245, 245, 245, 0.8); */
    background-color: var(--color-interface-softer);
    border: 1px solid var(--color-interface-soft);
    border-radius: 0;
}

.panel-inline .panel-title {
    font-size: 14px;
    font-weight: 600
}

.panel-drawer + .group-role-members .panel-heading,
.group-role-members:first-child .panel-heading {
    border-top: 0
}

.placement-capacity-label {
    border-radius: 100px;
}

.role-count {
    font-size: var(--font-size-small);
    font-weight: var(--font-weight-regular);
    color: var(--color-interface-medium);
}

.role-count.over-under-role-capacity {
    color: var(--color-danger);
}

.male-badge {
    background-color: #1A8AE5 !important;
}

.female-badge {
    background-color: #DE69CE !important;
}

.unknown-badge {
    background-color: var(--color-interface-soft) !important;
    color: var(--color-interface-stronger) !important;
}

.status-over {
    background-color: #d4442e !important;
}

.status-at {
    background-color: #ee7624 !important;
}

.status-near {
    background-color: #ffc870 !important;
    color: black;
}

.status-under {
    background-color: #16c98d !important;
}

.group-role-wrapper {
    display: grid;
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 400px));
    padding: 16px;
}

@media (min-width: 1024px) {
    .group-role-wrapper {
        grid-template-columns: repeat(2, minmax(300px, 400px));
    }
}

@media (min-width: 1440px) {
    .group-role-wrapper {
        grid-template-columns: repeat(3, minmax(300px, 400px));
    }
}

@media (min-width: 1800px) {
    .group-role-wrapper {
        grid-template-columns: repeat(4, minmax(300px, 400px));
    }
}

@media (min-width: 2000px) {
    .group-role-wrapper {
        grid-template-columns: repeat(5, minmax(300px, 400px));
    }
}
</style>

<script setup lang="ts">
    import { PropType, ref, computed } from "vue";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { PlacementGroupBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementGroupBag";
    import { PersonBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/personBag";
    import { PlacementGroupTypeRoleBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementGroupTypeRoleBag";
    import PersonCard from "./personCard.partial.obs";
    import Badge from "@Obsidian/Controls/badge.obs";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import { pluralize } from "@Obsidian/Utility/stringUtils";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import { Gender } from "@Obsidian/Enums/Crm/gender";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { GroupMemberBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/groupMemberBag";
    import { Guid } from "@Obsidian/Types";
    import { DragSource as vDragSource, IDragSourceOptions, DragTarget as vDragTarget } from "@Obsidian/Directives/dragDrop";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { SortTypes } from "./types.partial";
    import HighlightLabel from "@Obsidian/Controls/highlightLabel.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import Loading from "@Obsidian/Controls/loading.obs";

    const props = defineProps({
        destinationGroup: {
            type: Object as PropType<PlacementGroupBag>,
            required: true
        },
        groupTypeRoles: {
            type: Array as PropType<PlacementGroupTypeRoleBag[]>,
        },
        arePersonCardsExpanded: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        isGroupExpanded: {
            type: Boolean as PropType<boolean>,
            default: true
        },
        dragTargetId: {
            type: String as PropType<Guid>,
            required: true
        },
        groupMemberDragOptions: {
            type: Object as PropType<IDragSourceOptions>,
            required: true
        },
        getGroupRoleError: {
            type: Function as PropType<(groupId: number, roleId: number) => string | null>,
            required: true
        },
        clearGroupRoleError: {
            type: Function as PropType<(groupId: number, roleId: number) => void>,
            required: true
        },
        currentSortOrder: {
            type: Number as PropType<SortTypes>,
            required: true
        },
        isGenderHighlighting: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
        arePeopleLoading: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        isInstanceDisplayed: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
        areSourceAttributesDisplayedOnDestinationGroupMembers: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: false
        },
    });

    const emit = defineEmits<{
        (e: "update:isGroupExpanded", value: boolean): void;
    }>();

    // const destinationGroup = ref<PlacementGroupBag>(props.destinationGroup);
    const destinationGroup = computed(() => props.destinationGroup);
    const groupTypeRoles = ref<PlacementGroupTypeRoleBag[]>(props.groupTypeRoles ?? []);
    // TODO - handle parent edge cases.
    const isGroupExpanded = useVModelPassthrough(props, "isGroupExpanded", emit);

    const hasNonEmptyGroupAttributeValue = computed(() => {
        const values = props.destinationGroup.attributeValues ?? {};
        return Object.values(values).some(v => !!v && v !== "");
    });

    const capacityStatusClass = computed(() => {
        if (!destinationGroup.value.groupCapacity) {
            return "status-under";
        }

        const groupMemberCount = destinationGroup.value.groupMembers?.length ?? 0;
        const groupCapacityPercent = (groupMemberCount / destinationGroup.value.groupCapacity) * 100;

        if (groupCapacityPercent > 100) {
            return "status-over";
        }
        else if (groupCapacityPercent === 100) {
            return "status-at";
        }
        else if (groupCapacityPercent > 80) {
            return "status-near";
        }
        else {
            return "status-under";
        }
    });

    const genderCounts = computed(() => {
        const counts = {
            males: 0,
            females: 0,
            unknown: 0
        };

        if (!destinationGroup.value.groupMembers) {
            return counts;
        }

        for (const groupMember of destinationGroup.value.groupMembers) {
            switch (groupMember.person?.gender) {
                case Gender.Male:
                    counts.males++;
                    break;
                case Gender.Female:
                    counts.females++;
                    break;
                default:
                    counts.unknown++;
                    break;
            }
        }

        return counts;
    });

    const capacityText = computed(() => {
        const groupMemberCount = destinationGroup.value.groupMembers?.length ?? 0;

        if (!destinationGroup.value.groupCapacity) {
            return `${groupMemberCount}`;
        }

        return `${groupMemberCount} / ${destinationGroup.value.groupCapacity}`;
    });


    const secondaryActions = computed((): PanelAction[] | undefined => {
        const actions: PanelAction[] = [];

        actions.push({
            type: "default",
            title: "Edit",
            handler: actionGoesHere
        });

        return actions;
    });

    function getRoleCount(roleId: number): number {
        return destinationGroup.value.groupMembers?.filter(gm => gm.groupRoleId === roleId).length ?? 0;
    }

    // Low Priority TODO - there is a ux/ui issue when a panel is collapsed and the secondary actions dropdown is opened
    function getRoleCountOverUnderCapacityClass(roleId: number): string {
        const role = groupTypeRoles.value.find(r => r.id === roleId);
        const roleMax = role?.maxCount;
        const roleMin = role?.minCount;
        const count = getRoleCount(roleId);

        if (count == null) {
            return "";
        }

        const isOver = roleMax != null && count > roleMax;
        const isUnder = roleMin != null && count < roleMin;

        return (isOver || isUnder) ? "over-under-role-capacity" : "";
    }

    function getRoleSubHeaderText(roleId: number): string {
        const role = groupTypeRoles.value.find(r => r.id === roleId);
        return role?.maxCount ? `${getRoleCount(roleId)}/${role.maxCount}` : `${getRoleCount(roleId)}`;
    }

    function getGroupMembersFilteredByRole(roleId: number): GroupMemberBag[] {
        return destinationGroup.value.groupMembers?.filter(gm => gm.groupRoleId === roleId) ?? [];
    }

    function getGroupMembersFilteredByRoleAndGender(roleId: number, gender: Gender): GroupMemberBag[] {
        return destinationGroup.value.groupMembers?.filter(gm => gm.groupRoleId === roleId && gm.person?.gender === gender) ?? [];
    }

    function getRoleCountTooltipText(roleId: number): string {
        const role = groupTypeRoles.value.find(r => r.id === roleId);
        if (!role) {
            return "";
        }

        const parts: string[] = [];

        if (role.maxCount != null) {
            parts.push(`Maximum Total: ${role.maxCount}`);
        }

        if (role.minCount != null) {
            parts.push(`Minimum Total: ${role.minCount}`);
        }

        return parts.join("<br>");
    }

    function actionGoesHere() {
        // Logic to handle the action goes here
    }

    function addTooltip(element: Element | null): void {
        if (element) {
            tooltip(element);
        }
    }
</script>