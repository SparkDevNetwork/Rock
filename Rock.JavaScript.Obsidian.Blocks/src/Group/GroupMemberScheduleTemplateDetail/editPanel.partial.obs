<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>
        <div class="row">
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required"
                         :disabled="!isEditable" />
            </div>
            <div class="col-md-6">
                <ScheduleBuilder label="Schedule" v-model="calendarContent" />
            </div>
        </div>
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, watch } from "vue";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import ScheduleBuilder from "@Obsidian/Controls/scheduleBuilder.obs";
    import { watchPropertyChanges } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { GroupMemberScheduleTemplateBag } from "@Obsidian/ViewModels/Blocks/Group/GroupMemberScheduleTemplateDetail/groupMemberScheduleTemplateBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<GroupMemberScheduleTemplateBag>,
            required: true
        },

        isEditable: {
            type: Object as PropType<boolean>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: GroupMemberScheduleTemplateBag): void,
        (e: "propertyChanged", value: string): void
    }>();

    // #region Values

    const name = propertyRef(props.modelValue.name ?? "", "Name");
    const calendarContent = propertyRef(props.modelValue.calendarContent ?? "", "ScheduleId");

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    const propRefs = [name, calendarContent];

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {
        updateRefValue(name, props.modelValue.name ?? "");
        updateRefValue(calendarContent, props.modelValue.calendarContent ?? "");
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    watch([...propRefs], () => {
        const newValue: GroupMemberScheduleTemplateBag = {
            ...props.modelValue,
            name: name.value,
            calendarContent: calendarContent.value,
        };

        emit("update:modelValue", newValue);
    });

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);
</script>
