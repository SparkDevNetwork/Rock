<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="Archived Group"
          :entityTypeGuid="EntityType.Group"
          stickyHeader
          liveUpdates
          gridSettings
          :showLaunchWorkflow="false"
          :gridSettingsActive="hasSettingsFilters"
          @gridSettingsClick="onClickGridSetting">

        <TextColumn name="groupType"
                    title="Group Type"
                    field="groupType"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="name"
                    title="Name"
                    field="name"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <TextColumn name="description"
                    title="Description"
                    field="description"
                    :filter="textValueFilter"
                    width="45%"
                    visiblePriority="md" />

        <DateColumn name="createdDate"
                    title="Created"
                    field="createdDate"
                    :filter="dateValueFilter"
                    visiblePriority="md" />

        <DateColumn name="archivedDate"
                    title="Archived"
                    field="archivedDate"
                    :filter="dateValueFilter"
                    visiblePriority="xs" />

        <PersonColumn name="archivedBy"
                      title="Archived By"
                      field="archivedBy"
                      :hideAvatar="true"
                      :filter="pickExistingValueFilter"
                      :filterValue="archivedByFilterValue"
                      visiblePriority="md" />

        <Column name="location"
                width="58"
                itemClass="grid-columncommand"
                isiblePriority="xs">
            <template #format="{ row }">
                <button class="btn btn-default btn-sm"
                        title="Unarchive"
                        @click.prevent="onUndoArchiveClick(row.idKey)">
                    <i class="fa fa-undo"></i>
                </button>
            </template>
        </Column>
    </Grid>

    <GridSettingsModal v-model="gridSettings"
                       v-model:visible="isGridSettingsVisible"
                       :groupTypeGuids="groupTypeGuids" />
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction, usePersonPreferences } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { PersonColumn, pickExistingValueFilter, TextColumn, textValueFilter, dateValueFilter, DateColumn, Column } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { GroupArchivedListOptionsBag } from "@Obsidian/ViewModels/Blocks/Group/GroupArchivedList/groupArchivedListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridSettingsOptions, PreferenceKey } from "./GroupArchivedList/types.partial";
    import GridSettingsModal from "./GroupArchivedList/gridSettingsModal.partial.obs";
    import { computed, reactive, ref, watch } from "vue";
    import { PersonFieldBag } from "@Obsidian/ViewModels/Core/Grid/personFieldBag";

    const config = useConfigurationValues<ListBlockBox<GroupArchivedListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const groupTypeGuids = ref(config.options?.groupTypeGuids ?? []);
    const isGridSettingsVisible = ref(false);
    const gridSettings = ref<GridSettingsOptions>({
        name: preferences.getValue(PreferenceKey.FilterGroupName),
        groupType: JSON.parse(preferences.getValue(PreferenceKey.FilterGroupType) || "{}"),
    });

    // #endregion

    // #region Computed Values

    /** `true` if the grid settings is performing any filtering. */
    const hasSettingsFilters = computed((): boolean => {
        return !!gridSettings.value.name
            || !!gridSettings.value.groupType?.value;
    });

    // #endregion

    // #region Functions

    /**
    * Called when the grid setting icon is clicked, displays the block filters.
    *
    */
    function onClickGridSetting(): void {
        isGridSettingsVisible.value = true;
    }

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    function archivedByFilterValue(row: Record<string, unknown>): string {
        const person = row["archivedBy"] as PersonFieldBag;
        return `${person.nickName} ${person.lastName}`;
    }

    // #endregion

    // #region Event Handlers

    /**
    * Called when a row's undo archive button has been clicked by the individual.
    */
    async function onUndoArchiveClick(key: string): Promise<void> {

        if (gridData && gridData.rows) {
            const row = gridData.rows.find(r => r["idKey"] === key);
            if (row) {
                const result = await invokeBlockAction<string>("UndoArchive", {
                    key
                });

                if (result.isSuccess) {
                    const index = gridData.rows.findIndex(r => r["idKey"] === key);

                    if (index !== -1) {
                        gridData.rows?.splice(index, 1);
                    }
                }
                else {
                    await alert(result.errorMessage ?? "Unknown error while trying to undo archive.");
                }
            }
        }
    }

    // #endregion

    watch(gridSettings, async () => {
        preferences.setValue(PreferenceKey.FilterGroupName, gridSettings.value.name ?? "");
        preferences.setValue(PreferenceKey.FilterGroupType, JSON.stringify(gridSettings.value.groupType));

        // Save the preferences
        await preferences.save();

        // Reload the grid data
        gridDataSource.value = loadGridData();
    });

    gridDataSource.value = loadGridData();
</script>
