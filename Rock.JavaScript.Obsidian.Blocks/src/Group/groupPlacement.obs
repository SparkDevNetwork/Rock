<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel type="block" panelBodyCssClass="overflow-hidden" class="styled-scroll">
        <template #title>
            <div class="d-flex align-items-center">
                <span class="clickable text-sm mr-3" @click="onBack">
                    <i class="fa fa-chevron-left d-block"></i>
                </span>
                <h1 class="panel-title">
                    {{ box.title }}
                </h1>
            </div>
        </template>

        <template #headerActions>
            <div class="d-flex gap-1 mr-3">
                <div class="dropdown">
                    <RockButton :btnType="BtnType.Default"
                                :btnSize="BtnSize.Small"
                                :isSquare="true"
                                title="Sort Items"
                                data-toggle="dropdown">
                        <i class="fa fa-sort"></i>
                    </RockButton>
                    <ul class="dropdown-menu dropdown-menu-right">
                        <li v-for="[key, label] in sortOptions" :key="key">
                            <a href="#" @click.prevent="changeSort(key)">
                                {{ label }}
                            </a>
                        </li>
                    </ul>
                </div>
                <RockButton :btnType="BtnType.Default"
                            :btnSize="BtnSize.Small"
                            :isSquare="true"
                            title="Gender Highlight"
                            @click="toggleHighlightGender">
                    <i class="fa fa-venus-mars"></i>
                </RockButton>
                <RockButton :btnType="BtnType.Default"
                            :btnSize="BtnSize.Small"
                            :isSquare="true"
                            title="Toggle Details"
                            @click="toggleCardExpansion">
                    <i class="fa fa-info-circle"></i>
                </RockButton>
                <RockButton :btnType="BtnType.Default"
                            :btnSize="BtnSize.Small"
                            :isSquare="true"
                            title="Settings"
                            @click="openPlacementConfigSettings">
                    <i class="fa fa-cog"></i>
                </RockButton>
            </div>
        </template>

        <div class="d-flex w-100 h-100">
            <div class="col-md-4 col-lg-3 p-0 h-100 helper-height">
                <Panel type="default" title="People To Place" panelBodyCssClass="h-100 overflow-hidden">
                    <template #headerActions>
                        <RockButton :btnType="BtnType.Default"
                                    :btnSize="BtnSize.Small"
                                    :isSquare="true"
                                    title="Search People"
                                    class="mr-3"
                                    @click="searchPeople">
                            <i class="fa fa-search"></i>
                        </RockButton>
                    </template>

                    <!-- TODO: See about adding "Filter" to drawer. -->
                    <template #drawer>
                        <AttributeValuesContainer v-model="personAttributeValuesForFilter" :attributes="personAttributesForFilter" isEditMode :numberOfColumns="1" />
                        <RockButton :btnType="BtnType.Action"
                                    :btnSize="BtnSize.ExtraSmall"
                                    @click="applyPeopleFilter">
                            Apply Filter
                        </RockButton>
                    </template>

                    <div class="people-to-place-panel-body">
                        <div class="d-flex justify-content-between align-items-center w-100 p-2 pb-0">
                            <div class="prevent-clear">
                                <CheckBox v-model="areAllPeopleSelected"
                                          label=""
                                          text="Select All"
                                          @click="toggleSelectAllCheckbox()" />
                            </div>
                            <span class="text-muted">{{ selectedPeopleCount }} Selected
                                <i ref="selectionInfoElement"
                                   class="fa fa-info-circle cursor-pointer"
                                   data-toggle="tooltip"
                                   title="Ctrl (Mac: Cmd) + Click to select multiple people.">
                                </i>
                            </span>
                        </div>
                        <div v-drag-source="personDragSourceOptions" v-drag-target="groupMemberDragSourceOptions.id" class="people-to-place-card-container">
                            <template v-for="(person, index) in sortedPeopleToPlace" v-if="sortedPeopleToPlace.length > 0">
                                <PersonCard v-if="person.personId"
                                            :key="index"
                                            :data-person-id="person.personId"
                                            :isCardExpanded="arePersonCardsExpanded"
                                            :person="person"
                                            :index="index"
                                            :isSelected="isSelected(person.personId)"
                                            :isInstanceDisplayed="placementConfigurationSettings.showRegistrationInstanceName"
                                            :isFirstNameLastName="currentSortOrder === SortTypes.SortByFirstName"
                                            :isGenderHighlighting="isGenderHighlighting"
                                            @toggleCardExpansion="toggleCardExpansion"
                                            @toggleSelection="toggleSelection(person.personId)" />
                            </template>
                            <div v-else>
                                <span v-if="!isNoPeopleLabelHidden" class="no-people-label">No People Available</span>
                            </div>
                        </div>
                    </div>

                </Panel>

            </div>

            <div class="col-md-8 col-lg-9 p-0 h-100 helper-height">
                <Panel type="default" title="Destination Groups" panelBodyCssClass="h-100 overflow-hidden">
                    <template #headerActions>
                        <div class="d-flex gap-1 mr-3">
                            <RockButton :btnType="BtnType.Default"
                                        :btnSize="BtnSize.Small"
                                        title="Add Group"
                                        @click="openAddGroupModal">
                                <i class="fa fa-group text-xs mr-2"></i>
                                <span>Add Group</span>
                            </RockButton>

                            <RockButton :btnType="BtnType.Default"
                                        :btnSize="BtnSize.Small"
                                        :isSquare="true"
                                        @click="toggleGroupExpansion">
                                <i :class="areGroupsExpanded ? 'fa fa-angle-double-up' : 'fa fa-angle-double-down'"></i>
                            </RockButton>
                        </div>
                    </template>

                    <!-- TODO: See about adding "Filter" to drawer. -->
                    <template #drawer>
                        <RockLabel>Group Filters</RockLabel>
                        <AttributeValuesContainer v-model="groupAttributeValuesForFilter" :attributes="groupAttributesForFilter" isEditMode :numberOfColumns="3" columnBreakpoint="lg" />
                        <RockLabel>Group Member Filters</RockLabel>
                        <AttributeValuesContainer v-model="groupMemberAttributeValuesForFilter" :attributes="groupMemberAttributesForFilter" isEditMode :numberOfColumns="3" columnBreakpoint="lg" />
                        <RockButton :btnType="BtnType.Action"
                                    :btnSize="BtnSize.ExtraSmall"
                                    @click="applyGroupFilter">
                            Apply Filter
                        </RockButton>
                    </template>
                    <div class="p-3 h-100 group-container">
                        <DestinationGroup v-for="(group, index) in sortedGroups"
                                          :key="index"
                                          :destinationGroup="group"
                                          :arePersonCardsExpanded="arePersonCardsExpanded"
                                          :isGroupExpanded="areGroupsExpanded"
                                          :groupTypeRoles="box.placementGroupTypeRoles ?? []"
                                          :dragTargetId="personDragSourceOptions.id"
                                          :groupMemberDragOptions="groupMemberDragSourceOptions"
                                          :getGroupRoleError="getGroupRoleError"
                                          :clearGroupRoleError="clearGroupRoleError"
                                          :currentSortOrder="currentSortOrder"
                                          :isGenderHighlighting="isGenderHighlighting" />
                    </div>

                </Panel>
            </div>
        </div>

    </Panel>

    <PlacementConfigurationModal v-model="isPlacementConfigModalVisible"
                                 :placementConfigurationSettings="placementConfigurationSettings"
                                 :placementConfigurationSettingOptions="box.placementConfigurationSettingOptions ?? {}"
                                 :inTemplateMode="box.inTemplateMode"
                                 @save="savePlacementCofigSettings" />

    <AddGroupModal v-model="isAddGroupModalVisible"
                   ref="addGroupModalElement"
                   :groupAttributes="box.groupAttributes ?? {}"
                   :errorMessage="addGroupModalErrorText"
                   @save="addGroup"
                   @dismissMessage="addGroupModalErrorText = ''" />
</template>

<style scoped>
:deep(.panel-default) {
    height: 100%;
}

:deep(.panel-default>.panel-heading) {
    background-color: var(--color-interface-softest);
    border-color: var(--color-interface-softer);
    color: #2d2e31;
}

/* Work-around to allow the height to descend (through the fullscreen div) all the way down to panel-body */
:deep(.helper-height > div:first-child) {
    height: 100%;
}

.no-people-label {
    color: var(--color-interface-medium);
}

.gu-mirror.multi-drag-preview {
    border: 1px solid var(--color-primary) !important;
    background-color: var(--interface-softest);
    color: var(--color-primary) !important;
    border-radius: 4px;
    opacity: 0.7;
    transform: rotate(-15deg);
    display: flex;
    justify-content: center;
    align-items: center;
    /* box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); */
    pointer-events: none;
    z-index: 2;
}

.gu-transit.multi-hover-preview {
    border: 1px solid var(--color-primary) !important;
    background-color: var(--interface-softest);
    /* padding: 10px; */
    color: var(--color-primary) !important;
    border-radius: 4px;
    opacity: 0.7;
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: none;
    z-index: 2;
    min-height: 50px;
}

/* .multi-card-preview i {
    opacity: 1;
    color: var(--color-primary);
    font-size: 1.4rem;
    z-index: 3;
} */

.multi-card-preview i {
    font-size: 1.2rem;
}

.preview-stack-clone {
    border: 1px solid var(--color-primary) !important;
    position: absolute !important;
    top: -6px !important;
    left: -6px !important;
    z-index: 0 !important;
    opacity: 0.6 !important;
}

:deep(.panel-body) {
    padding: 0;
}

.people-to-place-panel-body {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    /* background-color: rgba(245, 245, 245, 0.4); */
    background-color: var(--color-interface-softer);
}

.people-to-place-card-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    padding-top: 0.5rem;
    width: 100%;
    padding: 0.5rem;
    overflow: hidden;
    overflow-y: auto;
}

.group-container {
    background-color: var(--color-interface-softer);
    overflow: hidden;
    overflow-y: auto;
}

:deep(.highlight) {
    background-color: var(--color-interface-soft) !important;
}

:deep(.is-drag-over) {
    display: none;
}

/* from webforms css */

/* .d-inline-block {
    display: inline-block
}

.panel-groupplacement .registrant-area {
    height: 100%;
    padding-top: 15px;
    padding-bottom: 15px
}

.panel-groupplacement .registrant-area > .row {
    height: 100%
}

.dropzone.empty,
.dropzone:empty {
    position: relative;
    padding: 41px 16px;
    outline-offset: -16px
}

.dropzone.empty::after,
.dropzone:empty::after {
    position: absolute;
    top: 50%;
    left: 0;
    display: block;
    width: 100%;
    font-size: 14px;
    color: rgba(0, 0, 0, 0.4);
    text-align: center;
    content: attr(data-empty-label);
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%)
}

.dropzone.droppable:empty {
    outline: 2px dashed rgba(0, 0, 0, 0.1)
}

.registrant-search {
    padding: 12px;
    background: #fafafa
}

.group-placement-registrantlist .registrant .flex::before,
.group-placement-registrantlist .registrant .flex .btn {
    display: none
}

.group-placement-registrantlist .registrant.has-note .flex {
    -ms-flex-direction: column !important;
    flex-direction: column !important
}

.placement-capacity-label[data-status="over-capacity"] {
    background-color: #d4442e
}

.placement-capacity-label[data-status="at-capacity"] {
    background-color: #ee7624
}

.placement-capacity-label[data-status="near-capacity"] {
    background-color: #ffc870
}

.placement-capacity-label[data-status="under-capacity"] {
    background-color: #16c98d
}

.placement-capacity-label[data-status="none"] {
    display: none
}

.gu-transit .container {
    display: none
}

.scrollable {
    position: relative;
    overflow-x: auto;
    overflow-y: auto
}

.group-role-container {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap
}

.group-role-container .registrant .details-container {
    display: none
}

.group-role-container .registrant.gu-transit,
.gu-mirror {
    max-height: 38px
}

.group-role-container .registrant.gu-transit .hide-dragging,
.gu-mirror .hide-dragging {
    display: none
}

.resource-list {
    position: sticky !important;
    top: 16px;
    max-height: calc(100vh - 32px)
}

@media (min-width:992px) {
    .resource-list {
        top: 96px;
        max-height: calc(100vh - 112px)
    }
}

.is-fullscreen .resource-list {
    top: 16px;
    max-height: calc(100vh - 100px)
}

.resource-list .panel-body {
    position: relative;
    display: -ms-flexbox !important;
    display: flex !important;
    flex: 0 1 auto !important;
    -ms-flex-direction: column !important;
    flex-direction: column !important;
    overflow: hidden
}

.resource-list .scroll-list {
    flex-shrink: 1 !important;
    flex-grow: 1 !important;
    height: 100%;
    min-height: 0;
    padding: 12px 6px 8px 12px;
    overflow-y: scroll;
    background-color: rgba(245, 245, 245, 0.4);
    -ms-flex-positive: 1 !important;
    -ms-flex-negative: 1 !important
}

.resource-list .scroll-list::-webkit-scrollbar {
    width: 6px;
    background-color: rgba(245, 245, 245, 0.4)
}

.resource-list .scroll-list::-webkit-scrollbar-thumb {
    width: 6px;
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 3px
}

.resource-list .scroll-list::-webkit-scrollbar-thumb:hover {
    background-color: rgba(0, 0, 0, 0.3)
}

.person {
    display: inline-flex;
    -ms-flex: 0 0 33%;
    flex: 0 0 33%;
    flex-direction: column;
    max-width: calc(33.333% - 8px);
    margin: 0 8px 12px 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    color: #343a40;
    cursor: move;
    cursor: -webkit-grab;
    cursor: grab;
    background-color: #fff;
    border: 1px solid #dfe0e1;
    border-radius: 4px;
    box-shadow: 0 1px 0 #d1d2d7
}

.registrant-list .person {
    display: flex;
    flex-direction: column;
    min-width: 100%;
    margin-right: 0
}

.registrant-list .person[data-person-gender="1"] {
    color: #4299e1;
    background-color: #ebf8ff;
    border-color: #4299e1
}

.registrant-list .person[data-person-gender="1"]:hover {
    background-color: #d1efff
}

.registrant-list .person[data-person-gender="2"] {
    color: #ed64a6;
    background-color: #fff5f7;
    border-color: #ed64a6
}

.registrant-list .person[data-person-gender="2"]:hover {
    background-color: #ffdce3
}

.registrant-list .person .registrant-details {
    display: block
}

.registrant-list .person .dropdown {
    display: none
}

.placement-groups .person[data-person-gender="1"] {
    color: #4299e1;
    background-color: #ebf8ff;
    border-color: #4299e1
}

.placement-groups .person[data-person-gender="1"]:hover {
    background-color: #d1efff
}

.placement-groups .person[data-person-gender="2"] {
    color: #ed64a6;
    background-color: #fff5f7;
    border-color: #ed64a6
}

.placement-groups .person[data-person-gender="2"]:hover {
    background-color: #ffdce3
}

.person:hover {
    background: rgba(85, 150, 230, 0.1)
}

.person[data-has-placement-error] {
    color: #e55235;
    background-color: #fcf2f1;
    border-color: #d4442e
}

.person .person-container {
    display: flex;
    flex-wrap: nowrap;
    -ms-flex-pack: justify !important;
    justify-content: space-between !important
}

.person .details-container {
    padding: 6px 8px;
    color: #2d2e31;
    background: rgba(255, 255, 255, 0.8);
    border-bottom-right-radius: 3px;
    border-bottom-left-radius: 3px
}

.person .details-container > div {
    margin-top: 8px
}

.person .details-container > div:first-child {
    margin-top: 0
}

.person dl:not(.dl-horizontal) {
    margin-bottom: 0;
    font-size: 14px
}

.person dl:not(.dl-horizontal) dt {
    margin-top: 8px
}

.person dl:not(.dl-horizontal) dt:first-child {
    margin-top: 0
}

.person .person-name {
    font-weight: 600;
    display: inline-block;
    padding: 6px 8px
}

.person .btn {
    height: 100%;
    padding: 5px 8px;
    color: #d8d8d8;
    background: transparent
}

.person .btn:hover,
.person .btn:focus,
.person .btn:active:focus {
    color: #767676;
    outline: none
}

.person .dropdown-menu {
    font-size: 14px
}

.person.gu-mirror {
    cursor: -moz-grabbing !important;
    cursor: -webkit-grabbing !important;
    cursor: grabbing !important;
    background: rgba(255, 255, 255, 0.8);
    box-shadow: 0 5px 20px 0 rgba(21, 27, 38, 0.08);
    opacity: 1
}

.placement-group .panel-drawer > span {
    display: block;
    padding: 16px;
    font-size: 14px;
    background: #fff;
    border-bottom: 1px solid #eee
}

.placement-group .panel-drawer > span dl {
    margin-bottom: 0
}

.placement-group .panel-drawer > span dl:empty {
    display: none
}

.placement-group .panel-drawer > span dl dt {
    margin-top: 8px
}

.placement-group .panel-drawer > span dl dt:first-child {
    margin-top: 0
}

.person-id-anchor {
    position: relative;
    top: -250px;
    display: block;
    visibility: hidden
}

.panel-inline {
    margin-bottom: 0 !important;
    border: none !important;
    border-radius: 0 !important;
    box-shadow: none !important;
    -webkit-bot-shadow: none !important
}

.panel-inline .panel-heading {
    padding: 8px 16px;
    background-color: rgba(245, 245, 245, 0.8);
    border-top: 1px solid #eee
}

.panel-inline .panel-title {
    font-size: 14px;
    font-weight: 600
}

.panel-drawer + .group-role-members .panel-heading,
.group-role-members:first-child .panel-heading {
    border-top: 0
}

.btn-overflow {
    color: #737475
}

.panel-heading .btn-overflow {
    width: 20px !important;
    text-align: right
} */

/* end */
</style>

<script setup lang="ts">
    import { useConfigurationValues, usePersonPreferences, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { GroupPlacementInitializationBox } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/groupPlacementInitializationBox";
    import { PlacementConfigurationSettingsBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementConfigurationSettingsBag";
    import { PlacementGroupBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/placementGroupBag";
    import { PersonBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/personBag";
    import { onMounted, ref, nextTick, computed, watch, onBeforeUnmount } from "vue";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import { PreferenceKey, SortTypes } from "./GroupPlacement/types.partial";
    import { DragSource as vDragSource, DragTarget as vDragTarget, IDragSourceOptions } from "@Obsidian/Directives/dragDrop";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import PersonCard from "./GroupPlacement/personCard.partial.obs";
    import DestinationGroup from "./GroupPlacement/destinationGroup.partial.obs";
    import PlacementConfigurationModal from "./GroupPlacement/placementConfigurationModal.partial.obs";
    import AddGroupModal from "./GroupPlacement/addGroupModal.partial.obs";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import { newGuid } from "@Obsidian/Utility/guid";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { GroupMemberBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/groupMemberBag";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { asBooleanOrNull } from "@Obsidian/Utility/booleanUtils";
    import { AddGroupBag } from "@Obsidian/ViewModels/Blocks/Group/GroupPlacement/addGroupBag";

    // #region Values
    const box = useConfigurationValues<GroupPlacementInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();
    const preferences = usePersonPreferences().blockPreferences;
    const exampleBox = ref<string>("");

    const arePersonCardsExpanded = ref(false);
    // const areAllPeopleSelected = ref(false);
    const selectionInfoElement = ref<HTMLElement | undefined>();
    const isPlacementConfigModalVisible = ref(false);
    const isAddGroupModalVisible = ref(false);
    const placementGroups = ref<PlacementGroupBag[]>(box.placementGroups ?? []);
    const peopleToPlace = ref<PersonBag[]>(box.peopleToPlace ?? []);
    const selectedPersonIds = ref<Set<number>>(new Set());

    const personAttributesForFilter = ref(box.attributeFilters?.registrantAttributesForFilters ?? {});
    const personAttributeValuesForFilter = ref(box.attributeFilters?.registrantAttributeValuesForFilters ?? {});
    const groupAttributesForFilter = ref(box.attributeFilters?.groupAttributesForFilters ?? {});
    const groupAttributeValuesForFilter = ref(box.attributeFilters?.groupAttributeValuesForFilters ?? {});
    const groupMemberAttributesForFilter = ref(box.attributeFilters?.groupMemberAttributesForFilters ?? {});
    const groupMemberAttributeValuesForFilter = ref(box.attributeFilters?.groupMemberAttributeValuesForFilters ?? {});

    const areGroupsExpanded = ref(placementGroups.value.length > 3 ? false : true);
    const isNoPeopleLabelHidden = ref(false);

    const groupRoleErrors = ref<Record<number, Record<number, string>>>({});

    const currentSortOrder = ref<SortTypes>(toNumberOrNull(preferences.getValue(getSortOrderKey())) as SortTypes ?? SortTypes.SortByLastName);
    const sortOptions: Array<[SortTypes, string]> = [
        [SortTypes.SortByLastName, "Last Name, First Name (Default)"],
        [SortTypes.SortByFirstName, "First Name Last Name"],
        [SortTypes.SortByDateAddedAsc, "Date Added (Oldest First)"],
        [SortTypes.SortByDateAddedDesc, "Date Added (Newest First)"]
    ];

    const addGroupModalElement = ref<InstanceType<typeof AddGroupModal>>();
    const addGroupModalErrorText = ref<string>();

    const isGenderHighlighting = ref<boolean>(asBooleanOrNull(preferences.getValue(getIsGenderHighlightingKey())) ?? false);

    const personDragSourceOptions = getPersonDragSourceOptions();
    const groupMemberDragSourceOptions = getGroupMemberDragSourceOptions();

    const placementConfigurationSettings = ref<PlacementConfigurationSettingsBag>(preferences.getValue(getPlacementConfigurationSettingsKey()) ? JSON.parse(preferences.getValue(getPlacementConfigurationSettingsKey())) : {} as PlacementConfigurationSettingsBag);

    console.log("GroupPlacementInitializationBox", box);

    // #endregion

    // #region Computed Values

    const selectedPeopleCount = computed(() => selectedPersonIds.value.size);

    const areAllPeopleSelected = computed({
        get() {
            return peopleToPlace.value.every(person => {
                if (person.personId) {
                    selectedPersonIds.value.has(person.personId);
                }
            });
        },
        set(value: boolean) {
            if (value) {
                // Select all
                for (const person of peopleToPlace.value) {
                    if (person.personId) {
                        selectedPersonIds.value.add(person.personId);
                    }
                }
            }
        }
    });

    const sortedPeopleToPlace = computed(() => {
        return getSortedPeople(peopleToPlace.value);
    });

    const sortedGroups = computed(() => {
        console.log("Sorting Groups...", placementGroups.value);
        return placementGroups.value.map(group => {
            const validGroupMembers = (group.groupMembers ?? []).filter(m => m?.person);

            const sortedPeople = getSortedPeople(validGroupMembers.map(m => m.person!));

            const memberMap = new Map(
                validGroupMembers.map(m => [m.person!.personId, m])
            );

            const sortedGroupMembers = sortedPeople
                .map(p => memberMap.get(p.personId))
                .filter((m): m is typeof validGroupMembers[number] => !!m);

            return {
                ...group,
                groupMembers: sortedGroupMembers
            };
        });
    });


    // #endregion

    // #region Functions

    function getSortedPeople(people: PersonBag[]): PersonBag[] {
        return [...people].sort((a, b) => {
            switch (currentSortOrder.value) {
                case SortTypes.SortByFirstName: {
                    const firstNameComparison = (a.firstName ?? "").localeCompare(b.firstName ?? "");
                    if (firstNameComparison !== 0) {
                        return firstNameComparison;
                    }
                    return (a.lastName ?? "").localeCompare(b.lastName ?? "");
                }

                case SortTypes.SortByLastName: {
                    const lastNameComparison = (a.lastName ?? "").localeCompare(b.lastName ?? "");
                    if (lastNameComparison !== 0) {
                        return lastNameComparison;
                    }
                    return (a.firstName ?? "").localeCompare(b.firstName ?? "");
                }

                // TODO - Figure out how to sort by date when not in registration mode.
                case SortTypes.SortByDateAddedAsc: {
                    // We'll just grab the first registrant on each person.
                    const dateA = RockDateTime.parseISO(a.registrants?.[0]?.createdDateTime ?? "");
                    const dateB = RockDateTime.parseISO(b.registrants?.[0]?.createdDateTime ?? "");

                    if (dateA && dateB) {
                        return dateA.toMilliseconds() - dateB.toMilliseconds();
                    }
                    else if (dateA && !dateB) {
                        return -1;
                    }
                    else if (!dateA && dateB) {
                        return 1;
                    }

                    return 0;
                }

                case SortTypes.SortByDateAddedDesc: {
                    // We'll just grab the first registrant on each person.
                    const dateA = RockDateTime.parseISO(a.registrants?.[0]?.createdDateTime ?? "");
                    const dateB = RockDateTime.parseISO(b.registrants?.[0]?.createdDateTime ?? "");

                    if (dateA && dateB) {
                        return dateB.toMilliseconds() - dateA.toMilliseconds();
                    }
                    else if (dateA && !dateB) {
                        return -1;
                    }
                    else if (!dateA && dateB) {
                        return 1;
                    }

                    return 0;
                }

                default:
                    return 0;
            }
        });
    }

    function setGroupRoleError(groupId: number, roleId: number, message: string): void {
        if (!groupRoleErrors.value[groupId]) {
            groupRoleErrors.value[groupId] = {};
        }

        groupRoleErrors.value[groupId][roleId] = message;
    }

    function clearGroupRoleError(groupId: number, roleId: number): void {
        const roleMap = groupRoleErrors.value[groupId];

        if (roleMap) {
            delete roleMap[roleId];

            // Clean up empty role maps
            if (Object.keys(roleMap).length === 0) {
                delete groupRoleErrors.value[groupId];
            }
        }
    }

    function getGroupRoleError(groupId: number, roleId: number): string | null {
        return groupRoleErrors.value[groupId]?.[roleId] ?? null;
    }

    function getPersonDragSourceOptions(): IDragSourceOptions {
        return {
            id: newGuid(),
            copyElement: true,
            dragBegin(operation) {
                if (selectedPersonIds.value.size > 1) {
                    nextTick(() => {
                        const mirror = document.querySelector(".gu-mirror") as HTMLElement;
                        if (!mirror) return;

                        mirror.innerHTML = "";
                        // Clone the current content before we touch it
                        const clone = mirror.cloneNode(true) as HTMLElement;

                        // Clean the original mirror and restyle it
                        mirror.classList.add("multi-drag-preview");
                        mirror.style.position = "relative";

                        mirror.innerHTML = `
                            <div class="multi-card-preview">
                            <i class="fa fa-user-friends"></i>
                            </div>
                        `;

                        clone.classList.add("preview-stack-clone");

                        const inner = document.createElement("div");
                        inner.style.position = "relative";
                        inner.style.zIndex = "1";

                        while (mirror.firstChild) {
                            inner.appendChild(mirror.firstChild);
                        }

                        mirror.appendChild(clone);
                        mirror.appendChild(inner);
                    });
                }
            },
            dragOver(operation) {
                if (isGenderHighlighting.value) {
                    nextTick(() => {
                        const transit = document.querySelector(".gu-transit") as HTMLElement;
                        if (!transit) return;
                        transit.style = "display: none";
                    });
                }
                else if (selectedPersonIds.value.size > 1) {
                    nextTick(() => {
                        const transit = document.querySelector(".gu-transit") as HTMLElement;
                        if (!transit) return;

                        transit.innerHTML = "";

                        transit.classList.add("multi-hover-preview");

                        transit.innerHTML = `
                            <div class="multi-card-preview">
                            <i class="fa fa-user-friends"></i>
                            </div>
                        `;
                    });
                }
                if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {
                    operation.targetContainer.closest(".group-role-wrapper")?.classList.add("highlight");

                    const emptyDropZone = operation.targetContainer.querySelector(".empty-drop-zone");

                    if (emptyDropZone) {
                        emptyDropZone.classList.add("is-drag-over");
                    }
                }

            },
            dragOut(operation) {
                if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {
                    operation.targetContainer.closest(".group-role-wrapper")?.classList.remove("highlight");

                    const emptyDropZone = operation.targetContainer.querySelector(".empty-drop-zone");

                    if (emptyDropZone) {
                        emptyDropZone.classList.remove("is-drag-over");
                    }
                }

            },
            async dragDrop(operation) {
                operation.element.remove();

                var rawGroupSectionId = (operation.targetContainer as HTMLElement)?.dataset.groupSectionId;
                const [groupId, groupRoleId] = (rawGroupSectionId ?? "").split(":").map(toNumberOrNull);
                if (!groupId) {
                    return;
                }
                const placementGroup = placementGroups.value.find(g => g.groupId === groupId);
                if (!placementGroup) {
                    return;
                }
                var pendingGroupMembers: GroupMemberBag[] = [];

                if (selectedPersonIds.value.size > 1) {
                    const selectedPeopleToPlace = peopleToPlace.value.filter(p => p.personId && selectedPersonIds.value.has(p.personId));

                    if (selectedPeopleToPlace && groupRoleId && operation.targetIndex !== undefined) {
                        selectedPeopleToPlace.forEach((person) => {
                            pendingGroupMembers.push({
                                groupRoleId: groupRoleId,
                                person: person,
                                groupMemberId: null
                            });
                        });
                    }
                }
                else {
                    const personId = toNumberOrNull((operation.element as HTMLElement).dataset.personId);
                    const person = peopleToPlace.value.find(p => p.personId === personId);

                    if (person && groupRoleId && operation.targetIndex !== undefined) {
                        pendingGroupMembers.push({
                            groupRoleId: groupRoleId,
                            person: person,
                            groupMemberId: null
                        });

                        //TODO - the current display of group members results in incosistency with there array index
                    }
                }

                if (!placementGroup.groupMembers) {
                    placementGroup.groupMembers = [];
                }

                // TODO - what happens on error?
                var newGroupMembers = await addGroupMembersToGroup(pendingGroupMembers, groupId);
                newGroupMembers.forEach((groupMember, i) => {
                    placementGroup.groupMembers!.splice(operation.targetIndex! + i, 0, {
                        groupRoleId: groupMember.groupRoleId,
                        person: groupMember.person,
                        groupMemberId: groupMember.groupMemberId
                    });

                    peopleToPlace.value = peopleToPlace.value.filter(
                        p => groupMember.person?.personId !== p.personId
                    );
                });

                selectedPersonIds.value.clear();
            }
        };
    }

    function getGroupMemberDragSourceOptions(): IDragSourceOptions {
        return {
            id: newGuid(),
            copyElement: true,
            dragOver(operation) {
                if (peopleToPlace.value.length === 0) {
                    isNoPeopleLabelHidden.value = true;
                }
                if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {
                    // TODO - ask UI team if they want this.
                    operation.targetContainer.closest(".people-to-place-card-container")?.classList.add("highlight");
                }
            },
            dragOut(operation) {
                if (operation.targetContainer && operation.targetContainer instanceof HTMLElement) {
                    operation.targetContainer.closest(".people-to-place-card-container")?.classList.remove("highlight");
                }
            },
            dragCancel(operation) {
                isNoPeopleLabelHidden.value = false;
            },
            async dragDrop(operation) {
                operation.element.remove();
                isNoPeopleLabelHidden.value = false;

                const groupId = toNumberOrNull((operation.element as HTMLElement).dataset.groupId);
                const groupMemberId = toNumberOrNull((operation.element as HTMLElement).dataset.groupMemberId);
                var placementGroup = placementGroups.value.find(g => g.groupId === groupId);

                if (!placementGroup?.groupMembers || !groupMemberId) {
                    return;
                }

                const groupMember = placementGroup.groupMembers.find(gm => gm.groupMemberId === groupMemberId);

                if (placementGroup && groupMember && groupMember.person && operation.targetIndex !== undefined) {
                    if (!peopleToPlace.value) {
                        peopleToPlace.value = [];
                    }

                    var isRemoveSuccess = await removeGroupMemberFromGroup(groupMemberId, placementGroup.groupId);

                    if (isRemoveSuccess) {
                        peopleToPlace.value.splice(operation.targetIndex, 0, {
                            ...groupMember.person,
                        });

                        placementGroup.groupMembers = placementGroup.groupMembers.filter(gm => gm.groupMemberId !== groupMemberId);
                    }
                }
            }
        };
    }

    function handleOutsideClick(event: MouseEvent) {
        const clickedEl = event.target as HTMLElement;

        // Only clear if clicked outside a .person-card
        if (!clickedEl.closest(".person-card") && !clickedEl.closest(".prevent-clear")) {
            selectedPersonIds.value.clear();
        }
    }

    function toggleSelection(personId: number) {
        if (selectedPersonIds.value.has(personId)) {
            selectedPersonIds.value.delete(personId);
        }
        else {
            selectedPersonIds.value.add(personId);
        }
    }

    function isSelected(personId: number): boolean {
        return selectedPersonIds.value.has(personId);
    }

    //TODO - buggy behavior
    function toggleSelectAllCheckbox() {
        if (areAllPeopleSelected.value) {
            selectedPersonIds.value.clear();
        }
    }

    function onBack(): void {
        console.log("Back button clicked");
        // window.history.back();
    }

    function changeSort(sortType: SortTypes): void {
        currentSortOrder.value = sortType;
        // Add logic here to apply the sort
        console.log("Sort changed to:", sortType);
    }

    function toggleHighlightGender(): void {
        isGenderHighlighting.value = !isGenderHighlighting.value;
    }

    function toggleDetails(): void {
        console.log("Toggle details");
    }

    function openPlacementConfigSettings(): void {
        console.log("Open placement config settings");
        isPlacementConfigModalVisible.value = true;
    }

    function searchPeople(): void {
        console.log("Search people");
    }

    function openAddGroupModal(): void {
        isAddGroupModalVisible.value = true;
    }

    function toggleCardExpansion(): void {
        arePersonCardsExpanded.value = !arePersonCardsExpanded.value;
        console.log("Card expansion toggled");
    }

    function toggleGroupExpansion(): void {
        areGroupsExpanded.value = !areGroupsExpanded.value;
    }

    function applyPeopleFilter(): void {
        console.log("Apply people filter with value:", exampleBox.value);
        // Implement filter logic here
    }

    function applyGroupFilter(): void {
        console.log("Apply group filter with value:", exampleBox.value);
        // Implement filter logic here
    }

    function getSortOrderKey(): string {
        if (box.registrationInstanceId) {
            return PreferenceKey.SortOrderRegistrationInstanceId.replace("{0}", box.registrationInstanceId.toString());
        }
        else if (box.registrationTemplateId) {
            return PreferenceKey.SortOrderRegistrationTemplateId.replace("{0}", box.registrationTemplateId.toString());
        }
        return "";
    }

    function getIsGenderHighlightingKey(): string {
        if (box.registrationInstanceId) {
            return PreferenceKey.IsGenderHighlightingRegistrationInstanceId.replace("{0}", box.registrationInstanceId.toString());
        }
        else if (box.registrationTemplateId) {
            return PreferenceKey.IsGenderHighlightingRegistrationTemplateId.replace("{0}", box.registrationTemplateId.toString());
        }
        return "";
    }

    function getPlacementConfigurationSettingsKey(): string {
        if (box.registrationInstanceId) {
            return PreferenceKey.PlacementConfigurationJSONRegistrationInstanceId.replace("{0}", box.registrationInstanceId.toString());
        }
        else if (box.registrationTemplateId) {
            return PreferenceKey.PlacementConfigurationJSONRegistrationTemplateId.replace("{0}", box.registrationTemplateId.toString());
        }
        return "";
    }

    async function savePlacementCofigSettings(bag: PlacementConfigurationSettingsBag): Promise<void> {
        console.log("Here is my saved bag: ", bag);
        preferences.setValue(getPlacementConfigurationSettingsKey(), JSON.stringify(bag));

        console.log("Saving preferences: ", preferences);

        await preferences.save();
        // placementConfigurationSettings.value = bag;
        isPlacementConfigModalVisible.value = false;
    }

    // #endregion

    // #region Block Actions

    async function addGroupMembersToGroup(pendingGroupMembers: GroupMemberBag[], groupId: number): Promise<GroupMemberBag[]> {
        const result = await invokeBlockAction<GroupMemberBag[]>("AddGroupMembersToGroup", {
            pendingGroupMembers: pendingGroupMembers,
            registrationTemplatePlacementId: box.registrationTemplatePlacementId ?? "",
            groupId: groupId
        });

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            if (pendingGroupMembers[0].groupRoleId) {
                setGroupRoleError(groupId, pendingGroupMembers[0].groupRoleId, result.errorMessage ?? "Unknown error while trying to add a group member.");
            }
        }
        return [];
    }

    async function removeGroupMemberFromGroup(groupMemberId: number, groupId: number): Promise<boolean> {
        const result = await invokeBlockAction<GroupMemberBag[]>("RemoveGroupMemberFromGroup", {
            groupMemberId: groupMemberId,
            groupId: groupId
        });

        if (result.isSuccess) {
            console.log("Remove group member success.");
            return true;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while trying to remove a group member.");
        }
        return false;
    }

    async function addGroup(addGroupBag: AddGroupBag) {
        // TODO - need to make grouptypeid non nullable
        if (!box.placementGroupType?.id) {
            console.error("Group Type Id required");
            return;
        }

        const result = await invokeBlockAction("AddPlacementGroup", {
            addGroupBag,
            groupTypeId: box.placementGroupType.id,
            registrationInstanceId: box.registrationInstanceId,
            registrationTemplatePlacementId: box.registrationTemplatePlacementId
        });

        if (result.isSuccess) {
            console.log("Add group success.");
            addGroupModalElement.value?.resetForm();
            isAddGroupModalVisible.value = false;
        }
        else {
            addGroupModalErrorText.value = result.errorMessage ?? "Unknown error while adding a group.";
        }
    }

    // #endregion

    // #region Watchers

    watch(selectionInfoElement, element => {
        if (element) {
            tooltip(element);
        }
    });


    watch([currentSortOrder, isGenderHighlighting], async () => {
        preferences.setValue(getSortOrderKey(), currentSortOrder.value.toString());
        preferences.setValue(getIsGenderHighlightingKey(), isGenderHighlighting.value.toString());

        await preferences.save();
    });

    // #endregion

    onMounted(() => {
        document.addEventListener("click", handleOutsideClick);
    });

    onBeforeUnmount(() => {
        document.removeEventListener("click", handleOutsideClick);
    });

</script>