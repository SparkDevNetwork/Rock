<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <EnhancedProgressBar aria-label="Group Scheduler Progress"
                         :progressType="state"
                         :indicators="indicators"
                         :modelValue="[
                            { value: pendingPercentage, opacity: '50%' },
                            { value: confirmedPercentage, text: confirmedPercentage ? `${confirmedPercentage}%` : '' }
                        ]"
                         :tooltip="progressBarTooltip" />
</template>

<!-- These styles cannot be scoped since they're being used in a tooltip. -->
<style>
.group-scheduler-v2 .progress-bar-tooltip {
    min-width: 130px;
}

.group-scheduler-v2 .progress-bar-tooltip-label {
    font-weight: bold;
}

.group-scheduler-v2 .progress-bar-tooltip-responses {
    margin-top: 12px;
}

.group-scheduler-v2 .progress-bar-tooltip-counts {
    margin-top: 4px;
    display: flex;
    justify-content: space-around;
    align-items: center;
}

.group-scheduler-v2 .progress-bar-tooltip-counts > span {
    display: flex;
    align-items: center;
    gap: 6px;
}
</style>

<script setup lang="ts">
    import { computed, nextTick, PropType, ref, watch } from "vue";
    import { IScheduleProgress, ProgressState } from "./types.partial";
    import { tooltip } from "@Obsidian/Utility/tooltip";
    import EnhancedProgressBar from "@Obsidian/Controls/enhancedProgressBar.obs";

    const props = defineProps({
        progress: {
            type: Object as PropType<IScheduleProgress>,
            required: true
        }
    });

    // #region Values

    const progressBarElement = ref<HTMLElement | null>(null);

    // #endregion

    // #region Computed Values

    const indicators = computed<number[]>(() => {
        const i: number[] = [];

        if (showMinimumThreshold.value) {
            i.push(minimumPercentage.value);
        }

        if (showDesiredThreshold.value) {
            i.push(desiredPercentage.value);
        }

        if (showMaximumThreshold.value) {
            i.push(maximumPercentage.value);
        }

        return i;
    });

    const progressBarTooltip = computed((): string => {
        return `<div class='group-scheduler-v2'>
    <div class='progress-bar-tooltip'>
        <div class='progress-bar-tooltip-configured'>
            <span class="progress-bar-tooltip-label">Configured</span>
            <div class='progress-bar-tooltip-counts'>
                <span>
                    <i class='ti ti-minus'></i>
                    ${minimumCapacity.value === 0 ? "-" : minimumCapacity.value}
                </span>
                <span>
                    <i class='ti ti-star'></i>
                    ${desiredCapacity.value === 0 ? "-" : desiredCapacity.value}
                </span>
                <span>
                    <i class='ti ti-plus'></i>
                    ${maximumCapacity.value === 0 ? "-" : maximumCapacity.value}
                </span>
            </div>
        </div>
        <div class='progress-bar-tooltip-responses'>
            <span class="progress-bar-tooltip-label">Responses</span>
            <div class='progress-bar-tooltip-counts'>
                <span><i class='ti ti-calendar-check'></i> ${confirmedCount.value}</span>
                <span><i class='ti ti-calendar-question'></i> ${pendingCount.value}</span>
                <span><i class='ti ti-calendar-x'></i> ${declinedCount.value}</span>
            </div>
        </div>
    </div>
</div>`;
    });

    const minimumCapacity = computed((): number => {
        return props.progress?.minimumCapacity ?? 0;
    });

    const minimumPercentage = computed((): number => {
        return getPercentageOfWhole(minimumCapacity.value);
    });

    const showMinimumThreshold = computed((): boolean => {
        return minimumPercentage.value > 0 && minimumPercentage.value < 100;
    });

    const desiredCapacity = computed((): number => {
        return props.progress?.desiredCapacity ?? 0;
    });

    const desiredPercentage = computed((): number => {
        return getPercentageOfWhole(desiredCapacity.value);
    });

    const showDesiredThreshold = computed((): boolean => {
        return desiredPercentage.value > 0 && desiredPercentage.value < 100;
    });

    const maximumCapacity = computed((): number => {
        return props.progress?.maximumCapacity ?? 0;
    });

    const maximumPercentage = computed((): number => {
        return getPercentageOfWhole(maximumCapacity.value);
    });

    const showMaximumThreshold = computed((): boolean => {
        return maximumPercentage.value > 0
            && maximumPercentage.value < 100
            && totalCount.value > maximumCapacity.value;
    });

    const confirmedCount = computed((): number => {
        return props.progress?.confirmedCount ?? 0;
    });

    const confirmedPercentage = computed((): number => {
        return getPercentageOfWhole(confirmedCount.value);
    });

    const pendingCount = computed((): number => {
        return props.progress?.pendingCount ?? 0;
    });

    const pendingPercentage = computed((): number => {
        const pendingCountForPercentage = pendingCount.value + confirmedCount.value;
        return getPercentageOfWhole(pendingCountForPercentage);
    });

    const declinedCount = computed((): number => {
        return props.progress?.declinedCount ?? 0;
    });

    const totalCount = computed((): number => {
        return confirmedCount.value + pendingCount.value;
    });

    const state = computed((): "danger" | "success" | "critical" | "warning" => {
        const min = minimumCapacity.value;
        const desired = desiredCapacity.value;
        const max = maximumCapacity.value;
        const confirmed = confirmedCount.value;

        let progressState: "danger" | "success" | "critical" | "warning" = ProgressState.danger;
        if (confirmed > 0) {
            progressState = ProgressState.success;
            if (max > 0 && confirmed > max) {
                progressState = ProgressState.critical;
            }
            else if (confirmed < min) {
                progressState = ProgressState.danger;
            }
            else if (confirmed < desired) {
                progressState = ProgressState.warning;
            }
        }

        return progressState;
    });

    const whole = computed((): number => {
        const min = minimumCapacity.value;
        const desired = desiredCapacity.value;
        const max = maximumCapacity.value;
        const filled = totalCount.value;

        let whole = 0;
        if (max > 0) {
            whole = max;
        }
        else if (desired > 0) {
            whole = desired;
        }
        else if (min > 0) {
            whole = min;
        }

        if (filled > whole) {
            whole = filled;
        }

        return whole;
    });

    // #endregion

    // #region Functions

    /**
     * Gets the part's percentage of the whole.
     *
     * @param part The part whose percentage should be calculated.
     */
    function getPercentageOfWhole(part: number): number {
        if (whole.value > 0) {
            /*
                11/6/2023 - JPH

                Although the original design specified to show min/desired/max threshold "ticks" to
                the left of the spot that will satisfy a given value, a bug was opened requesting
                to show them to the right of said value.

                Reason: Clarify min/desired/max threshold "ticks".
                https://github.com/SparkDevNetwork/Rock/issues/5662
            */

            var percentage = Math.floor(part / whole.value * 100);
            return percentage > 100 ? 100 : percentage;
        }

        return 0;
    }

    /**
     * Configures the progress bar tooltip.
     */
    function configureTooltip(): void {
        nextTick(() => {
            if (progressBarElement.value) {
                tooltip(progressBarElement.value, { html: true });
            }
        });

    }

    // #endregion

    watch([
        minimumCapacity,
        desiredCapacity,
        maximumCapacity,
        confirmedCount,
        pendingCount,
        declinedCount
    ], () => {
        configureTooltip();
    });

    configureTooltip();
</script>
