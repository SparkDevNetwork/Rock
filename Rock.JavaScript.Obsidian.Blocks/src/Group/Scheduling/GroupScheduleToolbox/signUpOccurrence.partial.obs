<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div v-if="signUpOccurrence" :class="occurrenceCssClass">
        <div class="flex-fill d-flex flex-column flex-sm-row flex-wrap justify-content-sm-start align-items-sm-center schedule-toolbox-sign-up-occurrence-controls">
            <CheckBox v-model="isChecked"
                      label=""
                      :text="text"
                      :title="title"
                      :disabled="isDisabled">
                <template v-if="peopleNeededText" #textAppend>
                    <span class="text-muted small schedule-signup-people-needed">
                        {{ peopleNeededText }}
                    </span>
                </template>
            </CheckBox>

            <DropDownList v-if="isLocationListVisible"
                          v-model="selectedLocationGuid"
                          label=""
                          inputClasses="input-sm"
                          :items="locationItems"
                          :showBlankItem="false"
                          :disabled="isDisabled" />

            <RockButton v-if="isChecked"
                        :btnType="BtnType.Primary"
                        :btnSize="BtnSize.ExtraSmall"
                        :disabled="isDisabled"
                        @click="onSaveClick">
                Save
            </RockButton>
        </div>

        <div :class="checkCssClass">
            <i class='fa fa-check'></i>
        </div>
    </div>
</template>

<style scoped>
.schedule-toolbox-sign-up-occurrence {
    border-radius: 6px;
    padding: 0 12px;
    margin-left: 12px;
    background-color: transparent;
    transition: background-color 1s linear;
}

.schedule-toolbox-sign-up-occurrence.sign-up-save-success {
    background-color: #EEFDF8;
    transition: background-color 0s linear;
}

.schedule-toolbox-sign-up-occurrence-controls {
    gap: 12px;
}

.schedule-toolbox-sign-up-occurrence-check {
    margin-left: 12px;
    transition: color 0s linear;
}

.schedule-toolbox-sign-up-occurrence-check.not-signed-up {
    color: transparent !important;
    transition: color 1s linear;
}
</style>

<script setup lang="ts">
    import { computed, inject, PropType, ref, watch } from "vue";
    import { IsSavingSignUp, SaveSignUpErrorMessage, SelectedGroup, SelectedPersonGuid, SelectedSignUpKey } from "./types.partial";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { pluralize } from "@Obsidian/Utility/stringUtils";
    import { SaveSignUpRequestBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/saveSignUpRequestBag";
    import { SaveSignUpResponseBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/saveSignUpResponseBag";
    import { SignUpOccurrenceBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpOccurrenceBag";
    import { SignUpOccurrenceLocationBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpOccurrenceLocationBag";
    import { SignUpsBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { Guid } from "@Obsidian/Types";

    const invokeBlockAction = useInvokeBlockAction();

    const props = defineProps({
        occurrence: {
            type: Object as PropType<SignUpOccurrenceBag>,
            required: true
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "updatedSignUps", signUps: SignUpsBag | null | undefined): void;
    }>();

    // #region Values

    /** The selected person unique identifier (or empty string if none selected). */
    const selectedPersonGuidOrEmptyString = inject(SelectedPersonGuid, ref(""));

    const selectedGroup = inject(SelectedGroup);

    /** The currently-selected sign-up key (which might not be this one). */
    const selectedSignUpKey = inject(SelectedSignUpKey, ref(""));

    const signUpOccurrence = ref<SignUpOccurrenceBag | null | undefined>(props.occurrence);

    const isChecked = ref(false);
    const selectedLocationGuid = ref<Guid>(getFirstLocationOrEmptyGuid(props.occurrence));

    const isSavingSignUp = inject(IsSavingSignUp, ref(false));
    const saveSignUpErrorMessage = inject(SaveSignUpErrorMessage, ref(""));

    const wasSaved = ref(false);
    let successStylesTimeoutID: NodeJS.Timeout;

    // #endregion Values

    // #region Computed Values

    const signUpKey = computed((): string => {
        const o = signUpOccurrence.value;
        return `${o?.groupGuid}-${o?.scheduleGuid}-${o?.occurrenceDateTime}`;
    });

    const occurrenceCssClass = computed((): string => {
        return `d-flex align-items-center schedule-toolbox-sign-up-occurrence${wasSaved.value ? " sign-up-save-success" : ""}`;
    });

    const text = computed((): string => {
        return signUpOccurrence.value?.formattedScheduleName ?? "";
    });

    const peopleNeededText = computed((): string => {
        let peopleNeededCount = signUpOccurrence.value?.peopleNeededCount ?? 0;
        return peopleNeededCount > 0
            ? `(${peopleNeededCount} ${pluralize("person", peopleNeededCount)} needed)`
            : "";
    });

    const title = computed((): string => {
        return signUpOccurrence.value?.scheduleName ?? "";
    });

    const locationItems = computed((): ListItemBag[] => {
        return signUpOccurrence.value?.locations
            ?.filter((location: SignUpOccurrenceLocationBag) => location?.locationName && location?.locationGuid)
            .map((location: SignUpOccurrenceLocationBag) => ({
                text: location.locationName,
                value: location.locationGuid
            })) ?? [];
    });

    const isLocationListVisible = computed((): boolean => {
        return locationItems.value.length > 1 && isChecked.value;
    });

    const checkCssClass = computed((): string => {
        return `text-success schedule-toolbox-sign-up-occurrence-check${!wasSaved.value ? " not-signed-up" : ""}`;
    });

    const isDisabled = computed((): boolean => {
        return props.disabled || isSavingSignUp.value || wasSaved.value;
    });

    // #endregion Computed Values

    // #region Functions

    /**
     * Gets the first occurrence location Guid or an empty guid if not found.
     *
     * @param occurrence The occurrence from which to get the first location guid.
     */
    function getFirstLocationOrEmptyGuid(occurrence: SignUpOccurrenceBag | null | undefined): Guid {
        return occurrence?.locations?.length
            ? toGuidOrNull(occurrence.locations[0].locationGuid) ?? emptyGuid
            : emptyGuid;
    }

    // #endregion Functions

    // #region Event Handlers

    /**
     * Called when the save button is clicked.
     */
    async function onSaveClick(): Promise<void> {
        if (isSavingSignUp.value) {
            return;
        }

        clearTimeout(successStylesTimeoutID);

        isSavingSignUp.value = true;
        saveSignUpErrorMessage.value = "";

        const bag: SaveSignUpRequestBag = {
            selectedPersonGuid: toGuidOrNull(selectedPersonGuidOrEmptyString.value) ?? emptyGuid,
            selectedGroupGuid: toGuidOrNull(selectedGroup?.value?.guid) ?? emptyGuid,
            selectedScheduleGuid: toGuidOrNull(signUpOccurrence.value?.scheduleGuid) ?? emptyGuid,
            selectedLocationGuid: toGuidOrNull(selectedLocationGuid.value) ?? emptyGuid,
            occurrenceDateTime: signUpOccurrence.value?.occurrenceDateTime
        };

        const result = await invokeBlockAction<SaveSignUpResponseBag>("SaveSignUp", { bag });

        if (!result.isSuccess) {
            saveSignUpErrorMessage.value = result.errorMessage || `Unknown error while trying to ${isChecked.value ? "save" : "delete"} sign-up.`;
            isSavingSignUp.value = false;
            return;
        }

        if (result.data?.saveError) {
            saveSignUpErrorMessage.value = result.data.saveError;

            // Emit the updated sign-ups (to remove this one from the list or
            // update its locations) and reenable any remaining sign-ups.
            emit("updatedSignUps", result.data.signUps);
            isSavingSignUp.value = false;
            return;
        }

        wasSaved.value = true;
        const updatedSignUps = result.data?.signUps;
        successStylesTimeoutID = setTimeout(() => {
            // Allow time for the success animation to display, then emit the
            // updated sign-ups (to remove this one from the list) and reenable
            // any remaining sign-ups.
            emit("updatedSignUps", updatedSignUps);
            isSavingSignUp.value = false;
        }, 1000);
    }

    // #endregion Event Handlers

    // #region Watchers

    watch(isChecked, () => {
        if (isChecked.value) {
            selectedSignUpKey.value = signUpKey.value;
        }
    });

    watch(selectedSignUpKey, () => {
        if (signUpKey.value !== selectedSignUpKey.value && isChecked.value) {
            isChecked.value = false;
        }
    });

    // #endregion Watchers
</script>
