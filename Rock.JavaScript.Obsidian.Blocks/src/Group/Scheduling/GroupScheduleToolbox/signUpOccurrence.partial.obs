<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div :class="occurrenceCssClass">
        <div class="flex-fill d-flex flex-column flex-sm-row flex-wrap justify-content-sm-between align-items-sm-center">
            <CheckBox v-model="isChecked"
                      label=""
                      :text="text"
                      :title="title"
                      :disabled="disabled || isSavingSignUp"
                      @update:modelValue="onSignUpChanged">
                <template v-if="peopleNeededText" #textAppend>
                    <span class="text-muted small schedule-signup-people-needed">
                        {{ peopleNeededText }}
                    </span>
                </template>
            </CheckBox>

            <DropDownList v-if="isLocationListVisible"
                          v-model="selectedLocationGuid"
                          formGroupClasses="input-sm"
                          :items="locationItems"
                          :disableLabel="true"
                          :showBlankItem="false"
                          :disabled="disabled || isSavingSignUp"
                          @update:modelValue="onSignUpChanged" />
        </div>

        <div :class="checkCssClass">
            <i class='fas fa-check'></i>
        </div>
    </div>
</template>

<style scoped>
.schedule-toolbox-sign-up-occurrence {
    border-radius: 6px;
    padding: 0 12px;
    margin-left: 12px;
    background-color: transparent;
    transition: background-color 1s linear;

    &.sign-up-save-success {
        background-color: #EEFDF8;
        transition: background-color 0s linear;
    }
}

.schedule-toolbox-sign-up-occurrence-check {
    transition: color 0s linear;

    &.not-signed-up {
        color: transparent !important;
        transition: color 1s linear;
    }
}
</style>

<script setup lang="ts">
    import { computed, inject, nextTick, PropType, ref } from "vue";
    import { SaveSignUpErrorMessage, SelectedGroup, SelectedPersonGuid } from "./types.partial";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import { pluralize } from "@Obsidian/Utility/stringUtils";
    import { SaveSignUpRequestBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/saveSignUpRequestBag";
    import { SaveSignUpResponseBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/saveSignUpResponseBag";
    import { SignUpOccurrenceBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpOccurrenceBag";
    import { SignUpOccurrenceLocationBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpOccurrenceLocationBag";
    import { SignUpsBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduleToolbox/signUpsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const invokeBlockAction = useInvokeBlockAction();

    const props = defineProps({
        occurrence: {
            type: Object as PropType<SignUpOccurrenceBag>,
            required: true
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "updatedSignUps", signUps: SignUpsBag | null | undefined): void
    }>();

    // #region Values

    const selectedPersonGuid = inject(SelectedPersonGuid, ref(""));
    const selectedGroup = inject(SelectedGroup);

    const isChecked = ref(false);
    let oldIsChecked = isChecked.value;

    const selectedLocationGuid = ref(props.occurrence?.locations?.length ? props.occurrence.locations[0].locationGuid ?? emptyGuid : emptyGuid);
    let oldSelectedLocationGuid = selectedLocationGuid.value;

    const isSavingSignUp = ref(false);
    const saveSignUpErrorMessage = inject(SaveSignUpErrorMessage, ref(""));

    const areSuccessStylesVisible = ref(false);
    let successStylesTimeoutID: NodeJS.Timeout;

    // #endregion Values

    // #region Computed Values

    const occurrenceCssClass = computed((): string => {
        return `d-flex align-items-center schedule-toolbox-sign-up-occurrence${areSuccessStylesVisible.value ? " sign-up-save-success" : ""}`;
    });

    const text = computed((): string => {
        return props.occurrence?.formattedScheduleName ?? "";
    });

    const peopleNeededText = computed((): string => {
        let peopleNeededCount = props.occurrence?.peopleNeededCount ?? 0;
        if (peopleNeededCount > 0 && isChecked.value) {
            peopleNeededCount--;
        }

        return peopleNeededCount > 0
            ? `(${peopleNeededCount} ${pluralize("people", peopleNeededCount)} needed)`
            : "";
    });

    const title = computed((): string => {
        return props.occurrence?.scheduleName ?? "";
    });

    const locationItems = computed((): ListItemBag[] => {
        return props.occurrence?.locations
            ?.filter((location: SignUpOccurrenceLocationBag) => location?.locationName && location?.locationGuid)
            .map((location: SignUpOccurrenceLocationBag) => ({
                text: location.locationName,
                value: location.locationGuid
            })) ?? [];
    });

    const isLocationListVisible = computed((): boolean => {
        return locationItems.value.length > 1 && isChecked.value;
    });

    const checkCssClass = computed((): string => {
        return `text-success schedule-toolbox-sign-up-occurrence-check${!areSuccessStylesVisible.value ? " not-signed-up" : ""}`;
    });

    // #endregion Computed Values

    // #region Functions

    /**
     * Restores the old values after a save failure.
     */
    function restoreOldValues(): void {
        isChecked.value = oldIsChecked;
        selectedLocationGuid.value = oldSelectedLocationGuid;

        nextTick(() => {
            // Wait for DOM updates to complete before setting this back to false
            // so we don't repeatedly call the block action method.
            isSavingSignUp.value = false;
        });
    }

    // #endregion Functions

    // #region Event Handlers

    /**
     * Handles the 'update:modelValue' event of the sign-up occurrence controls.
     */
    async function onSignUpChanged(): Promise<void> {
        if (isSavingSignUp.value) {
            return;
        }

        clearTimeout(successStylesTimeoutID);

        isSavingSignUp.value = true;
        saveSignUpErrorMessage.value = "";

        const bag: SaveSignUpRequestBag = {
            selectedPersonGuid: selectedPersonGuid.value,
            selectedGroupGuid: selectedGroup?.value?.guid,
            selectedScheduleGuid: props.occurrence?.scheduleGuid,
            selectedLocationGuid: selectedLocationGuid.value,
            occurrenceDateTime: props.occurrence?.occurrenceDateTime,
            isSigningUp: isChecked.value
        };

        const result = await invokeBlockAction<SaveSignUpResponseBag>("SaveSignUp", { bag });

        if (!result.isSuccess) {
            saveSignUpErrorMessage.value = result.errorMessage || `Unknown error while trying to ${isChecked.value ? "save" : "delete"} sign-up.`;
            restoreOldValues();
            return;
        }

        if (result.data?.saveError) {
            saveSignUpErrorMessage.value = result.data.saveError;
            emit("updatedSignUps", result.data.signUps);
            restoreOldValues();
            return;
        }

        // Update the "old" values for next time.
        oldIsChecked = isChecked.value;
        oldSelectedLocationGuid = selectedLocationGuid.value;

        areSuccessStylesVisible.value = true;
        successStylesTimeoutID = setTimeout(() => areSuccessStylesVisible.value = false, 1000);

        isSavingSignUp.value = false;
    }

    // #endregion Event Handlers
</script>
