<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockForm @submit="onSave">
        <Panel type="block">

            <NotificationBox v-if="blockError" alertType="warning">{{ blockError }}</NotificationBox>
            <NotificationBox v-if="errorMessage" alertType="danger">{{ errorMessage }}</NotificationBox>

            <div v-if="!blockError">
                <div v-if="resultLavaTemplate" v-html="resultLavaTemplate"></div>
                <EditPanel v-else v-model="groupRegistrationBag" :options="options" />
            </div>

            <template #footerActions v-if="!resultLavaTemplate && !blockError">
                <RockButton :btnSize="BtnSize.Default" :btnType="BtnType.Primary" :disabled="isRegistering" type="submit">
                    {{ buttonText }}
                </RockButton>
            </template>

        </Panel>
    </RockForm>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import EditPanel from "./GroupRegistration/editPanel.partial.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { GroupRegistrationBlockBox } from "@Obsidian/ViewModels/Blocks/Group/GroupRegistration/groupRegistrationBlockBox";
    import { GroupRegistrationBag } from "@Obsidian/ViewModels/Blocks/Group/GroupRegistration/groupRegistrationBag";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";

    const config = useConfigurationValues<GroupRegistrationBlockBox>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const blockError = ref("");
    const errorMessage = ref("");

    const groupRegistrationBag = ref<GroupRegistrationBag>({
        // Set initial properties.
        isMessagingEnabled: false,
        spouseIsMessagingEnabled: false,
    });
    const resultLavaTemplate = ref<string>("");
    const buttonText = ref(config.registerButtonAltText ?? "Register");
    const isRegistering = ref(false);

    // #endregion

    // #region Computed Values

    /**
     * The entity name to display in the block panel.
     */
    const panelName = computed((): string => {
        return "Group Registration";
    });

    const options = computed((): GroupRegistrationBlockBox => {
        return config ?? { autoFill: true, isEmailRequired: true, isMobilePhoneRequired: false, openSpots: 2 };
    });

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for the panel's Save event. Send the data to the server
     * to be saved and then leave edit mode or redirect to target page.
     *
     * @returns true if the panel should leave edit mode; false if it should stay in edit mode; or a string containing a redirect URL.
     */
    async function onSave(): Promise<void> {
        errorMessage.value = "";
        isRegistering.value = true;

        const result = await invokeBlockAction<string>("Save", {
            groupRegistrationBag: groupRegistrationBag.value
        });
        isRegistering.value = false;

        if (result.isSuccess && result.data) {

            if (result.statusCode === 200 && typeof result.data === "string") {
                resultLavaTemplate.value = result.data;
            }
            else if (result.statusCode === 201 && typeof result.data === "string") {
                window.location.href = makeUrlRedirectSafe(result.data);
            }
        }
        else {
            errorMessage.value = result.errorMessage ?? "Unknown error while trying to save group.";
        }
    }

    // #endregion

    // Handle any initial error conditions or the need to go into edit mode.
    if (config.errorMessage) {
        blockError.value = config.errorMessage;
    }
    else if (!config.entity) {
        blockError.value = "The specified group could not be viewed.";
    }
    else {
        groupRegistrationBag.value = config.entity;
    }

</script>
