// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;

using Rock.Attribute;
using Rock.Data;
using Rock.Model;
using Rock.Obsidian.UI;
using Rock.Security;
using Rock.ViewModels.Blocks;
using Rock.ViewModels.Blocks.{{ DomainNamespace }}.{{ EntityName }}List;
using Rock.Web.Cache;

namespace Rock.Blocks.{{ DomainNamespace }}
{
    /// <summary>
    /// Displays a list of {{ EntityName | SplitCase | Downcase | Pluralize }}.
    /// </summary>

    [DisplayName( "{{ EntityName | SplitCase }} List" )]
    [Category( "{{ Domain }}" )]
    [Description( "Displays a list of {{ EntityName | SplitCase | Downcase | Pluralize }}." )]
    [IconCssClass( "fa fa-list" )]
    // [SupportedSiteTypes( Model.SiteType.Web )]

    [LinkedPage( "Detail Page",
        Description = "The page that will show the {{ EntityName | SplitCase | Downcase }} details.",
        Key = AttributeKey.DetailPage )]

    [Rock.SystemGuid.EntityTypeGuid( "{{ '' | UniqueIdentifier }}" )]
    [Rock.SystemGuid.BlockTypeGuid( "{{ '' | UniqueIdentifier }}" )]
    [CustomizedGrid]
    public class {{ EntityName }}List : RockEntityListBlockType<{{ EntityName }}>
    {
        #region Keys

        private static class AttributeKey
        {
            public const string DetailPage = "DetailPage";
        }

        private static class NavigationUrlKey
        {
            public const string DetailPage = "DetailPage";
        }

        #endregion Keys

        #region Methods

        /// <inheritdoc/>
        public override object GetObsidianBlockInitialization()
        {
            var box = new ListBlockBox<{{ EntityName }}ListOptionsBag>();
            var builder = GetGridBuilder();

            box.IsAddEnabled = GetIsAddEnabled();
            box.IsDeleteEnabled = {% if ShowDelete == true %}{% if UseEntitySecurity == true %}true{% else %}BlockCache.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson ){% endif %}{% else %}false{% endif %};
            box.ExpectedRowCount = {% if ExpectedRowCount == null %}null{% else %}{{ ExpectedRowCount }}{% endif %};
            box.NavigationUrls = GetBoxNavigationUrls();
            box.Options = GetBoxOptions();
            box.GridDefinition = builder.BuildDefinition();

            return box;
        }

        /// <summary>
        /// Gets the box options required for the component to render the list.
        /// </summary>
        /// <returns>The options that provide additional details to the block.</returns>
        private {{ EntityName }}ListOptionsBag GetBoxOptions()
        {
            var options = new {{ EntityName }}ListOptionsBag();

            return options;
        }

        /// <summary>
        /// Determines if the add button should be enabled in the grid.
        /// <summary>
        /// <returns>A boolean value that indicates if the add button should be enabled.</returns>
        private bool GetIsAddEnabled()
        {{ "{" }}{% if UseEntitySecurity == "true" %}
            var entity = new {{ EntityName }}();

            return entity.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson );{% else %}
            return BlockCache.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson );{% endif %}
        }

        /// <summary>
        /// Gets the box navigation URLs required for the page to operate.
        /// </summary>
        /// <returns>A dictionary of key names and URL values.</returns>
        private Dictionary<string, string> GetBoxNavigationUrls()
        {
            return new Dictionary<string, string>
            {
                [NavigationUrlKey.DetailPage] = this.GetLinkedPageUrl( AttributeKey.DetailPage, "{{ EntityName }}Id", "((Key))" )
            };
        }

        /// <inheritdoc/>
        protected override IQueryable<{{ EntityName }}> GetListQueryable( RockContext rockContext )
        {
            return base.GetListQueryable( rockContext ){% for column in Columns %}{% if column.IsEntity == true %}
                .Include( a => a.{{ column.Name }} ){% endif %}{% endfor %};
        }

        /// <inheritdoc/>
        protected override GridBuilder<{{ EntityName }}> GetGridBuilder()
        {
            return new GridBuilder<{{ EntityName }}>()
                .WithBlock( this )
                .AddTextField( "idKey", a => a.IdKey ){% for column in Columns %}
                {{ column.AddFieldCode }}{% endfor %}{% if ToolTipSource and ToolTipSource != empty %}
                .AddTextField( "{{ ToolTipSource | CamelCase }}", a => a.{{ ToolTipSource }} ){% endif %}{% if UseIsSystem == true %}
                .AddField( "isSystem", a => a.IsSystem ){% endif %}{% if ShowSecurity == true %}
                .AddField( "isSecurityDisabled", a => !a.IsAuthorized( Authorization.ADMINISTRATE, RequestContext.CurrentPerson ) ){% endif %}{% if UseAttributeValues == true %}
                .AddAttributeFields( GetGridAttributes() ){% endif %};
        }

        #endregion

        #region Block Actions{% if ShowReorder == true %}

        /// <summary>
        /// Changes the ordered position of a single item.
        /// </summary>
        /// <param name="key">The identifier of the item that will be moved.</param>
        /// <param name="beforeKey">The identifier of the item it will be placed before.</param>
        /// <returns>An empty result that indicates if the operation succeeded.</returns>
        [BlockAction]
        public BlockActionResult ReorderItem( string key, string beforeKey )
        {
            using ( var rockContext = new RockContext() )
            {
                // Get the queryable and make sure it is ordered correctly.
                var qry = GetListQueryable( rockContext );
                qry = GetOrderedListQueryable( qry, rockContext );

                // Get the entities from the database.
                var items = GetListItems( qry, rockContext );

                if ( !items.ReorderEntity( key, beforeKey ) )
                {
                    return ActionBadRequest( "Invalid reorder attempt." );
                }

                rockContext.SaveChanges();

                return ActionOk();
            }
        }{% endif %}{% if ShowDelete == true %}

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="key">The identifier of the entity to be deleted.</param>
        /// <returns>An empty result that indicates if the operation succeeded.</returns>
        [BlockAction]
        public BlockActionResult Delete( string key )
        {
            using ( var rockContext = new RockContext() )
            {
                var entityService = new {{ ServiceName }}( rockContext );
                var entity = entityService.Get( key, !PageCache.Layout.Site.DisablePredictableIds );

                if ( entity == null )
                {
                    return ActionBadRequest( $"{{ '{' }}{{ EntityName }}.FriendlyTypeName} not found." );
                }

                if ( !{% if UseEntitySecurity == true %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson ) )
                {
                    return ActionBadRequest( $"Not authorized to delete ${{'{'}}{{ EntityName }}.FriendlyTypeName}." );
                }

                if ( !entityService.CanDelete( entity, out var errorMessage ) )
                {
                    return ActionBadRequest( errorMessage );
                }

                entityService.Delete( entity );
                rockContext.SaveChanges();

                return ActionOk();
            }
        }{% endif %}

        #endregion
    }
}
