<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <fieldset>{% if UseName == true or UseIsActive == true %}
        <div class="row">{% if UseName == true %}
            <div class="col-md-6">
                <TextBox v-model="name"
                         label="Name"
                         rules="required" />
            </div>{% endif %}
{% if UseIsActive == true %}
            <div class="col-md-6">
                <CheckBox v-model="isActive"
                          label="Active" />
            </div>{% endif %}
        </div>{% endif %}{% if UseDescription == true %}

        <TextBox v-model="description"
                 label="Description"
                 textMode="multiline" />{% endif %}{% if UseAttributeValues == true %}

        <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :numberOfColumns="2" />{% endif %}
    </fieldset>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";{% if UseAttributeValues == true %}
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";{% endif %}{% if UseIsActive == true %}
    import CheckBox from "@Obsidian/Controls/checkBox.obs";{% endif %}{% if UseDescription == true or UseName == true %}
    import TextBox from "@Obsidian/Controls/textBox.obs";{% endif %}
    import { setPropertiesBoxValue{% if UseAttributeValues == true %}, watchPropertyChanges{% endif %} } from "@Obsidian/Utility/block";
    import { propertyRef, updateRefValue } from "@Obsidian/Utility/component";
    import { {{ EntityName }}Bag } from "@Obsidian/ViewModels/Blocks/{{ DomainNamespace }}/{{ EntityName }}Detail/{{ EntityName | CamelCase }}Bag";
    import { {{ EntityName }}DetailOptionsBag } from "@Obsidian/ViewModels/Blocks/{{ DomainNamespace }}/{{ EntityName }}Detail/{{ EntityName | CamelCase }}DetailOptionsBag";
    import { ValidPropertiesBox } from "@Obsidian/ViewModels/Utility/validPropertiesBox";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ValidPropertiesBox<{{ EntityName }}Bag>>,
            required: true
        },

        options: {
            type: Object as PropType<{{ EntityName }}DetailOptionsBag>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ValidPropertiesBox<{{ EntityName }}Bag>): void{% if UseAttributeValues == true %},
        (e: "propertyChanged", value: string): void{% endif %}
    }>();

    // #region Values
{% if UseAttributeValues == true %}
    const attributes = ref(props.modelValue.bag?.attributes ?? {});
    const attributeValues = ref(props.modelValue.bag?.attributeValues ?? {});{% endif %}{% if UseDescription == true %}
    const description = propertyRef(props.modelValue.bag?.description ?? "", "Description");{% endif %}{% if UseIsActive == true %}
    const isActive = propertyRef(props.modelValue.bag?.isActive ?? false, "IsActive");{% endif %}{% if UseName == true %}
    const name = propertyRef(props.modelValue.bag?.name ?? "", "Name");{% endif %}

    // The properties that are being edited. This should only contain
    // objects returned by propertyRef().
    {% assign propNames = '' -%}
    {% if UseDescription == true %}{% assign propNames = propNames | AddToArray:'description' %}{% endif -%}
    {% if UseIsActive == true %}{% assign propNames = propNames | AddToArray:'isActive' %}{% endif -%}
    {% if UseName == true %}{% assign propNames = propNames | AddToArray:'name' %}{% endif -%}
    const propRefs = [{{ propNames | Join:', ' }}];

    // #endregion

    // #region Computed Values

    // #endregion

    // #region Functions

    // #endregion

    // #region Event Handlers

    // #endregion

    // Watch for parental changes in our model value and update all our values.
    watch(() => props.modelValue, () => {{ '{' }}{% if UseAttributeValues == true %}
        updateRefValue(attributes, props.modelValue.bag?.attributes ?? {});
        updateRefValue(attributeValues, props.modelValue.bag?.attributeValues ?? {});{% endif %}{% if UseDescription == true %}
        updateRefValue(description, props.modelValue.bag?.description ?? "");{% endif %}{% if UseIsActive == true %}
        updateRefValue(isActive, props.modelValue.bag?.isActive ?? false);{% endif %}{% if UseName == true %}
        updateRefValue(name, props.modelValue.bag?.name ?? "");{% endif %}
    });

    // Determines which values we want to track changes on (defined in the
    // array) and then emit a new object defined as newValue.
    {% assign propNames = '' -%}
    {% if UseAttributeValues == true %}{% assign propNames = propNames | AddToArray:'attributeValues' %}{% endif -%}
    {% assign propNames = propNames | AddToArray:'...propRefs' -%}
    watch([{{ propNames | Join:', ' }}], () => {
        const newValue: ValidPropertiesBox<{{ EntityName }}Bag> = {
            bag: { ...props.modelValue.bag } as {{ EntityName }}Bag
        };
        {% if UseAttributeValues == true %}
            setPropertiesBoxValue(newValue, "attributeValues", attributeValues.value);{% endif %}{% if UseDescription == true %}
            setPropertiesBoxValue(newValue, "description", description.value);{% endif %}{% if UseIsActive == true %}
            setPropertiesBoxValue(newValue, "isActive", isActive.value);{% endif %}{% if UseName == true %}
            setPropertiesBoxValue(newValue, "name", name.value);{% endif %}

        emit("update:modelValue", newValue);
    });{% if UseAttributeValues == true %}

    // Watch for any changes to props that represent properties and then
    // automatically emit which property changed.
    watchPropertyChanges(propRefs, emit);{% endif %}
</script>
