<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Quartz</name>
    </assembly>
    <members>
        <member name="T:Quartz.Impl.AdoJobStore.LockException">
            <summary>
            Exception class for when there is a failure obtaining or releasing a
            resource lock.
            </summary>
            <seealso cref="T:Quartz.Impl.AdoJobStore.ISemaphore"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.JobPersistenceException">
            <summary>
            An exception that is thrown to indicate that there has been a failure in the
            scheduler's underlying persistence mechanism.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.SchedulerException">
            <summary> 
            Base class for exceptions thrown by the Quartz <see cref="T:Quartz.IScheduler"/>.
            </summary>
            <remarks>
            SchedulerExceptions may contain a reference to another
            <see cref="T:System.Exception"/>, which was the underlying cause of the SchedulerException.
            </remarks>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.SchedulerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:Quartz.SchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Quartz.SchedulerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Quartz.SchedulerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Quartz.SchedulerException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String)">
            <summary> <para>
            Create a <see cref="T:Quartz.JobPersistenceException"/> with the given message.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.JobPersistenceException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Quartz.JobPersistenceException.#ctor(System.String,System.Exception)">
            <summary> <para>
            Create a <see cref="T:Quartz.JobPersistenceException"/> with the given message
            and cause.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.LockException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.LockException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.IDriverDelegate">
            <summary>
            This is the base interface for all driver delegate classes.
            </summary>
            <remarks>
            <para>
            This interface is very similar to the <see cref="T:Quartz.Spi.IJobStore"/>
            interface except each method has an additional <see cref="T:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder"/>
            parameter.
            </para>
            <para>
            Unless a database driver has some <strong>extremely-DB-specific</strong>
            requirements, any IDriverDelegate implementation classes should extend the
            <see cref="T:Quartz.Impl.AdoJobStore.StdAdoDelegate"/> class.
            </para>
            </remarks>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.Initialize(Quartz.Impl.AdoJobStore.DelegateInitializationArgs)">
            <summary>
            Initializes the driver delegate with configuration data.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerStatesFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.String)">
            <summary>
            Update all triggers having one of the two given states, to the given new
            state.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="newState">The new state for the triggers</param>
            <param name="oldState1">The first old state to update</param>
            <param name="oldState2">The second old state to update</param>
            <returns>Number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectMisfiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Int64)">
            <summary>
            Get the names of all of the triggers that have misfired - according to
            the given timestamp.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="timestamp">The timestamp.</param>
            <returns>An array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.HasMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.Int64)">
            <summary>
            Get the names of all of the triggers in the given state that have
            misfired - according to the given timestamp.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="state">The state.</param>
            <param name="ts">The time stamp.</param>
            <returns>An array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectMisfiredTriggersInGroupInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.Int64)">
            <summary>
            Get the names of all of the triggers in the given group and state that
            have misfired - according to the given timestamp.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="groupName">Name of the group.</param>
            <param name="state">The state.</param>
            <param name="ts">The timestamp.</param>
            <returns>An array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggersForRecoveringJobs(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary> 
            Select all of the triggers for jobs that are requesting recovery. The
            returned trigger objects will have unique "recoverXXX" trigger names and
            will be in the <see cref="F:Quartz.SchedulerConstants.DefaultRecoveryGroup"/> trigger group.
            </summary>
            <remarks>
            In order to preserve the ordering of the triggers, the fire time will be
            set from the <i>ColumnFiredTime</i> column in the <i>TableFiredTriggers</i>
            table. The caller is responsible for calling <see cref="M:Quartz.Spi.IOperableTrigger.ComputeFirstFireTimeUtc(Quartz.ICalendar)"/>
            on each returned trigger. It is also up to the caller to insert the
            returned triggers to ensure that they are fired.
            </remarks>
            <param name="conn">The DB Connection</param>
            <returns>An array of <see cref="T:Quartz.ITrigger"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteFiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Delete all fired triggers.
            </summary>
            <param name="conn">The DB Connection</param>
            <returns>The number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteFiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete all fired triggers of the given instance.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceId">The instance id.</param>
            <returns>The number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Insert the job detail record.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="job">The job to insert.</param>
            <returns>Number of rows inserted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Update the job detail record.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="job">The job to update.</param>
            <returns>Number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerNamesForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary> <para>
            Get the names of all of the triggers associated with the given job.
            </para>
            
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Delete the job detail record for the given job.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.IsJobStateful(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Check whether or not the given job is stateful.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns> true if the job exists and is stateful, false otherwise</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.JobExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Check whether or not the given job exists.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>true if the job exists, false otherwise</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateJobData(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Update the job data map for the given job.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="job">The job.</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,Quartz.Spi.ITypeLoadHelper)">
            <summary>
            Select the JobDetail object for a given job name / group name.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <param name="classLoadHelper">The class load helper.</param>
            <returns>The populated JobDetail object</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectNumJobs(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the total number of jobs stored.
            </summary>
            <param name="conn">The DB Connection</param>
            <returns> the total number of jobs stored</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectJobGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary> 
            Select all of the job group names that are stored.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns> an array of <see cref="T:System.String"/> group names</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectJobsInGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Select all of the jobs contained in a given group.
            </summary>
            <param name="conn">The DB Connection </param>
            <param name="matcher"></param>
            <returns> an array of <see cref="T:System.String"/> job names</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Insert the base trigger data.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="trigger">The trigger to insert.</param>
            <param name="state">The state that the trigger should be stored in.</param>
            <param name="jobDetail">The job detail.</param>
            <returns>The number of rows inserted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger)">
            <summary>
            Insert the blob trigger data.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="trigger">The trigger to insert</param>
            <returns>The number of rows inserted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Update the base trigger data.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="trigger">The trigger.</param>
            <param name="state">The state.</param>
            <param name="jobDetail">The job detail.</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger)">
            <summary>
            Update the blob trigger data.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="trigger">The trigger.</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.TriggerExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Check whether or not a trigger exists.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String)">
            <summary>
            Update the state for a given trigger.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <param name="state">The new state for the trigger.</param>
            <returns> the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerStateFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String,System.String)">
            <summary>
            Update the given trigger to the given new state, if it is in the given
            old state.
            </summary>
            <param name="conn">The DB connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <param name="newState">The new state for the trigger </param>
            <param name="oldState">The old state the trigger must be in</param>
            <returns> int the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerStateFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String,System.String,System.String,System.String)">
            <summary>
            Update the given trigger to the given new state, if it is one of the
            given old states.
            </summary>
            <param name="conn">The DB connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <param name="newState">The new state for the trigger</param>
            <param name="oldState1">One of the old state the trigger must be in</param>
            <param name="oldState2">One of the old state the trigger must be in</param>
            <param name="oldState3">One of the old state the trigger must be in
            </param>
            <returns> int the number of rows updated
            </returns>
            <throws>  SQLException </throws>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerGroupStateFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey},System.String,System.String,System.String,System.String)">
            <summary>
            Update all triggers in the given group to the given new state, if they
            are in one of the given old states.
            </summary>
            <param name="conn">The DB connection</param>
            <param name="matcher"></param>
            <param name="newState">The new state for the trigger</param>
            <param name="oldState1">One of the old state the trigger must be in</param>
            <param name="oldState2">One of the old state the trigger must be in</param>
            <param name="oldState3">One of the old state the trigger must be in</param>
            <returns>The number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerGroupStateFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey},System.String,System.String)">
            <summary>
            Update all of the triggers of the given group to the given new state, if
            they are in the given old state.
            </summary>
            <param name="conn">The DB connection</param>
            <param name="matcher"></param>
            <param name="newState">The new state for the trigger group</param>
            <param name="oldState">The old state the triggers must be in.</param>
            <returns> int the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerStatesForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.String)">
            <summary>
            Update the states of all triggers associated with the given job.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <param name="state">The new state for the triggers.</param>
            <returns>The number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateTriggerStatesForJobFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.String,System.String)">
            <summary>
            Update the states of any triggers associated with the given job, that
            are the given current state.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <param name="state">The new state for the triggers</param>
            <param name="oldState">The old state of the triggers</param>
            <returns> the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Delete the BLOB trigger data for a trigger.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>The number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Delete the base trigger data for a trigger.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns> the number of rows deleted </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectNumTriggersForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Select the number of triggers associated with a given job.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns> the number of triggers for the given job </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectJobForTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,Quartz.Spi.ITypeLoadHelper)">
            <summary>
            Select the job to which the trigger is associated.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <param name="loadHelper">The load helper.</param>
            <returns>
            The <see cref="T:Quartz.IJobDetail"/> object associated with the given trigger
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggersForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Select the triggers for a job&gt;
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns> an array of <see cref="T:Quartz.ITrigger"/> objects associated with a given job. </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggersForCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select the triggers for a calendar
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calName">Name of the calendar.</param>
            <returns>
            An array of <see cref="T:Quartz.ITrigger"/> objects associated with a given job.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>The <see cref="T:Quartz.ITrigger"/> object.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerJobDataMap(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger's JobDataMap.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>The <see cref="T:Quartz.JobDataMap"/> of the Trigger, never null, but possibly empty.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger's state value.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>The <see cref="T:Quartz.ITrigger"/> object.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerStatus(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary> 
            Select a triggers status (state and next fire time).
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>A <see cref="T:Quartz.Impl.AdoJobStore.TriggerStatus"/> object, or null</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectNumTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the total number of triggers stored.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns>The total number of triggers stored.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the trigger group names that are stored.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns>An array of <see cref="T:System.String"/> group names.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggersInGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Select all of the triggers contained in a given group. 
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="matcher"></param>
            <returns>An array of <see cref="T:System.String"/> trigger names.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select all of the triggers in a given state.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="state">The state the triggers must be in.</param>
            <returns>An array of trigger <see cref="T:Quartz.TriggerKey"/>s.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertPausedTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Inserts the paused trigger group.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeletePausedTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Deletes the paused trigger group.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteAllPausedTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Deletes all paused trigger groups.
            </summary>
            <param name="conn">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.IsTriggerGroupPaused(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Determines whether the specified trigger group is paused.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns>
            	<c>true</c> if trigger group is paused; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectPausedTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Selects the paused trigger groups.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.IsExistingTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Determines whether given trigger group already exists.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns>
            	<c>true</c> if trigger group exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,Quartz.ICalendar)">
            <summary>
            Insert a new calendar.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calendarName">The name for the new calendar.</param>
            <param name="calendar">The calendar.</param>
            <returns>The number of rows inserted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,Quartz.ICalendar)">
            <summary> 
            Update a calendar.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calendarName">The name for the new calendar.</param>
            <param name="calendar">The calendar.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.CalendarExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Check whether or not a calendar exists.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>true if the trigger exists, false otherwise.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select a calendar.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>The Calendar.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.CalendarIsReferenced(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Check whether or not a calendar is referenced by any triggers.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>true if any triggers reference the calendar, false otherwise</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete a calendar.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="calendarName">The name of the trigger.</param>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectNumCalendars(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary> 
            Select the total number of calendars stored.
            </summary>
            <param name="conn">The DB Connection</param>
            <returns>The total number of calendars stored.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectCalendars(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the stored calendars.
            </summary>
            <param name="conn">The DB Connection</param>
            <returns>An array of <see cref="T:System.String"/> calendar names.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerForFireTime(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.DateTimeOffset)">
            <summary>
            Select the trigger that will be fired at the given fire time.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="fireTime">The time that the trigger will be fired.</param>
            <returns> 
            A <see cref="T:Quartz.TriggerKey"/> representing the
            trigger that will be fired at the given fire time, or null if no
            trigger will be fired at that time
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertFiredTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Insert a fired trigger.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="trigger">The trigger.</param>
            <param name="state">The state that the trigger should be stored in.</param>
            <param name="jobDetail">The job detail.</param>
            <returns>The number of rows inserted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectFiredTriggerRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given trigger, or
            trigger group if trigger name is <see langword="null" />.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="triggerName">Name of the trigger.</param>
            <param name="groupName">Name of the group.</param>
            <returns>A list of FiredTriggerRecord objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectFiredTriggerRecordsByJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given job, or job
            group if job name is <see langword="null" />.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <returns>A List of FiredTriggerRecord objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectInstancesFiredTriggerRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given scheduler
            instance.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceName">Name of the instance.</param>
            <returns>A list of FiredTriggerRecord objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteFiredTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete a fired trigger.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="entryId">The fired trigger entry to delete.</param>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectJobExecutionCount(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Get the number instances of the identified job currently executing.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>
            The number instances of the identified job currently executing.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.InsertSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Insert a scheduler-instance state record.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceId">The instance id.</param>
            <param name="checkInTime">The check in time.</param>
            <param name="interval">The interval.</param>
            <returns>The number of inserted rows.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.DeleteSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete a scheduler-instance state record.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceId">The instance id.</param>
            <returns>The number of deleted rows.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.UpdateSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset)">
            <summary>
            Update a scheduler-instance state record.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceId">The instance id.</param>
            <param name="checkInTime">The check in time.</param>
            <returns>The number of updated rows.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectSchedulerStateRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            A List of all current <see cref="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord"/>s.
            <para>
            If instanceId is not null, then only the record for the identified
            instance will be returned.
            </para>
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceName">The instance id.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectTriggerToAcquire(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.DateTimeOffset,System.DateTimeOffset,System.Int32)">
            <summary>
            Select the next trigger which will fire to fire between the two given timestamps 
            in ascending order of fire time, and then descending by priority.
            </summary>
            <param name="conn">The conn.</param>
            <param name="noLaterThan">highest value of <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/> of the triggers (exclusive)</param>
            <param name="noEarlierThan">highest value of <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/> of the triggers (inclusive)</param>
            <param name="maxCount">maximum number of trigger keys allow to acquired in the returning list.</param>
            <returns>A (never null, possibly empty) list of the identifiers (Key objects) of the next triggers to be fired.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.SelectFiredTriggerInstanceNames(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the distinct instance names of all fired-trigger records.
            </summary>
            <remarks>
            This is useful when trying to identify orphaned fired triggers (a 
            fired trigger without a scheduler state record.) 
            </remarks>
            <param name="conn">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.CountMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset)">
            <summary>
            Counts the misfired triggers in states.
            </summary>
            <param name="conn">The conn.</param>
            <param name="state1">The state1.</param>
            <param name="ts">The ts.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.HasMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset,System.Int32,System.Collections.Generic.IList{Quartz.TriggerKey})">
            <summary>
            Selects the misfired triggers in states.
            </summary>
            <param name="conn">The conn.</param>
            <param name="state1">The state1.</param>
            <param name="ts">The ts.</param>
            <param name="count">The count.</param>
            <param name="resultList">The result list.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDriverDelegate.ClearData(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Clear (delete!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Quartz.Spi.ISchedulerPlugin">
            <summary>
            Provides an interface for a class to become a "plugin" to Quartz.
            </summary>
            <remarks>
            Plugins can do virtually anything you wish, though the most interesting ones
            will obviously interact with the scheduler in some way - either actively: by
            invoking actions on the scheduler, or passively: by being a <see cref="T:Quartz.IJobListener"/>,
            <see cref="T:Quartz.ITriggerListener"/>, and/or <see cref="T:Quartz.ISchedulerListener"/>.
            <para>
            If you use <see cref="T:Quartz.Impl.StdSchedulerFactory"/> to
            Initialize your Scheduler, it can also create and Initialize your plugins -
            look at the configuration docs for details.
            </para>
            <para>
            If you need direct access your plugin, you can have it explicitly put a 
            reference to itself in the <see cref="T:Quartz.IScheduler"/>'s 
            <see cref="T:Quartz.SchedulerContext"/> as part of its
            <see cref="M:Quartz.Spi.ISchedulerPlugin.Initialize(System.String,Quartz.IScheduler)"/> method.
            </para>
            </remarks>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <see cref="T:Quartz.IScheduler"/> in order to give
            the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> a chance to Initialize.
            </summary>
            <remarks>
            At this point, the Scheduler's <see cref="T:Quartz.Spi.IJobStore"/> is not yet
            <para>
            If you need direct access your plugin, you can have it explicitly put a 
            reference to itself in the <see cref="T:Quartz.IScheduler"/>'s 
            <see cref="T:Quartz.SchedulerContext"/> as part of its
            <see cref="M:Quartz.Spi.ISchedulerPlugin.Initialize(System.String,Quartz.IScheduler)"/> method.
            </para>
            </remarks>
            <param name="pluginName">
            The name by which the plugin is identified.
            </param>
            <param name="sched">
            The scheduler to which the plugin is registered.
            </param>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Start">
            <summary>
            Called when the associated <see cref="T:Quartz.IScheduler"/> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </summary>
        </member>
        <member name="M:Quartz.Spi.ISchedulerPlugin.Shutdown">
            <summary>
            Called in order to inform the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="T:Quartz.Spi.IMutableTrigger">
            <summary>
            Should not be used by end users.
            </summary>
        </member>
        <member name="T:Quartz.ITrigger">
            <summary>
            The base interface with properties common to all <code>Trigger</code>s - 
            use <see cref="T:Quartz.TriggerBuilder"/> to instantiate an actual Trigger.
            </summary>
            <remarks>
            <para>
            <see cref="T:Quartz.ITrigger"/>s have a <see cref="T:Quartz.TriggerKey"/> associated with them, which
            should uniquely identify them within a single <see cref="T:Quartz.IScheduler"/>.
            </para>
            
            <para>
            <see cref="T:Quartz.ITrigger"/>s are the 'mechanism' by which <see cref="T:Quartz.IJob"/> s
            are scheduled. Many <see cref="T:Quartz.ITrigger"/> s can point to the same <see cref="T:Quartz.IJob"/>,
            but a single <see cref="T:Quartz.ITrigger"/> can only point to one <see cref="T:Quartz.IJob"/>.
            </para>
            
            <para>
            Triggers can 'send' parameters/data to <see cref="T:Quartz.IJob"/>s by placing contents
            into the <see cref="P:Quartz.ITrigger.JobDataMap"/> on the <see cref="T:Quartz.ITrigger"/>.
            </para>
            </remarks>
            <seealso cref="T:Quartz.TriggerBuilder"/>
            <seealso cref="T:Quartz.ICalendarIntervalTrigger"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
            <seealso cref="T:Quartz.NthIncludedDayTrigger"/>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ITrigger.GetScheduleBuilder">
            <summary>
            Get a <see cref="T:Quartz.IScheduleBuilder"/> that is configured to produce a 
            schedule identical to this trigger's schedule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.ITrigger.GetMayFireAgain">
            <summary> 
            Used by the <see cref="T:Quartz.IScheduler"/> to determine whether or not
            it is possible for this <see cref="T:Quartz.ITrigger"/> to fire again.
            <para>
            If the returned value is <see langword="false"/> then the <see cref="T:Quartz.IScheduler"/>
            may remove the <see cref="T:Quartz.ITrigger"/> from the <see cref="T:Quartz.Spi.IJobStore"/>.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.ITrigger.GetNextFireTimeUtc">
             <summary>
             Returns the next time at which the <see cref="T:Quartz.ITrigger"/> is scheduled to fire. If
             the trigger will not fire again, <see langword="null"/> will be returned.  Note that
             the time returned can possibly be in the past, if the time that was computed
             for the trigger to next fire has already arrived, but the scheduler has not yet
             been able to fire the trigger (which would likely be due to lack of resources
             e.g. threads).
             </summary>
            <remarks>
             The value returned is not guaranteed to be valid until after the <see cref="T:Quartz.ITrigger"/>
             has been added to the scheduler.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Quartz.ITrigger.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ITrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.ITrigger.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the next time at which the <see cref="T:Quartz.ITrigger"/> will fire,
            after the given time. If the trigger will not fire after the given time,
            <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.Description">
            <summary>
            Get or set the description given to the <see cref="T:Quartz.ITrigger"/> instance by
            its creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.CalendarName">
            <summary>
            Get or set  the <see cref="T:Quartz.ICalendar"/> with the given name with
            this Trigger. Use <see langword="null"/> when setting to dis-associate a Calendar.
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.JobDataMap">
            <summary>
            Get or set the <see cref="P:Quartz.ITrigger.JobDataMap"/> that is associated with the 
            <see cref="T:Quartz.ITrigger"/>.
            <para>
            Changes made to this map during job execution are not re-persisted, and
            in fact typically result in an illegal state.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.FinalFireTimeUtc">
            <summary>
            Returns the last UTC time at which the <see cref="T:Quartz.ITrigger"/> will fire, if
            the Trigger will repeat indefinitely, null will be returned.
            <para>
            Note that the return time *may* be in the past.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.MisfireInstruction">
            <summary>
            Get or set the instruction the <see cref="T:Quartz.IScheduler"/> should be given for
            handling misfire situations for this <see cref="T:Quartz.ITrigger"/>- the
            concrete <see cref="T:Quartz.ITrigger"/> type that you are using will have
            defined a set of additional MISFIRE_INSTRUCTION_XXX
            constants that may be set to this property.
            <para>
            If not explicitly set, the default value is <see cref="F:Quartz.MisfireInstruction.InstructionNotSet"/>.
            </para>
            </summary>
            <seealso cref="F:Quartz.MisfireInstruction.InstructionNotSet"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
        </member>
        <member name="P:Quartz.ITrigger.EndTimeUtc">
            <summary>
            Gets and sets the date/time on which the trigger must stop firing. This 
            defines the final boundary for trigger firings &#x8212; the trigger will
            not fire after to this date and time. If this value is null, no end time
            boundary is assumed, and the trigger can continue indefinitely.
            </summary>
        </member>
        <member name="P:Quartz.ITrigger.StartTimeUtc">
            <summary>
            The time at which the trigger's scheduling should start.  May or may not
            be the first actual fire time of the trigger, depending upon the type of
            trigger and the settings of the other properties of the trigger.  However
            the first actual first time will not be before this date.
            </summary>
            <remarks>
            Setting a value in the past may cause a new trigger to compute a first
            fire time that is in the past, which may cause an immediate misfire
            of the trigger.
            </remarks>
        </member>
        <member name="P:Quartz.ITrigger.Priority">
            <summary>
            The priority of a <see cref="T:Quartz.ITrigger"/> acts as a tie breaker such that if 
            two <see cref="T:Quartz.ITrigger"/>s have the same scheduled fire time, then Quartz
            will do its best to give the one with the higher priority first access 
            to a worker thread.
            </summary>
            <remarks>
            If not explicitly set, the default value is <i>5</i>.
            </remarks>
            <returns></returns>
            <see cref="F:Quartz.TriggerConstants.DefaultPriority"/>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.Description">
            <summary>
            Set a description for the <code>Trigger</code> instance - may be
            useful for remembering/displaying the purpose of the trigger, though the
            description has no meaning to Quartz.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.CalendarName">
            <summary>
            <para>
            Associate the <code><see cref="T:Quartz.ICalendar"/></code> with the given name with
            this Trigger.
            </para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.JobDataMap">
            <summary>
            Set the <code>JobDataMap</code> to be associated with the
            <code>Trigger</code>.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.Priority">
            <summary>
            The priority of a <code>Trigger</code> acts as a tie breaker such that if
            two <code>Trigger</code>s have the same scheduled fire time, then Quartz
            will do its best to give the one with the higher priority first access
            to a worker thread.
            </summary>
            <remarks>
            <para>
            If not explicitly set, the default value is <code>5</code>.
            </para>
            </remarks>
            <seealso cref="F:Quartz.TriggerConstants.DefaultPriority"/>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.StartTimeUtc">
            <summary>
            <para>
            The time at which the trigger's scheduling should start.  May or may not
            be the first actual fire time of the trigger, depending upon the type of
            trigger and the settings of the other properties of the trigger.  However
            the first actual first time will not be before this date.
            </para>
            <para>
            Setting a value in the past may cause a new trigger to compute a first
            fire time that is in the past, which may cause an immediate misfire
            of the trigger.
            </para>
            ew DateTimeOffset StartTimeUtc {  get; set; }
            </summary>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.EndTimeUtc">
            <summary>
            <para>
            Set the time at which the <code>Trigger</code> should quit repeating -
            regardless of any remaining repeats (based on the trigger's particular
            repeat settings).
            </para>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Quartz.Spi.IMutableTrigger.MisfireInstruction">
            <summary>
            <para>
            Set the instruction the <code>Scheduler</code> should be given for
            handling misfire situations for this <code>Trigger</code>- the
            concrete <code>Trigger</code> type that you are using will have
            defined a set of additional <code>MISFIRE_INSTRUCTION_XXX</code>
            constants that may be passed to this method.
            </para>
            </summary>
            <remarks>
            <para>
            If not explicitly set, the default value is <code>MISFIRE_INSTRUCTION_SMART_POLICY</code>.
            </para>
            </remarks>
            <seealso cref="F:Quartz.MisfireInstruction.SmartPolicy"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
        </member>
        <member name="T:Quartz.Simpl.SimpleThreadPool">
            <summary>
            This is class is a simple implementation of a thread pool, based on the
            <see cref="T:Quartz.Spi.IThreadPool"/> interface.
            </summary>
            <remarks>
            <see cref="T:Quartz.IThreadRunnable"/> objects are sent to the pool with the <see cref="M:Quartz.Simpl.SimpleThreadPool.RunInThread(Quartz.IThreadRunnable)"/>
            method, which blocks until a <see cref="T:System.Threading.Thread"/> becomes available.
            
            The pool has a fixed number of <see cref="T:System.Threading.Thread"/>s, and does not grow or
            shrink based on demand.
            </remarks>
            <author>James House</author>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.IThreadPool">
            <summary>
            The interface to be implemented by classes that want to provide a thread
            pool for the <see cref="T:Quartz.IScheduler"/>'s use.
            </summary>
            <remarks>
            <see cref="T:Quartz.Spi.IThreadPool"/> implementation instances should ideally be made
            for the sole use of Quartz.  Most importantly, when the method
             <see cref="M:Quartz.Spi.IThreadPool.BlockForAvailableThreads"/> returns a value of 1 or greater,
            there must still be at least one available thread in the pool when the
            method  <see cref="M:Quartz.Spi.IThreadPool.RunInThread(Quartz.IThreadRunnable)"/> is called a few moments (or
            many moments) later.  If this assumption does not hold true, it may
            result in extra JobStore queries and updates, and if clustering features
            are being used, it may result in greater imballance of load.
            </remarks>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.RunInThread(Quartz.IThreadRunnable)">
            <summary>
            Execute the given <see cref="T:Quartz.IThreadRunnable"/> in the next
            available <see cref="T:System.Threading.Thread"/>.
            </summary>
            <remarks>
            The implementation of this interface should not throw exceptions unless
            there is a serious problem (i.e. a serious misconfiguration). If there
            are no available threads, rather it should either queue the Runnable, or
            block until a thread is available, depending on the desired strategy.
            </remarks>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.BlockForAvailableThreads">
             <summary>
             Determines the number of threads that are currently available in in
             the pool.  Useful for determining the number of times
             <see cref="M:Quartz.Spi.IThreadPool.RunInThread(Quartz.IThreadRunnable)"/>  can be called before returning
             false.
             </summary>
            <remarks>
             The implementation of this method should block until there is at
             least one available thread.
            </remarks>
             <returns>the number of currently available threads</returns>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.Initialize">
            <summary>
            Must be called before the <see cref="T:System.Threading.ThreadPool"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
            <remarks>
            Typically called by the <see cref="T:Quartz.ISchedulerFactory"/>.
            </remarks>
        </member>
        <member name="M:Quartz.Spi.IThreadPool.Shutdown(System.Boolean)">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:System.Threading.ThreadPool"/>
            that it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IThreadPool.PoolSize">
            <summary>
            Get the current number of threads in the <see cref="T:Quartz.Spi.IThreadPool"/>.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IThreadPool.InstanceId">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's Id, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IThreadPool.InstanceName">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's name, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.#ctor">
            <summary> 
            Create a new (unconfigured) <see cref="T:Quartz.Simpl.SimpleThreadPool"/>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.#ctor(System.Int32,System.Threading.ThreadPriority)">
            <summary>
            Create a new <see cref="T:Quartz.Simpl.SimpleThreadPool"/> with the specified number
            of <see cref="T:System.Threading.Thread"/> s that have the given priority.
            </summary>
            <param name="threadCount">
            the number of worker <see cref="T:System.Threading.Thread"/>s in the pool, must
            be &gt; 0.
            </param>
            <param name="threadPriority">
            the thread priority for the worker threads.
            
            </param>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.Initialize">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:System.Threading.ThreadPool"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.Shutdown(System.Boolean)">
            <summary>
            Terminate any worker threads in this thread group.
            Jobs currently in progress will complete.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.RunInThread(Quartz.IThreadRunnable)">
            <summary>
            Run the given <see cref="T:Quartz.IThreadRunnable"/> object in the next available
            <see cref="T:System.Threading.Thread"/>. If while waiting the thread pool is asked to
            shut down, the Runnable is executed immediately within a new additional
            thread.
            </summary>
            <param name="runnable">The <see cref="T:Quartz.IThreadRunnable"/> to be added.</param>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.CreateWorkerThreads(System.Int32)">
            <summary>
            Creates the worker threads.
            </summary>
            <param name="threadCount">The thread count.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.Shutdown">
            <summary>
            Terminate any worker threads in this thread group.
            Jobs currently in progress will complete.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.ThreadCount">
            <summary>
            Gets or sets the number of worker threads in the pool.
            Set  has no effect after <see cref="M:Quartz.Simpl.SimpleThreadPool.Initialize"/> has been called.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.ThreadPriority">
            <summary>
            Get or set the thread priority of worker threads in the pool.
            Set operation has no effect after <see cref="M:Quartz.Simpl.SimpleThreadPool.Initialize"/> has been called.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.ThreadNamePrefix">
            <summary>
            Gets or sets the thread name prefix.
            </summary>
            <value>The thread name prefix.</value>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.MakeThreadsDaemons">
            <summary> 
            Gets or sets the value of makeThreadsDaemons.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.PoolSize">
            <summary>
            Gets the size of the pool.
            </summary>
            <value>The size of the pool.</value>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.InstanceId">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's Id, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.SimpleThreadPool.InstanceName">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's name, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.SimpleThreadPool.WorkerThread">
            <summary>
            A Worker loops, waiting to Execute tasks.
            </summary>
        </member>
        <member name="T:Quartz.QuartzThread">
            <summary>
            Support class used to handle threads
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.IThreadRunnable">
            <summary>
            This interface should be implemented by any class whose instances are intended 
            to be executed by a thread.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IThreadRunnable.Run">
            <summary>
            This method has to be implemented in order that starting of the thread causes the object's 
            run method to be called in that separately executing thread.
            </summary>
        </member>
        <member name="F:Quartz.QuartzThread.thread">
            <summary>
            The instance of System.Threading.Thread
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.#ctor">
            <summary>
            Initializes a new instance of the QuartzThread class
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="name">The name of the thread</param>
        </member>
        <member name="M:Quartz.QuartzThread.Run">
            <summary>
            This method has no functionality unless the method is overridden
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.Start">
            <summary>
            Causes the operating system to change the state of the current thread instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.Interrupt">
            <summary>
            Interrupts a thread that is in the WaitSleepJoin thread state
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.Join">
            <summary>
            Blocks the calling thread until a thread terminates
            </summary>
        </member>
        <member name="M:Quartz.QuartzThread.ToString">
            <summary>
            Obtain a string that represents the current object
            </summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="P:Quartz.QuartzThread.Name">
            <summary>
            Gets or sets the name of the thread
            </summary>
        </member>
        <member name="P:Quartz.QuartzThread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread
            </summary>
        </member>
        <member name="P:Quartz.QuartzThread.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.#ctor(Quartz.Simpl.SimpleThreadPool,System.String,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Create a worker thread and start it. Waiting for the next Runnable,
            executing it, and waiting for the next Runnable, until the Shutdown
            flag is set.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.#ctor(Quartz.Simpl.SimpleThreadPool,System.String,System.Threading.ThreadPriority,System.Boolean,Quartz.IThreadRunnable)">
            <summary>
            Create a worker thread, start it, Execute the runnable and terminate
            the thread (one time execution).
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.Shutdown">
            <summary>
            Signal the thread that it should terminate.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleThreadPool.WorkerThread.Run">
            <summary>
            Loop, executing targets as they are received.
            </summary>
        </member>
        <member name="T:Quartz.PersistJobDataAfterExecutionAttribute">
             <summary>
             An attribute that marks a <see cref="T:Quartz.IJob"/> class as one that makes updates to its
             <see cref="T:Quartz.JobDataMap"/> during execution, and wishes the scheduler to re-store the
             <code>JobDataMap</code> when execution completes. 
             </summary>
             <remarks>
             <para>
             Jobs that are marked with this annotation should also seriously consider
             using the <see cref="T:Quartz.DisallowConcurrentExecutionAttribute"/> attribute, to avoid data
             storage race conditions with concurrently executing job instances.
             </para>
             <para>
             This can be used in lieu of implementing the StatefulJob marker interface that 
             was used prior to Quartz 2.0
             </para>
            </remarks>
             <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
             <author>James House</author>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.JobDataMap">
            <summary>
            Holds state information for <see cref="T:Quartz.IJob"/> instances.
            </summary>
            <remarks>
            <see cref="T:Quartz.JobDataMap"/> instances are stored once when the <see cref="T:Quartz.IJob"/>
            is added to a scheduler. They are also re-persisted after every execution of
            instances that have <see cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/> present.
            <para>
            <see cref="T:Quartz.JobDataMap"/> instances can also be stored with a 
            <see cref="T:Quartz.ITrigger"/>.  This can be useful in the case where you have a Job
            that is stored in the scheduler for regular/repeated use by multiple 
            Triggers, yet with each independent triggering, you want to supply the
            Job with different data inputs.  
            </para>
            <para>
            The <see cref="T:Quartz.IJobExecutionContext"/> passed to a Job at execution time 
            also contains a convenience <see cref="T:Quartz.JobDataMap"/> that is the result
            of merging the contents of the trigger's JobDataMap (if any) over the
            Job's JobDataMap (if any).  
            </para>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Util.StringKeyDirtyFlagMap">
            <summary>
            An implementation of <see cref="T:System.Collections.IDictionary"/> that wraps another <see cref="T:System.Collections.IDictionary"/>
            and flags itself 'dirty' when it is modified, enforces that all keys are
            strings. 
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Util.DirtyFlagMap`2">
            <summary>
            An implementation of <see cref="T:System.Collections.IDictionary"/> that wraps another <see cref="T:System.Collections.IDictionary"/>
            and flags itself 'dirty' when it is modified.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.#ctor">
            <summary>
            Create a DirtyFlagMap that 'wraps' a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.#ctor(System.Int32)">
            <summary>
            Create a DirtyFlagMap that 'wraps' a <see cref="T:System.Collections.Hashtable"/> that has the
            given initial capacity.
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Clear">
            <summary>
            When implemented by a class, removes all elements from the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IDictionary"/> is read-only.
            </exception>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.ContainsKey(`0)">
            <summary>
            When implemented by a class, determines whether the <see cref="T:System.Collections.IDictionary"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"/>.</param>
            <returns>
            	<see langword="true"/> if the <see cref="T:System.Collections.IDictionary"/> contains an element with the key; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key "/>is <see langword="null"/>.</exception>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Remove(`0)">
            <summary>
            When implemented by a class, removes the element with the
            specified key from the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key "/> is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:System.Collections.IDictionary"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <see cref="T:System.Collections.IDictionary"/> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.GetEnumerator">
            <summary>
            When implemented by a class, returns an
            <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:System.Collections.IDictionary"/>.
            </returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Add(`0,`1)">
            <summary>
            When implemented by a class, adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>The <see cref="T:System.Collections.IDictionary"/> is read-only.</para>
            	<para>-or-</para>
            	<para>The <see cref="T:System.Collections.IDictionary"/> has a fixed size.</para>
            </exception>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of
            the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="array"/> is multidimensional.</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.</para>
            	<para>-or-</para>
            	<para>The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.</para>
            </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.ClearDirtyFlag">
            <summary>
            Clear the 'dirty' flag (set dirty flag to <see langword="false" />).
            </summary>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.ContainsValue(`1)">
            <summary>
            Determines whether the specified obj contains value.
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            	<c>true</c> if the specified obj contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.EntrySet">
            <summary>
            Gets the entries as a set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.KeySet">
            <summary>
            Gets keyset for this map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.Put(`0,`1)">
            <summary>
            Puts the value behind a specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.DirtyFlagMap`2.PutAll(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Puts all.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.Dirty">
            <summary>
            Determine whether the <see cref="T:System.Collections.IDictionary"/> is flagged dirty.
            </summary>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.WrappedMap">
            <summary>
            Get a direct handle to the underlying Map.
            </summary>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.Count">
            <summary>
            When implemented by a class, gets the number of
            elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.Values">
            <summary>
            When implemented by a class, gets an <see cref="T:System.Collections.ICollection"/> containing the values in the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.Keys">
            <summary>
            When implemented by a class, gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/>
            is read-only.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.IsFixedSize">
            <summary>
            When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IDictionary"/>
            has a fixed size.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.SyncRoot">
            <summary>
            When implemented by a class, gets an object that
            can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Util.DirtyFlagMap`2.IsSynchronized">
            <summary>
            When implemented by a class, gets a value
            indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized
            (thread-safe).
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Util.StringKeyDirtyFlagMap"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Util.StringKeyDirtyFlagMap"/> class.
            </summary>
            <param name="initialCapacity">The initial capacity.</param>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.PutAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds the name-value pairs in the given <see cref="T:System.Collections.IDictionary"/> to the <see cref="T:Quartz.JobDataMap"/>.
            <para>
            All keys must be <see cref="T:System.String"/>s, and all values must be serializable.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Int32)">
            <summary>
            Adds the given <see cref="T:System.Int32"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Int64)">
            <summary>
            Adds the given <see cref="T:System.Int64"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Single)">
            <summary>
            Adds the given <see cref="T:System.Single"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Double)">
            <summary>
            Adds the given <see cref="T:System.Double"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Boolean)">
            <summary> 
            Adds the given <see cref="T:System.Boolean"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.Char)">
            <summary>
            Adds the given <see cref="T:System.Char"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.Put(System.String,System.String)">
            <summary>
            Adds the given <see cref="T:System.String"/> value to the <see cref="T:Quartz.IJob"/>'s
            data map.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetInt(System.String)">
            <summary> 
            Retrieve the identified <see cref="T:System.Int32"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetLong(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int64"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetFloat(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Single"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetDouble(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Double"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetBoolean(System.String)">
            <summary> 
            Retrieve the identified <see cref="T:System.Boolean"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetChar(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Char"/> value from the <see cref="T:Quartz.JobDataMap"/>. 
            </summary>
        </member>
        <member name="M:Quartz.Util.StringKeyDirtyFlagMap.GetString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.String"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor">
            <summary>
            Create an empty <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary> 
            Create a <see cref="T:Quartz.JobDataMap"/> with the given data.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor(System.Collections.IDictionary)">
            <summary> 
            Create a <see cref="T:Quartz.JobDataMap"/> with the given data.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Boolean)">
            <summary>
            Adds the given <see cref="T:System.Boolean"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Char)">
            <summary>
            Adds the given <see cref="T:System.Char"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Double)">
            <summary>
            Adds the given <see cref="T:System.Double"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Single)">
            <summary>
            Adds the given <see cref="T:System.Single"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Int32)">
            <summary>
            Adds the given <see cref="T:System.Int32"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.PutAsString(System.String,System.Int64)">
            <summary>
            Adds the given <see cref="T:System.Int64"/> value as a string version to the
            <see cref="T:Quartz.IJob"/>'s data map.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int32"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntValue(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int32"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetIntegerFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int32"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanValueFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Boolean"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanValue(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Boolean"/> value from the 
            <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetBooleanFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Boolean"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetCharFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Char"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleValueFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Double"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleValue(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Double"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDoubleFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Double"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatValueFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Single"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatValue(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Single"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetFloatFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Single"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetLongValueFromString(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int64"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetLongValue(System.String)">
            <summary>
            Retrieve the identified <see cref="T:System.Int64"/> value from the <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.JobDataMap.GetDateTime(System.String)">
            <summary>
            Gets the date time.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.JobDataMap.Get(System.String)">
            <summary>
            Gets the value behind the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.DisallowConcurrentExecutionAttribute">
            <summary>
            An attribute that marks a <see cref="T:Quartz.IJob"/> class as one that must not have multiple
            instances executed concurrently (where instance is based-upon a <see cref="T:Quartz.IJobDetail"/> 
            definition - or in other words based upon a <see cref="T:Quartz.JobKey"/>. 
            </summary>
            <remarks>
            <para>This can be used in lieu of implementing the StatefulJob marker interface that 
            was used prior to Quartz 2.0</para>
            </remarks>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.ICronTrigger">
            <summary>
            The public interface for inspecting settings specific to a CronTrigger, 
            which is used to fire a <see cref="T:Quartz.IJob"/>
            at given moments in time, defined with Unix 'cron-like' schedule definitions.
            </summary>
            <remarks>
            <para>
            For those unfamiliar with "cron", this means being able to create a firing
            schedule such as: "At 8:00am every Monday through Friday" or "At 1:30am
            every last Friday of the month".
            </para>
            
            <para>
            The format of a "Cron-Expression" string is documented on the 
            <see cref="T:Quartz.CronExpression"/> class.
            </para>
            
            <para>
            Here are some full examples: <br/>
            <table cellspacing="8">
            <tr>
            <th align="left">Expression</th>
            <th align="left"> </th>
            <th align="left">Meaning</th>
            </tr>
            <tr>
            <td align="left">"0 0 12 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 12pm (noon) every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * *"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ? *"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ? 2005"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day during the year 2005" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 * 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every minute starting at 2pm and ending at 2:59pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0/5 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0/5 14,18 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0-5 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every minute starting at 2pm and ending at 2:05pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 10,44 14 ? 3 WED"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March." /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * MON-FRI"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 15 * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the 15th day of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 L * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last day of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last Friday of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last Friday of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L 2002-2005"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on every last Friday of every month during the years 2002, 2003, 2004 and 2005" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6#3"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the third Friday of every month" /&gt;
            </td>
            </tr>
            </table>
            </para>
            
            <para>
            Pay attention to the effects of '?' and '*' in the day-of-week and
            day-of-month fields!
            </para>
            
            <para>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in on of these fields).
            </li>
            <li>Be careful when setting fire times between mid-night and 1:00 AM -
            "daylight savings" can cause a skip or a repeat depending on whether the
            time moves back or jumps forward.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ICronTrigger.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.ICronTrigger.CronExpressionString">
            <summary>
            Gets or sets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="P:Quartz.ICronTrigger.TimeZone">
            <summary>
            Sets the time zone for which the <see cref="P:Quartz.ICronTrigger.CronExpressionString"/> of this
            <see cref="T:Quartz.ICronTrigger"/> will be resolved.
            </summary>
            <remarks>
            If <see cref="P:Quartz.ICronTrigger.CronExpressionString"/> is set after this
            property, the TimeZone setting on the CronExpression will "win".  However
            if <see cref="P:Quartz.ICronTrigger.CronExpressionString"/> is set after this property, the
            time zone applied by this method will remain in effect, since the 
            string cron expression does not carry a time zone!
            </remarks>
            <value>The time zone.</value>
        </member>
        <member name="T:Quartz.Impl.Matchers.OrMatcher`1">
            <summary>
            Matches using an OR operator on two Matcher operands. 
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.IMatcher`1">
            <summary>
            Matchers can be used in various <see cref="T:Quartz.IScheduler"/> API methods to 
            select the entities that should be operated upon.
            </summary>
            <author>James House</author>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Quartz.Impl.Matchers.OrMatcher`1.Or``1(Quartz.IMatcher{``0},Quartz.IMatcher{``0})">
            <summary>
            Create an OrMatcher that depends upon the result of at least one of the given matchers.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="leftOperand"></param>
            <param name="rightOperand"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.Matchers.EverythingMatcher`1">
            <summary>
            Matches on the complete key being equal (both name and group).
            </summary>
            <remarks>
            </remarks>
            <author>jhouse</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.EverythingMatcher`1.AllJobs">
            <summary>
            Create an EverythingMatcher that matches all jobs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.EverythingMatcher`1.AllTriggers">
            <summary>
            Create an EverythingMatcher that matches all triggers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.SchedulerDetailsSetter">
            <summary>
            This utility calls methods reflectively on the given objects even though the
            methods are likely on a proper interface (ThreadPool, JobStore, etc). The
            motivation is to be tolerant of older implementations that have not been
            updated for the changes in the interfaces (eg. LocalTaskExecutorThreadPool in
            spring quartz helpers)
            </summary>
            <author>teck</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore">
            <summary>
            Provide thread/resource locking in order to protect
            resources from being altered by multiple threads at the same time using
            a db row update.
            </summary>
            <remarks>
            <para>
            <b>Note:</b> This Semaphore implementation is useful for databases that do
            not support row locking via "SELECT FOR UPDATE" or SQL Server's type syntax.
            </para>
            <para>
            As of Quartz.NET 2.0 version there is no need to use this implementation for 
            SQL Server databases.
            </para>
            </remarks>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.DBSemaphore">
            <summary>
            Base class for database based lock handlers for providing thread/resource locking 
            in order to protect resources from being altered by multiple threads at the 
            same time.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.StdAdoConstants">
            <summary>
            This class extends <see cref="T:Quartz.Impl.AdoJobStore.AdoConstants"/>
            to include the query string constants in use by the <see cref="T:Quartz.Impl.AdoJobStore.StdAdoDelegate"/>
            class.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.AdoConstants">
            <summary>
            This interface can be implemented by any <see cref="T:Quartz.Impl.AdoJobStore.IDriverDelegate"/>
            class that needs to use the constants contained herein.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>James House</author>
            <author>Marko Lahma(.NET)</author>
        </member>
        <member name="F:Quartz.Impl.AdoJobStore.AdoConstants.TriggerTypeSimple">
            <summary>
            Simple Trigger type.
            </summary>
        </member>
        <member name="F:Quartz.Impl.AdoJobStore.AdoConstants.TriggerTypeCron">
            <summary>
            Cron Trigger type.
            </summary>
        </member>
        <member name="F:Quartz.Impl.AdoJobStore.AdoConstants.TriggerTypeCalendarInterval">
            <summary>
            Calendar Interval Trigger type.
            </summary>
        </member>
        <member name="F:Quartz.Impl.AdoJobStore.AdoConstants.TriggerTypeDailyTimeInterval">
            <summary>
            Daily Time Interval Trigger type.
            </summary>
        </member>
        <member name="F:Quartz.Impl.AdoJobStore.AdoConstants.TriggerTypeBlob">
            <summary>
            A general blob Trigger type.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.ISemaphore">
            <summary> 
            An interface for providing thread/resource locking in order to protect
            resources from being altered by multiple threads at the same time.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ISemaphore.ObtainLock(Quartz.Impl.AdoJobStore.Common.DbMetadata,Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> 
            Grants a lock on the identified resource to the calling thread (blocking
            until it is available).
            </summary>
            <returns> true if the lock was obtained.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ISemaphore.ReleaseLock(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> Release the lock on the identified resource if it is held by the calling
            thread.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ISemaphore.IsLockOwner(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> 
            Determine whether the calling thread owns a lock on the identified
            resource.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.ISemaphore.RequiresConnection">
            <summary>
            Whether this Semaphore implementation requires a database connection for
            its lock management operations.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.ISemaphore.IsLockOwner(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.ISemaphore.ObtainLock(Quartz.Impl.AdoJobStore.Common.DbMetadata,Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.ISemaphore.ReleaseLock(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.ITablePrefixAware">
            <summary>
            Interface for Quartz objects that need to know what the table prefix of
            the tables used by a ADO.NET JobStore is.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.ITablePrefixAware.TablePrefix">
            <summary>
            Table prefix to use.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DBSemaphore.#ctor(System.String,System.String,System.String,System.String,Quartz.Impl.AdoJobStore.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.DBSemaphore"/> class.
            </summary>
            <param name="tablePrefix">The table prefix.</param>
            <param name="schedName">the scheduler name</param>
            <param name="defaultInsertSQL">The SQL.</param>
            <param name="defaultSQL">The default SQL.</param>
            <param name="dbProvider">The db provider.</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DBSemaphore.ExecuteSQL(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.String)">
            <summary>
            Execute the SQL that will lock the proper database row.
            </summary>
            <param name="conn"></param>
            <param name="lockName"></param>
            <param name="expandedSQL"></param>
            <param name="expandedInsertSQL"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DBSemaphore.ObtainLock(Quartz.Impl.AdoJobStore.Common.DbMetadata,Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Grants a lock on the identified resource to the calling thread (blocking
            until it is available).
            </summary>
            <param name="metadata"></param>
            <param name="conn"></param>
            <param name="lockName"></param>
            <returns>true if the lock was obtained.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DBSemaphore.ReleaseLock(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Release the lock on the identified resource if it is held by the calling
            thread.
            </summary>
            <param name="conn"></param>
            <param name="lockName"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DBSemaphore.IsLockOwner(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Determine whether the calling thread owns a lock on the identified
            resource.
            </summary>
            <param name="conn"></param>
            <param name="lockName"></param>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DBSemaphore.LockOwners">
            <summary>
            Gets or sets the lock owners.
            </summary>
            <value>The lock owners.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DBSemaphore.RequiresConnection">
            <summary>
            This Semaphore implementation does use the database.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DBSemaphore.TablePrefix">
            <summary>
            Gets or sets the table prefix.
            </summary>
            <value>The table prefix.</value>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore.#ctor(Quartz.Impl.AdoJobStore.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.UpdateLockRowSemaphore.ExecuteSQL(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.String)">
            <summary>
            Execute the SQL that will lock the proper database row.
            </summary>
            <param name="conn"></param>
            <param name="lockName"></param>
            <param name="expandedSQL"></param>
            <param name="expandedInsertSQL"></param>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.OracleDelegate">
            <summary>
            This is a driver delegate for the Oracle database.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.StdAdoDelegate">
            <summary>
            This is meant to be an abstract base class for most, if not all, <see cref="T:Quartz.Impl.AdoJobStore.IDriverDelegate"/>
            implementations. Subclasses should override only those methods that need
            special handling for the DBMS driver in question.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ICommandAccessor.GetDbBooleanValue(System.Boolean)">
            <summary>
            Gets the db presentation for boolean value. Subclasses can overwrite this behaviour.
            </summary>
            <param name="booleanValue">Value to map to database.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ICommandAccessor.GetBooleanFromDbValue(System.Object)">
            <summary>
            Gets the boolean value from db presentation. Subclasses can overwrite this behaviour.
            </summary>
            <param name="columnValue">Value to map from database.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.Initialize(Quartz.Impl.AdoJobStore.DelegateInitializationArgs)">
            <summary>
            Initializes the driver delegate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerStatesFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.String)">
            <summary>
            Insert the job detail record.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="newState">the new state for the triggers</param>
            <param name="oldState1">the first old state to update</param>
            <param name="oldState2">the second old state to update</param>
            <returns>number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectMisfiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Int64)">
            <summary>
            Get the names of all of the triggers that have misfired.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="ts">The ts.</param>
            <returns>an array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> 
            Select all of the triggers in a given state.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="state">The state the triggers must be in</param>
            <returns> an array of trigger <see cref="T:Quartz.TriggerKey"/>s </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.HasMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.Int64)">
            <summary>
            Get the names of all of the triggers in the given state that have
            misfired - according to the given timestamp.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="state">The state.</param>
            <param name="ts">The time stamp.</param>
            <returns>An array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.HasMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset,System.Int32,System.Collections.Generic.IList{Quartz.TriggerKey})">
            <summary>
            Get the names of all of the triggers in the given state that have
            misfired - according to the given timestamp.  No more than count will
            be returned.
            </summary>
            <param name="conn">The conn.</param>
            <param name="state1">The state1.</param>
            <param name="ts">The ts.</param>
            <param name="count">The most misfired triggers to return, negative for all</param>
            <param name="resultList">
              Output parameter.  A List of <see cref="T:Quartz.TriggerKey"/> objects.  Must not be null
            </param>
            <returns>Whether there are more misfired triggers left to find beyond the given count.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.CountMisfiredTriggersInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset)">
            <summary>
            Get the number of triggers in the given state that have
            misfired - according to the given timestamp.
            </summary>
            <param name="conn"></param>
            <param name="state1"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectMisfiredTriggersInGroupInState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.Int64)">
            <summary>
            Get the names of all of the triggers in the given group and state that
            have misfired.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="groupName">Name of the group.</param>
            <param name="state">The state.</param>
            <param name="ts">The timestamp.</param>
            <returns>an array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggersForRecoveringJobs(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the triggers for jobs that are requesting recovery. The
            returned trigger objects will have unique "recoverXXX" trigger names and
            will be in the <see cref="F:Quartz.SchedulerConstants.DefaultRecoveryGroup"/>
            trigger group.
            </summary>
            <remarks>
            In order to preserve the ordering of the triggers, the fire time will be
            set from the <i>ColumnFiredTime</i> column in the <i>TableFiredTriggers</i>
            table. The caller is responsible for calling <see cref="M:Quartz.Spi.IOperableTrigger.ComputeFirstFireTimeUtc(Quartz.ICalendar)"/>
            on each returned trigger. It is also up to the caller to insert the
            returned triggers to ensure that they are fired.
            </remarks>
            <param name="conn">The DB Connection</param>
            <returns> an array of <see cref="T:Quartz.ITrigger"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteFiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Delete all fired triggers.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns>The number of rows deleted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteFiredTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete all fired triggers of the given instance.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceName">The instance id.</param>
            <returns>The number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.ClearData(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Clear (delete!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Insert the job detail record.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="job">The job to insert.</param>
            <returns>Number of rows inserted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.GetDbBooleanValue(System.Boolean)">
            <summary>
            Gets the db presentation for boolean value. Subclasses can overwrite this behaviour.
            </summary>
            <param name="booleanValue">Value to map to database.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.GetBooleanFromDbValue(System.Object)">
            <summary>
            Gets the boolean value from db presentation. Subclasses can overwrite this behaviour.
            </summary>
            <param name="columnValue">Value to map from database.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Update the job detail record.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="job">The job to update.</param>
            <returns>Number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerNamesForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Get the names of all of the triggers associated with the given job.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>An array of <see cref="T:Quartz.TriggerKey"/> objects</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Delete the job detail record for the given job.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.IsJobStateful(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Check whether or not the given job is stateful.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>
            true if the job exists and is stateful, false otherwise
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.JobExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Check whether or not the given job exists.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">The key identifying the job.</param>
            <returns>true if the job exists, false otherwise</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateJobData(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail)">
            <summary>
            Update the job data map for the given job.
            </summary>
            <param name="conn">The conn.</param>
            <param name="job">the job to update</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobDetail(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,Quartz.Spi.ITypeLoadHelper)">
            <summary>
            Select the JobDetail object for a given job name / group name.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="jobKey">The key identifying the job.</param>
            <param name="loadHelper">The load helper.</param>
            <returns>The populated JobDetail object.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.GetMapFromProperties(System.Data.IDataReader,System.Int32)">
            <summary> build Map from java.util.Properties encoding.</summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectNumJobs(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the total number of jobs stored.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns>The total number of jobs stored.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the job group names that are stored.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns>An array of <see cref="T:System.String"/> group names.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobsInGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Select all of the jobs contained in a given group.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="matcher"></param>
            <returns>An array of <see cref="T:System.String"/> job names.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Insert the base trigger data.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="trigger">the trigger to insert</param>
            <param name="state">the state that the trigger should be stored in</param>
            <param name="jobDetail">The job detail.</param>
            <returns>the number of rows inserted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger)">
            <summary>
            Insert the blob trigger data.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="trigger">The trigger to insert.</param>
            <returns>The number of rows inserted.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Update the base trigger data.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="trigger">The trigger to insert.</param>
            <param name="state">The state that the trigger should be stored in.</param>
            <param name="jobDetail">The job detail.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger)">
            <summary>
            Update the blob trigger data.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="trigger">The trigger to insert.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.TriggerExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Check whether or not a trigger exists.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>true if the trigger exists, false otherwise</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String)">
            <summary>
            Update the state for a given trigger.
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="triggerKey">the key of the trigger</param>
            <param name="state">The new state for the trigger.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerStateFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String,System.String,System.String,System.String)">
            <summary>
            Update the given trigger to the given new state, if it is one of the
            given old states.
            </summary>
            <param name="conn">The DB connection.</param>
            <param name="triggerKey">the key of the trigger</param>
            <param name="newState">The new state for the trigger.</param>
            <param name="oldState1">One of the old state the trigger must be in.</param>
            <param name="oldState2">One of the old state the trigger must be in.</param>
            <param name="oldState3">One of the old state the trigger must be in.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerGroupStateFromOtherStates(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey},System.String,System.String,System.String,System.String)">
            <summary>
            Update all triggers in the given group to the given new state, if they
            are in one of the given old states.
            </summary>
            <param name="conn">The DB connection.</param>
            <param name="matcher"></param>
            <param name="newState">The new state for the trigger.</param>
            <param name="oldState1">One of the old state the trigger must be in.</param>
            <param name="oldState2">One of the old state the trigger must be in.</param>
            <param name="oldState3">One of the old state the trigger must be in.</param>
            <returns>The number of rows updated.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerStateFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,System.String,System.String)">
            <summary>
            Update the given trigger to the given new state, if it is in the given
            old state.
            </summary>
            <param name="conn">the DB connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <param name="newState">the new state for the trigger</param>
            <param name="oldState">the old state the trigger must be in</param>
            <returns>int the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerGroupStateFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey},System.String,System.String)">
            <summary>
            Update all of the triggers of the given group to the given new state, if
            they are in the given old state.
            </summary>
            <param name="conn">the DB connection</param>
            <param name="matcher"></param>
            <param name="newState">the new state for the trigger group</param>
            <param name="oldState">the old state the triggers must be in</param>
            <returns>int the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerStatesForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.String)">
            <summary>
            Update the states of all triggers associated with the given job.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">the key of the job</param>
            <param name="state">the new state for the triggers</param>
            <returns>the number of rows updated</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateTriggerStatesForJobFromOtherState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.String,System.String)">
            <summary>
            Updates the state of the trigger states for job from other.
            </summary>
            <param name="conn">The conn.</param>
            <param name="jobKey">Key of the job.</param>
            <param name="state">The state.</param>
            <param name="oldState">The old state.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteBlobTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Delete the cron trigger data for a trigger.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Delete the base trigger data for a trigger.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectNumTriggersForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Select the number of triggers associated with a given job.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">the key of the job</param>
            <returns>the number of triggers for the given job</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobForTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,Quartz.Spi.ITypeLoadHelper)">
            <summary>
            Select the job to which the trigger is associated.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <param name="loadHelper">The load helper.</param>
            <returns>The <see cref="T:Quartz.IJobDetail"/> object associated with the given trigger</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggersForJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Select the triggers for a job
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="jobKey">the key of the job</param>
            <returns>
            an array of <see cref="T:Quartz.ITrigger"/> objects
            associated with a given job.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggersForCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select the triggers for a calendar
            </summary>
            <param name="conn">The DB Connection.</param>
            <param name="calName">Name of the calendar.</param>
            <returns>
            An array of <see cref="T:Quartz.ITrigger"/> objects associated with a given job.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>The <see cref="T:Quartz.ITrigger"/> object</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerJobDataMap(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger's JobDataMap.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>The <see cref="T:Quartz.JobDataMap"/> of the Trigger, never null, but possibly empty. </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger's state value.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>The <see cref="T:Quartz.ITrigger"/> object</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerStatus(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Select a trigger status (state and next fire time).
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="triggerKey">the key of the trigger</param>
            <returns>
            a <see cref="T:Quartz.Impl.AdoJobStore.TriggerStatus"/> object, or null
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectNumTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the total number of triggers stored.
            </summary>
            <param name="conn">the DB Connection</param>
            <returns>the total number of triggers stored</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the trigger group names that are stored.
            </summary>
            <param name="conn">the DB Connection</param>
            <returns>
            an array of <see cref="T:System.String"/> group names
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggersInGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Select all of the triggers contained in a given group.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="matcher"></param>
            <returns>
            an array of <see cref="T:System.String"/> trigger names
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertPausedTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Inserts the paused trigger group.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeletePausedTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Deletes the paused trigger group.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteAllPausedTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Deletes all paused trigger groups.
            </summary>
            <param name="conn">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.IsTriggerGroupPaused(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Determines whether the specified trigger group is paused.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns>
            	<c>true</c> if trigger group is paused; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.IsExistingTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Determines whether given trigger group already exists.
            </summary>
            <param name="conn">The conn.</param>
            <param name="groupName">Name of the group.</param>
            <returns>
            	<c>true</c> if trigger group exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,Quartz.ICalendar)">
            <summary>
            Insert a new calendar.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name for the new calendar.</param>
            <param name="calendar">The calendar.</param>
            <returns>the number of rows inserted</returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,Quartz.ICalendar)">
            <summary>
            Update a calendar.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name for the new calendar.</param>
            <param name="calendar">The calendar.</param>
            <returns>the number of rows updated</returns>
            <throws>  IOException </throws>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.CalendarExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Check whether or not a calendar exists.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>
            true if the trigger exists, false otherwise
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select a calendar.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>the Calendar</returns>
            <throws>  ClassNotFoundException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.CalendarIsReferenced(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Check whether or not a calendar is referenced by any triggers.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name of the calendar.</param>
            <returns>
            true if any triggers reference the calendar, false otherwise
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteCalendar(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete a calendar.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="calendarName">The name of the trigger.</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectNumCalendars(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the total number of calendars stored.
            </summary>
            <param name="conn">the DB Connection</param>
            <returns>the total number of calendars stored</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectCalendars(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select all of the stored calendars.
            </summary>
            <param name="conn">the DB Connection</param>
            <returns>
            an array of <see cref="T:System.String"/> calendar names
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerForFireTime(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.DateTimeOffset)">
            <summary>
            Select the trigger that will be fired at the given fire time.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="fireTime">the time that the trigger will be fired</param>
            <returns>
            a <see cref="T:Quartz.TriggerKey"/> representing the
            trigger that will be fired at the given fire time, or null if no
            trigger will be fired at that time
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectTriggerToAcquire(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.DateTimeOffset,System.DateTimeOffset,System.Int32)">
            <summary>
            Select the next trigger which will fire to fire between the two given timestamps 
            in ascending order of fire time, and then descending by priority.
            </summary>
            <param name="conn">The conn.</param>
            <param name="noLaterThan">highest value of <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/> of the triggers (exclusive)</param>
            <param name="noEarlierThan">highest value of <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/> of the triggers (inclusive)</param>
            <param name="maxCount">maximum number of trigger keys allow to acquired in the returning list.</param>
            <returns>A (never null, possibly empty) list of the identifiers (Key objects) of the next triggers to be fired.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertFiredTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Insert a fired trigger.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="trigger">the trigger</param>
            <param name="state">the state that the trigger should be stored in</param>
            <param name="job">The job.</param>
            <returns>the number of rows inserted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateFiredTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            <para>
            Update a fired trigger.
            </para>
            </summary>
            <remarks>
            </remarks>
            <param name="conn"></param>
            the DB Connection
            <param name="trigger"></param>
            the trigger
            <param name="state"></param>
            <param name="job"></param>
            the state that the trigger should be stored in
            <returns>the number of rows inserted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectFiredTriggerRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given trigger, or
            trigger group if trigger name is <see langword="null"/>.
            </summary>
            <param name="conn">The DB connection.</param>
            <param name="triggerName">Name of the trigger.</param>
            <param name="groupName">Name of the group.</param>
            <returns>a List of <see cref="T:Quartz.Impl.AdoJobStore.FiredTriggerRecord"/> objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectFiredTriggerRecordsByJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given job, or job
            group if job name is <see langword="null"/>.
            </summary>
            <param name="conn">The DB connection.</param>
            <param name="jobName">Name of the job.</param>
            <param name="groupName">Name of the group.</param>
            <returns>a List of <see cref="T:Quartz.Impl.AdoJobStore.FiredTriggerRecord"/> objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectInstancesFiredTriggerRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Select the states of all fired-trigger records for a given scheduler
            instance.
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceName">Name of the instance.</param>
            <returns>A list of FiredTriggerRecord objects.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectFiredTriggerInstanceNames(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Select the distinct instance names of all fired-trigger records.
            </summary>
            <param name="conn">The conn.</param>
            <returns></returns>
            <remarks>
            This is useful when trying to identify orphaned fired triggers (a
            fired trigger without a scheduler state record.)
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteFiredTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Delete a fired trigger.
            </summary>
            <param name="conn">the DB Connection</param>
            <param name="entryId">the fired trigger entry to delete</param>
            <returns>the number of rows deleted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectJobExecutionCount(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Selects the job execution count.
            </summary>
            <param name="conn">The DB connection.</param>
            <param name="jobKey">The key of the job.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.InsertSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Inserts the state of the scheduler.
            </summary>
            <param name="conn">The conn.</param>
            <param name="instanceName">The instance id.</param>
            <param name="checkInTime">The check in time.</param>
            <param name="interval">The interval.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.DeleteSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            Deletes the state of the scheduler.
            </summary>
            <param name="conn">The database connection.</param>
            <param name="instanceName">The instance id.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.UpdateSchedulerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.DateTimeOffset)">
            <summary>
            Updates the state of the scheduler.
            </summary>
            <param name="conn">The database connection.</param>
            <param name="instanceName">The instance id.</param>
            <param name="checkInTime">The check in time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectSchedulerStateRecords(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary>
            A List of all current <see cref="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord"/>s.
            <para>
            If instanceId is not null, then only the record for the identified
            instance will be returned.
            </para>
            </summary>
            <param name="conn">The DB Connection</param>
            <param name="instanceName">The instance id.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.ReplaceTablePrefix(System.String)">
            <summary>
            Replace the table prefix in a query by replacing any occurrences of
            "{0}" with the table prefix.
            </summary>
            <param name="query">The unsubstitued query</param>
            <returns>The query, with proper table prefix substituted</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SerializeObject(System.Object)">
            <summary>
            Create a serialized <see lanword="byte[]"/> version of an Object.
            </summary>
            <param name="obj">the object to serialize</param>
            <returns>Serialized object as byte array.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SerializeJobData(Quartz.JobDataMap)">
            <summary>
            Remove the transient data from and then create a serialized <see cref="T:System.IO.MemoryStream"/>
            version of a <see cref="T:Quartz.JobDataMap"/> and returns the underlying bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>the serialized data as byte array</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SerializeProperties(Quartz.JobDataMap)">
            <summary>
            serialize
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.ConvertFromProperty(System.Collections.Specialized.NameValueCollection)">
            <summary> 
            Convert the JobDataMap into a list of properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.ConvertToProperty(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Convert the JobDataMap into a list of properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.GetObjectFromBlob``1(System.Data.IDataReader,System.Int32)">
            <summary>
            This method should be overridden by any delegate subclasses that need
            special handling for BLOBs. The default implementation uses standard
            ADO.NET operations.
            </summary>
            <param name="rs">The data reader, already queued to the correct row.</param>
            <param name="colIndex">The column index for the BLOB.</param>
            <returns>The deserialized object from the DataReader BLOB.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.GetJobDataFromBlob``1(System.Data.IDataReader,System.Int32)">
            <summary>
            This method should be overridden by any delegate subclasses that need
            special handling for BLOBs for job details. 
            </summary>
            <param name="rs">The result set, already queued to the correct row.</param>
            <param name="colIndex">The column index for the BLOB.</param>
            <returns>The deserialized Object from the ResultSet BLOB.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdAdoDelegate.SelectPausedTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Selects the paused trigger groups.
            </summary>
            <param name="conn">The DB Connection.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.OracleDelegate.GetSelectNextTriggerToAcquireSql(System.Int32)">
            <summary>
            Creates the SQL for select next trigger to acquire.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.OracleDelegate.GetDbBooleanValue(System.Boolean)">
            <summary>
            Gets the db presentation for boolean value. For Oracle we use true/false of "1"/"0".
            </summary>
            <param name="booleanValue">Value to map to database.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Simpl.IRemotableQuartzScheduler">
            <summary>
            
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Simpl.IRemotableQuartzScheduler.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.IRemotableQuartzScheduler.Standby">
            <summary>
            Standbies this instance.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.IRemotableQuartzScheduler.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.IRemotableQuartzScheduler.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.IRemotableQuartzScheduler.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.SchedulerMetaData">
            <summary>
            Describes the settings and capabilities of a given <see cref="T:Quartz.IScheduler"/>
            instance.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.SchedulerMetaData.#ctor(System.String,System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.DateTimeOffset},System.Int32,System.Type,System.Boolean,System.Boolean,System.Type,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerMetaData"/> class.
            </summary>
            <param name="schedName">Name of the scheduler.</param>
            <param name="schedInst">The scheduler instance.</param>
            <param name="schedType">The scheduler type.</param>
            <param name="isRemote">if set to <c>true</c>, scheduler is a remote scheduler.</param>
            <param name="started">if set to <c>true</c>, scheduler is started.</param>
            <param name="isInStandbyMode">if set to <c>true</c>, scheduler is in standby mode.</param>
            <param name="shutdown">if set to <c>true</c>, scheduler is shutdown.</param>
            <param name="startTime">The start time.</param>
            <param name="numberOfJobsExec">The number of jobs executed.</param>
            <param name="jsType">The job store type.</param>
            <param name="jsPersistent">if set to <c>true</c>, job store is persistent.</param>
            <param name="jsClustered">if set to <c>true</c>, the job store is clustered</param>
            <param name="tpType">The thread pool type.</param>
            <param name="tpSize">Size of the thread pool.</param>
            <param name="version">The version string.</param>
        </member>
        <member name="M:Quartz.SchedulerMetaData.GetSummary">
            <summary>
            Returns a formatted (human readable) string describing all the <see cref="T:Quartz.IScheduler"/>'s
            meta-data values.
            </summary>
            <remarks>
            <para>
            The format of the string looks something like this:
            <pre>
            Quartz Scheduler 'SchedulerName' with instanceId 'SchedulerInstanceId' Scheduler class: 'Quartz.Impl.StdScheduler' - running locally. Running since: '11:33am on Jul 19, 2002' Not currently paused. Number of Triggers fired: '123' Using thread pool 'Quartz.Simpl.SimpleThreadPool' - with '8' threads Using job-store 'Quartz.Impl.JobStore' - which supports persistence.
            </pre>
            </para>
            </remarks>
        </member>
        <member name="M:Quartz.SchedulerMetaData.ToString">
            <summary>
            Return a simple string representation of this object.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerName">
            <summary>
            Returns the name of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerType">
            <summary>
            Returns the class-name of the <see cref="T:Quartz.IScheduler"/> instance.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.SchedulerRemote">
            <summary>
            Returns whether the <see cref="T:Quartz.IScheduler"/> is being used remotely (via remoting).
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Started">
            <summary>
            Returns whether the scheduler has been started.
            </summary>
            <remarks>
            Note: <see cref="P:Quartz.SchedulerMetaData.Started"/> may return <see langword="true"/> even if
            <see cref="P:Quartz.SchedulerMetaData.InStandbyMode"/> returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Quartz.SchedulerMetaData.InStandbyMode">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> is in standby mode.
            </summary>
            <remarks>
            Note: <see cref="P:Quartz.SchedulerMetaData.Started"/> may return <see langword="true"/> even if
            <see cref="P:Quartz.SchedulerMetaData.InStandbyMode"/> returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Shutdown">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> has been Shutdown.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.JobStoreType">
            <summary>
            Returns the class-name of the <see cref="T:Quartz.Spi.IJobStore"/> instance that is
            being used by the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.ThreadPoolType">
            <summary>
            Returns the type name of the <see cref="T:System.Threading.ThreadPool"/> instance that is
            being used by the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.ThreadPoolSize">
            <summary> 
            Returns the number of threads currently in the <see cref="T:Quartz.IScheduler"/>'s
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.Version">
            <summary>
            Returns the version of Quartz that is running.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.RunningSince">
            <summary> 
            Returns the <see cref="T:System.DateTimeOffset"/> at which the Scheduler started running.
            </summary>
            <returns> null if the scheduler has not been started.
            </returns>
        </member>
        <member name="P:Quartz.SchedulerMetaData.NumberOfJobsExecuted">
            <summary>
            Returns the number of jobs executed since the <see cref="T:Quartz.IScheduler"/>
            started..
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.JobStoreSupportsPersistence">
            <summary>
            Returns whether or not the <see cref="T:Quartz.IScheduler"/>'s<see cref="T:Quartz.Spi.IJobStore"/>
            instance supports persistence.
            </summary>
        </member>
        <member name="P:Quartz.SchedulerMetaData.JobStoreClustered">
            <summary>
            Returns whether or not the <see cref="T:Quartz.IScheduler"/>'s <see cref="T:Quartz.Spi.IJobStore"/>
            is clustered.
            </summary>
        </member>
        <member name="T:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin">
             <summary> 
             This plugin loads XML file(s) to add jobs and schedule them with triggers
             as the scheduler is initialized, and can optionally periodically scan the
             file for changes.
            </summary>
             <remarks>
             The periodically scanning of files for changes is not currently supported in a 
             clustered environment.
             </remarks> 
             <author>James House</author>
             <author>Pierre Awaragi</author>
        </member>
        <member name="T:Quartz.Job.IFileScanListener">
            <summary> 
            Interface for objects wishing to receive a 'call-back' from a 
            <see cref="T:Quartz.Job.FileScanJob"/>.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.Job.FileScanJob"/>
        </member>
        <member name="M:Quartz.Job.IFileScanListener.FileUpdated(System.String)">
            <summary>
            Ïnforms that certain file has been updated.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.FileUpdated(System.String)">
            <summary>
            
            </summary>
            <param name="fName"></param>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <see cref="T:Quartz.IScheduler"/> in order to give
            the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> a chance to initialize.
            </summary>
            <param name="pluginName">The name.</param>
            <param name="sched">The scheduler.</param>
            <throws>SchedulerConfigException </throws>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.Start">
            <summary>
            Called when the associated <see cref="T:Quartz.IScheduler"/> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.BuildJobTriggerName(System.String)">
            <summary>
            Helper method for generating unique job/trigger name for the  
            file scanning jobs (one per FileJob).  The unique names are saved
            in jobTriggerNameSet.
            </summary>
            <param name="fileBasename"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.Shutdown">
            <summary>
            Called in order to inform the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.FileNames">
            <summary> 
            Comma separated list of file names (with paths) to the XML files that should be read.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.ScanInterval">
            <summary> 
            The interval at which to scan for changes to the file.  
            If the file has been changed, it is re-loaded and parsed.   The default 
            value for the interval is 0, which disables scanning.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.Xml.XMLSchedulingDataProcessorPlugin.FailOnFileNotFound">
            <summary> 
            Whether or not initialization of the plugin should fail (throw an
            exception) if the file cannot be found. Default is <see langword="true" />.
            </summary>
        </member>
        <member name="T:Quartz.JobExecutionContextImpl">
            <summary>
            A context bundle containing handles to various environment information, that
            is given to a <see cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> instance as it is
            executed, and to a <see cref="T:Quartz.ITrigger"/> instance after the
            execution completes.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Quartz.JobDataMap"/> found on this object (via the 
            <see cref="P:Quartz.JobExecutionContextImpl.MergedJobDataMap"/> method) serves as a convenience -
            it is a merge of the <see cref="T:Quartz.JobDataMap"/> found on the 
            <see cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> and the one found on the <see cref="T:Quartz.ITrigger"/>, with 
            the value in the latter overriding any same-named values in the former.
            <i>It is thus considered a 'best practice' that the Execute code of a Job
            retrieve data from the JobDataMap found on this object</i> 
            </para>
            <para>
            NOTE: Do not
            expect value 'set' into this JobDataMap to somehow be set back onto a
            job's own JobDataMap.
            </para>
            
            <para>
            <see cref="T:Quartz.IJobExecutionContext"/> s are also returned from the 
            <see cref="M:Quartz.IScheduler.GetCurrentlyExecutingJobs"/>
            method. These are the same instances as those past into the jobs that are
            currently executing within the scheduler. The exception to this is when your
            application is using Quartz remotely (i.e. via remoting or WCF) - in which case you get
            a clone of the <see cref="T:Quartz.IJobExecutionContext"/>s, and their references to
            the <see cref="T:Quartz.IScheduler"/> and <see cref="T:Quartz.IJob"/> instances have been lost (a
            clone of the <see cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> is still available - just not a handle
            to the job instance that is running).
            </para>
            </remarks>
            <seealso cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> 
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IJobExecutionContext.Put(System.Object,System.Object)">
            <summary> 
            Put the specified value into the context's data map with the given key.
            Possibly useful for sharing data between listeners and jobs.
            <para>
            NOTE: this data is volatile - it is lost after the job execution
            completes, and all TriggerListeners and JobListeners have been 
            notified.
            </para> 
            </summary>
            <param name="key">
            </param>
            <param name="objectValue">
            </param>
        </member>
        <member name="M:Quartz.IJobExecutionContext.Get(System.Object)">
            <summary> 
            Get the value with the given key from the context's data map.
            </summary>
            <param name="key">
            </param>
        </member>
        <member name="P:Quartz.IJobExecutionContext.Scheduler">
            <summary>
            Get a handle to the <see cref="T:Quartz.IScheduler"/> instance that fired the
            <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.Trigger">
            <summary>
            Get a handle to the <see cref="T:Quartz.ITrigger"/> instance that fired the
            <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.Calendar">
            <summary>
            Get a handle to the <see cref="T:Quartz.ICalendar"/> referenced by the <see cref="T:Quartz.ITrigger"/>
            instance that fired the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.Recovering">
            <summary>
            If the <see cref="T:Quartz.IJob"/> is being re-executed because of a 'recovery'
            situation, this method will return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.RefireCount">
            <summary>
            Gets the refire count.
            </summary>
            <value>The refire count.</value>
        </member>
        <member name="P:Quartz.IJobExecutionContext.MergedJobDataMap">
            <summary>
            Get the convenience <see cref="T:Quartz.JobDataMap"/> of this execution context.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Quartz.JobDataMap"/> found on this object serves as a convenience -
            it is a merge of the <see cref="T:Quartz.JobDataMap"/> found on the 
            <see cref="P:Quartz.IJobExecutionContext.JobDetail"/> and the one found on the <see cref="T:Quartz.ITrigger"/>, with 
            the value in the latter overriding any same-named values in the former.
            <i>It is thus considered a 'best practice' that the Execute code of a Job
            retrieve data from the JobDataMap found on this object.</i>
            </para>
            <para>
            NOTE: Do not expect value 'set' into this JobDataMap to somehow be 
            set back onto a job's own JobDataMap.
            </para>
            <para>
            Attempts to change the contents of this map typically result in an 
            illegal state.
            </para>
            </remarks>
        </member>
        <member name="P:Quartz.IJobExecutionContext.JobDetail">
            <summary>
            Get the <see cref="P:Quartz.IJobExecutionContext.JobDetail"/> associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.JobInstance">
            <summary>
            Get the instance of the <see cref="T:Quartz.IJob"/> that was created for this
            execution.
            <para>
            Note: The Job instance is not available through remote scheduler
            interfaces.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.IJobExecutionContext.FireTimeUtc">
            <summary>
            The actual time the trigger fired. For instance the scheduled time may
            have been 10:00:00 but the actual fire time may have been 10:00:03 if
            the scheduler was too busy.
            </summary>
            <returns> Returns the fireTimeUtc.</returns>
            <seealso cref="P:Quartz.IJobExecutionContext.ScheduledFireTimeUtc"/>
        </member>
        <member name="P:Quartz.IJobExecutionContext.ScheduledFireTimeUtc">
            <summary> 
            The scheduled time the trigger fired for. For instance the scheduled
            time may have been 10:00:00 but the actual fire time may have been
            10:00:03 if the scheduler was too busy.
            </summary>
            <returns> Returns the scheduledFireTimeUtc.</returns>
            <seealso cref="P:Quartz.IJobExecutionContext.FireTimeUtc"/>
        </member>
        <member name="P:Quartz.IJobExecutionContext.PreviousFireTimeUtc">
            <summary>
            Gets the previous fire time.
            </summary>
            <value>The previous fire time.</value>
        </member>
        <member name="P:Quartz.IJobExecutionContext.NextFireTimeUtc">
            <summary>
            Gets the next fire time.
            </summary>
            <value>The next fire time.</value>
        </member>
        <member name="P:Quartz.IJobExecutionContext.FireInstanceId">
            <summary>
            Get the unique Id that identifies this particular firing instance of the
            trigger that triggered this job execution.  It is unique to this 
            JobExecutionContext instance as well.
            </summary>
             <returns>the unique fire instance id</returns>
            <seealso cref="M:Quartz.IScheduler.Interrupt(System.String)"/>
        </member>
        <member name="P:Quartz.IJobExecutionContext.Result">
            <summary>
            Returns the result (if any) that the <see cref="T:Quartz.IJob"/> set before its 
            execution completed (the type of object set as the result is entirely up 
            to the particular job).
            </summary>
            <remarks>
            <para>
            The result itself is meaningless to Quartz, but may be informative
            to <see cref="T:Quartz.IJobListener"/>s or 
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
            execution.
            </para> 
            
            Set the result (if any) of the <see cref="T:Quartz.IJob"/>'s execution (the type of 
            object set as the result is entirely up to the particular job).
            
            <para>
            The result itself is meaningless to Quartz, but may be informative
            to <see cref="T:Quartz.IJobListener"/>s or 
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
            execution.
            </para> 
            </remarks>
        </member>
        <member name="P:Quartz.IJobExecutionContext.JobRunTime">
            <summary> 
            The amount of time the job ran for.  The returned 
            value will be <see cref="F:System.TimeSpan.MinValue"/> until the job has actually completed (or thrown an 
            exception), and is therefore generally only useful to 
            <see cref="T:Quartz.IJobListener"/>s and <see cref="T:Quartz.ITriggerListener"/>s.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionContextImpl.#ctor(Quartz.IScheduler,Quartz.Spi.TriggerFiredBundle,Quartz.IJob)">
            <summary>
            Create a JobExcecutionContext with the given context data.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionContextImpl.IncrementRefireCount">
            <summary>
            Increments the refire count.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionContextImpl.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Quartz.JobExecutionContextImpl.Put(System.Object,System.Object)">
            <summary> 
            Put the specified value into the context's data map with the given key.
            Possibly useful for sharing data between listeners and jobs.
            <para>
            NOTE: this data is volatile - it is lost after the job execution
            completes, and all TriggerListeners and JobListeners have been 
            notified.
            </para> 
            </summary>
            <param name="key">
            </param>
            <param name="objectValue">
            </param>
        </member>
        <member name="M:Quartz.JobExecutionContextImpl.Get(System.Object)">
            <summary> 
            Get the value with the given key from the context's data map.
            </summary>
            <param name="key">
            </param>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.Scheduler">
            <summary>
            Get a handle to the <see cref="T:Quartz.IScheduler"/> instance that fired the
            <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.Trigger">
            <summary>
            Get a handle to the <see cref="T:Quartz.ITrigger"/> instance that fired the
            <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.Calendar">
            <summary>
            Get a handle to the <see cref="T:Quartz.ICalendar"/> referenced by the <see cref="T:Quartz.ITrigger"/>
            instance that fired the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.Recovering">
            <summary>
            If the <see cref="T:Quartz.IJob"/> is being re-executed because of a 'recovery'
            situation, this method will return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.RefireCount">
            <summary>
            Gets the refire count.
            </summary>
            <value>The refire count.</value>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.MergedJobDataMap">
            <summary>
            Get the convenience <see cref="T:Quartz.JobDataMap"/> of this execution context.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Quartz.JobDataMap"/> found on this object serves as a convenience -
            it is a merge of the <see cref="T:Quartz.JobDataMap"/> found on the 
            <see cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> and the one found on the <see cref="T:Quartz.ITrigger"/>, with 
            the value in the latter overriding any same-named values in the former.
            <i>It is thus considered a 'best practice' that the Execute code of a Job
            retrieve data from the JobDataMap found on this object.</i>
            </para>
            <para>
            NOTE: Do not expect value 'set' into this JobDataMap to somehow be 
            set back onto a job's own JobDataMap.
            </para>
            <para>
            Attempts to change the contents of this map typically result in an 
            illegal state.
            </para>
            </remarks>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.JobDetail">
            <summary>
            Get the <see cref="P:Quartz.JobExecutionContextImpl.JobDetail"/> associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.JobInstance">
            <summary>
            Get the instance of the <see cref="T:Quartz.IJob"/> that was created for this
            execution.
            <para>
            Note: The Job instance is not available through remote scheduler
            interfaces.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.FireTimeUtc">
            <summary>
            The actual time the trigger fired. For instance the scheduled time may
            have been 10:00:00 but the actual fire time may have been 10:00:03 if
            the scheduler was too busy.
            </summary>
            <returns> Returns the fireTimeUtc.</returns>
            <seealso cref="P:Quartz.JobExecutionContextImpl.ScheduledFireTimeUtc"/>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.ScheduledFireTimeUtc">
            <summary> 
            The scheduled time the trigger fired for. For instance the scheduled
            time may have been 10:00:00 but the actual fire time may have been
            10:00:03 if the scheduler was too busy.
            </summary>
            <returns> Returns the scheduledFireTimeUtc.</returns>
            <seealso cref="P:Quartz.JobExecutionContextImpl.FireTimeUtc"/>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.PreviousFireTimeUtc">
            <summary>
            Gets the previous fire time.
            </summary>
            <value>The previous fire time.</value>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.NextFireTimeUtc">
            <summary>
            Gets the next fire time.
            </summary>
            <value>The next fire time.</value>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.Result">
            <summary>
            Returns the result (if any) that the <see cref="T:Quartz.IJob"/> set before its 
            execution completed (the type of object set as the result is entirely up 
            to the particular job).
            </summary>
            <remarks>
            <para>
            The result itself is meaningless to Quartz, but may be informative
            to <see cref="T:Quartz.IJobListener"/>s or 
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
            execution.
            </para> 
            
            Set the result (if any) of the <see cref="T:Quartz.IJob"/>'s execution (the type of 
            object set as the result is entirely up to the particular job).
            
            <para>
            The result itself is meaningless to Quartz, but may be informative
            to <see cref="T:Quartz.IJobListener"/>s or 
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
            execution.
            </para> 
            </remarks>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.JobRunTime">
            <summary> 
            The amount of time the job ran for.  The returned 
            value will be <see cref="F:System.TimeSpan.MinValue"/> until the job has actually completed (or thrown an 
            exception), and is therefore generally only useful to 
            <see cref="T:Quartz.IJobListener"/>s and <see cref="T:Quartz.ITriggerListener"/>s.
            </summary>
        </member>
        <member name="P:Quartz.JobExecutionContextImpl.FireInstanceId">
            <summary>
            Returns the fire instace id.
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzSchedulerThread">
            <summary>
            The thread responsible for performing the work of firing <see cref="T:Quartz.ITrigger"/>
            s that are registered with the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.GetRandomizedIdleWaitTime">
            <summary>
            Gets the randomized idle wait time.
            </summary>
            <value>The randomized idle wait time.</value>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.#ctor(Quartz.Core.QuartzScheduler,Quartz.Core.QuartzSchedulerResources)">
            <summary>
            Construct a new <see cref="T:Quartz.Core.QuartzSchedulerThread"/> for the given
            <see cref="T:Quartz.Core.QuartzScheduler"/> as a non-daemon <see cref="T:System.Threading.Thread"/>
            with normal priority.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.#ctor(Quartz.Core.QuartzScheduler,Quartz.Core.QuartzSchedulerResources,System.Boolean,System.Int32)">
            <summary>
            Construct a new <see cref="T:Quartz.Core.QuartzSchedulerThread"/> for the given
            <see cref="T:Quartz.Core.QuartzScheduler"/> as a <see cref="T:System.Threading.Thread"/> with the given
            attributes.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.TogglePause(System.Boolean)">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.Halt">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.SignalSchedulingChange(System.Nullable{System.DateTimeOffset})">
            <summary>
            Signals the main processing loop that a change in scheduling has been
            made - in order to interrupt any sleeping that may be occuring while
            waiting for the fire time to arrive.
            </summary>
            <param name="candidateNewNextFireTimeUtc">
            the time when the newly scheduled trigger
            will fire.  If this method is being called do to some other even (rather
            than scheduling a trigger), the caller should pass null.
            </param>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.Run">
            <summary>
            The main processing loop of the <see cref="T:Quartz.Core.QuartzSchedulerThread"/>.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.ErrorTriggerRetryLoop(Quartz.Spi.TriggerFiredBundle)">
            <summary>
            Trigger retry loop that is executed on error condition.
            </summary>
            <param name="bndle">The bndle.</param>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerThread.ReleaseTriggerRetryLoop(Quartz.Spi.IOperableTrigger)">
            <summary>
            Releases the trigger retry loop.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.IdleWaitTime">
            <summary>
            Sets the idle wait time.
            </summary>
            <value>The idle wait time.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.Paused">
            <summary>
            Gets a value indicating whether this <see cref="T:Quartz.Core.QuartzSchedulerThread"/> is paused.
            </summary>
            <value><c>true</c> if paused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerThread.DbFailureRetryInterval">
            <summary>
            Gets or sets the db failure retry interval.
            </summary>
            <value>The db failure retry interval.</value>
        </member>
        <member name="T:Quartz.Core.QuartzScheduler">
            <summary>
            This is the heart of Quartz, an indirect implementation of the <see cref="T:Quartz.IScheduler"/>
            interface, containing methods to schedule <see cref="T:Quartz.IJob"/>s,
            register <see cref="T:Quartz.IJobListener"/> instances, etc.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Core.QuartzSchedulerThread"/>
            <seealso cref="T:Quartz.Spi.IJobStore"/>
            <seealso cref="T:Quartz.Spi.IThreadPool"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.#cctor">
            <summary>
            Initializes the <see cref="T:Quartz.Core.QuartzScheduler"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddInternalSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Register the given <see cref="T:Quartz.ISchedulerListener"/> with the
            <see cref="T:Quartz.IScheduler"/>'s list of internal listeners.
            </summary>
            <param name="schedulerListener"></param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveInternalSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Remove the given <see cref="T:Quartz.ISchedulerListener"/> from the
            <see cref="T:Quartz.IScheduler"/>'s list of internal listeners.
            </summary>
            <param name="schedulerListener"></param>
            <returns>true if the identified listener was found in the list, andremoved.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.#ctor(Quartz.Core.QuartzSchedulerResources,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Core.QuartzScheduler"/> with the given configuration
            properties.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzSchedulerResources"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Bind">
            <summary>
            Bind the scheduler to remoting infrastructure.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.UnBind">
            <summary>
            Un-bind the scheduler from remoting infrastructure.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddNoGCObject(System.Object)">
            <summary>
            Adds an object that should be kept as reference to prevent
            it from being garbage collected.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveNoGCObject(System.Object)">
            <summary>
            Removes the object from garbae collection protected list.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Start">
            <summary>
            Starts the <see cref="T:Quartz.Core.QuartzScheduler"/>'s threads that fire <see cref="T:Quartz.ITrigger"/>s.
            <para>
            All <see cref="T:Quartz.ITrigger"/>s that have misfired will
            be passed to the appropriate TriggerListener(s).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Standby">
            <summary>
            Temporarily halts the <see cref="T:Quartz.Core.QuartzScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s.
            <para>
            The scheduler is not destroyed, and can be re-started at any time.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Shutdown">
            <summary>
            Halts the <see cref="T:Quartz.Core.QuartzScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s,
            and cleans up all resources associated with the QuartzScheduler.
            Equivalent to <see cref="M:Quartz.Core.QuartzScheduler.Shutdown(System.Boolean)"/>.
            <para>
            The scheduler cannot be re-started.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Shutdown(System.Boolean)">
            <summary>
            Halts the <see cref="T:Quartz.Core.QuartzScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s,
            and cleans up all resources associated with the QuartzScheduler.
            <para>
            The scheduler cannot be re-started.
            </para>
            </summary>
            <param name="waitForJobsToComplete">
            if <see langword="true"/> the scheduler will not allow this method
            to return until all currently executing jobs have completed.
            </param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ValidateState">
            <summary>
            Validates the state.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ScheduleJob(Quartz.IJobDetail,Quartz.ITrigger)">
            <summary> 
            Add the <see cref="T:Quartz.IJob"/> identified by the given
            <see cref="T:Quartz.IJobDetail"/> to the Scheduler, and
            associate the given <see cref="T:Quartz.ITrigger"/> with it.
            <para>
            If the given Trigger does not reference any <see cref="T:Quartz.IJob"/>, then it
            will be set to reference the Job passed with it into this method.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ScheduleJob(Quartz.ITrigger)">
            <summary>
            Schedule the given <see cref="T:Quartz.ITrigger"/> with the
            <see cref="T:Quartz.IJob"/> identified by the <see cref="T:Quartz.ITrigger"/>'s settings.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Add the given <see cref="T:Quartz.IJob"/> to the Scheduler - with no associated
            <see cref="T:Quartz.ITrigger"/>. The <see cref="T:Quartz.IJob"/> will be 'dormant' until
            it is scheduled with a <see cref="T:Quartz.ITrigger"/>, or <see cref="M:Quartz.IScheduler.TriggerJob(Quartz.JobKey)"/>
            is called for it.
            <para>
            The <see cref="T:Quartz.IJob"/> must by definition be 'durable', if it is not,
            SchedulerException will be thrown.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.DeleteJob(Quartz.JobKey)">
            <summary>
            Delete the identified <see cref="T:Quartz.IJob"/> from the Scheduler - and any
            associated <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <returns> true if the Job was found and deleted.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.UnscheduleJob(Quartz.TriggerKey)">
            <summary>
            Remove the indicated <see cref="T:Quartz.ITrigger"/> from the
            scheduler.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RescheduleJob(Quartz.TriggerKey,Quartz.ITrigger)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
            given name, and store the new given one - which must be associated
            with the same job.
            </summary>
            <param name="triggerKey">the key of the trigger</param>
            <param name="newTrigger">The new <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <returns>
            	<see langword="null"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was not found and removed from the store, otherwise
            the first fire time of the newly scheduled trigger.
            </returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NextLong(System.Random)">
            <summary>
            Creates a new positive random number 
            </summary>
            <param name="random">The last random obtained</param>
            <returns>Returns a new positive random number</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.TriggerJob(Quartz.JobKey,Quartz.JobDataMap)">
            <summary>
            Trigger the identified <see cref="T:Quartz.IJob"/> (Execute it now) - with a non-volatile trigger.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.TriggerJob(Quartz.Spi.IOperableTrigger)">
            <summary>
            Store and schedule the identified <see cref="T:Quartz.Spi.IOperableTrigger"/>
            </summary>
            <param name="trig"></param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseTrigger(Quartz.TriggerKey)">
            <summary>
            Pause the <see cref="T:Quartz.ITrigger"/> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the given group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseJob(Quartz.JobKey)">
            <summary> 
            Pause the <see cref="T:Quartz.IJobDetail"/> with the given
            name - by pausing all of its current <see cref="T:Quartz.ITrigger"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.IJobDetail"/>s in the
            given group - by pausing all of their <see cref="T:Quartz.ITrigger"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.ITrigger"/> with the given
            name.
            <para>
            If the <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.ITrigger"/>s in the
            matching groups.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetPausedTriggerGroups">
            <summary>
            Gets the paused trigger groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeJob(Quartz.JobKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.IJobDetail"/> with
            the given name.
            <para>
            If any of the <see cref="T:Quartz.IJob"/>'s<see cref="T:Quartz.ITrigger"/> s missed one
            or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s misfire
            instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.IJobDetail"/>s
            in the matching groups.
            <para>
            If any of the <see cref="T:Quartz.IJob"/> s had <see cref="T:Quartz.ITrigger"/> s that
            missed one or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s
            misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.PauseAll">
            <summary>
            Pause all triggers - equivalent of calling <see cref="M:Quartz.Core.QuartzScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            with a matcher matching all known groups.
            <para>
            When <see cref="M:Quartz.Core.QuartzScheduler.ResumeAll"/> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Core.QuartzScheduler.ResumeAll"/>
            <seealso cref="M:Quartz.Core.QuartzScheduler.PauseJob(Quartz.JobKey)"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.ResumeAll">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <see cref="M:Quartz.Core.QuartzScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Core.QuartzScheduler.PauseAll"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobGroupNames">
            <summary>
            Get the names of all known <see cref="T:Quartz.IJob"/> groups.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Get the names of all the <see cref="T:Quartz.IJob"/>s in the
            given group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggersOfJob(Quartz.JobKey)">
            <summary> 
            Get all <see cref="T:Quartz.ITrigger"/> s that are associated with the
            identified <see cref="T:Quartz.IJobDetail"/>.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerGroupNames">
            <summary>
            Get the names of all known <see cref="T:Quartz.ITrigger"/>
            groups.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Get the names of all the <see cref="T:Quartz.ITrigger"/>s in
            the matching groups.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetJobDetail(Quartz.JobKey)">
            <summary> 
            Get the <see cref="T:Quartz.IJobDetail"/> for the <see cref="T:Quartz.IJob"/>
            instance with the given name and group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTrigger(Quartz.TriggerKey)">
            <summary>
            Get the <see cref="T:Quartz.ITrigger"/> instance with the given name and
            group.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.CheckExists(Quartz.JobKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.IJob"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="jobKey">the identifier to check for</param>
            <returns>true if a Job exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.CheckExists(Quartz.TriggerKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.ITrigger"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="triggerKey">the identifier to check for</param>
            <returns>true if a Trigger exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Clear">
            <summary>
            Clears (deletes!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Get the current state of the identified <see cref="T:Quartz.ITrigger"/>.  
            </summary>
            <seealso cref="T:Quartz.TriggerState"/>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Add (register) the given <see cref="T:Quartz.ICalendar"/> to the Scheduler.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.DeleteCalendar(System.String)">
            <summary>
            Delete the identified <see cref="T:Quartz.ICalendar"/> from the Scheduler.
            </summary>
            <returns> true if the Calendar was found and deleted.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetCalendar(System.String)">
            <summary> 
            Get the <see cref="T:Quartz.ICalendar"/> instance with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetCalendarNames">
            <summary>
            Get the names of all registered <see cref="T:Quartz.ICalendar"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddInternalJobListener(Quartz.IJobListener)">
            <summary>
            Add the given <see cref="T:Quartz.IJobListener"/> to the
            <see cref="T:Quartz.IScheduler"/>'s <i>internal</i> list.
            </summary>
            <param name="jobListener"></param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveInternalJobListener(System.String)">
            <summary>
            Remove the identified <see cref="T:Quartz.IJobListener"/> from the <see cref="T:Quartz.IScheduler"/>'s
            list of <i>internal</i> listeners.
            </summary>
            <param name="name"></param>
            <returns>true if the identified listener was found in the list, and removed.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetInternalJobListener(System.String)">
            <summary>
            Get the <i>internal</i> <see cref="T:Quartz.IJobListener"/>
            that has the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.AddInternalTriggerListener(Quartz.ITriggerListener)">
            <summary>
            Add the given <code>{@link org.quartz.TriggerListener}</code> to the
            <code>Scheduler</code>'s <i>internal</i> list.
            </summary>
            <param name="triggerListener"></param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.RemoveinternalTriggerListener(System.String)">
            <summary>
            Remove the identified <see cref="T:Quartz.ITriggerListener"/> from the <see cref="T:Quartz.IScheduler"/>'s
            list of <i>internal</i> listeners.
            </summary>
            <param name="name"></param>
            <returns>true if the identified listener was found in the list, and removed.</returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.GetInternalTriggerListener(System.String)">
            <summary>
            Get the <i>internal</i> <see cref="T:Quartz.ITriggerListener"/> that
            has the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyJobStoreJobComplete(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary>
            Notifies the job store job complete.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="detail">The detail.</param>
            <param name="instCode">The instruction code.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerThread(System.Nullable{System.DateTimeOffset})">
            <summary>
            Notifies the scheduler thread.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyTriggerListenersFired(Quartz.IJobExecutionContext)">
            <summary>
            Notifies the trigger listeners about fired trigger.
            </summary>
            <param name="jec">The job execution context.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyTriggerListenersMisfired(Quartz.ITrigger)">
            <summary>
            Notifies the trigger listeners about misfired trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyTriggerListenersComplete(Quartz.IJobExecutionContext,Quartz.SchedulerInstruction)">
            <summary>
            Notifies the trigger listeners of completion.
            </summary>
            <param name="jec">The job executution context.</param>
            <param name="instCode">The instruction code to report to triggers.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyJobListenersToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Notifies the job listeners about job to be executed.
            </summary>
            <param name="jec">The jec.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyJobListenersWasVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Notifies the job listeners that job exucution was vetoed.
            </summary>
            <param name="jec">The job execution context.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifyJobListenersWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Notifies the job listeners that job was executed.
            </summary>
            <param name="jec">The jec.</param>
            <param name="je">The je.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersError(System.String,Quartz.SchedulerException)">
            <summary>
            Notifies the scheduler listeners about scheduler error.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="se">The se.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersScheduled(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler listeners about job that was scheduled.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersUnscheduled(Quartz.TriggerKey)">
            <summary>
            Notifies the scheduler listeners about job that was unscheduled.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersFinalized(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler listeners about finalized trigger.
            </summary>
            <param name="trigger">The trigger.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersPausedTriggers(System.String)">
            <summary>
            Notifies the scheduler listeners about paused trigger.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersPausedTrigger(Quartz.TriggerKey)">
            <summary>
            Notifies the scheduler listeners about paused trigger.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersResumedTriggers(System.String)">
            <summary>
            Notifies the scheduler listeners resumed trigger.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersResumedTrigger(Quartz.TriggerKey)">
            <summary>
            Notifies the scheduler listeners resumed trigger.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersPausedJob(Quartz.JobKey)">
            <summary>
            Notifies the scheduler listeners about paused job.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersPausedJobs(System.String)">
            <summary>
            Notifies the scheduler listeners about paused job.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersResumedJob(Quartz.JobKey)">
            <summary>
            Notifies the scheduler listeners about resumed job.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersResumedJobs(System.String)">
            <summary>
            Notifies the scheduler listeners about resumed job.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.NotifySchedulerListenersShutdown">
            <summary>
            Notifies the scheduler listeners about scheduler shutdown.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Interrupt(Quartz.JobKey)">
            <summary>
            Interrupt all instances of the identified InterruptableJob.
            </summary>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.Interrupt(System.String)">
            <summary>
            Interrupt all instances of the identified InterruptableJob executing in this Scheduler instance.
            </summary>
            <remarks>
            This method is not cluster aware.  That is, it will only interrupt 
            instances of the identified InterruptableJob currently executing in this 
            Scheduler instance, not across the entire cluster.
            </remarks>
            <seealso cref="M:Quartz.Simpl.IRemotableQuartzScheduler.Interrupt(Quartz.JobKey)"/>
            <param name="fireInstanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzScheduler.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.Version">
            <summary>
            Gets the version of the Quartz Scheduler.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.VersionMajor">
            <summary>
            Gets the version major.
            </summary>
            <value>The version major.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.VersionMinor">
            <summary>
            Gets the version minor.
            </summary>
            <value>The version minor.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.VersionIteration">
            <summary>
            Gets the version iteration.
            </summary>
            <value>The version iteration.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerSignaler">
            <summary>
            Gets the scheduler signaler.
            </summary>
            <value>The scheduler signaler.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerName">
            <summary>
            Returns the name of the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerInstanceId">
            <summary> 
            Returns the instance Id of the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SchedulerContext">
            <summary>
            Returns the <see cref="P:Quartz.Core.QuartzScheduler.SchedulerContext"/> of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SignalOnSchedulingChange">
            <summary>
            Gets or sets a value indicating whether to signal on scheduling change.
            </summary>
            <value>
            	<c>true</c> if schduler should signal on scheduling change; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.InStandbyMode">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> is paused.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.JobStoreClass">
            <summary>
            Gets the job store class.
            </summary>
            <value>The job store class.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.ThreadPoolClass">
            <summary>
            Gets the thread pool class.
            </summary>
            <value>The thread pool class.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.ThreadPoolSize">
            <summary>
            Gets the size of the thread pool.
            </summary>
            <value>The size of the thread pool.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.IsShutdown">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> has been Shutdown.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.CurrentlyExecutingJobs">
            <summary>
            Return a list of <see cref="T:Quartz.IJobExecutionContext"/> objects that
            represent all currently executing Jobs in this Scheduler instance.
            <para>
            This method is not cluster aware.  That is, it will only return Jobs
            currently executing in this Scheduler instance, not across the entire
            cluster.
            </para>
            <para>
            Note that the list returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the true list of executing jobs may be different.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.InternalSchedulerListeners">
            <summary>
            Get a List containing all of the <i>internal</i> <see cref="T:Quartz.ISchedulerListener"/>s
            registered with the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.JobFactory">
            <summary>
            Gets or sets the job factory.
            </summary>
            <value>The job factory.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.RunningSince">
            <summary>
            Gets the running since.
            </summary>
            <value>The running since.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.NumJobsExecuted">
            <summary>
            Gets the number of jobs executed.
            </summary>
            <value>The number of jobs executed.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.SupportsPersistence">
            <summary>
            Gets a value indicating whether this scheduler supports persistence.
            </summary>
            <value><c>true</c> if supports persistence; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.InternalJobListeners">
            <summary>
            Get a List containing all of the <see cref="T:Quartz.IJobListener"/>s
            in the <code>Scheduler</code>'s <i>internal</i> list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Core.QuartzScheduler.InternalTriggerListeners">
            <summary>
            Get a list containing all of the <see cref="T:Quartz.ITriggerListener"/>s
            in the <see cref="T:Quartz.IScheduler"/>'s <i>internal</i> list.
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzScheduler.DelayedSchedulerStarter">
            <summary>
            Helper class to start scheduler in a delayed fashion.
            </summary>
        </member>
        <member name="T:Quartz.Core.ErrorLogger">
            <summary>
            ErrorLogger - Scheduler Listener Class
            </summary>
        </member>
        <member name="T:Quartz.Listener.SchedulerListenerSupport">
            <summary>
             A helpful abstract base class for implementors of 
            <see cref="T:Quartz.ISchedulerListener"/>.
            </summary>
            <remarks>
            The methods in this class are empty so you only need to override the  
            subset for the <see cref="T:Quartz.ISchedulerListener"/> events you care about.
            </remarks>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.ISchedulerListener"/>
        </member>
        <member name="T:Quartz.ISchedulerListener">
            <summary>
            The interface to be implemented by classes that want to be informed of major
            <see cref="T:Quartz.IScheduler"/> events.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.IJobListener"/>
            <seealso cref="T:Quartz.ITriggerListener"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobScheduled(Quartz.ITrigger)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is scheduled.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobUnscheduled(Quartz.TriggerKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is unscheduled.
            </summary>
            <seealso cref="M:Quartz.ISchedulerListener.SchedulingDataCleared"/>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggerFinalized(Quartz.ITrigger)">
            <summary> 
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has reached the condition in which it will never fire again.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggerPaused(Quartz.TriggerKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> a <see cref="T:Quartz.ITrigger"/>s has been paused.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggersPaused(System.String)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> a group of 
            <see cref="T:Quartz.ITrigger"/>s has been paused.
            </summary>
            <remarks>
            If a all groups were paused, then the <see param="triggerName"/> parameter
            will be null.
            </remarks>
            <param name="triggerGroup">The trigger group.</param>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggerResumed(Quartz.TriggerKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has been un-paused.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.TriggersResumed(System.String)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            group of <see cref="T:Quartz.ITrigger"/>s has been un-paused.
            </summary>
            <remarks>
            If all groups were resumed, then the <see param="triggerName"/> parameter
            will be null.
            </remarks>
            <param name="triggerGroup">The trigger group.</param>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobAdded(Quartz.IJobDetail)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            has been added.
            </summary>
            <param name="jobDetail"></param>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobDeleted(Quartz.JobKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            has been deleted.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobPaused(Quartz.JobKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            has been  paused.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobsPaused(System.String)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a
            group of <see cref="T:Quartz.IJobDetail"/>s has been  paused.
            <para>
            If all groups were paused, then the <see param="jobName"/> parameter will be
            null. If all jobs were paused, then both parameters will be null.
            </para>
            </summary>
            <param name="jobGroup">The job group.</param>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobResumed(Quartz.JobKey)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            has been  un-paused.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.JobsResumed(System.String)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            has been  un-paused.
            </summary>
            <param name="jobGroup">The job group.</param>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerError(System.String,Quartz.SchedulerException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a serious error has
            occurred within the scheduler - such as repeated failures in the <see cref="T:Quartz.Spi.IJobStore"/>,
            or the inability to instantiate a <see cref="T:Quartz.IJob"/> instance when its
            <see cref="T:Quartz.ITrigger"/> has fired.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerInStandbyMode">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> to inform the listener
            that it has move to standby mode.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerStarted">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> to inform the listener
            that it has started.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerShutdown">
            <summary> 
            Called by the <see cref="T:Quartz.IScheduler"/> to inform the listener
            that it has Shutdown.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulerShuttingdown">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> to inform the listener
            that it has begun the shutdown sequence.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerListener.SchedulingDataCleared">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> to inform the listener
            that all jobs, triggers and calendars were deleted.
            </summary>
        </member>
        <member name="T:Quartz.IJobListener">
            <summary>
            The interface to be implemented by classes that want to be informed when a
            <see cref="T:Quartz.IJobDetail"/> executes. In general,  applications that use a 
            <see cref="T:Quartz.IScheduler"/> will not have use for this mechanism.
            </summary>
            <seealso cref="M:Quartz.IListenerManager.AddJobListener(Quartz.IJobListener,System.Collections.Generic.IList{Quartz.IMatcher{Quartz.JobKey}})"/>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <seealso cref="T:Quartz.JobExecutionException"/>
            <seealso cref="T:Quartz.ITriggerListener"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred).
            <para>
            This method will not be invoked if the execution of the Job was vetoed
            by a <see cref="T:Quartz.ITriggerListener"/>.
            </para>
            </summary>
            <seealso cref="M:Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Quartz.IJobListener.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occurred), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's 
            execution.
            </summary>
            <seealso cref="M:Quartz.IJobListener.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Quartz.IJobListener.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
            has been executed, and be for the associated <see cref="T:Quartz.Spi.IOperableTrigger"/>'s
            <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
        </member>
        <member name="P:Quartz.IJobListener.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
        </member>
        <member name="T:Quartz.Listener.BroadcastJobListener">
            <summary>
            Holds a List of references to JobListener instances and broadcasts all
            events to them (in order).
            </summary>
            <remarks>
            <para>The broadcasting behavior of this listener to delegate listeners may be
            more convenient than registering all of the listeners directly with the
            Scheduler, and provides the flexibility of easily changing which listeners
            get notified.</para>
            </remarks>
            <seealso cref="M:Quartz.Listener.BroadcastJobListener.AddListener(Quartz.IJobListener)"/>
            <seealso cref="M:Quartz.Listener.BroadcastJobListener.RemoveListener(Quartz.IJobListener)"/>
            <seealso cref="M:Quartz.Listener.BroadcastJobListener.RemoveListener(System.String)"/>
            <author>James House (jhouse AT revolition DOT net)</author>
        </member>
        <member name="M:Quartz.Listener.BroadcastJobListener.#ctor(System.String)">
            <summary>
            Construct an instance with the given name.
            </summary>
            <remarks>
            (Remember to add some delegate listeners!)
            </remarks>
            <param name="name">the name of this instance</param>
        </member>
        <member name="M:Quartz.Listener.BroadcastJobListener.#ctor(System.String,System.Collections.Generic.List{Quartz.IJobListener})">
            <summary>
            Construct an instance with the given name, and List of listeners.
            </summary>
            <remarks>
            </remarks>
            <param name="name">the name of this instance</param>
            <param name="listeners">the initial List of JobListeners to broadcast to.</param>
        </member>
        <member name="T:Quartz.Impl.DefaultThreadExecutor">
            <summary>
            Schedules work on a newly spawned thread. This is the default Quartz behavior.
            </summary>
            <author>matt.accola</author>
        </member>
        <member name="T:Quartz.Spi.IThreadExecutor">
             <summary>
             Allows different strategies for scheduling threads. The <see cref="M:Quartz.Spi.IThreadExecutor.Initialize"/>
             method is required to be called before the first call to
             <see cref="M:Quartz.Spi.IThreadExecutor.Execute(Quartz.QuartzThread)"/>. The Thread containing the work to be performed is
             passed to execute and the work is scheduled by the underlying implementation.
            </summary>
             <author>matt.accola</author> 
        </member>
        <member name="M:Quartz.Spi.IThreadExecutor.Execute(Quartz.QuartzThread)">
            <summary>
            Submit a task for execution.
            </summary>
            <param name="thread">Thread to execute.</param>
        </member>
        <member name="M:Quartz.Spi.IThreadExecutor.Initialize">
            <summary>
            Initialize any state prior to calling <see cref="M:Quartz.Spi.IThreadExecutor.Execute(Quartz.QuartzThread)"/>.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport">
            <summary>
            A base implementation of <see cref="T:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate"/> that persists
            trigger fields in the "QRTZ_SIMPROP_TRIGGERS" table.  This allows extending
            concrete classes to simply implement a couple methods that do the work of
            getting/setting the trigger's fields, and creating the <see cref="T:Quartz.IScheduleBuilder"/>
            for the particular type of trigger.
            </summary>
            <seealso cref="T:Quartz.Impl.AdoJobStore.CalendarIntervalTriggerPersistenceDelegate"/>
            <author>jhouse</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate">
            <summary>
            An interface which provides an implementation for storing a particular
            type of <code>Trigger</code>'s extended properties.
            </summary>
            <author>jhouse</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.Initialize(System.String,System.String,Quartz.Impl.AdoJobStore.ICommandAccessor)">
            <summary>
            Initializes the persistence delegate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.CanHandleTriggerType(Quartz.Spi.IOperableTrigger)">
            <summary>
            Returns whether the trigger type can be handled by delegate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.GetHandledTriggerTypeDiscriminator">
            <summary>
            Returns database discriminator value for trigger type.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.InsertExtendedTriggerProperties(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Inserts trigger's special properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.UpdateExtendedTriggerProperties(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,System.String,Quartz.IJobDetail)">
            <summary>
            Updates trigger's special properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.DeleteExtendedTriggerProperties(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Deletes trigger's special properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ITriggerPersistenceDelegate.LoadExtendedTriggerProperties(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Loads trigger's special properties.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport.CanHandleTriggerType(Quartz.Spi.IOperableTrigger)">
            <summary>
            Returns whether the trigger type can be handled by delegate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SimplePropertiesTriggerPersistenceDelegateSupport.GetHandledTriggerTypeDiscriminator">
            <summary>
            Returns database discriminator value for trigger type.
            </summary>
        </member>
        <member name="T:Quartz.Impl.Matchers.NotMatcher`1">
            <summary>
            Matches using an NOT operator on another Matcher. 
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.NotMatcher`1.Not``1(Quartz.IMatcher{``0})">
            <summary>
            Create a NotMatcher that reverses the result of the given matcher.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.SystemTime">
            <summary>
            A time source for Quartz.NET that returns the current time.
            Original idea by Ayende Rahien:
            http://ayende.com/Blog/archive/2008/07/07/Dealing-with-time-in-tests.aspx
            </summary>
        </member>
        <member name="F:Quartz.SystemTime.UtcNow">
            <summary>
            Return current time via <see cref="T:System.Func`1"/>. Allows easier unit testing.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.Common.DbProvider">
            <summary>
                
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.IDbProvider">
            <summary>
            
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
            <returns>A new Command Builder</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary> 
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.IDbProvider.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.IDbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.RegisterDbMetadata(System.String,Quartz.Impl.AdoJobStore.Common.DbMetadata)">
            <summary>
             Registers DB metadata information for given provider name.
            </summary>
            <param name="dbProviderName"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.Common.DbProvider"/> class.
            </summary>
            <param name="dbProviderName">Name of the db provider.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.CreateCommand">
            <summary>
            Returns a new command object for executing SQL statments/Stored Procedures
            against the database.
            </summary>
            <returns>An new <see cref="T:System.Data.IDbCommand"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.CreateCommandBuilder">
            <summary>
            Returns a new instance of the providers CommandBuilder class.
            </summary>
            <returns>A new Command Builder</returns>
            <remarks>In .NET 1.1 there was no common base class or interface
            for command builders, hence the return signature is object to
            be portable (but more loosely typed) across .NET 1.1/2.0</remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.CreateConnection">
            <summary>
            Returns a new connection object to communicate with the database.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.CreateParameter">
            <summary>
            Returns a new parameter object for binding values to parameter
            placeholders in SQL statements or Stored Procedure variables.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbDataParameter"/></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbProvider.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbProvider.ConnectionString">
            <summary>
            Connection string used to create connections.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbProvider.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Quartz.Simpl.RemotingSchedulerProxyFactory">
            <summary>
            A <see cref="T:Quartz.Spi.IRemotableSchedulerProxyFactory"/> implementation that creates
            connection to remote scheduler using remoting.
            </summary>
        </member>
        <member name="T:Quartz.Spi.IRemotableSchedulerProxyFactory">
            <summary>
            Client Proxy to a IRemotableQuartzScheduler
            </summary>
        </member>
        <member name="M:Quartz.Spi.IRemotableSchedulerProxyFactory.GetProxy">
            <summary>
            Returns a client proxy to a remote <see cref="T:Quartz.Simpl.IRemotableQuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RemotingSchedulerProxyFactory.GetProxy">
            <summary>
            Returns a client proxy to a remote <see cref="T:Quartz.Simpl.IRemotableQuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerProxyFactory.Address">
            <summary>
            Gets or sets the remote scheduler address.
            </summary>
            <value>The remote scheduler address.</value>
        </member>
        <member name="T:Quartz.Job.NativeJob">
            <summary>
            Built in job for executing native executables in a separate process.
            </summary>
            <remarks>
            <example>
                JobDetail job = new JobDetail("dumbJob", null, typeof(Quartz.Jobs.NativeJob));
                job.JobDataMap.Put(Quartz.Jobs.NativeJob.PropertyCommand, "echo \"hi\" >> foobar.txt");
                Trigger trigger = TriggerUtils.MakeSecondlyTrigger(5);
                trigger.Name = "dumbTrigger";
                sched.ScheduleJob(job, trigger);
            </example>
            If PropertyWaitForProcess is true, then the integer exit value of the process
            will be saved as the job execution result in the JobExecutionContext.
            </remarks>
            <author>Matthew Payne</author>
            <author>James House</author>
            <author>Steinar Overbeck Cook</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.IJob">
            <summary> 
            The interface to be implemented by classes which represent a 'job' to be
            performed.
            </summary>
            <remarks>
            Instances of this interface must have a <see langword="public"/>
            no-argument constructor. <see cref="T:Quartz.JobDataMap"/> provides a mechanism for 'instance member data'
            that may be required by some implementations of this interface.
            </remarks>
            <seealso cref="T:Quartz.IJobDetail"/>
            <seealso cref="T:Quartz.JobBuilder"/>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.IScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            fires that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
            <remarks>
            The implementation may wish to set a  result object on the 
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to 
            <see cref="T:Quartz.IJobListener"/>s or 
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's 
            execution.
            </remarks>
            <param name="context">The execution context.</param>
        </member>
        <member name="F:Quartz.Job.NativeJob.PropertyCommand">
            <summary> 
            Required parameter that specifies the name of the command (executable) 
            to be ran.
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PropertyParameters">
            <summary> 
            Optional parameter that specifies the parameters to be passed to the
            executed command.
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PropertyWaitForProcess">
            <summary> 
            Optional parameter (value should be 'true' or 'false') that specifies 
            whether the job should wait for the execution of the native process to 
            complete before it completes.
            
            <para>Defaults to <see langword="true" />.</para>  
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PropertyConsumeStreams">
            <summary> 
            Optional parameter (value should be 'true' or 'false') that specifies 
            whether the spawned process's stdout and stderr streams should be 
            consumed.  If the process creates output, it is possible that it might
            'hang' if the streams are not consumed.
            
            <para>Defaults to <see langword="false" />.</para>  
            </summary>
        </member>
        <member name="F:Quartz.Job.NativeJob.PropertyWorkingDirectory">
            <summary> 
            Optional parameter that specifies the workling directory to be used by 
            the executed command.
            </summary>
        </member>
        <member name="M:Quartz.Job.NativeJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Job.NativeJob"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Job.NativeJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            fires that is associated with the <see cref="T:Quartz.IJob"/>.
            <para>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <see cref="T:Quartz.IJobListener"/>s or
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's
            execution.
            </para>
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Quartz.Job.NativeJob.StreamConsumer">
            <summary> 
            Consumes data from the given input stream until EOF and prints the data to stdout
            </summary>
            <author>cooste</author>
            <author>James House</author>
        </member>
        <member name="M:Quartz.Job.NativeJob.StreamConsumer.#ctor(Quartz.Job.NativeJob,System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Job.NativeJob.StreamConsumer"/> class.
            </summary>
            <param name="enclosingInstance">The enclosing instance.</param>
            <param name="inputStream">The input stream.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Quartz.Job.NativeJob.StreamConsumer.Run">
            <summary> 
            Runs this object as a separate thread, printing the contents of the input stream
            supplied during instantiation, to either Console. or stderr
            </summary>
        </member>
        <member name="T:Quartz.IScheduler">
            <summary>
            This is the main interface of a Quartz Scheduler.
            </summary>
            <remarks>
            	<para>
                    A <see cref="T:Quartz.IScheduler"/> maintains a registry of
                    <see cref="T:Quartz.IJobDetail"/>s and <see cref="T:Quartz.ITrigger"/>s. Once
                    registered, the <see cref="T:Quartz.IScheduler"/> is responsible for executing
                    <see cref="T:Quartz.IJob"/> s when their associated <see cref="T:Quartz.ITrigger"/> s
                    fire (when their scheduled time arrives).
                </para>
            	<para>
            		<see cref="T:Quartz.IScheduler"/> instances are produced by a
                    <see cref="T:Quartz.ISchedulerFactory"/>. A scheduler that has already been
                    created/initialized can be found and used through the same factory that
                    produced it. After a <see cref="T:Quartz.IScheduler"/> has been created, it is in
                    "stand-by" mode, and must have its <see cref="M:Quartz.IScheduler.Start"/> method
                    called before it will fire any <see cref="T:Quartz.IJob"/>s.
                </para>
            	<para>
            		<see cref="T:Quartz.IJob"/> s are to be created by the 'client program', by
                    defining a class that implements the <see cref="T:Quartz.IJob"/> interface.
                    <see cref="T:Quartz.IJobDetail"/> objects are then created (also by the client) to
                    define a individual instances of the <see cref="T:Quartz.IJob"/>.
                    <see cref="T:Quartz.IJobDetail"/> instances can then be registered with the
                    <see cref="T:Quartz.IScheduler"/> via the %IScheduler.ScheduleJob(JobDetail,
                    Trigger)% or %IScheduler.AddJob(JobDetail, bool)% method.
                </para>
            	<para>
            		<see cref="T:Quartz.ITrigger"/> s can then be defined to fire individual
                    <see cref="T:Quartz.IJob"/> instances based on given schedules.
                    <see cref="T:Quartz.ISimpleTrigger"/> s are most useful for one-time firings, or
                    firing at an exact moment in time, with N repeats with a given delay between
                    them. <see cref="T:Quartz.ICronTrigger"/> s allow scheduling based on time of day,
                    day of week, day of month, and month of year.
                </para>
            	<para>
            		<see cref="T:Quartz.IJob"/> s and <see cref="T:Quartz.ITrigger"/> s have a name and
                    group associated with them, which should uniquely identify them within a single
                    <see cref="T:Quartz.IScheduler"/>. The 'group' feature may be useful for creating
                    logical groupings or categorizations of <see cref="T:Quartz.IJob"/>s and
                    <see cref="T:Quartz.ITrigger"/>s. If you don't have need for assigning a group to a
                    given <see cref="T:Quartz.IJob"/>s of <see cref="T:Quartz.ITrigger"/>s, then you can use
                    the <see cref="F:Quartz.SchedulerConstants.DefaultGroup"/> constant defined on
                    this interface.
                </para>
            	<para>
                    Stored <see cref="T:Quartz.IJob"/> s can also be 'manually' triggered through the
                    use of the %IScheduler.TriggerJob(string, string)% function.
                </para>
            	<para>
                    Client programs may also be interested in the 'listener' interfaces that are
                    available from Quartz. The <see cref="T:Quartz.IJobListener"/> interface provides
                    notifications of <see cref="T:Quartz.IJob"/> executions. The
                    <see cref="T:Quartz.ITriggerListener"/> interface provides notifications of
                    <see cref="T:Quartz.ITrigger"/> firings. The <see cref="T:Quartz.ISchedulerListener"/>
                    interface provides notifications of <see cref="T:Quartz.IScheduler"/> events and
                    errors.  Listeners can be associated with local schedulers through the
                    <see cref="T:Quartz.IListenerManager"/> interface.  
                </para>
            	<para>
                    The setup/configuration of a <see cref="T:Quartz.IScheduler"/> instance is very
                    customizable. Please consult the documentation distributed with Quartz.
                </para>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IJobDetail"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.IJobListener"/>
            <seealso cref="T:Quartz.ITriggerListener"/>
            <seealso cref="T:Quartz.ISchedulerListener"/>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IScheduler.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.IScheduler.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.IScheduler.GetMetaData">
            <summary>
            Get a <see cref="T:Quartz.SchedulerMetaData"/> object describing the settings
            and capabilities of the scheduler instance.
            </summary>
            <remarks>
            Note that the data returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the meta data values may be different.
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Return a list of <see cref="T:Quartz.IJobExecutionContext"/> objects that
            represent all currently executing Jobs in this Scheduler instance.
            </summary>
            <remarks>
            <para>
            This method is not cluster aware.  That is, it will only return Jobs
            currently executing in this Scheduler instance, not across the entire
            cluster.
            </para>
            <para>
            Note that the list returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the true list of executing jobs may be different.
            Also please read the doc associated with <see cref="T:Quartz.IJobExecutionContext"/>-
            especially if you're using remoting.
            </para>
            </remarks>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
        </member>
        <member name="M:Quartz.IScheduler.GetJobGroupNames">
            <summary>
            Get the names of all known <see cref="T:Quartz.IJobDetail"/> groups.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerGroupNames">
            <summary>
            Get the names of all known <see cref="T:Quartz.ITrigger"/> groups.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetPausedTriggerGroups">
            <summary> 
            Get the names of all <see cref="T:Quartz.ITrigger"/> groups that are paused.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.Start">
            <summary>
            Starts the <see cref="T:Quartz.IScheduler"/>'s threads that fire <see cref="T:Quartz.ITrigger"/>s.
            When a scheduler is first created it is in "stand-by" mode, and will not
            fire triggers.  The scheduler can also be put into stand-by mode by
            calling the <see cref="M:Quartz.IScheduler.Standby"/> method.
            </summary>
            <remarks>
            The misfire/recovery process will be started, if it is the initial call
            to this method on this scheduler instance.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.StartDelayed(System.TimeSpan)"/>
            <seealso cref="M:Quartz.IScheduler.Standby"/>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>
        </member>
        <member name="M:Quartz.IScheduler.StartDelayed(System.TimeSpan)">
            <summary>
            Calls <see cref="M:Quartz.IScheduler.Start"/> after the indicated delay.
            (This call does not block). This can be useful within applications that
            have initializers that create the scheduler immediately, before the
            resources needed by the executing jobs have been fully initialized.
            </summary>
            <seealso cref="M:Quartz.IScheduler.Start"/>
            <seealso cref="M:Quartz.IScheduler.Standby"/>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>
        </member>
        <member name="M:Quartz.IScheduler.Standby">
            <summary>
            Temporarily halts the <see cref="T:Quartz.IScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <remarks>
            <para>
            When <see cref="M:Quartz.IScheduler.Start"/> is called (to bring the scheduler out of 
            stand-by mode), trigger misfire instructions will NOT be applied
            during the execution of the <see cref="M:Quartz.IScheduler.Start"/> method - any misfires 
            will be detected immediately afterward (by the <see cref="T:Quartz.Spi.IJobStore"/>'s 
            normal process).
            </para>
            <para>
            The scheduler is not destroyed, and can be re-started at any time.
            </para>
            </remarks>
            <seealso cref="M:Quartz.IScheduler.Start"/>
            <seealso cref="M:Quartz.IScheduler.PauseAll"/>
        </member>
        <member name="M:Quartz.IScheduler.Shutdown">
            <summary> 
            Halts the <see cref="T:Quartz.IScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s,
            and cleans up all resources associated with the Scheduler. Equivalent to
            <see cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>.
            </summary>
            <remarks>
            The scheduler cannot be re-started.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>
        </member>
        <member name="M:Quartz.IScheduler.Shutdown(System.Boolean)">
            <summary>
            Halts the <see cref="T:Quartz.IScheduler"/>'s firing of <see cref="T:Quartz.ITrigger"/>s,
            and cleans up all resources associated with the Scheduler. 
            </summary>
            <remarks>
            The scheduler cannot be re-started.
            </remarks>
            <param name="waitForJobsToComplete">
            if <see langword="true"/> the scheduler will not allow this method
            to return until all currently executing jobs have completed.
            </param>
            <seealso cref="M:Quartz.IScheduler.Shutdown"/> 
        </member>
        <member name="M:Quartz.IScheduler.ScheduleJob(Quartz.IJobDetail,Quartz.ITrigger)">
            <summary>
            Add the given <see cref="T:Quartz.IJobDetail"/> to the
            Scheduler, and associate the given <see cref="T:Quartz.ITrigger"/> with
            it.
            </summary>
            <remarks>
            If the given Trigger does not reference any <see cref="T:Quartz.IJob"/>, then it
            will be set to reference the Job passed with it into this method.
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.ScheduleJob(Quartz.ITrigger)">
            <summary>
            Schedule the given <see cref="T:Quartz.ITrigger"/> with the
            <see cref="T:Quartz.IJob"/> identified by the <see cref="T:Quartz.ITrigger"/>'s settings.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.ScheduleJobs(System.Collections.Generic.IDictionary{Quartz.IJobDetail,System.Collections.Generic.IList{Quartz.ITrigger}},System.Boolean)">
            <summary>
            Schedule all of the given jobs with the related set of triggers.
            </summary>
            <remarks>
            <para>If any of the given jobs or triggers already exist (or more
            specifically, if the keys are not unique) and the replace
            parameter is not set to true then an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.UnscheduleJob(Quartz.TriggerKey)">
            <summary>
            Remove the indicated <see cref="T:Quartz.ITrigger"/> from the scheduler.
            <para>If the related job does not have any other triggers, and the job is
            not durable, then the job will also be deleted.</para>
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.UnscheduleJobs(System.Collections.Generic.IList{Quartz.TriggerKey})">
            <summary>
            Remove all of the indicated <code><see cref="T:Quartz.ITrigger"/></code>s from the scheduler.
            </summary>
            <remarks>
            <para>If the related job does not have any other triggers, and the job is
            not durable, then the job will also be deleted.</para>
            Note that while this bulk operation is likely more efficient than
            invoking <code>unscheduleJob(TriggerKey triggerKey)</code> several
            times, it may have the adverse affect of holding data locks for a
            single long duration of time (rather than lots of small durations
            of time).
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.RescheduleJob(Quartz.TriggerKey,Quartz.ITrigger)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
            given key, and store the new given one - which must be associated
            with the same job (the new trigger must have the job name &amp; group specified) 
            - however, the new trigger need not have the same name as the old trigger.
            </summary>
            <param name="triggerKey">The <see cref="T:Quartz.ITrigger"/> to be replaced.</param>
            <param name="newTrigger">
            The new <see cref="T:Quartz.ITrigger"/> to be stored.
            </param>
            <returns> 
            <see langword="null"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was not found and removed from the store (and the 
            new trigger is therefore not stored),  otherwise
            the first fire time of the newly scheduled trigger.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.AddJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Add the given <see cref="T:Quartz.IJob"/> to the Scheduler - with no associated
            <see cref="T:Quartz.ITrigger"/>. The <see cref="T:Quartz.IJob"/> will be 'dormant' until
            it is scheduled with a <see cref="T:Quartz.ITrigger"/>, or <see cref="M:Quartz.IScheduler.TriggerJob(Quartz.JobKey)"/>
            is called for it.
            </summary>
            <remarks>
            The <see cref="T:Quartz.IJob"/> must by definition be 'durable', if it is not,
            SchedulerException will be thrown.
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.DeleteJob(Quartz.JobKey)">
            <summary>
            Delete the identified <see cref="T:Quartz.IJob"/> from the Scheduler - and any
            associated <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <returns> true if the Job was found and deleted.</returns>
        </member>
        <member name="M:Quartz.IScheduler.DeleteJobs(System.Collections.Generic.IList{Quartz.JobKey})">
            <summary>
            Delete the identified <code>Job</code>s from the Scheduler - and any
            associated <code>Trigger</code>s.
            </summary>
            <remarks>
            <para>Note that while this bulk operation is likely more efficient than
            invoking <code>deleteJob(JobKey jobKey)</code> several
            times, it may have the adverse affect of holding data locks for a
            single long duration of time (rather than lots of small durations
            of time).</para>
            </remarks>
            <returns>
            true if all of the Jobs were found and deleted, false if
            one or more were not deleted.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJob(Quartz.JobKey)">
            <summary>
            Trigger the identified <see cref="T:Quartz.IJobDetail"/>
            (Execute it now).
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.TriggerJob(Quartz.JobKey,Quartz.JobDataMap)">
            <summary>
            Trigger the identified <see cref="T:Quartz.IJobDetail"/> (Execute it now).
            </summary>
            <param name="data">
            the (possibly <see langword="null"/>) JobDataMap to be
            associated with the trigger that fires the job immediately.
            </param>
            <param name="jobKey">
            The <see cref="T:Quartz.JobKey"/> of the <see cref="T:Quartz.IJob"/> to be executed.
            </param>
        </member>
        <member name="M:Quartz.IScheduler.PauseJob(Quartz.JobKey)">
            <summary>
            Pause the <see cref="T:Quartz.IJobDetail"/> with the given
            key - by pausing all of its current <see cref="T:Quartz.ITrigger"/>s.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.IJobDetail"/>s in the
            matching groups - by pausing all of their <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <remarks>
            <para>
            The Scheduler will "remember" that the groups are paused, and impose the
            pause on any new jobs that are added to any of those groups until it is resumed.
            </para>
            <para>NOTE: There is a limitation that only exactly matched groups
            can be remembered as paused.  For example, if there are pre-existing
            job in groups "aaa" and "bbb" and a matcher is given to pause
            groups that start with "a" then the group "aaa" will be remembered
            as paused and any subsequently added jobs in group "aaa" will be paused,
            however if a job is added to group "axx" it will not be paused,
            as "axx" wasn't known at the time the "group starts with a" matcher 
            was applied.  HOWEVER, if there are pre-existing groups "aaa" and
            "bbb" and a matcher is given to pause the group "axx" (with a
            group equals matcher) then no jobs will be paused, but it will be 
            remembered that group "axx" is paused and later when a job is added 
            in that group, it will become paused.</para>
            </remarks>
            <seealso cref="M:Quartz.IScheduler.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})"/>
        </member>
        <member name="M:Quartz.IScheduler.PauseTrigger(Quartz.TriggerKey)">
            <summary> 
            Pause the <see cref="T:Quartz.ITrigger"/> with the given key.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the groups matching.
            </summary>
            <remarks>
            <para>
            The Scheduler will "remember" all the groups paused, and impose the
            pause on any new triggers that are added to any of those groups until it is resumed.
            </para>
            <para>NOTE: There is a limitation that only exactly matched groups
            can be remembered as paused.  For example, if there are pre-existing
            triggers in groups "aaa" and "bbb" and a matcher is given to pause
            groups that start with "a" then the group "aaa" will be remembered as
            paused and any subsequently added triggers in that group be paused,
            however if a trigger is added to group "axx" it will not be paused,
            as "axx" wasn't known at the time the "group starts with a" matcher 
            was applied.  HOWEVER, if there are pre-existing groups "aaa" and
            "bbb" and a matcher is given to pause the group "axx" (with a
            group equals matcher) then no triggers will be paused, but it will be 
            remembered that group "axx" is paused and later when a trigger is added
            in that group, it will become paused.</para>
            </remarks>
            <seealso cref="M:Quartz.IScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
        </member>
        <member name="M:Quartz.IScheduler.ResumeJob(Quartz.JobKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.IJobDetail"/> with
            the given key.
            </summary>
            <remarks>
            If any of the <see cref="T:Quartz.IJob"/>'s<see cref="T:Quartz.ITrigger"/> s missed one
            or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s misfire
            instruction will be applied.
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.IJobDetail"/>s
            in matching groups.
            </summary>
            <remarks>
            If any of the <see cref="T:Quartz.IJob"/> s had <see cref="T:Quartz.ITrigger"/> s that
            missed one or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s
            misfire instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})"/>
        </member>
        <member name="M:Quartz.IScheduler.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.ITrigger"/> with the given
            key.
            </summary>
            <remarks>
            If the <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.ITrigger"/>s in matching groups.
            </summary>
            <remarks>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
        </member>
        <member name="M:Quartz.IScheduler.PauseAll">
            <summary>
            Pause all triggers - similar to calling <see cref="M:Quartz.IScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group, however, after using this method <see cref="M:Quartz.IScheduler.ResumeAll"/> 
            must be called to clear the scheduler's state of 'remembering' that all 
            new triggers will be paused as they are added. 
            </summary>
            <remarks>
            When <see cref="M:Quartz.IScheduler.ResumeAll"/> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.ResumeAll"/>
            <seealso cref="M:Quartz.IScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            <seealso cref="M:Quartz.IScheduler.Standby"/>
        </member>
        <member name="M:Quartz.IScheduler.ResumeAll">
            <summary> 
            Resume (un-pause) all triggers - similar to calling 
            <see cref="M:Quartz.IScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/> on every group.
            </summary>
            <remarks>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.PauseAll"/>
        </member>
        <member name="M:Quartz.IScheduler.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Get the keys of all the <see cref="T:Quartz.IJobDetail"/>s in the matching groups.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggersOfJob(Quartz.JobKey)">
            <summary>
            Get all <see cref="T:Quartz.ITrigger"/> s that are associated with the
            identified <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <remarks>
            The returned Trigger objects will be snap-shots of the actual stored
            triggers.  If you wish to modify a trigger, you must re-store the
            trigger afterward (e.g. see {@link #rescheduleJob(TriggerKey, Trigger)}).
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Get the names of all the <see cref="T:Quartz.ITrigger"/>s in the given
            groups.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetJobDetail(Quartz.JobKey)">
            <summary>
            Get the <see cref="T:Quartz.IJobDetail"/> for the <see cref="T:Quartz.IJob"/>
            instance with the given key .
            </summary>
            <remarks>
            The returned JobDetail object will be a snap-shot of the actual stored
            JobDetail.  If you wish to modify the JobDetail, you must re-store the
            JobDetail afterward (e.g. see {@link #addJob(JobDetail, boolean)}).
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.GetTrigger(Quartz.TriggerKey)">
            <summary>
            Get the <see cref="T:Quartz.ITrigger"/> instance with the given key.
            </summary>
            <remarks>
            The returned Trigger object will be a snap-shot of the actual stored
            trigger.  If you wish to modify the trigger, you must re-store the
            trigger afterward (e.g. see {@link #rescheduleJob(TriggerKey, Trigger)}).
            </remarks>
        </member>
        <member name="M:Quartz.IScheduler.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Get the current state of the identified <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <seealso cref="F:Quartz.TriggerState.Normal"/>
            <seealso cref="F:Quartz.TriggerState.Paused"/>
            <seealso cref="F:Quartz.TriggerState.Complete"/>
            <seealso cref="F:Quartz.TriggerState.Blocked"/>
            <seealso cref="F:Quartz.TriggerState.Error"/>
            <seealso cref="F:Quartz.TriggerState.None"/>
        </member>
        <member name="M:Quartz.IScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Add (register) the given <see cref="T:Quartz.ICalendar"/> to the Scheduler.
            </summary>
            <param name="calName">Name of the calendar.</param>
            <param name="calendar">The calendar.</param>
            <param name="replace">if set to <c>true</c> [replace].</param>
            <param name="updateTriggers">whether or not to update existing triggers that
            referenced the already existing calendar so that they are 'correct'
            based on the new trigger.</param>
        </member>
        <member name="M:Quartz.IScheduler.DeleteCalendar(System.String)">
            <summary>
            Delete the identified <see cref="T:Quartz.ICalendar"/> from the Scheduler.
            </summary>
            <param name="calName">Name of the calendar.</param>
            <returns>
            true if the Calendar was found and deleted.
            </returns>
        </member>
        <member name="M:Quartz.IScheduler.GetCalendar(System.String)">
            <summary>
            Get the <see cref="T:Quartz.ICalendar"/> instance with the given name.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.GetCalendarNames">
            <summary>
            Get the names of all registered <see cref="T:Quartz.ICalendar"/>.
            </summary>
        </member>
        <member name="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)">
            <summary>
            Request the interruption, within this Scheduler instance, of all 
            currently executing instances of the identified <see cref="T:Quartz.IJob"/>, which 
            must be an implementor of the <see cref="T:Quartz.IInterruptableJob"/> interface.
            </summary>
            <remarks>
            <para>
            If more than one instance of the identified job is currently executing,
            the <see cref="M:Quartz.IInterruptableJob.Interrupt"/> method will be called on
            each instance.  However, there is a limitation that in the case that  
            <see cref="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)"/> on one instances throws an exception, all 
            remaining  instances (that have not yet been interrupted) will not have 
            their <see cref="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)"/> method called.
            </para>
            
            <para>
            If you wish to interrupt a specific instance of a job (when more than
            one is executing) you can do so by calling 
            <see cref="M:Quartz.IScheduler.GetCurrentlyExecutingJobs"/> to obtain a handle 
            to the job instance, and then invoke <see cref="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)"/> on it
            yourself.
            </para>
            <para>
            This method is not cluster aware.  That is, it will only interrupt 
            instances of the identified InterruptableJob currently executing in this 
            Scheduler instance, not across the entire cluster.
            </para>
            </remarks>
            <returns> 
            true is at least one instance of the identified job was found and interrupted.
            </returns>
            <seealso cref="T:Quartz.IInterruptableJob"/>
            <seealso cref="M:Quartz.IScheduler.GetCurrentlyExecutingJobs"/>
        </member>
        <member name="M:Quartz.IScheduler.Interrupt(System.String)">
            <summary>
            Request the interruption, within this Scheduler instance, of the 
            identified executing <code>Job</code> instance, which 
            must be an implementor of the <code>InterruptableJob</code> interface.
            </summary>
            <remarks>
            This method is not cluster aware.  That is, it will only interrupt 
            instances of the identified InterruptableJob currently executing in this 
            Scheduler instance, not across the entire cluster.
            </remarks>
            <seealso cref="M:Quartz.IInterruptableJob.Interrupt"/>
            <seealso cref="M:Quartz.IScheduler.GetCurrentlyExecutingJobs"/>
            <seealso cref="P:Quartz.IJobExecutionContext.FireInstanceId"/>
            <seealso cref="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)"/>
            <param nane="fireInstanceId">
            the unique identifier of the job instance to  be interrupted (see <see cref="P:Quartz.IJobExecutionContext.FireInstanceId"/>
            </param>
            <returns>true if the identified job instance was found and interrupted.</returns>
        </member>
        <member name="M:Quartz.IScheduler.CheckExists(Quartz.JobKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.IJob"/> with the given identifier already 
            exists within the scheduler.
            </summary>
            <param name="jobKey">the identifier to check for</param>
            <returns>true if a Job exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.IScheduler.CheckExists(Quartz.TriggerKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.ITrigger"/> with the given identifier already 
            exists within the scheduler.
            </summary>
            <param name="triggerKey">the identifier to check for</param>
            <returns>true if a Trigger exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.IScheduler.Clear">
            <summary>
            Clears (deletes!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.SchedulerName">
            <summary> 
            Returns the name of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.Context">
            <summary>
            Returns the <see cref="T:Quartz.SchedulerContext"/> of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.InStandbyMode">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> is in stand-by mode.
            </summary>
            <seealso cref="M:Quartz.IScheduler.Standby"/>
            <seealso cref="M:Quartz.IScheduler.Start"/>
        </member>
        <member name="P:Quartz.IScheduler.IsShutdown">
            <summary>
            Reports whether the <see cref="T:Quartz.IScheduler"/> has been Shutdown.
            </summary>
        </member>
        <member name="P:Quartz.IScheduler.JobFactory">
            <summary>
            Set the <see cref="P:Quartz.IScheduler.JobFactory"/> that will be responsible for producing 
            instances of <see cref="T:Quartz.IJob"/> classes.
            </summary>
            <remarks>
            JobFactories may be of use to those wishing to have their application
            produce <see cref="T:Quartz.IJob"/> instances via some special mechanism, such as to
            give the opportunity for dependency injection.
            </remarks>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
        </member>
        <member name="P:Quartz.IScheduler.ListenerManager">
            <summary>
            Get a reference to the scheduler's <code>ListenerManager</code>,
            through which listeners may be registered.
            </summary>
            <returns>the scheduler's <code>ListenerManager</code></returns>
            <seealso cref="P:Quartz.IScheduler.ListenerManager"/>
            <seealso cref="T:Quartz.IJobListener"/>
            <seealso cref="T:Quartz.ITriggerListener"/>
            <seealso cref="T:Quartz.ISchedulerListener"/>
        </member>
        <member name="P:Quartz.IScheduler.IsStarted">
            <summary>
            Whether the scheduler has been started.  
            </summary>
            <remarks>
            Note: This only reflects whether <see cref="M:Quartz.IScheduler.Start"/> has ever
            been called on this Scheduler, so it will return <see langword="true"/> even 
            if the <see cref="T:Quartz.IScheduler"/> is currently in standby mode or has been 
            since shutdown.
            </remarks>
            <seealso cref="M:Quartz.IScheduler.Start"/>
            <seealso cref="P:Quartz.IScheduler.IsShutdown"/>
            <seealso cref="P:Quartz.IScheduler.InStandbyMode"/>
        </member>
        <member name="T:Quartz.Impl.StdScheduler">
            <summary>
            An implementation of the <see cref="T:Quartz.IScheduler"/> interface that directly
            proxies all method calls to the equivalent call on a given <see cref="T:Quartz.Core.QuartzScheduler"/>
            instance.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetMetaData">
            <summary>
            Get a <see cref="T:Quartz.SchedulerMetaData"/> object describiing the settings
            and capabilities of the scheduler instance.
            <para>
            Note that the data returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the meta data values may be different.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Clear">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetPausedTriggerGroups">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.#ctor(Quartz.Core.QuartzScheduler)">
            <summary>
            Construct a <see cref="T:Quartz.Impl.StdScheduler"/> instance to proxy the given
            <see cref="T:Quartz.Core.QuartzScheduler"/> instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Start">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.StartDelayed(System.TimeSpan)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Standby">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Shutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Shutdown(System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ScheduleJob(Quartz.IJobDetail,Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ScheduleJob(Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.DeleteJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.UnscheduleJob(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.RescheduleJob(Quartz.TriggerKey,Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.TriggerJob(Quartz.JobKey,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.CheckExists(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.CheckExists(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.PauseAll">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.ResumeAll">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggersOfJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetJobDetail(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.DeleteCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.GetCalendarNames">
            <summary>
            Get the names of all registered <see cref="T:Quartz.ICalendar"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.StdScheduler.Interrupt(Quartz.JobKey)">
            <summary>
            Request the interruption, within this Scheduler instance, of all
            currently executing instances of the identified <see cref="T:Quartz.IJob"/>, which
            must be an implementor of the <see cref="T:Quartz.IInterruptableJob"/> interface.
            </summary>
            <remarks>
            <para>
            If more than one instance of the identified job is currently executing,
            the <see cref="M:Quartz.IInterruptableJob.Interrupt"/> method will be called on
            each instance.  However, there is a limitation that in the case that
            <see cref="M:Quartz.Impl.StdScheduler.Interrupt(Quartz.JobKey)"/> on one instances throws an exception, all
            remaining  instances (that have not yet been interrupted) will not have
            their <see cref="M:Quartz.Impl.StdScheduler.Interrupt(Quartz.JobKey)"/> method called.
            </para>
            <para>
            If you wish to interrupt a specific instance of a job (when more than
            one is executing) you can do so by calling
            <see cref="M:Quartz.Impl.StdScheduler.GetCurrentlyExecutingJobs"/> to obtain a handle
            to the job instance, and then invoke <see cref="M:Quartz.Impl.StdScheduler.Interrupt(Quartz.JobKey)"/> on it
            yourself.
            </para>
            <para>
            This method is not cluster aware.  That is, it will only interrupt
            instances of the identified InterruptableJob currently executing in this
            Scheduler instance, not across the entire cluster.
            </para>
            </remarks>
            <returns>true is at least one instance of the identified job was found and interrupted.</returns>
            <throws>  UnableToInterruptJobException if the job does not implement </throws>
            <seealso cref="T:Quartz.IInterruptableJob"/>
            <seealso cref="M:Quartz.Impl.StdScheduler.GetCurrentlyExecutingJobs"/>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.SchedulerName">
            <summary>
            Returns the name of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.Context">
            <summary>
            Returns the <see cref="T:Quartz.SchedulerContext"/> of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.IsStarted">
            <summary>
            Whether the scheduler has been started.
            </summary>
            <value></value>
            <remarks>
            Note: This only reflects whether <see cref="M:Quartz.Impl.StdScheduler.Start"/> has ever
            been called on this Scheduler, so it will return <see langword="true"/> even
            if the <see cref="T:Quartz.IScheduler"/> is currently in standby mode or has been
            since shutdown.
            </remarks>
            <seealso cref="M:Quartz.Impl.StdScheduler.Start"/>
            <seealso cref="P:Quartz.Impl.StdScheduler.IsShutdown"/>
            <seealso cref="P:Quartz.Impl.StdScheduler.InStandbyMode"/>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.InStandbyMode">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.IsShutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.ListenerManager">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdScheduler.JobFactory">
            <seealso cref="P:Quartz.IScheduler.JobFactory">
            </seealso>
        </member>
        <member name="T:Quartz.Job.DirectoryScanJob">
            <summary>
             Inspects a directory and compares whether any files' "last modified dates" 
             have changed since the last time it was inspected.  If one or more files 
             have been updated (or created), the job invokes a "call-back" method on an 
             identified <see cref="T:Quartz.Job.IDirectoryScanListener"/> that can be found in the
             <see cref="T:Quartz.SchedulerContext"/>.
             </summary>
             <author>pl47ypus</author>
             <author>James House</author>
             <author>Marko Lahma (.NET)</author>
             
        </member>
        <member name="F:Quartz.Job.DirectoryScanJob.DIRECTORY_NAME">
            <see cref="T:Quartz.JobDataMap"/> key with which to specify the directory to be 
             monitored - an absolute path is recommended. 
        </member>
        <member name="F:Quartz.Job.DirectoryScanJob.DIRECTORY_SCAN_LISTENER_NAME">
            <see cref="T:Quartz.JobDataMap"/> key with which to specify the 
            <see cref="T:Quartz.Job.IDirectoryScanListener"/> to be 
            notified when the directory contents change.  
        </member>
        <member name="F:Quartz.Job.DirectoryScanJob.MINIMUM_UPDATE_AGE">
            <see cref="T:Quartz.JobDataMap"/> key with which to specify a <see cref="T:System.Int64"/>
            value that represents the minimum number of milliseconds that must have
            passed since the file's last modified time in order to consider the file
            new/altered.  This is necessary because another process may still be
            in the middle of writing to the file when the scan occurs, and the
             file may therefore not yet be ready for processing.
            <para>If this parameter is not specified, a default value of <pre>5000</pre> (five seconds) will be used.</para>
        </member>
        <member name="M:Quartz.Job.DirectoryScanJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            This is the main entry point for job execution. The scheduler will call this method on the 
            job once it is triggered.
            </summary>
            <param name="context">The <see cref="T:Quartz.IJobExecutionContext"/> that 
            the job will use during execution.</param>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20.preprocessingcommands">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20.processingdirectives">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20.schedule">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.QuartzXmlConfiguration20.version">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.preprocessingcommandsType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsType.deletejobsingroup">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsType.deletetriggersingroup">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsType.deletejob">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsType.deletetrigger">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletejob">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletejob.name">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletejob.group">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.abstractTriggerType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.name">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.group">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.description">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.jobname">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.jobgroup">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.priority">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.calendarname">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.jobdatamap">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.Item">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.endtime">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.abstractTriggerType.endtimeSpecified">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.jobdatamapType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdatamapType.entry">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.entryType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.entryType.key">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.entryType.value">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType.misfireinstruction">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType.repeatinterval">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.calendarIntervalTriggerType.repeatintervalunit">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.cronTriggerType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.cronTriggerType.misfireinstruction">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.cronTriggerType.cronexpression">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.cronTriggerType.timezone">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.simpleTriggerType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.simpleTriggerType.misfireinstruction">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.simpleTriggerType.repeatcount">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.simpleTriggerType.repeatinterval">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.triggerType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.triggerType.Item">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.jobdetailType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.name">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.group">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.description">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.jobtype">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.durable">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.recover">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobdetailType.jobdatamap">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.processingdirectivesType">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.processingdirectivesType.overwriteexistingdata">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.processingdirectivesType.ignoreduplicates">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletetrigger">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletetrigger.name">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.preprocessingcommandsTypeDeletetrigger.group">
            <remarks/>
        </member>
        <member name="T:Quartz.Xml.JobSchedulingData20.jobschedulingdataSchedule">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobschedulingdataSchedule.job">
            <remarks/>
        </member>
        <member name="P:Quartz.Xml.JobSchedulingData20.jobschedulingdataSchedule.trigger">
            <remarks/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.AdoJobStoreUtil">
            <summary> 
            This class contains utility functions for use in all delegate classes.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.AdoJobStoreUtil.ReplaceTablePrefix(System.String,System.String,System.String)">
            <summary>
            Replace the table prefix in a query by replacing any occurrences of
            "{0}" with the table prefix.
            </summary>
            <param name="query">The unsubstitued query</param>
            <param name="tablePrefix">The table prefix</param>
            <param name="schedNameLiteral">the scheduler name</param>
            <returns>The query, with proper table prefix substituted</returns>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.AdoUtil">
            <summary>
            Common helper methods for working with ADO.NET.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="T:Quartz.Listener.BroadcastSchedulerListener">
             <summary>
             Holds a List of references to SchedulerListener instances and broadcasts all
              events to them (in order).
            </summary>
             <remarks>
             This may be more convenient than registering all of the listeners
             directly with the Scheduler, and provides the flexibility of easily changing
             which listeners get notified.
             </remarks>
             <see cref="M:Quartz.Listener.BroadcastSchedulerListener.AddListener(Quartz.ISchedulerListener)"/>
             <see cref="M:Quartz.Listener.BroadcastSchedulerListener.RemoveListener(Quartz.ISchedulerListener)"/>
             <author>James House</author>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Listener.BroadcastSchedulerListener.#ctor(System.Collections.Generic.IEnumerable{Quartz.ISchedulerListener})">
            <summary>
            Construct an instance with the given List of listeners.
            </summary>
            <param name="listeners">The initial List of SchedulerListeners to broadcast to.</param>
        </member>
        <member name="T:Quartz.Plugin.History.LoggingTriggerHistoryPlugin">
            <summary> 
            Logs a history of all trigger firings via the Jakarta Commons-Logging
            framework.
            </summary>
            <remarks>
            <para>
            The logged message is customizable by setting one of the following message
            properties to a string that conforms to the syntax of <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </para>
            
            <para>
            TriggerFiredMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The actual fire time.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} fired job {6}.{5} at: {4,
            date, HH:mm:ss MM/dd/yyyy"</i>
            </para>
            
            <para>
            TriggerMisfiredMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The actual fire time. (the time the misfire was detected/handled)</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} misfired job {6}.{5} at:
            {4, date, HH:mm:ss MM/dd/yyyy}. Should have fired at: {3, date, HH:mm:ss
            MM/dd/yyyy"</i>
            </para>
            
            <para>
            TriggerCompleteMessage - available message data are: <table>
            <tr>
            <th>Element</th>
            <th>Data Type</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>0</td>
            <td>String</td>
            <td>The Trigger's Name.</td>
            </tr>
            <tr>
            <td>1</td>
            <td>String</td>
            <td>The Trigger's Group.</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Date</td>
            <td>The scheduled fire time.</td>
            </tr>
            <tr>
            <td>3</td>
            <td>Date</td>
            <td>The next scheduled fire time.</td>
            </tr>
            <tr>
            <td>4</td>
            <td>Date</td>
            <td>The job completion time.</td>
            </tr>
            <tr>
            <td>5</td>
            <td>String</td>
            <td>The Job's name.</td>
            </tr>
            <tr>
            <td>6</td>
            <td>String</td>
            <td>The Job's group.</td>
            </tr>
            <tr>
            <td>7</td>
            <td>Integer</td>
            <td>The re-fire count from the JobExecutionContext.</td>
            </tr>
            <tr>
            <td>8</td>
            <td>Integer</td>
            <td>The trigger's resulting instruction code.</td>
            </tr>
            <tr>
            <td>9</td>
            <td>String</td>
            <td>A human-readable translation of the trigger's resulting instruction
            code.</td>
            </tr>
            </table>
            
            The default message text is <i>"Trigger {1}.{0} completed firing job
            {6}.{5} at {4, date, HH:mm:ss MM/dd/yyyy} with resulting trigger instruction
            code: {9"</i>
            </para>
            </remarks>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.ITriggerListener">
            <summary>
            The interface to be implemented by classes that want to be informed when a
            <see cref="T:Quartz.ITrigger"/> fires. In general, applications that use a
            <see cref="T:Quartz.IScheduler"/> will not have use for this mechanism.
            </summary>
            <seealso cref="T:Quartz.IListenerManager"/>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.IJobListener"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, and it's associated <see cref="T:Quartz.IJobDetail"/>
            is about to be executed.
            <para>
            It is called before the <see cref="M:Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext)"/> method of this
            interface.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has fired.</param>
            <param name="context">
                The <see cref="T:Quartz.IJobExecutionContext"/> that will be passed to the <see cref="T:Quartz.IJob"/>'s<see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.
            </param>
        </member>
        <member name="M:Quartz.ITriggerListener.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, and it's associated <see cref="T:Quartz.IJobDetail"/>
            is about to be executed.
            <para>
            It is called after the <see cref="M:Quartz.ITriggerListener.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext)"/> method of this
            interface.  If the implementation vetos the execution (via
            returning <see langword="true"/>), the job's execute method will not be called.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has fired.</param>
            <param name="context">The <see cref="T:Quartz.IJobExecutionContext"/> that will be passed to
            the <see cref="T:Quartz.IJob"/>'s<see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
            <returns>Returns true if job execution should be vetoed, false otherwise.</returns>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerMisfired(Quartz.ITrigger)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has misfired.
            <para>
            Consideration should be given to how much time is spent in this method,
            as it will affect all triggers that are misfiring.  If you have lots
            of triggers misfiring at once, it could be an issue it this method
            does a lot.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has misfired.</param>
        </member>
        <member name="M:Quartz.ITriggerListener.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, it's associated <see cref="T:Quartz.IJobDetail"/>
            has been executed, and it's <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been
            called.
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that was fired.</param>
            <param name="context">
            The <see cref="T:Quartz.IJobExecutionContext"/> that was passed to the
            <see cref="T:Quartz.IJob"/>'s<see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.
            </param>
            <param name="triggerInstructionCode">
            The result of the call on the <see cref="T:Quartz.ITrigger"/>'s<see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/>  method.
            </param>
        </member>
        <member name="P:Quartz.ITriggerListener.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.ITriggerListener"/>.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <see cref="T:Quartz.IScheduler"/> in order to give
            the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.Start">
            <summary>
            Called when the associated <see cref="T:Quartz.IScheduler"/> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.Shutdown">
            <summary>
            Called in order to inform the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, and it's associated <see cref="T:Quartz.IJobDetail"/>
            is about to be executed.
            <para>
            It is called before the <see cref="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext)"/> method of this
            interface.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has fired.</param>
            <param name="context">The <see cref="T:Quartz.IJobExecutionContext"/> that will be passed to the <see cref="T:Quartz.IJob"/>'s <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerMisfired(Quartz.ITrigger)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has misfired.
            <para>
            Consideration should be given to how much time is spent in this method,
            as it will affect all triggers that are misfiring.  If you have lots
            of triggers misfiring at once, it could be an issue it this method
            does a lot.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has misfired.</param>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerComplete(Quartz.ITrigger,Quartz.IJobExecutionContext,Quartz.SchedulerInstruction)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, it's associated <see cref="T:Quartz.IJobDetail"/>
            has been executed, and it's <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been
            called.
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that was fired.</param>
            <param name="context">The <see cref="T:Quartz.IJobExecutionContext"/> that was passed to the
            <see cref="T:Quartz.IJob"/>'s <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
            <param name="triggerInstructionCode">The result of the call on the <see cref="T:Quartz.Spi.IOperableTrigger"/>'s <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/>  method.</param>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.VetoJobExecution(Quartz.ITrigger,Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            has fired, and it's associated <see cref="T:Quartz.IJobDetail"/>
            is about to be executed.
            <para>
            It is called after the <see cref="M:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerFired(Quartz.ITrigger,Quartz.IJobExecutionContext)"/> method of this
            interface.
            </para>
            </summary>
            <param name="trigger">The <see cref="T:Quartz.ITrigger"/> that has fired.</param>
            <param name="context">The <see cref="T:Quartz.IJobExecutionContext"/> that will be passed to
            the <see cref="T:Quartz.IJob"/>'s <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
            <returns></returns>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerCompleteMessage">
            <summary> 
            Get or set the message that is printed upon the completion of a trigger's
            firing.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerFiredMessage">
            <summary> 
            Get or set the message that is printed upon a trigger's firing.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.TriggerMisfiredMessage">
            <summary> 
            Get or set the message that is printed upon a trigger's mis-firing.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingTriggerHistoryPlugin.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.ITriggerListener"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.NthIncludedDayTrigger">
            <summary> 
            A trigger which fires on the N<sup>th</sup> day of every interval type 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeWeekly"/>, <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/> or 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly"/> that is <i>not</i> excluded by the associated
            calendar. 
            </summary>
            <remarks>
            When determining what the N<sup>th</sup> day of the month or year
            is, <see cref="T:Quartz.NthIncludedDayTrigger"/> will skip excluded days on the 
            associated calendar. This would commonly be used in an N<sup>th</sup> 
            business day situation, in which the user wishes to fire a particular job on
            the N<sup>th</sup> business day (i.e. the 5<sup>th</sup> business day of
            every month). Each <see cref="T:Quartz.NthIncludedDayTrigger"/> also has an associated
            <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/> which indicates at what time of day the trigger is
            to fire.
            <para>
            All <see cref="T:Quartz.NthIncludedDayTrigger"/>s default to a monthly interval type
            (fires on the N<SUP>th</SUP> day of every month) with N = 1 (first 
            non-excluded day) and <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/> set to 12:00 PM (noon). These
            values can be changed using the <see cref="P:Quartz.NthIncludedDayTrigger.N"/>, <see cref="P:Quartz.NthIncludedDayTrigger.IntervalType"/>, and
            <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/> methods. Users may also want to note the 
            <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> and <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/>
            methods.
            </para>
            <para>
            Take, for example, the following calendar:
            </para>
            <code>
            July                  August                September
            Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa   Su Mo Tu We Th Fr Sa
            1  W       1  2  3  4  5  W                1  2  W
            W  H  5  6  7  8  W    W  8  9 10 11 12  W    W  H  6  7  8  9  W
            W 11 12 13 14 15  W    W 15 16 17 18 19  W    W 12 13 14 15 16  W
            W 18 19 20 21 22  W    W 22 23 24 25 26  W    W 19 20 21 22 23  W
            W 25 26 27 28 29  W    W 29 30 31             W 26 27 28 29 30
            W
            </code>
            Where W's represent weekend days, and H's represent holidays, all of which
            are excluded on a calendar associated with an 
            <see cref="T:Quartz.NthIncludedDayTrigger"/> with n=5 and 
             intervalType=IntervalTypeMonthly. In this case, the trigger 
            would fire on the 8<sup>th</sup> of July (because of the July 4 holiday), 
            the 5<sup>th</sup> of August, and the 8<sup>th</sup> of September (because 
            of Labor Day).
            </remarks>
            <author>Aaron Craven</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.Triggers.AbstractTrigger">
            <summary>
            The base abstract class to be extended by all triggers.
            </summary>
            <remarks>
            <para>
            <see cref="T:Quartz.ITrigger"/>s have a name and group associated with them, which
            should uniquely identify them within a single <see cref="T:Quartz.IScheduler"/>.
            </para>
            
            <para>
            <see cref="T:Quartz.ITrigger"/>s are the 'mechanism' by which <see cref="T:Quartz.IJob"/> s
            are scheduled. Many <see cref="T:Quartz.ITrigger"/> s can point to the same <see cref="T:Quartz.IJob"/>,
            but a single <see cref="T:Quartz.ITrigger"/> can only point to one <see cref="T:Quartz.IJob"/>.
            </para>
            
            <para>
            Triggers can 'send' parameters/data to <see cref="T:Quartz.IJob"/>s by placing contents
            into the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobDataMap"/> on the <see cref="T:Quartz.ITrigger"/>.
            </para>
            </remarks>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
            <seealso cref="T:Quartz.NthIncludedDayTrigger"/>
            <seealso cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobDataMap"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire'
            the trigger (Execute the associated <see cref="T:Quartz.IJob"/>), in order to
            give the <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next
            triggering (if any).
            </remarks>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            <para>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            </para>
            
            <para>
            After this method has been called, <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </remarks>
            <returns> 
            The first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>     
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.ExecutionComplete(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Called after the <see cref="T:Quartz.IScheduler"/> has executed the
            <see cref="T:Quartz.IJobDetail"/> associated with the <see cref="T:Quartz.ITrigger"/>
            in order to get the final instruction code from the trigger.
            </remarks>
            <param name="context">
            is the <see cref="T:Quartz.IJobExecutionContext"/> that was used by the
            <see cref="T:Quartz.IJob"/>'s<see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
            <param name="result">is the <see cref="T:Quartz.JobExecutionException"/> thrown by the
            <see cref="T:Quartz.IJob"/>, if any (may be null).
            </param>
            <returns>
            One of the <see cref="T:Quartz.SchedulerInstruction"/> members.
            </returns>
            <seealso cref="F:Quartz.SchedulerInstruction.NoInstruction"/>
            <seealso cref="F:Quartz.SchedulerInstruction.ReExecuteJob"/>
            <seealso cref="F:Quartz.SchedulerInstruction.DeleteTrigger"/>
            <seealso cref="F:Quartz.SchedulerInstruction.SetTriggerComplete"/>
            <seealso cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/>
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> 
            This method should not be used by the Quartz client.
            <para>
            To be implemented by the concrete classes that extend this class.
            </para>
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the MISFIRE_INSTRUCTION_XXX that was selected when the <see cref="T:Quartz.ITrigger"/>
            was created.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary> 
            This method should not be used by the Quartz client.
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the given new version of the associated <see cref="T:Quartz.ICalendar"/>
            (the state should be updated so that it's next fire time is appropriate
            given the Calendar's new settings). 
            </para>
            </summary>
            <param name="cal"> </param>
            <param name="misfireThreshold"></param>
        </member>
        <member name="M:Quartz.Spi.IOperableTrigger.Validate">
            <summary>
            Validates whether the properties of the <see cref="T:Quartz.IJobDetail"/> are
            valid for submission into a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IOperableTrigger.FireInstanceId">
            <summary> 
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Usable by <see cref="T:Quartz.Spi.IJobStore"/>
            implementations, in order to facilitate 'recognizing' instances of fired
            <see cref="T:Quartz.ITrigger"/> s as their jobs complete execution.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ITrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.#ctor">
            <summary>
            Create a <see cref="T:Quartz.ITrigger"/> with no specified name, group, or <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <remarks>
            Note that the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.Name"/>, <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.Group"/> and
            the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobName"/> and <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobGroup"/> properties
            must be set before the <see cref="T:Quartz.ITrigger"/> can be placed into a
            <see cref="T:Quartz.IScheduler"/>.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Quartz.ITrigger"/> with the given name, and default group.
            </summary>
            <remarks>
            Note that the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobName"/> and <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobGroup"/>
            properties must be set before the <see cref="T:Quartz.ITrigger"/>
            can be placed into a <see cref="T:Quartz.IScheduler"/>.
            </remarks>
            <param name="name">The name.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.ITrigger"/> with the given name, and group.
            </summary>
            <remarks>
            Note that the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobName"/> and <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobGroup"/>
            properties must be set before the <see cref="T:Quartz.ITrigger"/>
            can be placed into a <see cref="T:Quartz.IScheduler"/>.
            </remarks>
            <param name="name">The name.</param>
            <param name="group">if <see langword="null"/>, Scheduler.DefaultGroup will be used.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.ITrigger"/> with the given name, and group.
            </summary>
            <param name="name">The name.</param>
            <param name="group">if <see langword="null"/>, Scheduler.DefaultGroup will be used.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire'
            the trigger (Execute the associated <see cref="T:Quartz.IJob"/>), in order to
            give the <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next
            triggering (if any).
            </remarks>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            <para>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            </para>
            
            <para>
            After this method has been called, <see cref="M:Quartz.Impl.Triggers.AbstractTrigger.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </remarks>
            <returns> 
            The first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.Impl.Triggers.AbstractTrigger.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>        
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.ExecutionComplete(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Called after the <see cref="T:Quartz.IScheduler"/> has executed the
            <see cref="T:Quartz.IJobDetail"/> associated with the <see cref="T:Quartz.ITrigger"/>
            in order to get the final instruction code from the trigger.
            </remarks>
            <param name="context">
            is the <see cref="T:Quartz.IJobExecutionContext"/> that was used by the
            <see cref="T:Quartz.IJob"/>'s<see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.</param>
            <param name="result">is the <see cref="T:Quartz.JobExecutionException"/> thrown by the
            <see cref="T:Quartz.IJob"/>, if any (may be null).
            </param>
            <returns>
            One of the <see cref="T:Quartz.SchedulerInstruction"/> members.
            </returns>
            <seealso cref="T:Quartz.SchedulerInstruction"/>
            <seealso cref="M:Quartz.Impl.Triggers.AbstractTrigger.Triggered(Quartz.ICalendar)"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.GetMayFireAgain">
            <summary> 
            Used by the <see cref="T:Quartz.IScheduler"/> to determine whether or not
            it is possible for this <see cref="T:Quartz.ITrigger"/> to fire again.
            <para>
            If the returned value is <see langword="false"/> then the <see cref="T:Quartz.IScheduler"/>
            may remove the <see cref="T:Quartz.ITrigger"/> from the <see cref="T:Quartz.Spi.IJobStore"/>.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.GetNextFireTimeUtc">
             <summary>
             Returns the next time at which the <see cref="T:Quartz.ITrigger"/> is scheduled to fire. If
             the trigger will not fire again, <see langword="null"/> will be returned.  Note that
             the time returned can possibly be in the past, if the time that was computed
             for the trigger to next fire has already arrived, but the scheduler has not yet
             been able to fire the trigger (which would likely be due to lack of resources
             e.g. threads).
             </summary>
            <remarks>
             The value returned is not guaranteed to be valid until after the <see cref="T:Quartz.ITrigger"/>
             has been added to the scheduler.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the next time at which the <see cref="T:Quartz.ITrigger"/> will fire,
            after the given time. If the trigger will not fire after the given time,
            <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.ValidateMisfireInstruction(System.Int32)">
            <summary>
            Validates the misfire instruction.
            </summary>
            <param name="misfireInstruction">The misfire instruction.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> 
            This method should not be used by the Quartz client.
            <para>
            To be implemented by the concrete classes that extend this class.
            </para>
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the MISFIRE_INSTRUCTION_XXX that was selected when the <see cref="T:Quartz.ITrigger"/>
            was created.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary> 
            This method should not be used by the Quartz client.
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the given new version of the associated <see cref="T:Quartz.ICalendar"/>
            (the state should be updated so that it's next fire time is appropriate
            given the Calendar's new settings). 
            </para>
            </summary>
            <param name="cal"> </param>
            <param name="misfireThreshold"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.Validate">
            <summary>
            Validates whether the properties of the <see cref="T:Quartz.IJobDetail"/> are
            valid for submission into a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.ToString">
            <summary>
            Return a simple string representation of this object.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.CompareTo(Quartz.ITrigger)">
            <summary>
            Compare the next fire time of this <see cref="T:Quartz.ITrigger"/> to that of
            another by comparing their keys, or in other words, sorts them
            according to the natural (i.e. alphabetical) order of their keys.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.Equals(Quartz.Impl.Triggers.AbstractTrigger)">
            <summary>
            Trigger equality is based upon the equality of the TriggerKey.
            </summary>
            <param name="trigger"></param>
            <returns>true if the key of this Trigger equals that of the given Trigger</returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.AbstractTrigger.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.Name">
            <summary>
            Get or sets the name of this <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If name is null or empty.</exception>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.Group">
            <summary>
            Get the group of this <see cref="T:Quartz.ITrigger"/>. If <see langword="null"/>, Scheduler.DefaultGroup will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.JobName">
            <summary>
            Get or set the name of the associated <see cref="T:Quartz.IJobDetail"/>.
            </summary> 
            <exception cref="T:System.ArgumentException"> 
            if jobName is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.JobGroup">
            <summary>
            Gets or sets the name of the associated <see cref="T:Quartz.IJobDetail"/>'s
            group. If set with <see langword="null"/>, Scheduler.DefaultGroup will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> ArgumentException
            if group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.FullName">
            <summary>
            Returns the 'full name' of the <see cref="T:Quartz.ITrigger"/> in the format
            "group.name".
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.FullJobName">
            <summary>
            Returns the 'full name' of the <see cref="T:Quartz.IJob"/> that the <see cref="T:Quartz.ITrigger"/>
            points to, in the format "group.name".
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.Description">
            <summary>
            Get or set the description given to the <see cref="T:Quartz.ITrigger"/> instance by
            its creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.CalendarName">
            <summary>
            Get or set  the <see cref="T:Quartz.ICalendar"/> with the given name with
            this Trigger. Use <see langword="null"/> when setting to dis-associate a Calendar.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.JobDataMap">
            <summary>
            Get or set the <see cref="P:Quartz.Impl.Triggers.AbstractTrigger.JobDataMap"/> that is associated with the 
            <see cref="T:Quartz.ITrigger"/>.
            <para>
            Changes made to this map during job execution are not re-persisted, and
            in fact typically result in an illegal state.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.FinalFireTimeUtc">
            <summary>
            Returns the last UTC time at which the <see cref="T:Quartz.ITrigger"/> will fire, if
            the Trigger will repeat indefinitely, null will be returned.
            <para>
            Note that the return time *may* be in the past.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.MisfireInstruction">
            <summary>
            Get or set the instruction the <see cref="T:Quartz.IScheduler"/> should be given for
            handling misfire situations for this <see cref="T:Quartz.ITrigger"/>- the
            concrete <see cref="T:Quartz.ITrigger"/> type that you are using will have
            defined a set of additional MISFIRE_INSTRUCTION_XXX
            constants that may be passed to this method.
            <para>
            If not explicitly set, the default value is <see cref="F:Quartz.MisfireInstruction.InstructionNotSet"/>.
            </para>
            </summary>
            <seealso cref="F:Quartz.MisfireInstruction.InstructionNotSet"/>
            <seealso cref="M:Quartz.Impl.Triggers.AbstractTrigger.UpdateAfterMisfire(Quartz.ICalendar)"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.FireInstanceId">
            <summary> 
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            Usable by <see cref="T:Quartz.Spi.IJobStore"/>
            implementations, in order to facilitate 'recognizing' instances of fired
            <see cref="T:Quartz.ITrigger"/> s as their jobs complete execution.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.EndTimeUtc">
            <summary>
            Gets and sets the date/time on which the trigger must stop firing. This 
            defines the final boundary for trigger firings &#x8212; the trigger will
            not fire after to this date and time. If this value is null, no end time
            boundary is assumed, and the trigger can continue indefinitely.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.StartTimeUtc">
            <summary>
            The time at which the trigger's scheduling should start.  May or may not
            be the first actual fire time of the trigger, depending upon the type of
            trigger and the settings of the other properties of the trigger.  However
            the first actual first time will not be before this date.
            </summary>
            <remarks>
            Setting a value in the past may cause a new trigger to compute a first
            fire time that is in the past, which may cause an immediate misfire
            of the trigger.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.Priority">
            <summary>
            The priority of a <see cref="T:Quartz.ITrigger"/> acts as a tie breaker such that if 
            two <see cref="T:Quartz.ITrigger"/>s have the same scheduled fire time, then Quartz
            will do its best to give the one with the higher priority first access 
            to a worker thread.
            </summary>
            <remarks>
            If not explicitly set, the default value is <i>5</i>.
            </remarks>
            <returns></returns>
            <see cref="F:Quartz.TriggerConstants.DefaultPriority"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.AbstractTrigger.HasAdditionalProperties">
            <summary>
            Gets a value indicating whether this instance has additional properties
            that should be considered when for example saving to database. 
            </summary>
            <remarks>
            If trigger implementation has additional properties that need to be saved 
            with base properties you need to make your class override this property with value true.
            Returning true will effectively mean that ADOJobStore needs to serialize 
            this trigger instance to make sure additional properties are also saved.
            </remarks>
            <value>
            	<c>true</c> if this instance has additional properties; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly">
            <summary> 
            Indicates a monthly trigger type (fires on the N<SUP>th</SUP> included
            day of every month).
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly">
            <summary> indicates a yearly trigger type (fires on the N<SUP>th</SUP> included 
            day of every year).
            </summary>
        </member>
        <member name="F:Quartz.NthIncludedDayTrigger.IntervalTypeWeekly">
            <summary>
            Indicates a weekly trigger type (fires on the N<SUP>th</SUP> included
            day of every week). When using this interval type, care must be taken
            not to think of the value of <see cref="F:Quartz.NthIncludedDayTrigger.n"/> as an analog to 
            <see cref="P:System.DateTime.DayOfWeek"/>. Such a comparison can only
            be drawn when there are no calendars associated with the trigger. To 
            illustrate, consider an <see cref="T:Quartz.NthIncludedDayTrigger"/> with 
            n = 3 which is associated with a Calendar excluding
            non-weekdays. The trigger would fire on the 3<SUP>rd</SUP> 
            <I>included</I> day of the week, which would be 4<SUP>th</SUP> 
            <I>actual</I> day of the week.
            </summary>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor">
            <summary> 
            Create an <see cref="T:Quartz.NthIncludedDayTrigger"/> with no specified name,
            group, or <see cref="T:Quartz.IJobDetail"/>. This will result initially in a
            default monthly trigger that fires on the first day of every month at
            12:00 PM (n = 1, 
            intervalType=<see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>, 
            fireAtTime="12:00").
            </summary>
            <remarks>
            Note that <see cref="P:Quartz.ITrigger.Key"/> and <see cref="P:Quartz.ITrigger.JobKey"/>, must be 
            called before the <see cref="T:Quartz.NthIncludedDayTrigger"/> can be placed into
            a <see cref="T:Quartz.IScheduler"/>.
            </remarks>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor(System.String)">
            <summary> 
            Create an <see cref="T:Quartz.NthIncludedDayTrigger"/> with the given name and
            default group but no specified <see cref="T:Quartz.IJobDetail"/>. This will result 
            initially in a default monthly trigger that fires on the first day of 
            every month at 12:00 PM (<see cref="F:Quartz.NthIncludedDayTrigger.n"/>=1, 
            intervalType=<see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>, 
            fireAtTime=12:00").
            <para>
            Note that <see cref="P:Quartz.ITrigger.JobKey"/> must
            be called before the <see cref="T:Quartz.NthIncludedDayTrigger"/> can be placed 
            into a <see cref="T:Quartz.IScheduler"/>.
            </para>
            </summary>
            <param name="name"> the name for the <see cref="T:Quartz.NthIncludedDayTrigger"/>
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor(System.String,System.String)">
            <summary> 
            Create an <see cref="T:Quartz.NthIncludedDayTrigger"/> with the given name and
            group but no specified <see cref="T:Quartz.IJobDetail"/>. This will result 
            initially in a default monthly trigger that fires on the first day of 
            every month at 12:00 PM (<see cref="F:Quartz.NthIncludedDayTrigger.n"/>=1, 
            intervalType=<see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>, 
            fireAtTime=12:00").
            <para>
            Note that <see cref="P:Quartz.ITrigger.JobKey"/> must
            be called before the <see cref="T:Quartz.NthIncludedDayTrigger"/> can be placed 
            into a <see cref="T:Quartz.IScheduler"/>.
            </para>
            </summary>
            <param name="name"> the name for the <see cref="T:Quartz.NthIncludedDayTrigger"/>
            </param>
            <param name="group">the group for the <see cref="T:Quartz.NthIncludedDayTrigger"/>
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.#ctor(System.String,System.String,System.String,System.String)">
            <summary> 
            Create an <see cref="T:Quartz.NthIncludedDayTrigger"/> with the given name and
            group and the specified <see cref="T:Quartz.IJobDetail"/>. This will result 
            initially in a default monthly trigger that fires on the first day of
            every month at 12:00 PM (<see cref="F:Quartz.NthIncludedDayTrigger.n"/>=1, 
            intervalType=<see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>, 
            fireAtTime="12:00").
            </summary>
            <param name="name">The name for the <see cref="T:Quartz.NthIncludedDayTrigger"/>.</param>
            <param name="group">The group for the <see cref="T:Quartz.NthIncludedDayTrigger"/>.</param>
            <param name="jobName">The name of the job to associate with the <see cref="T:Quartz.NthIncludedDayTrigger"/>.</param>
            <param name="jobGroup">The group containing the job to associate with the <see cref="T:Quartz.NthIncludedDayTrigger"/>.</param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc">
            <summary> 
            Returns the next UTC time at which the <see cref="T:Quartz.NthIncludedDayTrigger"/>
            will fire. If the trigger will not fire again, <see langword="null"/> will be
            returned. 
            </summary>
            <remarks>
            <para>
            Because of the conceptual design of <see cref="T:Quartz.NthIncludedDayTrigger"/>,
            it is not always possible to decide with certainty that the trigger
            will <i>never</i> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> property. The default cutoff is 12
            of the intervals specified by <see cref="P:Quartz.NthIncludedDayTrigger.IntervalType"/> intervalType.
            </para>
            <para>
            The returned value is not guaranteed to be valid until after
            the trigger has been added to the scheduler.
            </para>
            </remarks>
            <returns> the next fire time for the trigger</returns>
            <seealso cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> 
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetPreviousFireTimeUtc">
            <summary> 
            Returns the previous UTC time at which the 
            <see cref="T:Quartz.NthIncludedDayTrigger"/> fired. If the trigger has not yet 
            fired, <see langword="null"/> will be returned.
            </summary>
            <returns> the previous fire time for the trigger</returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the first time the <see cref="T:Quartz.NthIncludedDayTrigger"/> will fire
            after the specified date.
            </summary>
            <remarks>
            <para> 
            Because of the conceptual design of <see cref="T:Quartz.NthIncludedDayTrigger"/>,
            it is not always possible to decide with certainty that the trigger
            will <i>never</i> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> property. The default cutoff is 12
            of the intervals specified by <see cref="P:Quartz.NthIncludedDayTrigger.IntervalType"/> intervalType.
            </para>
            <para>
            Therefore, for triggers with intervalType = 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeWeekly"/>, if the trigger 
            will not fire within 12
            weeks after the given date/time, <see langword="null"/> will be returned. For
            triggers with intervalType = 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>
            , if the trigger will not fire within 12 
            months after the given date/time, <see langword="null"/> will be returned. 
            For triggers with intervalType = 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly"/>
            , if the trigger will not fire within 12
            years after the given date/time, <see langword="null"/> will be returned.  In 
            all cases, if the trigger will not fire before <see field="endTime"/>, 
            <see langword="null"/> will be returned.
            </para>
            </remarks> 
            <param name="afterTimeUtc">The time after which to find the nearest fire time.
            This argument is treated as exclusive 舒 that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> 
            the first time the trigger will fire following the specified date
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire' the trigger
            (Execute the associated <see cref="T:Quartz.IJob"/>), in order to give the 
            <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next triggering 
            (if any).
            </summary>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            <para>
            After this method has been called, <see cref="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            
            </summary>
            <returns> the first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value 
            <see cref="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc"/> will return (until after the first 
            firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ExecutionComplete(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary> 
            Called after the <see cref="T:Quartz.IScheduler"/> has executed the 
            <see cref="T:Quartz.IJobDetail"/> associated with the <see cref="T:Quartz.ITrigger"/> in order
            to get the final instruction code from the trigger.
            </summary>
            <param name="jobCtx">
            The <see cref="T:Quartz.IJobExecutionContext"/> that was used by the
            <see cref="T:Quartz.IJob"/>'s <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method.
            </param>
            <param name="result">
            The <see cref="T:Quartz.JobExecutionException"/> thrown by the
            <see cref="T:Quartz.IJob"/>, if any (may be <see langword="null"/>)
            </param>
            <returns> one of the Trigger.INSTRUCTION_XXX constants.
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetMayFireAgain">
            <summary> 
            Used by the <see cref="T:Quartz.IScheduler"/> to determine whether or not it is
            possible for this <see cref="T:Quartz.ITrigger"/> to fire again.
            </summary>'
            <remarks>
            <para>
            If the returned value is <see langword="false"/> then the 
            <see cref="T:Quartz.IScheduler"/> may remove the <see cref="T:Quartz.ITrigger"/> from the
            <see cref="T:Quartz.Spi.IJobStore"/>
            </para>
            </remarks>
            <returns>
            A boolean indicator of whether the trigger could potentially fire
            again.
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.ValidateMisfireInstruction(System.Int32)">
            <summary> 
            Indicates whether <param name="misfireInstruction"/> is a valid misfire
            instruction for this <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <returns>Whether <see param="misfireInstruction"/> is valid.</returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> Updates the <see cref="T:Quartz.NthIncludedDayTrigger"/>'s state based on the
            MisfireInstruction that was selected when the 
            <see cref="T:Quartz.NthIncludedDayTrigger"/> was created
            <P>
            If the misfire instruction is set to MISFIRE_INSTRUCTION_SMART_POLICY,
            then the instruction will be interpreted as 
            <see cref="F:Quartz.MisfireInstruction.NthIncludedDayTrigger.FireOnceNow"/>.
            </P>
            </summary>
            <param name="cal">a new or updated calendar to use for the trigger
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary> 
            Updates the <see cref="T:Quartz.NthIncludedDayTrigger"/>'s state based on the 
            given new version of the associated <see cref="T:Quartz.ICalendar"/>. 
            </summary>
            <param name="cal">A new or updated calendar to use for the trigger</param>
            <param name="misfireThreshold">the amount of time that must
            be between "now" and the time the next
            firing of the trigger is supposed to occur.
            </param>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetWeeklyFireTimeAfter(System.DateTimeOffset)">
            <summary> 
            Calculates the first time an <see cref="T:Quartz.NthIncludedDayTrigger"/> with 
            <c>intervalType = IntervalTypeWeekly</c> will fire 
            after the specified date. See <see cref="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc"/> for more 
            information.
            </summary>
            <param name="afterDateUtc">The time after which to find the nearest fire time.
            This argument is treated as exclusive 舒 that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified
            date
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetMonthlyFireTimeAfter(System.DateTimeOffset)">
            <summary> 
            Calculates the first UTC time an <see cref="T:Quartz.NthIncludedDayTrigger"/> with 
            intervalType = <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/> will fire 
            after the specified date. See <see cref="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc"/> for more 
            information.
            </summary>
            <param name="afterDateUtc">
            The UTC time after which to find the nearest fire time.
            This argument is treated as exclusive 舒 that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified date </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetYearlyFireTimeAfter(System.DateTimeOffset)">
            <summary> 
            Calculates the first time an <see cref="T:Quartz.NthIncludedDayTrigger"/> with 
            intervalType = <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly"/> will fire 
            after the specified date. See <see cref="M:Quartz.NthIncludedDayTrigger.GetNextFireTimeUtc"/> for more 
            information.
            </summary>
            <param name="afterDateUtc">
            The UTC time after which to find the nearest fire time.
            This argument is treated as exclusive 舒 that is,
            if afterTime is a valid fire time for the trigger, it
            will not be returned as the next fire time.
            </param>
            <returns> the first time the trigger will fire following the specified
            date
            </returns>
        </member>
        <member name="M:Quartz.NthIncludedDayTrigger.GetScheduleBuilder">
            <summary>
            Get a <see cref="T:Quartz.IScheduleBuilder"/> that is configured to produce a
            schedule identical to this trigger's schedule.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.N">
            <summary> 
            Gets or sets the day of the interval on which the 
            <see cref="T:Quartz.NthIncludedDayTrigger"/> should fire. If the N<SUP>th</SUP>
            day of the interval does not exist (i.e. the 32<SUP>nd</SUP> of a 
            month), the trigger simply will never fire. N may not be less than 1.
            </summary>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.IntervalType">
            <summary> 
            Returns the interval type for the <see cref="T:Quartz.NthIncludedDayTrigger"/>.
            </summary>
            <remarks>
            Sets the interval type for the <see cref="T:Quartz.NthIncludedDayTrigger"/>. If
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>, the trigger will fire on the 
            N<SUP>th</SUP> included day of every month. If 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly"/>, the trigger will fire on the 
            N<SUP>th</SUP> included day of every year. If 
            <see cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeWeekly"/>, the trigger will fire on the 
            N<SUP>th</SUP> included day of every week. 
            </remarks>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeWeekly"/>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeMonthly"/>
            <seealso cref="F:Quartz.NthIncludedDayTrigger.IntervalTypeYearly"/>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.FireAtTime">
            <summary>
            Returns the fire time for the <see cref="T:Quartz.NthIncludedDayTrigger"/> as a
            string with the format "HH:MM[:SS]", with HH representing the 
            24-hour clock hour of the fire time. Seconds are optional and their 
            inclusion depends on whether or not they were provided to 
            <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/>. 
            </summary>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval">
            <summary> 
            Returns the <see cref="F:Quartz.NthIncludedDayTrigger.nextFireCutoffInterval"/> for the 
            <see cref="T:Quartz.NthIncludedDayTrigger"/>.
            </summary>
            <remarks>
            <para>
            Because of the conceptual design of <see cref="T:Quartz.NthIncludedDayTrigger"/>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> property. The default cutoff is 12
            of the intervals specified by <see cref="P:Quartz.NthIncludedDayTrigger.IntervalType"/> intervalType" /&gt;.
            </para>
            <para>
            Because of the conceptual design of <see cref="T:Quartz.NthIncludedDayTrigger"/>,
            it is not always possible to decide with certainty that the trigger
            will <I>never</I> fire again. Therefore, it will search for the next 
            fire time up to a given cutoff. These cutoffs can be changed by using the
            <see cref="P:Quartz.NthIncludedDayTrigger.NextFireCutoffInterval"/> method. The default cutoff is 12
            of the intervals specified by <see cref="P:Quartz.NthIncludedDayTrigger.IntervalType"/> intervalType".
            </para>
            <para>
            In most cases, the default value of this setting (12) is sufficient (it
            is highly unlikely, for example, that you will need to look at more than
            12 months of dates to ensure that your trigger will never fire again).  
            However, this setting is included to allow for the rare exceptions where
            this might not be true.
            </para>
            <para>
            For example, if your trigger is associated with a calendar that excludes
            a great many dates in the next 12 months, and hardly any following that,
            it is possible (if <see cref="P:Quartz.NthIncludedDayTrigger.N"/> is large enough) that you could run 
            into this situation.  
            </para>
            </remarks>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.FinalFireTimeUtc">
            <summary>
            Returns the last UTC time the <see cref="T:Quartz.NthIncludedDayTrigger"/> will fire.
            If the trigger will not fire at any point between <see name="startTime"/>
            and <see name="endTime"/>, <see langword="null"/> will be returned.
            </summary>
            <returns> the last time the trigger will fire.</returns>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.TimeZone">
            <summary>
            Sets or gets the time zone in which the <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/> will be resolved.
            If no time zone is provided, then the default time zone will be used. 
            </summary>
            <see cref="P:System.TimeZone.CurrentTimeZone"/>
            <see cref="P:Quartz.NthIncludedDayTrigger.FireAtTime"/>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.TriggerCalendarWeekRule">
            <summary>
            Gets or sets the trigger's calendar week rule.
            </summary>
            <value>The trigger calendar week rule.</value>
        </member>
        <member name="P:Quartz.NthIncludedDayTrigger.TriggerCalendarFirstDayOfWeek">
            <summary>
            Gets or sets the trigger's calendar first day of week rule.
            </summary>
            <value>The trigger calendar first day of week.</value>
        </member>
        <member name="T:Quartz.ISimpleTrigger">
            <summary> 
            A <see cref="T:Quartz.ITrigger"/> that is used to fire a <see cref="T:Quartz.IJob"/>
            at a given moment in time, and optionally repeated at a specified interval.
            </summary>
            <seealso cref="T:Quartz.TriggerBuilder"/>
            <seealso cref="T:Quartz.SimpleScheduleBuilder"/>
            <author>James House</author>
            <author>Contributions by Lieven Govaerts of Ebitec Nv, Belgium.</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.ISimpleTrigger.RepeatCount">
            <summary>
            Get or set thhe number of times the <see cref="T:Quartz.ISimpleTrigger"/> should
            repeat, after which it will be automatically deleted.
            </summary>
            <seealso cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/>
        </member>
        <member name="P:Quartz.ISimpleTrigger.RepeatInterval">
            <summary>
            Get or set the the time interval at which the <see cref="T:Quartz.ISimpleTrigger"/> should repeat.
            </summary>
        </member>
        <member name="P:Quartz.ISimpleTrigger.TimesTriggered">
            <summary>
            Get or set the number of times the <see cref="T:Quartz.ISimpleTrigger"/> has already
            fired.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.ZeroSizeThreadPool">
            <summary>
            This is class is a simple implementation of a zero size thread pool, based on the
            <see cref="T:Quartz.Spi.IThreadPool"/> interface.
            </summary>
            <remarks>
            The pool has zero <see cref="T:System.Threading.Thread"/>s and does not grow or shrink based on demand.
            Which means it is obviously not useful for most scenarios.  When it may be useful
            is to prevent creating any worker threads at all - which may be desirable for
            the sole purpose of preserving system resources in the case where the scheduler
            instance only exists in order to schedule jobs, but which will never execute
            jobs (e.g. will never have Start() called on it).
            </remarks>
            <author>Wayne Fay</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Simpl.ZeroSizeThreadPool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Simpl.ZeroSizeThreadPool"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.ZeroSizeThreadPool.Initialize">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:System.Threading.ThreadPool"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.ZeroSizeThreadPool.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.ZeroSizeThreadPool.RunInThread(Quartz.IThreadRunnable)">
            <summary>
            Execute the given <see cref="T:Quartz.IThreadRunnable"/> in the next
            available <see cref="T:System.Threading.Thread"/>.
            </summary>
            <param name="runnable"></param>
            <returns></returns>
            <remarks>
            The implementation of this interface should not throw exceptions unless
            there is a serious problem (i.e. a serious misconfiguration). If there
            are no available threads, rather it should either queue the Runnable, or
            block until a thread is available, depending on the desired strategy.
            </remarks>
        </member>
        <member name="M:Quartz.Simpl.ZeroSizeThreadPool.BlockForAvailableThreads">
            <summary>
            Determines the number of threads that are currently available in in
            the pool.  Useful for determining the number of times
            <see cref="M:Quartz.Simpl.ZeroSizeThreadPool.RunInThread(Quartz.IThreadRunnable)"/>  can be called before returning
            false.
            </summary>
            <returns>
            the number of currently available threads
            </returns>
            <remarks>
            The implementation of this method should block until there is at
            least one available thread.
            </remarks>
        </member>
        <member name="P:Quartz.Simpl.ZeroSizeThreadPool.PoolSize">
            <summary>
            Gets the size of the pool.
            </summary>
            <value>The size of the pool.</value>
        </member>
        <member name="P:Quartz.Simpl.ZeroSizeThreadPool.InstanceId">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's Id, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.ZeroSizeThreadPool.InstanceName">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IThreadPool"/> of the Scheduler instance's name, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="T:Quartz.SchedulerConfigException">
            <summary>
            An exception that is thrown to indicate that there is a misconfiguration of
            the <see cref="T:Quartz.ISchedulerFactory"/>- or one of the components it
            configures.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.SchedulerConfigException.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Quartz.JobPersistenceException"/> with the given message.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Create a <see cref="T:Quartz.JobPersistenceException"/> with the given message
            and cause.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerConfigException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Quartz.Job.FileScanJob">
            <summary> 
            Inspects a file and compares whether it's "last modified date" has changed
            since the last time it was inspected.  If the file has been updated, the
            job invokes a "call-back" method on an identified 
            <see cref="T:Quartz.Job.IFileScanListener"/> that can be found in the 
            <see cref="T:Quartz.SchedulerContext"/>.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.Job.IFileScanListener"/>
        </member>
        <member name="F:Quartz.Job.FileScanJob.FileName">
            <summary>
            JobDataMap key with which to specify the name of the file to monitor.
            </summary>
        </member>
        <member name="F:Quartz.Job.FileScanJob.FileScanListenerName">
            <summary>
            JobDataMap key with which to specify the {@link org.quartz.jobs.FileScanListener} 
            to be notified when the file contents change. 
            </summary>
        </member>
        <member name="F:Quartz.Job.FileScanJob.MinimumUpdateAge">
            <summary>
            <code>JobDataMap</code> key with which to specify a <code>long</code>
            value that represents the minimum number of milliseconds that must have
            past since the file's last modified time in order to consider the file
            new/altered.  This is necessary because another process may still be
            in the middle of writing to the file when the scan occurs, and the
            file may therefore not yet be ready for processing.
            
            <para>If this parameter is not specified, a default value of 
            <code>5000</code> (five seconds) will be used.</para>
            </summary>
        </member>
        <member name="M:Quartz.Job.FileScanJob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Job.FileScanJob"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Job.FileScanJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.ITrigger"/>
            fires that is associated with the <see cref="T:Quartz.IJob"/>.
            <para>
            The implementation may wish to set a  result object on the
            JobExecutionContext before this method exits.  The result itself
            is meaningless to Quartz, but may be informative to
            <see cref="T:Quartz.IJobListener"/>s or
            <see cref="T:Quartz.ITriggerListener"/>s that are watching the job's
            execution.
            </para>
            </summary>
            <param name="context">The execution context.</param>
            <seealso cref="T:Quartz.IJob">
            </seealso>
        </member>
        <member name="M:Quartz.Job.FileScanJob.GetLastModifiedDate(System.String)">
            <summary>
            Gets the last modified date.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder">
            <summary>
            Utility class to keep track of both active transaction
            and connection.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Quartz.Collection.TreeSet`1">
            <summary>
            Simple C5 wrapper for common interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Quartz.Collection.ISortedSet`1">
            <summary>
            A sorted set.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Collection.ISet`1">
            <summary>
            Represents a collection ob objects that contains no duplicate elements.
            </summary>	
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Collection.ISortedSet`1.TailSet(`0)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="M:Quartz.Collection.ISortedSet`1.First">
            <summary>
            Returns the first item in the set.
            </summary>
            <returns>First object.</returns>
        </member>
        <member name="P:Quartz.Collection.ISortedSet`1.Item(System.Int32)">
            <summary>
            Returns the object in the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Quartz.Collection.TreeSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Constructor that accepts comparer.
            </summary>
            <param name="comparer">Comparer to use.</param>
        </member>
        <member name="M:Quartz.Collection.TreeSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that prepolutates.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Quartz.Collection.TreeSet`1.First">
            <summary>
            Returns the first element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Collection.TreeSet`1.TailSet(`0)">
            <summary>
            Return items from given range.
            </summary>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="P:Quartz.Collection.TreeSet`1.Quartz#Collection#ISortedSet{T}#Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Collection.TreeSet">
            <summary>
            Only for backwards compatibility with serialization!
            </summary>
        </member>
        <member name="T:Quartz.ICoreTrigger">
            <summary>
            Internal interface preserved for backward compatibility 
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.DailyTimeIntervalTriggerPersistenceDelegate">
            <summary>
            Persist a DailyTimeIntervalTrigger by converting internal fields to and from
            SimplePropertiesTriggerProperties.
            </summary>
            <see cref="T:Quartz.DailyTimeIntervalScheduleBuilder"/>
            <see cref="T:Quartz.IDailyTimeIntervalTrigger"/>
            <author>Zemian Deng saltnlight5@gmail.com</author>
            <author>Nuno Maia (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.DailyTimeIntervalTriggerPersistenceDelegate.GetHandledTriggerTypeDiscriminator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.IListenerManager">
            <summary>
            Client programs may be interested in the 'listener' interfaces that are
            available from Quartz. The <see cref="T:Quartz.IJobListener"/> interface
            provides notifications of <code>Job</code> executions. The
            <see cref="T:Quartz.ITriggerListener"/> interface provides notifications of
            <code>Trigger</code> firings. The <see cref="T:Quartz.ISchedulerListener"/>
            interface provides notifications of <code>Scheduler</code> events and
            errors.  Listeners can be associated with local schedulers through the
            {@link ListenerManager} interface.
            </summary>
            <remarks>
            </remarks>
            <author>jhouse</author>
            <since>2.0 - previously listeners were managed directly on the Scheduler interface.</since>
        </member>
        <member name="M:Quartz.IListenerManager.AddJobListener(Quartz.IJobListener,Quartz.IMatcher{Quartz.JobKey}[])">
            <summary>
            Add the given <see cref="T:Quartz.IJobListener"/> to the <code>Scheduler</code>,
            and register it to receive events for Jobs that are matched by ANY of the
            given Matchers.
            </summary>
            <remarks>
            If no matchers are provided, the <code>EverythingMatcher</code> will be used.
            </remarks>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.Impl.Matchers.EverythingMatcher`1"/>
        </member>
        <member name="M:Quartz.IListenerManager.AddJobListener(Quartz.IJobListener,System.Collections.Generic.IList{Quartz.IMatcher{Quartz.JobKey}})">
            <summary>
            Add the given <see cref="T:Quartz.IJobListener"/> to the <code>Scheduler</code>,
            and register it to receive events for Jobs that are matched by ANY of the
            given Matchers.
            </summary>
            <remarks>
            If no matchers are provided, the <code>EverythingMatcher</code> will be used.
            </remarks>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.Impl.Matchers.EverythingMatcher`1"/>
        </member>
        <member name="M:Quartz.IListenerManager.AddJobListenerMatcher(System.String,Quartz.IMatcher{Quartz.JobKey})">
            <summary>
            Add the given Matcher to the set of matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matcher">the additional matcher to apply for selecting events</param>
            <returns>true if the identified listener was found and updated</returns>
        </member>
        <member name="M:Quartz.IListenerManager.RemoveJobListenerMatcher(System.String,Quartz.IMatcher{Quartz.JobKey})">
            <summary>
            Remove the given Matcher to the set of matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matcher">the additional matcher to apply for selecting events</param>
            <returns>true if the given matcher was found and removed from the listener's list of matchers</returns>
        </member>
        <member name="M:Quartz.IListenerManager.SetJobListenerMatchers(System.String,System.Collections.Generic.IList{Quartz.IMatcher{Quartz.JobKey}})">
            <summary>
            Set the set of Matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            <para>Removes any existing matchers for the identified listener!</para>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matchers">the matchers to apply for selecting events</param>
            <returns>true if the given matcher was found and removed from the listener's list of matchers</returns>
        </member>
        <member name="M:Quartz.IListenerManager.GetJobListenerMatchers(System.String)">
            <summary>
            Get the set of Matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <returns>the matchers registered for selecting events for the identified listener</returns>
        </member>
        <member name="M:Quartz.IListenerManager.RemoveJobListener(System.String)">
            <summary>
            Remove the identified <see cref="T:Quartz.IJobListener"/> from the <code>Scheduler</code>.
            </summary>
            <remarks>
            </remarks>
            <returns>true if the identified listener was found in the list, and removed.</returns>
        </member>
        <member name="M:Quartz.IListenerManager.GetJobListeners">
            <summary>
            Get a List containing all of the <see cref="T:Quartz.IJobListener"/>s in
            the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.IListenerManager.GetJobListener(System.String)">
            <summary>
            Get the <see cref="T:Quartz.IJobListener"/> that has the given name.
            </summary>
        </member>
        <member name="M:Quartz.IListenerManager.AddTriggerListener(Quartz.ITriggerListener,Quartz.IMatcher{Quartz.TriggerKey}[])">
            <summary>
            Add the given <see cref="T:Quartz.ITriggerListener"/> to the <code>Scheduler</code>,
            and register it to receive events for Triggers that are matched by ANY of the
            given Matchers.
            </summary>
            <remarks>
            If no matcher is provided, the <code>EverythingMatcher</code> will be used.
            </remarks>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.Impl.Matchers.EverythingMatcher`1"/>
        </member>
        <member name="M:Quartz.IListenerManager.AddTriggerListener(Quartz.ITriggerListener,System.Collections.Generic.IList{Quartz.IMatcher{Quartz.TriggerKey}})">
            <summary>
            Add the given <see cref="T:Quartz.ITriggerListener"/> to the <code>Scheduler</code>,
            and register it to receive events for Triggers that are matched by ANY of the
            given Matchers.
            </summary>
            <remarks>
            If no matcher is provided, the <code>EverythingMatcher</code> will be used.
            </remarks>
            <seealso cref="T:Quartz.IMatcher`1"/>
            <seealso cref="T:Quartz.Impl.Matchers.EverythingMatcher`1"/>
        </member>
        <member name="M:Quartz.IListenerManager.AddTriggerListenerMatcher(System.String,Quartz.IMatcher{Quartz.TriggerKey})">
            <summary>
            Add the given Matcher to the set of matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matcher">the additional matcher to apply for selecting events</param>
            <returns>true if the identified listener was found and updated</returns>
        </member>
        <member name="M:Quartz.IListenerManager.RemoveTriggerListenerMatcher(System.String,Quartz.IMatcher{Quartz.TriggerKey})">
            <summary>
            Remove the given Matcher to the set of matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matcher">the additional matcher to apply for selecting events</param>
            <returns>true if the given matcher was found and removed from the listener's list of matchers</returns>
        </member>
        <member name="M:Quartz.IListenerManager.SetTriggerListenerMatchers(System.String,System.Collections.Generic.IList{Quartz.IMatcher{Quartz.TriggerKey}})">
            <summary>
            Set the set of Matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            <para>Removes any existing matchers for the identified listener!</para>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <param name="matchers">the matchers to apply for selecting events</param>
            <returns>true if the given matcher was found and removed from the listener's list of matchers</returns>
        </member>
        <member name="M:Quartz.IListenerManager.GetTriggerListenerMatchers(System.String)">
            <summary>
            Get the set of Matchers for which the listener
            will receive events if ANY of the matchers match.
            </summary>
            <remarks>
            </remarks>
            <param name="listenerName">the name of the listener to add the matcher to</param>
            <returns>the matchers registered for selecting events for the identified listener</returns>
        </member>
        <member name="M:Quartz.IListenerManager.RemoveTriggerListener(System.String)">
            <summary>
            Remove the identified <see cref="T:Quartz.ITriggerListener"/> from the <code>Scheduler</code>.
            </summary>
            <remarks>
            </remarks>
            <returns>true if the identified listener was found in the list, and</returns>
            removed.
        </member>
        <member name="M:Quartz.IListenerManager.GetTriggerListeners">
            <summary>
            Get a List containing all of the <see cref="T:Quartz.ITriggerListener"/>s
            in the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.IListenerManager.GetTriggerListener(System.String)">
            <summary>
            Get the <see cref="T:Quartz.ITriggerListener"/> that has the given name.
            </summary>
        </member>
        <member name="M:Quartz.IListenerManager.AddSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Register the given <see cref="T:Quartz.ISchedulerListener"/> with the
            <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.IListenerManager.RemoveSchedulerListener(Quartz.ISchedulerListener)">
            <summary>
            Remove the given <see cref="T:Quartz.ISchedulerListener"/> from the
            <code>Scheduler</code>.
            </summary>
            <remarks>
            </remarks>
            <returns>true if the identified listener was found in the list, and removed.</returns>
        </member>
        <member name="M:Quartz.IListenerManager.GetSchedulerListeners">
            <summary>
            Get a List containing all of the <see cref="T:Quartz.ISchedulerListener"/>s
            registered with the <code>Scheduler</code>.
            </summary>
        </member>
        <member name="T:Quartz.Util.FileUtil">
            <summary>
            Utility class for file handling related things.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Util.FileUtil.ResolveFile(System.String)">
            <summary>
            Resolves file to actual file if for example relative '~' used.
            </summary>
            <param name="fName">File name to check</param>
            <returns>Expanded file name or actual no resolving was done.</returns>
        </member>
        <member name="T:Quartz.Collection.HashSet`1">
            <summary>
            A wrapper for generic HashSet that brings a common interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Quartz.Spi.TriggerFiredResult">
            <summary>
            Result holder for trigger firing event.
            </summary>
        </member>
        <member name="M:Quartz.Spi.TriggerFiredResult.#ctor(Quartz.Spi.TriggerFiredBundle)">
            <summary>
             Constructor.
            </summary>
            <param name="triggerFiredBundle"></param>
        </member>
        <member name="M:Quartz.Spi.TriggerFiredResult.#ctor(System.Exception)">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredResult.TriggerFiredBundle">
            <summary>
             Bundle.
            </summary>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredResult.Exception">
            <summary>
            Possible exception.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.SimpleJobFactory">
            <summary> 
            The default JobFactory used by Quartz - simply calls 
            <see cref="M:Quartz.Util.ObjectUtils.InstantiateType``1(System.Type)"/> on the job class.
            </summary>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <seealso cref="T:Quartz.Simpl.PropertySettingJobFactory"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.IJobFactory">
            <summary>
            A JobFactory is responsible for producing instances of <see cref="T:Quartz.IJob"/>
            classes.
            </summary>
            <remarks>
            This interface may be of use to those wishing to have their application
            produce <see cref="T:Quartz.IJob"/> instances via some special mechanism, such as to
            give the opertunity for dependency injection.
            </remarks>
            <seealso cref="P:Quartz.IScheduler.JobFactory"/>
            <seealso cref="T:Quartz.Simpl.SimpleJobFactory"/>
            <seealso cref="T:Quartz.Simpl.PropertySettingJobFactory"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.IJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary> 
            Called by the scheduler at the time of the trigger firing, in order to
            produce a <see cref="T:Quartz.IJob"/> instance on which to call Execute.
            </summary>
            <remarks>
            It should be extremely rare for this method to throw an exception -
            basically only the the case where there is no way at all to instantiate
            and prepare the Job for execution.  When the exception is thrown, the
            Scheduler will move all triggers associated with the Job into the
            <see cref="F:Quartz.TriggerState.Error"/> state, which will require human
            intervention (e.g. an application restart after fixing whatever 
            configuration problem led to the issue wih instantiating the Job. 
            </remarks>
            <param name="bundle">
              The TriggerFiredBundle from which the <see cref="T:Quartz.IJobDetail"/>
              and other info relating to the trigger firing can be obtained.
            </param>
            <param name="scheduler">a handle to the scheduler that is about to execute the job</param>
            <throws>  SchedulerException if there is a problem instantiating the Job. </throws>
            <returns> the newly instantiated Job
            </returns>
        </member>
        <member name="M:Quartz.Simpl.SimpleJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
            Called by the scheduler at the time of the trigger firing, in order to
            produce a <see cref="T:Quartz.IJob"/> instance on which to call Execute.
            </summary>
            <remarks>
            It should be extremely rare for this method to throw an exception -
            basically only the the case where there is no way at all to instantiate
            and prepare the Job for execution.  When the exception is thrown, the
            Scheduler will move all triggers associated with the Job into the
            <see cref="F:Quartz.TriggerState.Error"/> state, which will require human
            intervention (e.g. an application restart after fixing whatever
            configuration problem led to the issue wih instantiating the Job.
            </remarks>
            <param name="bundle">The TriggerFiredBundle from which the <see cref="T:Quartz.IJobDetail"/>
              and other info relating to the trigger firing can be obtained.</param>
            <param name="scheduler"></param>
            <returns>the newly instantiated Job</returns>
            <throws>  SchedulerException if there is a problem instantiating the Job. </throws>
        </member>
        <member name="T:Quartz.Simpl.HostnameInstanceIdGenerator">
            <summary>
            <see cref="T:Quartz.Spi.IInstanceIdGenerator"/> that names the scheduler instance using 
            just the machine hostname.
            </summary>
            <remarks>
            This class is useful when you know that your scheduler instance will be the 
            only one running on a particular machine.  Each time the scheduler is 
            restarted, it will get the same instance id as long as the machine is not 
            renamed.
            </remarks>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.Spi.IInstanceIdGenerator"/>
            <seealso cref="T:Quartz.Simpl.SimpleInstanceIdGenerator"/>
        </member>
        <member name="T:Quartz.Spi.IInstanceIdGenerator">
            <summary>
            An IInstanceIdGenerator is responsible for generating the clusterwide unique 
            instance id for a <see cref="T:Quartz.IScheduler"/> node.
            </summary>
            <remarks>
            This interface may be of use to those wishing to have specific control over 
            the mechanism by which the <see cref="T:Quartz.IScheduler"/> instances in their 
            application are named.
            </remarks>
            <seealso cref="T:Quartz.Simpl.SimpleInstanceIdGenerator"/>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.IInstanceIdGenerator.GenerateInstanceId">
            <summary>
            Generate the instance id for a <see cref="T:Quartz.IScheduler"/>
            </summary>
            <returns> The clusterwide unique instance id.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.HostnameInstanceIdGenerator.GenerateInstanceId">
            <summary>
            Generate the instance id for a <see cref="T:Quartz.IScheduler"/>
            </summary>
            <returns>The clusterwide unique instance id.</returns>
        </member>
        <member name="T:Quartz.Impl.StdSchedulerFactory">
            <summary>
            An implementation of <see cref="T:Quartz.ISchedulerFactory"/> that
            does all of it's work of creating a <see cref="T:Quartz.Core.QuartzScheduler"/> instance
            based on the contents of a properties file.
            </summary>
            <remarks>
            <para>
            By default a properties are loaded from App.config's quartz section. 
            If that fails, then the file is loaded "quartz.properties". If file does not exist,
            default configration located (as a embedded resource) in Quartz.dll is loaded. If you
            wish to use a file other than these defaults, you must define the system
            property 'quartz.properties' to point to the file you want.
            </para>
            <para>
            See the sample properties that are distributed with Quartz for
            information about the various settings available within the file.
            </para>
            <para>
            Alternativly, you can explicitly Initialize the factory by calling one of
            the <see cref="M:Quartz.Impl.StdSchedulerFactory.Initialize"/> methods before calling <see cref="M:Quartz.Impl.StdSchedulerFactory.GetScheduler"/>.
            </para>
            <para>
            Instances of the specified <see cref="T:Quartz.Spi.IJobStore"/>,
            <see cref="T:Quartz.Spi.IThreadPool"/>, classes will be created
            by name, and then any additional properties specified for them in the config
            file will be set on the instance by calling an equivalent 'set' method. For
            example if the properties file contains the property 'quartz.jobStore.
            myProp = 10' then after the JobStore class has been instantiated, the property
            'MyProp' will be set with the value. Type conversion to primitive CLR types
            (int, long, float, double, boolean, enum and string) are performed before calling
            the property's setter method.
            </para>
            </remarks>
            <author>James House</author>
            <author>Anthony Eden</author>
            <author>Mohammad Rezaei</author>
            <author>Marko Lahma (.NET)</author>
            
        </member>
        <member name="T:Quartz.ISchedulerFactory">
            <summary>
            Provides a mechanism for obtaining client-usable handles to <see cref="T:Quartz.IScheduler"/>
            instances.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Impl.StdSchedulerFactory"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ISchedulerFactory.GetScheduler">
            <summary>
            Returns a client-usable handle to a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.ISchedulerFactory.GetScheduler(System.String)">
            <summary>
            Returns a handle to the Scheduler with the given name, if it exists.
            </summary>
        </member>
        <member name="P:Quartz.ISchedulerFactory.AllSchedulers">
            <summary>
            Returns handles to all known Schedulers (made by any SchedulerFactory
            within this app domain.).
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.GetDefaultScheduler">
            <summary>
            Returns a handle to the default Scheduler, creating it if it does not
            yet exist.
            </summary>
            <seealso cref="M:Quartz.Impl.StdSchedulerFactory.Initialize">
            </seealso>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.StdSchedulerFactory"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.StdSchedulerFactory"/> class.
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Initialize">
            <summary>
            Initialize the <see cref="T:Quartz.ISchedulerFactory"/>.
            </summary>
            <remarks>
            By default a properties file named "quartz.properties" is loaded from
            the 'current working directory'. If that fails, then the
            "quartz.properties" file located (as an embedded resource) in the Quartz.NET
            assembly is loaded. If you wish to use a file other than these defaults,
            you must define the system property 'quartz.properties' to point to
            the file you want.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.OverrideWithSysProps(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new name value collection and overrides its values
            with system values (environment variables).
            </summary>
            <param name="props">The base properties to override.</param>
            <returns>A new NameValueCollection instance.</returns>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary> 
            Initialize the <see cref="T:Quartz.ISchedulerFactory"/> with
            the contents of the given key value collection object.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.Instantiate">
            <summary>  </summary>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.LoadType(System.String)">
            <summary>
            Needed while loadhelper is not constructed.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.GetScheduler">
            <summary>
            Returns a handle to the Scheduler produced by this factory.
            </summary>
            <remarks>
            If one of the <see cref="M:Quartz.Impl.StdSchedulerFactory.Initialize"/> methods has not be previously
            called, then the default (no-arg) <see cref="M:Quartz.Impl.StdSchedulerFactory.Initialize"/> method
            will be called by this method.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.StdSchedulerFactory.GetScheduler(System.String)">
            <summary> <para>
            Returns a handle to the Scheduler with the given name, if it exists (if
            it has already been instantiated).
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.StdSchedulerFactory.AllSchedulers">
            <summary> <para>
            Returns a handle to all known Schedulers (made by any
            StdSchedulerFactory instance.).
            </para>
            </summary>
        </member>
        <member name="T:Quartz.Impl.Calendar.HolidayCalendar">
            <summary>
            This implementation of the Calendar stores a list of holidays (full days
            that are excluded from scheduling).
            </summary>
            <remarks>
            The implementation DOES take the year into consideration, so if you want to
            exclude July 4th for the next 10 years, you need to add 10 entries to the
            exclude list.
            </remarks>
            <author>Sharada Jambula</author>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.Calendar.BaseCalendar">
            <summary>
            This implementation of the Calendar may be used (you don't have to) as a
            base class for more sophisticated one's. It merely implements the base
            functionality required by each Calendar.
            </summary>
            <remarks>
            Regarded as base functionality is the treatment of base calendars. Base
            calendar allow you to chain (stack) as much calendars as you may need. For
            example to exclude weekends you may use WeeklyCalendar. In order to exclude
            holidays as well you may define a WeeklyCalendar instance to be the base
            calendar for HolidayCalendar instance.
            </remarks>
            <seealso cref="T:Quartz.ICalendar"/> 
            <author>Juergen Donnerstag</author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.ICalendar">
            <summary> 
            An interface to be implemented by objects that define spaces of time during 
            which an associated <see cref="T:Quartz.ITrigger"/> may (not) fire. Calendars 
            do not define actual fire times, but rather are used to limit a 
            <see cref="T:Quartz.ITrigger"/> from firing on its normal schedule if necessary. Most 
            Calendars include all times by default and allow the user to specify times 
            to exclude. 
            </summary>
            <remarks>
            As such, it is often useful to think of Calendars as being used to <I>exclude</I> a block
            of time - as opposed to <I>include</I> a block of time. (i.e. the 
            schedule "fire every five minutes except on Sundays" could be 
            implemented with a <see cref="T:Quartz.ISimpleTrigger"/> and a 
            <see cref="T:Quartz.Impl.Calendar.WeeklyCalendar"/> which excludes Sundays)
            <para>
            Implementations MUST take care of being properly cloneable and Serializable.
            </para>
            </remarks>
            <author>James House</author>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ICalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given UTC time  is 'included' by the
            Calendar.
            </summary>
        </member>
        <member name="M:Quartz.ICalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next UTC time that is 'included' by the
            Calendar after the given UTC time.
            </summary>
        </member>
        <member name="P:Quartz.ICalendar.Description">
            <summary> 
            Gets or sets a description for the <see cref="T:Quartz.ICalendar"/> instance - may be
            useful for remembering/displaying the purpose of the calendar, though
            the description has no meaning to Quartz.
            </summary>
        </member>
        <member name="P:Quartz.ICalendar.CalendarBase">
            <summary>
            Set a new base calendar or remove the existing one.
            Get the base calendar.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/> class.
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor(System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/> class.
            </summary>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor(Quartz.ICalendar,System.TimeZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/> class.
            </summary>
            <param name="baseCalendar">The base calendar.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.ArraysEqualElementsOnEqualPlaces(System.Array,System.Array)">
            <summary>
            checks whether two arrays have 
            the same length and 
            for any given place there are equal elements 
            in both arrays
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.GetBaseCalendar">
            <summary>
            Get the base calendar. Will be null, if not set.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Check if date/time represented by timeStamp is included. If included
            return true. The implementation of BaseCalendar simply calls the base
            calendars IsTimeIncluded() method if base calendar is set.
            </summary>
            <seealso cref="M:Quartz.ICalendar.IsTimeIncluded(System.DateTimeOffset)"/>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next UTC time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return 0 if all days are excluded.
            </summary>
            <seealso cref="M:Quartz.ICalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)"/>
        </member>
        <member name="M:Quartz.Impl.Calendar.BaseCalendar.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Quartz.Impl.Calendar.BaseCalendar.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:Quartz.Impl.Calendar.BaseCalendar.Description">
            <summary> 
            Gets or sets the description given to the <see cref="T:Quartz.ICalendar"/> instance by
            its creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.BaseCalendar.CalendarBase">
            <summary>
            Set a new base calendar or remove the existing one
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.HolidayCalendar"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.HolidayCalendar"/> class.
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.AddExcludedDate(System.DateTime)">
            <summary>
            Add the given Date to the list of excluded days. Only the month, day and
            year of the returned dates are significant.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.HolidayCalendar.RemoveExcludedDate(System.DateTime)">
            <summary>
            Removes the excluded date.
            </summary>
            <param name="dateToRemoveUtc">The date to remove.</param>
        </member>
        <member name="P:Quartz.Impl.Calendar.HolidayCalendar.ExcludedDates">
            <summary>
            Returns a <see cref="T:Quartz.Collection.ISortedSet`1"/> of Dates representing the excluded
            days. Only the month, day and year of the returned dates are
            significant.
            </summary>
        </member>
        <member name="T:Quartz.DateBuilder">
            <summary>
            <code>DateBuilder</code> is used to conveniently create
            <code>java.util.Date</code> instances that meet particular criteria.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>,
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code>
            and the various <code>ScheduleBuilder</code> implementations.</para>
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
            JobDetail job = newJob(MyJob.class)
            .withIdentity("myJob")
            .build();
            Trigger trigger = newTrigger()
            .withIdentity(triggerKey("myTrigger", "myTriggerGroup"))
            .withSchedule(simpleSchedule()
            .withIntervalInHours(1)
            .repeatForever())
            .startAt(futureDate(10, MINUTES))
            .build();
            scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.TriggerBuilder"/>
            <seealso cref="T:Quartz.JobBuilder"/>
        </member>
        <member name="M:Quartz.DateBuilder.#ctor">
            <summary>
            Create a DateBuilder, with initial settings for the current date 
            and time in the system default timezone.
            </summary>
        </member>
        <member name="M:Quartz.DateBuilder.#ctor(System.TimeZoneInfo)">
            <summary>
            Create a DateBuilder, with initial settings for the current date and time in the given timezone.
            </summary>
            <param name="tz"></param>
        </member>
        <member name="M:Quartz.DateBuilder.NewDate">
            <summary>
            Create a DateBuilder, with initial settings for the current date and time in the system default timezone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.NewDateInTimeZone(System.TimeZoneInfo)">
            <summary>
            Create a DateBuilder, with initial settings for the current date and time in the given timezone.
            </summary>
            <param name="tz">Time zone to use.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.Build">
            <summary>
            Build the <see cref="T:System.DateTimeOffset"/> defined by this builder instance. 
            </summary>
            <returns>New date time based on builder parameters.</returns>
        </member>
        <member name="M:Quartz.DateBuilder.AtHourOfDay(System.Int32)">
            <summary>
            Set the hour (0-23) for the Date that will be built by this builder.
            </summary>
            <param name="hour"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.AtMinute(System.Int32)">
            <summary>
            Set the minute (0-59) for the Date that will be built by this builder.
            </summary>
            <param name="minute"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.AtSecond(System.Int32)">
            <summary>
            Set the second (0-59) for the Date that will be built by this builder, and truncate the milliseconds to 000.
            </summary>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.OnDay(System.Int32)">
            <summary>
            Set the day of month (1-31) for the Date that will be built by this builder.
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.InMonth(System.Int32)">
            <summary>
            Set the month (1-12) for the Date that will be built by this builder.
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.InYear(System.Int32)">
            <summary>
            Set the year for the Date that will be built by this builder.
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.InTimeZone(System.TimeZoneInfo)">
            <summary>
            Set the TimeZoneInfo for the Date that will be built by this builder (if "null", system default will be used)
            </summary>
            <param name="tz"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.TomorrowAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a <code>Date</code> object that represents the given time, on
            tomorrow's date.
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.TodayAt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a <see cref="T:System.DateTimeOffset"/> object that represents the given time, on
            today's date (equivalent to <see cref="M:Quartz.DateBuilder.DateOf(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.DateBuilder.DateOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>
            Get a <code>Date</code> object that represents the given time, on
            today's date.
            </para>
            </summary>
            <remarks>
            </remarks>
            <param name="second"></param>
            The value (0-59) to give the seconds field of the date
            <param name="minute"></param>
            The value (0-59) to give the minutes field of the date
            <param name="hour"></param>
            The value (0-23) to give the hours field of the date
            <returns>the new date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.DateOf(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a <code>Date</code> object that represents the given time, on the
            given date.
            </summary>
            <param name="second"></param>
            The value (0-59) to give the seconds field of the date
            <param name="minute"></param>
            The value (0-59) to give the minutes field of the date
            <param name="hour"></param>
            The value (0-23) to give the hours field of the date
            <param name="dayOfMonth"></param>
            The value (1-31) to give the day of month field of the date
            <param name="month"></param>
            The value (1-12) to give the month field of the date
            <returns>the new date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.DateOf(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>
            Get a <code>Date</code> object that represents the given time, on the
            given date.
            </para>
            </summary>
            <remarks>
            </remarks>
            <param name="second"></param>
            The value (0-59) to give the seconds field of the date
            <param name="minute"></param>
            The value (0-59) to give the minutes field of the date
            <param name="hour"></param>
            The value (0-23) to give the hours field of the date
            <param name="dayOfMonth"></param>
            The value (1-31) to give the day of month field of the date
            <param name="month"></param>
            The value (1-12) to give the month field of the date
            <param name="year"></param>
            The value (1970-2099) to give the year field of the date
            <returns>the new date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenHourDateAfterNow">
            <summary>
            <para>
            Returns a date that is rounded to the next even hour after the current time.
            </para>
            </summary>
            <remarks>
            <para>
            For example a current time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </para>
            </remarks>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenHourDate(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns a date that is rounded to the next even hour above the given
            date.
            <para>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </para>
            </summary>
            <param name="dateUtc">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenHourDateBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns a date that is rounded to the previous even hour below the given
            date.
            <para>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:00:00.
            </para>
            </summary>
            <param name="dateUtc">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenMinuteDateAfterNow">
            <summary>
            <para>
            Returns a date that is rounded to the next even minute after the current time.
            </para>
            </summary>
            <remarks>
            <para>
            For example a current time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </para>
            </remarks>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenMinuteDate(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns a date that is rounded to the next even minute above the given
            date.
            <para>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </para>
            </summary>
            <param name="dateUtc">The Date to round, if <see langword="null" /> the current time will  be used</param>
            <returns>The new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenMinuteDateBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns a date that is rounded to the previous even minute below the
            given date.
            <para>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:13:00.
            </para>
            </summary>
            <param name="dateUtc">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenSecondDateAfterNow">
            <summary>
            <para>
            Returns a date that is rounded to the next even second after the current time.
            </para>
            </summary>
            <remarks>
            </remarks>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenSecondDate(System.DateTimeOffset)">
            <summary>
            <para>
            Returns a date that is rounded to the next even second above the given
            date.
            </para>
            </summary>
            <remarks>
            </remarks>
            <param name="date"></param>
            the Date to round, if <code>null</code> the current time will
            be used
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.EvenSecondDateBefore(System.DateTimeOffset)">
            <summary>
            <para>
            Returns a date that is rounded to the previous even second below the
            given date.
            </para>
            </summary>
            <remarks>
            <para>
            For example an input date with a time of 08:13:54.341 would result in a
            date with the time of 08:13:00.000.
            </para>
            </remarks>
            <param name="date"></param>
            the Date to round, if <code>null</code> the current time will
            be used
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.NextGivenMinuteDate(System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            <para>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            </para>
            </summary>
            <remarks>
            <para>
            For example an input date with a time of 08:13:54, and an input
            minute-base of 5 would result in a date with the time of 08:15:00. The
            same input date with an input minute-base of 10 would result in a date
            with the time of 08:20:00. But a date with the time 08:53:31 and an
            input minute-base of 45 would result in 09:00:00, because the even-hour
            is the next 'base' for 45-minute intervals.
            </para>
            <para>
            More examples: <table>
            <tr>
            <th>Input Time</th>
            <th>Minute-Base</th>
            <th>Result Time</th>
            </tr>
            <tr>
            <td>11:16:41</td>
            <td>20</td>
            <td>11:20:00</td>
            </tr>
            <tr>
            <td>11:36:41</td>
            <td>20</td>
            <td>11:40:00</td>
            </tr>
            <tr>
            <td>11:46:41</td>
            <td>20</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:26:41</td>
            <td>30</td>
            <td>11:30:00</td>
            </tr>
            <tr>
            <td>11:36:41</td>
            <td>30</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:16:41</td>
            <td>17</td>
            <td>11:17:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>17</td>
            <td>11:34:00</td>
            </tr>
            <tr>
            <td>11:52:41</td>
            <td>17</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:52:41</td>
            <td>5</td>
            <td>11:55:00</td>
            </tr>
            <tr>
            <td>11:57:41</td>
            <td>5</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>0</td>
            <td>12:00:00</td>
            </tr>
            <tr>
            <td>11:17:41</td>
            <td>1</td>
            <td>11:08:00</td>
            </tr>
            </table>
            </para>
            </remarks>
            <param name="date"></param>
            the Date to round, if <code>null</code> the current time will
            be used
            <param name="minuteBase"></param>
            the base-minute to set the time on
            <returns>the new rounded date</returns>
            <seealso cref="M:Quartz.DateBuilder.NextGivenSecondDate(System.Nullable{System.DateTimeOffset},System.Int32)"/>
        </member>
        <member name="M:Quartz.DateBuilder.NextGivenSecondDate(System.Nullable{System.DateTimeOffset},System.Int32)">
            <summary>
            <para>
            Returns a date that is rounded to the next even multiple of the given
            minute.
            </para>
            </summary>
            <remarks>
            The rules for calculating the second are the same as those for
            calculating the minute in the method
            <code>getNextGivenMinuteDate(..)</code>.
            </remarks>
            <param name="date">the Date to round, if <code>null</code> the current time will</param>
            be used
            <param name="secondBase">the base-second to set the time on</param>
            <returns>the new rounded date</returns>
            <seealso cref="M:Quartz.DateBuilder.NextGivenMinuteDate(System.Nullable{System.DateTimeOffset},System.Int32)"/>
        </member>
        <member name="M:Quartz.DateBuilder.TranslateTime(System.DateTimeOffset,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
            Translate a date and time from a users time zone to the another
            (probably server) timezone to assist in creating a simple trigger with
            the right date and time.
            </summary>
            <param name="date">the date to translate</param>
            <param name="src">the original time-zone</param>
            <param name="dest">the destination time-zone</param>
            <returns>the translated UTC date</returns>
        </member>
        <member name="M:Quartz.DateBuilder.GetOffset(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            Gets the offset from UT for the given date in the given time zone,
            taking into account daylight savings.
            </summary>
            <param name="date">the date that is the base for the offset</param>
            <param name="tz">the time-zone to calculate to offset to</param>
            <returns>the offset</returns>
        </member>
        <member name="T:Quartz.Impl.Matchers.NameMatcher`1">
            <summary>
            Matches on name (ignores group) property of Keys.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.Matchers.StringMatcher`1">
            <summary>
            An abstract base class for some types of matchers.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.NameMatcher`1.NameEquals(System.String)">
            <summary>
            Create a NameMatcher that matches names equaling the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.NameMatcher`1.NameStartsWith(System.String)">
            <summary>
            Create a NameMatcher that matches names starting with the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.NameMatcher`1.NameEndsWith(System.String)">
            <summary>
            Create a NameMatcher that matches names ending with the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.NameMatcher`1.NameContains(System.String)">
            <summary>
            Create a NameMatcher that matches names containing the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Util.LogicalThreadContext">
            <summary>
            Wrapper class to access thread local data.
            Data is either accessed from thread or HTTP Context's 
            data if HTTP Context is avaiable.
            </summary>
            <author>Marko Lahma .NET</author>
        </member>
        <member name="M:Quartz.Util.LogicalThreadContext.GetData``1(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the call context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Quartz.Util.LogicalThreadContext.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Quartz.Util.LogicalThreadContext.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord">
            <summary>
            Conveys a scheduler-instance state record.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.SchedulerStateRecord.CheckinInterval">
            <summary>
            Gets or sets the checkin interval.
            </summary>
            <value>The checkin interval.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.SchedulerStateRecord.CheckinTimestamp">
            <summary>
            Gets or sets the checkin timestamp.
            </summary>
            <value>The checkin timestamp.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.SchedulerStateRecord.SchedulerInstanceId">
            <summary>
            Gets or sets the scheduler instance id.
            </summary>
            <value>The scheduler instance id.</value>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.MySQLDelegate">
            <summary>
            This is a driver delegate for the MySQL ADO.NET driver.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.MySQLDelegate.GetSelectNextTriggerToAcquireSql(System.Int32)">
            <summary>
            Gets the select next trigger to acquire SQL clause.
            MySQL version with LIMIT support.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.JobStoreCMT">
            <summary>
             <see cref="T:Quartz.Impl.AdoJobStore.JobStoreCMT"/> is meant to be used in an application-server
             or other software framework environment that provides 
             container-managed-transactions. No commit / rollback will be handled by this class.
             </summary>
             <remarks>
             If you need commit / rollback, use <see cref="T:Quartz.Impl.AdoJobStore.JobStoreTX"/>
             instead.
             </remarks>
             <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
             <author>James House</author>
             <author>Srinivas Venkatarangaiah</author>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.JobStoreSupport">
            <summary>
            Contains base functionality for ADO.NET-based JobStore implementations.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.IJobStore">
            <summary> 
            The interface to be implemented by classes that want to provide a <see cref="T:Quartz.IJob"/>
            and <see cref="T:Quartz.ITrigger"/> storage mechanism for the
            <see cref="T:Quartz.Core.QuartzScheduler"/>'s use.
            </summary>
            <remarks>
            Storage of <see cref="T:Quartz.IJob"/> s and <see cref="T:Quartz.ITrigger"/> s should be keyed
            on the combination of their name and group for uniqueness.
            </remarks>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IJobDetail"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <seealso cref="T:Quartz.ICalendar"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.IJobStore.Initialize(Quartz.Spi.ITypeLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:Quartz.Spi.IJobStore"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.SchedulerStarted">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            the scheduler has started.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.SchedulerPaused">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has been paused.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.SchedulerResumed">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has resumed after being paused.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.Shutdown">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreJobAndTrigger(Quartz.IJobDetail,Quartz.Spi.IOperableTrigger)">
            <summary>
            Store the given <see cref="T:Quartz.IJobDetail"/> and <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="newJob">The <see cref="T:Quartz.IJobDetail"/> to be stored.</param>
            <param name="newTrigger">The <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <throws>  ObjectAlreadyExistsException </throws>
        </member>
        <member name="M:Quartz.Spi.IJobStore.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <param name="newJob">The <see cref="T:Quartz.IJobDetail"/> to be stored.</param>
            <param name="replaceExisting">
            If <see langword="true"/>, any <see cref="T:Quartz.IJob"/> existing in the
            <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group should be
            over-written.
            </param>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveJob(Quartz.JobKey)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.IJob"/> with the given
            key, and any <see cref="T:Quartz.ITrigger"/> s that reference
            it.
            </summary>
            <remarks>
            If removal of the <see cref="T:Quartz.IJob"/> results in an empty group, the
            group should be removed from the <see cref="T:Quartz.Spi.IJobStore"/>'s list of
            known group names.
            </remarks>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.IJob"/> with the given name and
            group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveJob(Quartz.JobKey)">
            <summary>
            Retrieve the <see cref="T:Quartz.IJobDetail"/> for the given
            <see cref="T:Quartz.IJob"/>.
            </summary>
            <returns>
            The desired <see cref="T:Quartz.IJob"/>, or null if there is no match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreTrigger(Quartz.Spi.IOperableTrigger,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="newTrigger">The <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <param name="replaceExisting">If <see langword="true"/>, any <see cref="T:Quartz.ITrigger"/> existing in
            the <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group should
            be over-written.</param>
            <throws>  ObjectAlreadyExistsException </throws>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveTrigger(Quartz.TriggerKey)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the given key.
            </summary>
            <remarks>
            <para>
            If removal of the <see cref="T:Quartz.ITrigger"/> results in an empty group, the
            group should be removed from the <see cref="T:Quartz.Spi.IJobStore"/>'s list of
            known group names.
            </para>
            <para>
            If removal of the <see cref="T:Quartz.ITrigger"/> results in an 'orphaned' <see cref="T:Quartz.IJob"/>
            that is not 'durable', then the <see cref="T:Quartz.IJob"/> should be deleted
            also.
            </para>
            </remarks>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ReplaceTrigger(Quartz.TriggerKey,Quartz.Spi.IOperableTrigger)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
            given name, and store the new given one - which must be associated
            with the same job.
            </summary>
            <param name="triggerKey">The <see cref="T:Quartz.ITrigger"/> to be replaced.</param>
            <param name="newTrigger">The new <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveTrigger(Quartz.TriggerKey)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <returns>
            The desired <see cref="T:Quartz.ITrigger"/>, or null if there is no
            match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.CheckExists(Quartz.JobKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.IJob"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="jobKey">the identifier to check for</param>
            <returns>true if a job exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.CheckExists(Quartz.TriggerKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.ITrigger"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="triggerKey">the identifier to check for</param>
            <returns>true if a trigger exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ClearAllSchedulingData">
            <summary>
            Clear (delete!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Quartz.Spi.IJobStore.StoreCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ICalendar"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="calendar">The <see cref="T:Quartz.ICalendar"/> to be stored.</param>
            <param name="replaceExisting">If <see langword="true"/>, any <see cref="T:Quartz.ICalendar"/> existing
            in the <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group
            should be over-written.</param>
            <param name="updateTriggers">If <see langword="true"/>, any <see cref="T:Quartz.ITrigger"/>s existing
            in the <see cref="T:Quartz.Spi.IJobStore"/> that reference an existing
            Calendar with the same name with have their next fire time
            re-computed with the new <see cref="T:Quartz.ICalendar"/>.</param>
            <throws>  ObjectAlreadyExistsException </throws>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RemoveCalendar(System.String)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ICalendar"/> with the
            given name.
            </summary>
            <remarks>
            If removal of the <see cref="T:Quartz.ICalendar"/> would result in
            <see cref="T:Quartz.ITrigger"/>s pointing to non-existent calendars, then a
            <see cref="T:Quartz.JobPersistenceException"/> will be thrown.
            </remarks>
            <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be removed.</param>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ICalendar"/> with the given name
            was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.RetrieveCalendar(System.String)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be retrieved.</param>
            <returns>
            The desired <see cref="T:Quartz.ICalendar"/>, or null if there is no
            match.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfJobs">
            <summary>
            Get the number of <see cref="T:Quartz.IJob"/>s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfTriggers">
            <summary>
            Get the number of <see cref="T:Quartz.ITrigger"/>s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetNumberOfCalendars">
            <summary>
            Get the number of <see cref="T:Quartz.ICalendar"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/> s that
            have the given group name.
            <para>
            If there are no jobs in the given group name, the result should be a
            zero-length array (not <see langword="null"/>).
            </para>
            </summary>
            <param name="matcher"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/>s
            that have the given group name.
            <para>
            If there are no triggers in the given group name, the result should be a
            zero-length array (not <see langword="null"/>).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetJobGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/>
            groups.
            <para>
            If there are no known group names, the result should be a zero-length
            array (not <see langword="null"/>).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/>
            groups.
            <para>
            If there are no known group names, the result should be a zero-length
            array (not <see langword="null"/>).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetCalendarNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ICalendar"/> s
            in the <see cref="T:Quartz.Spi.IJobStore"/>.
            
            <para>
            If there are no Calendars in the given group name, the result should be
            a zero-length array (not <see langword="null"/>).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggersForJob(Quartz.JobKey)">
            <summary>
            Get all of the Triggers that are associated to the given Job.
            </summary>
            <remarks>
            If there are no matches, a zero-length array should be returned.
            </remarks>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Get the current state of the identified <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <seealso cref="T:Quartz.TriggerState"/>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseTrigger(Quartz.TriggerKey)">
            <summary>
            Pause the <see cref="T:Quartz.ITrigger"/> with the given key.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the
            given group.
            </summary>
            <remarks>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new triggers that are added to the group while the group is
            paused.
            </remarks>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseJob(Quartz.JobKey)">
            <summary>
            Pause the <see cref="T:Quartz.IJob"/> with the given key - by
            pausing all of its current <see cref="T:Quartz.ITrigger"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.IJob"/>s in the given
            group - by pausing all of their <see cref="T:Quartz.ITrigger"/>s.
            <para>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new jobs that are added to the group while the group is
            paused.
            </para>
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.ITrigger"/> with the
            given key.
            
            <para>
            If the <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
            <seealso cref="T:System.String">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.ITrigger"/>s
            in the given group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.GetPausedTriggerGroups">
            <summary>
            Gets the paused trigger groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeJob(Quartz.JobKey)">
            <summary> 
            Resume (un-pause) the <see cref="T:Quartz.IJob"/> with the
            given key.
            <para>
            If any of the <see cref="T:Quartz.IJob"/>'s<see cref="T:Quartz.ITrigger"/> s missed one
            or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s misfire
            instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.IJob"/>s in
            the given group.
            <para>
            If any of the <see cref="T:Quartz.IJob"/> s had <see cref="T:Quartz.ITrigger"/> s that
            missed one or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s
            misfire instruction will be applied.
            </para> 
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.PauseAll">
            <summary>
            Pause all triggers - equivalent of calling <see cref="M:Quartz.Spi.IJobStore.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            When <see cref="M:Quartz.Spi.IJobStore.ResumeAll"/> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Spi.IJobStore.ResumeAll"/>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ResumeAll">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <see cref="M:Quartz.Spi.IJobStore.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            
            </summary>
            <seealso cref="M:Quartz.Spi.IJobStore.PauseAll"/>
        </member>
        <member name="M:Quartz.Spi.IJobStore.AcquireNextTriggers(System.DateTimeOffset,System.Int32,System.TimeSpan)">
            <summary>
            Get a handle to the next trigger to be fired, and mark it as 'reserved'
            by the calling scheduler.
            </summary>
            <param name="noLaterThan">If &gt; 0, the JobStore should only return a Trigger
            that will fire no later than the time represented in this value as
            milliseconds.</param>
            <param name="maxCount"></param>
            <param name="timeWindow"></param>
            <returns></returns>
            <seealso cref="T:Quartz.ITrigger">
            </seealso>
        </member>
        <member name="M:Quartz.Spi.IJobStore.ReleaseAcquiredTrigger(Quartz.Spi.IOperableTrigger)">
            <summary> 
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler no longer plans to
            fire the given <see cref="T:Quartz.ITrigger"/>, that it had previously acquired
            (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Spi.IJobStore.TriggersFired(System.Collections.Generic.IList{Quartz.Spi.IOperableTrigger})">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler is now firing the
            given <see cref="T:Quartz.ITrigger"/> (executing its associated <see cref="T:Quartz.IJob"/>),
            that it had previously acquired (reserved).
            </summary>
            <returns>
            May return null if all the triggers or their calendars no longer exist, or
            if the trigger was not successfully put into the 'executing'
            state.  Preference is to return an empty list if none of the triggers
            could be fired.
            </returns>
        </member>
        <member name="M:Quartz.Spi.IJobStore.TriggeredJobComplete(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler has completed the
            firing of the given <see cref="T:Quartz.ITrigger"/> (and the execution its
            associated <see cref="T:Quartz.IJob"/>), and that the <see cref="T:Quartz.JobDataMap"/>
            in the given <see cref="T:Quartz.IJobDetail"/> should be updated if the <see cref="T:Quartz.IJob"/>
            is stateful.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IJobStore.SupportsPersistence">
            <summary>
            Indicates whether job store supports persistence.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Spi.IJobStore.EstimatedTimeToReleaseAndAcquireTrigger">
            <summary>
            How long (in milliseconds) the <see cref="T:Quartz.Spi.IJobStore"/> implementation 
            estimates that it will take to release a trigger and acquire a new one. 
            </summary>
        </member>
        <member name="P:Quartz.Spi.IJobStore.Clustered">
            <summary>
            Whether or not the <see cref="T:Quartz.Spi.IJobStore"/> implementation is clustered.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Spi.IJobStore.InstanceId">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> of the Scheduler instance's Id, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IJobStore.InstanceName">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> of the Scheduler instance's name, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Spi.IJobStore.ThreadPoolSize">
            <summary>
            Tells the JobStore the pool size used to execute jobs.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.JobStoreSupport"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetConnection">
            <summary>
            Gets the connection and starts a new transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.Initialize(Quartz.Spi.ITypeLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:Quartz.Spi.IJobStore"/> is
            used, in order to give it a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.SchedulerStarted">
            <seealso cref="M:Quartz.Spi.IJobStore.SchedulerStarted"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.SchedulerPaused">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has been paused.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.SchedulerResumed">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has resumed after being paused.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.Shutdown">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverJobs">
            <summary>
            Will recover any failed or misfired jobs and clean up the data store as
            appropriate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverJobs(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Will recover any failed or misfired jobs and clean up the data store as
            appropriate.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreJobAndTrigger(Quartz.IJobDetail,Quartz.Spi.IOperableTrigger)">
            <summary>
            Store the given <see cref="T:Quartz.IJobDetail"/> and <see cref="T:Quartz.Spi.IOperableTrigger"/>.
            </summary>
            <param name="newJob">Job to be stored.</param>
            <param name="newTrigger">Trigger to be stored.</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Stores the given <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <param name="newJob">The <see cref="T:Quartz.IJobDetail"/> to be stored.</param>
            <param name="replaceExisting">
            If <see langword="true"/>, any <see cref="T:Quartz.IJob"/> existing in the
            <see cref="T:Quartz.Spi.IJobStore"/> with the same name &amp; group should be over-written.
            </param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.IJobDetail,System.Boolean)">
            <summary> <para>
            Insert or update a job.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.JobExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Check existence of a given job.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreTrigger(Quartz.Spi.IOperableTrigger,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="newTrigger">The <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <param name="replaceExisting">
            If <see langword="true"/>, any <see cref="T:Quartz.ITrigger"/> existing in
            the <see cref="T:Quartz.Spi.IJobStore"/> with the same name &amp; group should
            be over-written.
            </param>
            <exception cref="T:Quartz.ObjectAlreadyExistsException">
            if a <see cref="T:Quartz.ITrigger"/> with the same name/group already
            exists, and replaceExisting is set to false.
            </exception>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Insert or update a trigger.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.TriggerExists(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Check existence of a given trigger.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveJob(Quartz.JobKey)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.IJob"/> with the given
            name, and any <see cref="T:Quartz.ITrigger"/> s that reference
            it.
            </summary>
            
            <remarks>
            If removal of the <see cref="T:Quartz.IJob"/> results in an empty group, the
            group should be removed from the <see cref="T:Quartz.Spi.IJobStore"/>'s list of
            known group names.
            </remarks>
            <returns>
            <see langword="true"/> if a <see cref="T:Quartz.IJob"/> with the given name &amp;
            group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.DeleteJobAndChildren(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey)">
            <summary>
            Delete a job and its listeners.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.Boolean)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.DeleteTriggerAndChildren(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Delete a trigger, its listeners, and its Simple/Cron/BLOB sub-table entry.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveJob(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.Boolean)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ReplaceTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey,Quartz.Spi.IOperableTrigger)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveJob(Quartz.JobKey)">
            <summary>
            Retrieve the <see cref="T:Quartz.IJobDetail"/> for the given
            <see cref="T:Quartz.IJob"/>.
            </summary>
            <param name="jobKey">The key identifying the job.</param>
            <returns>The desired <see cref="T:Quartz.IJob"/>, or null if there is no match.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveTrigger(Quartz.TriggerKey)">
             <summary>
             Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
             given name.
             </summary>
             
             <remarks>
             <para>
             If removal of the <see cref="T:Quartz.ITrigger"/> results in an empty group, the
             group should be removed from the <see cref="T:Quartz.Spi.IJobStore"/>'s list of
             known group names.
             </para>
             
             <para>
             If removal of the <see cref="T:Quartz.ITrigger"/> results in an 'orphaned' <see cref="T:Quartz.IJob"/>
             that is not 'durable', then the <see cref="T:Quartz.IJob"/> should be deleted
             also.
             </para>
             </remarks>
             <param name="triggerKey">The key identifying the trigger.</param>
             <returns>
             <see langword="true"/> if a <see cref="T:Quartz.ITrigger"/> with the given
             name &amp; group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ReplaceTrigger(Quartz.TriggerKey,Quartz.Spi.IOperableTrigger)">
            <see cref="M:Quartz.Spi.IJobStore.ReplaceTrigger(Quartz.TriggerKey,Quartz.Spi.IOperableTrigger)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveTrigger(Quartz.TriggerKey)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns>The desired <see cref="T:Quartz.ITrigger"/>, or null if there is no match.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Get the current state of the identified <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <seealso cref="F:Quartz.TriggerState.Normal"/>
            <seealso cref="F:Quartz.TriggerState.Paused"/>
            <seealso cref="F:Quartz.TriggerState.Complete"/>
            <seealso cref="F:Quartz.TriggerState.Error"/>
            <seealso cref="F:Quartz.TriggerState.None"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetTriggerState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Gets the state of the trigger.
            </summary>
            <param name="conn">The conn.</param>
            <param name="triggerKey">The key identifying the trigger.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.StoreCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ICalendar"/>.
            </summary>
            <param name="calName">The name of the calendar.</param>
            <param name="calendar">The <see cref="T:Quartz.ICalendar"/> to be stored.</param>
            <param name="replaceExisting">
            If <see langword="true"/>, any <see cref="T:Quartz.ICalendar"/> existing
            in the <see cref="T:Quartz.Spi.IJobStore"/> with the same name &amp; group
            should be over-written.
            </param>
            <param name="updateTriggers"></param>
            <exception cref="T:Quartz.ObjectAlreadyExistsException">
                      if a <see cref="T:Quartz.ICalendar"/> with the same name already
                      exists, and replaceExisting is set to false.
            </exception>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RemoveCalendar(System.String)">
             <summary>
             Remove (delete) the <see cref="T:Quartz.ICalendar"/> with the given name.
             </summary>
             <remarks>
             If removal of the <see cref="T:Quartz.ICalendar"/> would result in
             <see cref="T:Quartz.ITrigger"/>s pointing to non-existent calendars, then a
             <see cref="T:Quartz.JobPersistenceException"/> will be thrown.
             </remarks>
             <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be removed.</param>
             <returns>
             <see langword="true"/> if a <see cref="T:Quartz.ICalendar"/> with the given name
             was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RetrieveCalendar(System.String)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be retrieved.</param>
            <returns>The desired <see cref="T:Quartz.ICalendar"/>, or null if there is no match.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetNumberOfJobs">
            <summary>
            Get the number of <see cref="T:Quartz.IJob"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetNumberOfTriggers">
            <summary>
            Get the number of <see cref="T:Quartz.ITrigger"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetNumberOfCalendars">
            <summary>
            Get the number of <see cref="T:Quartz.ICalendar"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/> s that
            have the given group name.
            </summary>
            <remarks>
            If there are no jobs in the given group name, the result should be a
            zero-length array (not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CheckExists(Quartz.JobKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.IJob"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="jobKey">the identifier to check for</param>
            <returns>true if a Job exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CheckExists(Quartz.TriggerKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.ITrigger"/> with the given identifier already
            exists within the scheduler.
            </summary>
            <remarks>
            </remarks>
            <param name="triggerKey">the identifier to check for</param>
            <returns>true if a Trigger exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ClearAllSchedulingData">
            <summary>
            Clear (delete!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/> s
            that have the given group name.
            </summary>
            <remarks>
            If there are no triggers in the given group name, the result should be a
            zero-length array (not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetJobGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/>
            groups.
            </summary>
            
            <remarks>
            If there are no known group names, the result should be a zero-length
            array (not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetTriggerGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/>
            groups.
            </summary>
            
            <remarks>
            If there are no known group names, the result should be a zero-length
            array (not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetCalendarNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ICalendar"/> s
            in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
            <remarks>
            If there are no Calendars in the given group name, the result should be
            a zero-length array (not <see langword="null"/>).
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetTriggersForJob(Quartz.JobKey)">
            <summary>
            Get all of the Triggers that are associated to the given Job.
            </summary>
            <remarks>
            If there are no matches, a zero-length array should be returned.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseTrigger(Quartz.TriggerKey)">
            <summary>
            Pause the <see cref="T:Quartz.ITrigger"/> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Pause the <see cref="T:Quartz.ITrigger"/> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseJob(Quartz.JobKey)">
            <summary>
            Pause the <see cref="T:Quartz.IJob"/> with the given name - by
            pausing all of its current <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeJob(Quartz.JobKey)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.IJob"/>s in the given
            group - by pausing all of their <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CheckBlockedState(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.JobKey,System.String)">
            <summary>
            Determines if a Trigger for the given job should be blocked.  
            State can only transition to StatePausedBlocked/StateBlocked from 
            StatePaused/StateWaiting respectively.
            </summary>
            <returns>StatePausedBlocked, StateBlocked, or the currentState. </returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeTrigger(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.TriggerKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.ITrigger"/> with the
            given name.
            </summary>
            <remarks>
            If the <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeJob(Quartz.JobKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.IJob"/> with the
            given name.
            </summary>
            <remarks>
            If any of the <see cref="T:Quartz.IJob"/>'s <see cref="T:Quartz.ITrigger"/> s missed one
            or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s misfire
            instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseJob(Quartz.JobKey)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.IJob"/>s in
            the given group.
            </summary>
            <remarks>
            If any of the <see cref="T:Quartz.IJob"/> s had <see cref="T:Quartz.ITrigger"/> s that
            missed one or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s
            misfire instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the given group.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseTriggerGroup(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the given group.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetPausedTriggerGroups(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary> 
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the
            given group.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeTriggers(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.ITrigger"/>s
            in the given group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseAll(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Pause all triggers - equivalent of calling <see cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            When <see cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeAll"/> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeAll"/>
            <seealso cref="T:System.String"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeAll">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <see cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            </summary>
            <remarks>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseAll"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeAll(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <see cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.PauseAll"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.AcquireNextTriggers(System.DateTimeOffset,System.Int32,System.TimeSpan)">
            <summary>
            Get a handle to the next N triggers to be fired, and mark them as 'reserved'
            by the calling scheduler.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ReleaseAcquiredTrigger(Quartz.Spi.IOperableTrigger)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ReleaseAcquiredTrigger(Quartz.Spi.IOperableTrigger)">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler no longer plans to
            fire the given <see cref="T:Quartz.ITrigger"/>, that it had previously acquired
            (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.TriggeredJobComplete(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler has completed the
            firing of the given <see cref="T:Quartz.ITrigger"/> (and the execution its
            associated <see cref="T:Quartz.IJob"/>), and that the <see cref="T:Quartz.JobDataMap"/>
            in the given <see cref="T:Quartz.IJobDetail"/> should be updated if the <see cref="T:Quartz.IJob"/>
            is stateful.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.FindFailedInstances(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Get a list of all scheduler instances in the cluster that may have failed.
            This includes this scheduler if it is checking in for the first time.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.FindOrphanedFailedInstances(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Collections.Generic.IList{Quartz.Impl.AdoJobStore.SchedulerStateRecord})">
            <summary>
            Create dummy <see cref="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord"/> objects for fired triggers
            that have no scheduler state record.  Checkin timestamp and interval are
            left as zero on these dummy <see cref="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord"/> objects.
            </summary>
            <param name="conn"></param>
            <param name="schedulerStateRecords">List of all current <see cref="T:Quartz.Impl.AdoJobStore.SchedulerStateRecord"/>s</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CleanupConnection(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Cleanup the given database connection.  This means restoring
            any modified auto commit or transaction isolation connection
            attributes, and then closing the underlying connection.
            </summary>
            
            <remarks>
            This is separate from closeConnection() because the Spring 
            integration relies on being able to overload closeConnection() and
            expects the same connection back that it originally returned
            from the datasource. 
            </remarks>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CloseConnection(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CloseConnection(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary> 
            Closes the supplied connection.
            </summary>
            <param name="cth">(Optional)</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RollbackConnection(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder)">
            <summary>
            Rollback the supplied connection.
            </summary>
            <param name="cth">(Optional)
            </param>
            <throws>  JobPersistenceException thrown if a SQLException occurs when the </throws>
            <summary> connection is rolled back
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.CommitConnection(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Boolean)">
            <summary>
            Commit the supplied connection.
            </summary>
            <param name="cth">The CTH.</param>
            <param name="openNewTransaction">if set to <c>true</c> opens a new transaction.</param>
            <throws>JobPersistenceException thrown if a SQLException occurs when the </throws>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteWithoutLock(System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})">
            <summary>
            Execute the given callback in a transaction. Depending on the JobStore, 
            the surrounding transaction may be assumed to be already present 
            (managed).  
            </summary>
            <remarks>
            This method just forwards to ExecuteInLock() with a null lockName.
            </remarks>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInLock(System.String,System.Action{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder})"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInLock(System.String,System.Action{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder})">
            <summary>
            Execute the given callback having acquired the given lock.  
            Depending on the JobStore, the surrounding transaction may be 
            assumed to be already present (managed).  This version is just a 
            handy wrapper around executeInLock that doesn't require a return
            value.
            </summary>
            <param name="lockName">
            The name of the lock to acquire, for example 
            "TRIGGER_ACCESS".  If null, then no lock is acquired, but the
            lockCallback is still executed in a transaction. 
            </param>
            <param name="txCallback">
            The callback to excute after having acquired the given lock.
            </param>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})">
            <summary>
            Execute the given callback having acquired the given lock.  
            Depending on the JobStore, the surrounding transaction may be 
            assumed to be already present (managed).
            </summary> 
            <param name="lockName">
            The name of the lock to acquire, for example 
            "TRIGGER_ACCESS".  If null, then no lock is acquired, but the
            lockCallback is still executed in a transaction. 
            </param>
            <param name="txCallback">
            The callback to excute after having acquired the given lock.
            </param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Action{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder})">
            <summary>
            Execute the given callback having optionally acquired the given lock.
            This uses the non-managed transaction connection.  This version is just a 
            handy wrapper around executeInNonManagedTXLock that doesn't require a return
            value.
            </summary>
            <param name="lockName">
            The name of the lock to acquire, for example 
            "TRIGGER_ACCESS".  If null, then no lock is acquired, but the
            lockCallback is still executed in a non-managed transaction. 
            </param>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})"/>
            <param name="txCallback">
            The callback to excute after having acquired the given lock.
            </param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})">
            <summary>
            Execute the given callback having optionally acquired the given lock.
            This uses the non-managed transaction connection.
            </summary>
            <param name="lockName">
            The name of the lock to acquire, for example 
            "TRIGGER_ACCESS".  If null, then no lock is acquired, but the
            lockCallback is still executed in a non-managed transaction. 
            </param>
            <param name="txCallback">
            The callback to excute after having acquired the given lock.
            </param>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DataSource">
            <summary> 
            Get or set the datasource name.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.TablePrefix">
            <summary> 
            Get or sets the prefix that should be pre-pended to all table names.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.UseProperties">
            <summary>
            Set whether string-only properties will be handled in JobDataMaps.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.InstanceId">
            <summary>
            Get or set the instance Id of the Scheduler (must be unique within a cluster).
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.InstanceName">
            <summary>
            Get or set the instance Id of the Scheduler (must be unique within this server instance).
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.Clustered">
            <summary> 
            Get or set whether this instance is part of a cluster.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.ClusterCheckinInterval">
            <summary>
            Get or set the frequency at which this instance "checks-in"
            with the other instances of the cluster. -- Affects the rate of
            detecting failed instances.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.MaxMisfiresToHandleAtATime">
            <summary>
            Get or set the maximum number of misfired triggers that the misfire handling
            thread will try to recover at one time (within one transaction).  The
            default is 20.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DbRetryInterval">
            <summary>
            Gets or sets the database retry interval.
            </summary>
            <value>The db retry interval.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.UseDBLocks">
            <summary>
            Get or set whether this instance should use database-based thread
            synchronization.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.LockOnInsert">
            <summary> 
            Whether or not to obtain locks when inserting new jobs/triggers.  
            Defaults to <see langword="true" />, which is safest - some db's (such as 
            MS SQLServer) seem to require this to avoid deadlocks under high load,
            while others seem to do fine without.  
            </summary>
            <remarks>
            Setting this property to <see langword="false" /> will provide a 
            significant performance increase during the addition of new jobs 
            and triggers.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.MisfireThreshold">
            <summary> 
            The time span by which a trigger must have missed its
            next-fire-time, in order for it to be considered "misfired" and thus
            have its misfire instruction applied.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DontSetAutoCommitFalse">
            <summary> 
            Don't call set autocommit(false) on connections obtained from the
            DataSource. This can be helpfull in a few situations, such as if you
            have a driver that complains if it is called when it is already off.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.TxIsolationLevelSerializable">
            <summary> 
            Set the transaction isolation level of DB connections to sequential.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.AcquireTriggersWithinLock">
            <summary>
            Whether or not the query and update to acquire a Trigger for firing
            should be performed after obtaining an explicit DB lock (to avoid 
            possible race conditions on the trigger's db row).  This is
            is considered unnecessary for most databases (due to the nature of
             the SQL update that is performed), and therefore a superfluous performance hit.
            </summary>
            <remarks>
            However, if batch acquisition is used, it is important for this behavior 
            to be used for all dbs.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DriverDelegateType">
            <summary> 
            Get or set the ADO.NET driver delegate class name.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DriverDelegateInitString">
            <summary>
            The driver delegate's initialization string.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.SelectWithLockSQL">
            <summary>
            set the SQL statement to use to select and lock a row in the "locks"
            table.
            </summary>
            <seealso cref="T:Quartz.Impl.AdoJobStore.StdRowLockSemaphore"/>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.MakeThreadsDaemons">
            <summary>
            Get whether the threads spawned by this JobStore should be
            marked as daemon.  Possible threads include the <see cref="T:Quartz.Impl.AdoJobStore.JobStoreSupport.MisfireHandler"/> 
            and the <see cref="T:Quartz.Impl.AdoJobStore.JobStoreSupport.ClusterManager"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.DoubleCheckLockMisfireHandler">
            <summary>
            Get whether to check to see if there are Triggers that have misfired
            before actually acquiring the lock to recover them.  This should be 
            set to false if the majority of the time, there are are misfired
            Triggers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.Delegate">
            <summary>
            Get the driver delegate for DB operations.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.CanUseProperties">
            <summary>
            Get whether String-only properties will be handled in JobDataMaps.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.SupportsPersistence">
            <summary>
            Indicates whether this job store supports persistence.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:Quartz.Spi.ITypeLoadHelper">
            <summary> 
            An interface for classes wishing to provide the service of loading classes
            and resources within the scheduler...
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.ITypeLoadHelper.Initialize">
            <summary> 
            Called to give the ClassLoadHelper a chance to Initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Spi.ITypeLoadHelper.LoadType(System.String)">
            <summary> 
            Return the class with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Spi.ITypeLoadHelper.GetResource(System.String)">
            <summary> 
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.net.URL object
            </returns>
        </member>
        <member name="M:Quartz.Spi.ITypeLoadHelper.GetResourceAsStream(System.String)">
            <summary> 
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a java.io.InputStream object
            </returns>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobsResult">
            <summary>
            Helper class for returning the composite result of trying
            to recover misfired jobs.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobsResult.#ctor(System.Boolean,System.Int32,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobsResult"/> class.
            </summary>
            <param name="hasMoreMisfiredTriggers">if set to <c>true</c> [has more misfired triggers].</param>
            <param name="processedMisfiredTriggerCount">The processed misfired trigger count.</param>
            <param name="earliestNewTimeUtc"></param>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobsResult.HasMoreMisfiredTriggers">
            <summary>
            Gets a value indicating whether this instance has more misfired triggers.
            </summary>
            <value>
            	<c>true</c> if this instance has more misfired triggers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.JobStoreSupport.RecoverMisfiredJobsResult.ProcessedMisfiredTriggerCount">
            <summary>
            Gets the processed misfired trigger count.
            </summary>
            <value>The processed misfired trigger count.</value>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreCMT.Initialize(Quartz.Spi.ITypeLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:Quartz.Spi.IJobStore"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
            <param name="loadHelper"></param>
            <param name="signaler"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreCMT.Shutdown">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreCMT.GetNonManagedTXConnection">
            <summary>
            Gets the non managed TX connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreCMT.ExecuteInLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})">
            <summary>
            Execute the given callback having optionally acquired the given lock.  
            Because CMT assumes that the connection is already part of a managed
            transaction, it does not attempt to commit or rollback the 
            enclosing transaction.
            </summary>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreTX.ExecuteInLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetNonManagedTXConnection"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetConnection"/>
            <param name="lockName">
            The name of the lock to acquire, for example 
            "TRIGGER_ACCESS".  If null, then no lock is acquired, but the
            txCallback is still executed in a transaction.
            </param>
            <param name="txCallback">Callback to execute.</param>
        </member>
        <member name="T:Quartz.Listener.JobChainingJobListener">
             <summary>
             Keeps a collection of mappings of which Job to trigger after the completion
             of a given job.  If this listener is notified of a job completing that has a
             mapping, then it will then attempt to trigger the follow-up job.  This
             achieves "job chaining", or a "poor man's workflow".
            </summary>
             <remarks>
             <para>
             Generally an instance of this listener would be registered as a global
             job listener, rather than being registered directly to a given job.
             </para>
             <para>
             If for some reason there is a failure creating the trigger for the
             follow-up job (which would generally only be caused by a rare serious
             failure in the system, or the non-existence of the follow-up job), an error
             messsage is logged, but no other action is taken. If you need more rigorous
             handling of the error, consider scheduling the triggering of the flow-up
             job within your job itself.
             </para>
            </remarks>
             <author>James House</author>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Listener.JobListenerSupport">
            <summary>
            A helpful abstract base class for implementors of <see cref="T:Quartz.IJobListener"/>.
            </summary>
            <remarks>
            <para>
            The methods in this class are empty so you only need to override the  
            subset for the <see cref="T:Quartz.IJobListener"/> events you care about.
            </para>
            
            <para>
            You are required to implement <see cref="P:Quartz.IJobListener.Name"/> 
            to return the unique name of your <see cref="T:Quartz.IJobListener"/>.  
            </para>
            </remarks>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.IJobListener"/>
        </member>
        <member name="M:Quartz.Listener.JobListenerSupport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Listener.JobListenerSupport"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Listener.JobListenerSupport.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            is about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occured).
            <para>
            This method will not be invoked if the execution of the Job was vetoed
            by a <see cref="T:Quartz.ITriggerListener"/>.
            </para>
            </summary>
            <param name="context"></param>
            <seealso cref="M:Quartz.Listener.JobListenerSupport.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Quartz.Listener.JobListenerSupport.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occured), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's
            execution.
            </summary>
            <param name="context"></param>
            <seealso cref="M:Quartz.Listener.JobListenerSupport.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Quartz.Listener.JobListenerSupport.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
            has been executed, and be for the associated <see cref="T:Quartz.ITrigger"/>'s
            <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
            <param name="context"></param>
            <param name="jobException"></param>
        </member>
        <member name="P:Quartz.Listener.JobListenerSupport.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Listener.JobChainingJobListener.#ctor(System.String)">
            <summary>
            Construct an instance with the given name.
            </summary>
            <param name="name">The name of this instance.</param>
        </member>
        <member name="M:Quartz.Listener.JobChainingJobListener.AddJobChainLink(Quartz.JobKey,Quartz.JobKey)">
            <summary>
            Add a chain mapping - when the Job identified by the first key completes
            the job identified by the second key will be triggered.
            </summary>
            <param name="firstJob">a JobKey with the name and group of the first job</param>
            <param name="secondJob">a JobKey with the name and group of the follow-up job</param>
        </member>
        <member name="T:Quartz.TriggerBuilder">
            <summary>
            <code>TriggerBuilder</code> is used to instantiate <see cref="T:Quartz.ITrigger"/>s.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>,
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code>
            and the various <code>ScheduleBuilder</code> implementations.</para>
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
            JobDetail job = newJob(MyJob.class)
            .withIdentity("myJob")
            .build();
            Trigger trigger = newTrigger()
            .withIdentity(triggerKey("myTrigger", "myTriggerGroup"))
            .withSchedule(simpleSchedule()
            .withIntervalInHours(1)
            .repeatForever())
            .startAt(futureDate(10, MINUTES))
            .build();
            scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.JobBuilder"/>
            <seealso cref="T:Quartz.IScheduleBuilder"/>
            <seealso cref="T:Quartz.DateBuilder"/>
            <seealso cref="T:Quartz.ITrigger"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.Create">
            <summary>
            Create a new TriggerBuilder with which to define a
            specification for a Trigger.
            </summary>
            <remarks>
            </remarks>
            <returns>the new TriggerBuilder</returns>
        </member>
        <member name="M:Quartz.TriggerBuilder.Build">
            <summary>
            Produce the <code>Trigger</code>.
            </summary>
            <remarks>
            </remarks>
            <returns>a Trigger that meets the specifications of the builder.</returns>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithIdentity(System.String)">
            <summary>
            Use a <code>TriggerKey</code> with the given name and default group to
            identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Trigger's TriggerKey</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey"/>
            <seealso cref="P:Quartz.ITrigger.Key"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithIdentity(System.String,System.String)">
            <summary>
            Use a TriggerKey with the given name and group to
            identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Trigger's TriggerKey</param>
            <param name="group">the group element for the Trigger's TriggerKey</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey"/>
            <seealso cref="P:Quartz.ITrigger.Key"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithIdentity(Quartz.TriggerKey)">
            <summary>
            Use the given TriggerKey to identify the Trigger.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the TriggerBuilder,
            then a random, unique TriggerKey will be generated.</para>
            </remarks>
            <param name="key">the TriggerKey for the Trigger to be built</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.TriggerKey"/>
            <seealso cref="P:Quartz.ITrigger.Key"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithDescription(System.String)">
            <summary>
            Set the given (human-meaningful) description of the Trigger.
            </summary>
            <remarks>
            </remarks>
            <param name="description">the description for the Trigger</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.Description"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithPriority(System.Int32)">
            <summary>
            Set the Trigger's priority.  When more than one Trigger have the same
            fire time, the scheduler will fire the one with the highest priority
            first.
            </summary>
            <remarks>
            </remarks>
            <param name="priority">the priority for the Trigger</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="F:Quartz.TriggerConstants.DefaultPriority"/>
            <seealso cref="P:Quartz.ITrigger.Priority"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.ModifiedByCalendar(System.String)">
            <summary>
            Set the name of the <see cref="T:Quartz.ICalendar"/> that should be applied to this
            Trigger's schedule.
            </summary>
            <remarks>
            </remarks>
            <param name="calendarName">the name of the Calendar to reference.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="P:Quartz.ITrigger.CalendarName"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.StartAt(System.DateTimeOffset)">
            <summary>
            Set the time the Trigger should start at - the trigger may or may
            not fire at this time - depending upon the schedule configured for
            the Trigger.  However the Trigger will NOT fire before this time,
            regardless of the Trigger's schedule.
            </summary>
            <remarks>
            </remarks>
            <param name="startTimeUtc">the start time for the Trigger.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.StartTimeUtc"/>
            <seealso cref="T:Quartz.DateBuilder"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.StartNow">
            <summary>
            Set the time the Trigger should start at to the current moment -
            the trigger may or may not fire at this time - depending upon the
            schedule configured for the Trigger.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.StartTimeUtc"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.EndAt(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set the time at which the Trigger will no longer fire - even if it's
            schedule has remaining repeats.
            </summary>
            <remarks>
            </remarks>
            <param name="endTimeUtc">the end time for the Trigger.  If null, the end time is indefinite.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.EndTimeUtc"/>
            <seealso cref="T:Quartz.DateBuilder"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.WithSchedule(Quartz.IScheduleBuilder)">
            <summary>
            Set the <see cref="T:Quartz.IScheduleBuilder"/> that will be used to define the
            Trigger's schedule.
            </summary>
            <remarks>
            <para>The particular <code>SchedulerBuilder</code> used will dictate
            the concrete type of Trigger that is produced by the TriggerBuilder.</para>
            </remarks>
            <param name="scheduleBuilder">the SchedulerBuilder to use.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="T:Quartz.IScheduleBuilder"/>
            <seealso cref="T:Quartz.SimpleScheduleBuilder"/>
            <seealso cref="T:Quartz.CronScheduleBuilder"/>
            <seealso cref="T:Quartz.CalendarIntervalScheduleBuilder"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.ForJob(Quartz.JobKey)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger.
            </summary>
            <remarks>
            </remarks>
            <param name="jobKey">the identity of the Job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.ForJob(System.String)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger - a <code>JobKey</code> will be produced with the given
            name and default group.
            </summary>
            <remarks>
            </remarks>
            <param name="jobName">the name of the job (in default group) to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.ForJob(System.String,System.String)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger - a <code>JobKey</code> will be produced with the given
            name and group.
            </summary>
            <remarks>
            </remarks>
            <param name="jobName">the name of the job to fire.</param>
            <param name="jobGroup">the group of the job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.ForJob(Quartz.IJobDetail)">
            <summary>
            Set the identity of the Job which should be fired by the produced
            Trigger, by extracting the JobKey from the given job.
            </summary>
            <remarks>
            </remarks>
            <param name="jobDetail">the Job to fire.</param>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobKey"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.String)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Int32)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Int64)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Single)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Double)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Decimal)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(System.String,System.Boolean)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="M:Quartz.TriggerBuilder.UsingJobData(Quartz.JobDataMap)">
            <summary>
            Add the given key-value pair to the Trigger's <see cref="T:Quartz.JobDataMap"/>.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated TriggerBuilder</returns>
            <seealso cref="P:Quartz.ITrigger.JobDataMap"/>
        </member>
        <member name="T:Quartz.Simpl.SimpleInstanceIdGenerator">
            <summary> 
            The default InstanceIdGenerator used by Quartz when instance id is to be
            automatically generated.  Instance id is of the form HOSTNAME + CURRENT_TIME.
            </summary>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.Spi.IInstanceIdGenerator"/>
            <seealso cref="T:Quartz.Simpl.HostnameInstanceIdGenerator"/>
        </member>
        <member name="M:Quartz.Simpl.SimpleInstanceIdGenerator.GenerateInstanceId">
            <summary>
            Generate the instance id for a <see cref="T:Quartz.IScheduler"/>
            </summary>
            <returns>The clusterwide unique instance id.</returns>
        </member>
        <member name="T:Quartz.Job.NoOpJob">
            <summary>
            An implementation of Job, that does absolutely nothing - useful for system
            which only wish to use <see cref="T:Quartz.ITriggerListener"/>s
            and <see cref="T:Quartz.IJobListener"/>s, rather than writing
            Jobs that perform work.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Job.NoOpJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="T:Quartz.SchedulerInstruction">
            <summary>
            Instructs Scheduler what to do with a trigger and job.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.SchedulerInstruction.NoInstruction">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the <see cref="T:Quartz.ITrigger"/>
            has no further instructions.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerInstruction.ReExecuteJob">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the <see cref="T:Quartz.ITrigger"/>
            wants the <see cref="T:Quartz.IJobDetail"/> to re-Execute
            immediately. If not in a 'RECOVERING' or 'FAILED_OVER' situation, the
            execution context will be re-used (giving the <see cref="T:Quartz.IJob"/> the
            ability to 'see' anything placed in the context by its last execution).
            </summary>      
        </member>
        <member name="F:Quartz.SchedulerInstruction.SetTriggerComplete">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the <see cref="T:Quartz.ITrigger"/>
            should be put in the <see cref="F:Quartz.TriggerState.Complete"/> state.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerInstruction.DeleteTrigger">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the <see cref="T:Quartz.ITrigger"/>
            wants itself deleted.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerInstruction.SetAllJobTriggersComplete">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that all <see cref="T:Quartz.ITrigger"/>
            s referencing the same <see cref="T:Quartz.IJobDetail"/> as
            this one should be put in the <see cref="F:Quartz.TriggerState.Complete"/> state.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerInstruction.SetAllJobTriggersError">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that all <see cref="T:Quartz.ITrigger"/>
            s referencing the same <see cref="T:Quartz.IJobDetail"/> as
            this one should be put in the <see cref="F:Quartz.TriggerState.Error"/> state.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerInstruction.SetTriggerError">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the <see cref="T:Quartz.ITrigger"/>
            should be put in the <see cref="F:Quartz.TriggerState.Error"/> state.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.StdRowLockSemaphore">
            <summary> 
            Internal database based lock handler for providing thread/resource locking 
            in order to protect resources from being altered by multiple threads at the 
            same time.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdRowLockSemaphore.#ctor(System.String,System.String,System.String,Quartz.Impl.AdoJobStore.IDbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.StdRowLockSemaphore"/> class.
            </summary>
            <param name="tablePrefix">The table prefix.</param>
            <param name="schedName">the scheduler name</param>
            <param name="selectWithLockSQL">The select with lock SQL.</param>
            <param name="dbProvider"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.StdRowLockSemaphore.ExecuteSQL(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String,System.String,System.String)">
            <summary>
            Execute the SQL select for update that will lock the proper database row.
            </summary>
        </member>
        <member name="T:Quartz.Util.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.DictionaryExtensions.TryGetAndReturn``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Tries to read value and returns the value if successfully read. Otherwise return default value
            for value's type.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.JobDetailImpl">
            <summary>
            Conveys the detail properties of a given <code>Job</code> instance. 
            </summary>
            <remarks>
            Quartz does not store an actual instance of a <see cref="T:Quartz.IJob"/> type, but
            instead allows you to define an instance of one, through the use of a <see cref="T:Quartz.IJobDetail"/>.
            <para>
            <see cref="T:Quartz.IJob"/>s have a name and group associated with them, which
            should uniquely identify them within a single <see cref="T:Quartz.IScheduler"/>.
            </para>
            <para>
            <see cref="T:Quartz.ITrigger"/> s are the 'mechanism' by which <see cref="T:Quartz.IJob"/> s
            are scheduled. Many <see cref="T:Quartz.ITrigger"/> s can point to the same <see cref="T:Quartz.IJob"/>,
            but a single <see cref="T:Quartz.ITrigger"/> can only point to one <see cref="T:Quartz.IJob"/>.
            </para>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <seealso cref="P:Quartz.Impl.JobDetailImpl.JobDataMap"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.IJobDetail">
            <summary>
            Conveys the detail properties of a given <code>Job</code> instance. 
            JobDetails are to be created/defined with <see cref="T:Quartz.JobBuilder"/>.
            </summary>
            <remarks>
            Quartz does not store an actual instance of a <see cref="T:Quartz.IJob"/> type, but
            instead allows you to define an instance of one, through the use of a <see cref="T:Quartz.IJobDetail"/>.
            <para>
            <see cref="T:Quartz.IJob"/>s have a name and group associated with them, which
            should uniquely identify them within a single <see cref="T:Quartz.IScheduler"/>.
            </para>
            <para>
            <see cref="T:Quartz.ITrigger"/> s are the 'mechanism' by which <see cref="T:Quartz.IJob"/> s
            are scheduled. Many <see cref="T:Quartz.ITrigger"/> s can point to the same <see cref="T:Quartz.IJob"/>,
            but a single <see cref="T:Quartz.ITrigger"/> can only point to one <see cref="T:Quartz.IJob"/>.
            </para>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IJobDetail.GetJobBuilder">
            <summary>
            Get a <see cref="T:Quartz.JobBuilder"/> that is configured to produce a 
            <see cref="T:Quartz.IJobDetail"/> identical to this one.
            </summary>
        </member>
        <member name="P:Quartz.IJobDetail.Key">
            <summary>
            The key that identifies this jobs uniquely.
            </summary>
        </member>
        <member name="P:Quartz.IJobDetail.Description">
            <summary>
            Get or set the description given to the <see cref="T:Quartz.IJob"/> instance by its
            creator (if any).
            </summary>
        </member>
        <member name="P:Quartz.IJobDetail.JobType">
            <summary>
            Get or sets the instance of <see cref="T:Quartz.IJob"/> that will be executed.
            </summary>
        </member>
        <member name="P:Quartz.IJobDetail.JobDataMap">
            <summary>
            Get or set the <see cref="P:Quartz.IJobDetail.JobDataMap"/> that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.IJobDetail.Durable">
            <summary>
            Whether or not the <see cref="T:Quartz.IJob"/> should remain stored after it is
            orphaned (no <see cref="T:Quartz.ITrigger"/>s point to it).
            </summary>
            <remarks>
            If not explicitly set, the default value is <see langword="false"/>.
            </remarks>
            <returns> 
            <see langword="true"/> if the Job should remain persisted after being orphaned.
            </returns>
        </member>
        <member name="P:Quartz.IJobDetail.PersistJobDataAfterExecution">
            <summary>
            Whether the associated Job class carries the <see cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>.
            </summary>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
        </member>
        <member name="P:Quartz.IJobDetail.ConcurrentExectionDisallowed">
            <summary>
            Whether the associated Job class carries the <see cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>.
            </summary>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
        </member>
        <member name="P:Quartz.IJobDetail.RequestsRecovery">
            <summary>
            Set whether or not the the <see cref="T:Quartz.IScheduler"/> should re-Execute
            the <see cref="T:Quartz.IJob"/> if a 'recovery' or 'fail-over' situation is
            encountered.
            </summary>
            <remarks>
            If not explicitly set, the default value is <see langword="false"/>.
            </remarks>
            <seealso cref="P:Quartz.IJobExecutionContext.Recovering"/>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.#ctor">
            <summary>
            Create a <see cref="T:Quartz.IJobDetail"/> with no specified name or group, and
            the default settings of all the other properties.
            <para>
            Note that the <see cref="P:Quartz.Impl.JobDetailImpl.Name"/>,<see cref="P:Quartz.Impl.JobDetailImpl.Group"/> and
            <see cref="P:Quartz.Impl.JobDetailImpl.JobType"/> properties must be set before the job can be
            placed into a <see cref="T:Quartz.IScheduler"/>.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.#ctor(System.String,System.Type)">
            <summary>
            Create a <see cref="T:Quartz.IJobDetail"/> with the given name, default group, and
            the default settings of all the other properties.
            If <see langword="null"/>, Scheduler.DefaultGroup will be used.
            </summary>
            <exception cref="T:System.ArgumentException">
            If name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.#ctor(System.String,System.String,System.Type)">
            <summary>
            Create a <see cref="T:Quartz.IJobDetail"/> with the given name, and group, and
            the default settings of all the other properties.
            If <see langword="null"/>, Scheduler.DefaultGroup will be used.
            </summary>
            <exception cref="T:System.ArgumentException">
            If name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.#ctor(System.String,System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Create a <see cref="T:Quartz.IJobDetail"/> with the given name, and group, and
            the given settings of all the other properties.
            </summary>
            <param name="name">The name.</param>
            <param name="group">if <see langword="null"/>, Scheduler.DefaultGroup will be used.</param>
            <param name="jobType">Type of the job.</param>
            <param name="isDurable">if set to <c>true</c>, job will be durable.</param>
            <param name="requestsRecovery">if set to <c>true</c>, job will request recovery.</param>
            <exception cref="T:System.ArgumentException"> 
            ArgumentException if name is null or empty, or the group is an empty string.
            </exception>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.Validate">
            <summary> 
            Validates whether the properties of the <see cref="T:Quartz.IJobDetail"/> are
            valid for submission into a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.ToString">
            <summary>
            Return a simple string representation of this object.
            </summary>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.IsEqual(Quartz.Impl.JobDetailImpl)">
            <summary>
            Determines whether the specified detail is equal to this instance.
            </summary>
            <param name="detail">The detail to examine.</param>
            <returns>
            	<c>true</c> if the specified detail is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.Equals(Quartz.Impl.JobDetailImpl)">
            <summary>
            Checks equality between given job detail and this instance.
            </summary>
            <param name="detail">The detail to compare this instance with.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.JobDetailImpl.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.Name">
            <summary>
            Get or sets the name of this <see cref="T:Quartz.IJob"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.Group">
            <summary>
            Get or sets the group of this <see cref="T:Quartz.IJob"/>. 
            If <see langword="null"/>, <see cref="F:Quartz.SchedulerConstants.DefaultGroup"/> will be used.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            If the group is an empty string.
            </exception>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.FullName">
            <summary> 
            Returns the 'full name' of the <see cref="T:Quartz.ITrigger"/> in the format
            "group.name".
            </summary>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.Description">
            <summary>
            Get or set the description given to the <see cref="T:Quartz.IJob"/> instance by its
            creator (if any).
            </summary>
            <remarks>
            May be useful for remembering/displaying the purpose of the job, though the
            description has no meaning to Quartz.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.JobType">
            <summary>
            Get or sets the instance of <see cref="T:Quartz.IJob"/> that will be executed.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobType is null or the class is not a <see cref="T:Quartz.IJob"/>.
            </exception>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.JobDataMap">
            <summary>
            Get or set the <see cref="P:Quartz.Impl.JobDetailImpl.JobDataMap"/> that is associated with the <see cref="T:Quartz.IJob"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.RequestsRecovery">
            <summary>
            Set whether or not the the <see cref="T:Quartz.IScheduler"/> should re-Execute
            the <see cref="T:Quartz.IJob"/> if a 'recovery' or 'fail-over' situation is
            encountered.
            <para>
            If not explicitly set, the default value is <see langword="false"/>.
            </para>
            </summary>
            <seealso cref="P:Quartz.IJobExecutionContext.Recovering"/>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.Durable">
            <summary>
            Whether or not the <see cref="T:Quartz.IJob"/> should remain stored after it is
            orphaned (no <see cref="T:Quartz.ITrigger"/>s point to it).
            <para>
            If not explicitly set, the default value is <see langword="false"/>.
            </para>
            </summary>
            <returns> 
            <see langword="true"/> if the Job should remain persisted after
            being orphaned.
            </returns>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.PersistJobDataAfterExecution">
            <summary>
            Whether the associated Job class carries the <see cref="P:Quartz.Impl.JobDetailImpl.PersistJobDataAfterExecution"/> attribute.
            </summary>
        </member>
        <member name="P:Quartz.Impl.JobDetailImpl.ConcurrentExectionDisallowed">
            <summary>
            Whether the associated Job class carries the <see cref="T:Quartz.DisallowConcurrentExecutionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:Quartz.IStatefulJob">
            <summary>
            A marker interface for <see cref="T:Quartz.IJobDetail"/> s that
            wish to have their state maintained between executions.
            </summary>
            <remarks>
            <see cref="T:Quartz.IStatefulJob"/> instances follow slightly different rules from
            regular <see cref="T:Quartz.IJob"/> instances. The key difference is that their
            associated <see cref="T:Quartz.JobDataMap"/> is re-persisted after every
            execution of the job, thus preserving state for the next execution. The
            other difference is that stateful jobs are not allowed to Execute
            concurrently, which means new triggers that occur before the completion of
            the <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method will be delayed.
            </remarks>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
            <seealso cref="T:Quartz.PersistJobDataAfterExecutionAttribute"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IJobDetail"/>
            <seealso cref="T:Quartz.JobDataMap"/>
            <seealso cref="T:Quartz.IScheduler"/> 
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Impl.Calendar.AnnualCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the year. You
            may use it to exclude bank holidays which are on the same date every year.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Constructor
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.IsDayExcluded(System.DateTimeOffset)">
            <summary>
            Return true, if day is defined to be exluded.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.SetDayExcluded(System.DateTimeOffset,System.Boolean)">
            <summary>
            Redefine a certain day to be excluded (true) or included (false).
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given UTC time (in milliseconds) is 'included' by the
            Calendar.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.AnnualCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next UTC time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStampUtc is
            included. Return 0 if all days are excluded.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.AnnualCalendar.DaysExcluded">
            <summary> 
            Get or the array which defines the exclude-value of each day of month.
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 31.
            </summary>
        </member>
        <member name="T:Quartz.Impl.Triggers.CronTriggerImpl">
            <summary>
            A concrete <see cref="T:Quartz.ITrigger"/> that is used to fire a <see cref="T:Quartz.IJobDetail"/>
            at given moments in time, defined with Unix 'cron-like' definitions.
            </summary>
            <remarks>
            <para>
            For those unfamiliar with "cron", this means being able to create a firing
            schedule such as: "At 8:00am every Monday through Friday" or "At 1:30am
            every last Friday of the month".
            </para>
            
            <para>
            The format of a "Cron-Expression" string is documented on the 
            <see cref="P:Quartz.Impl.Triggers.CronTriggerImpl.CronExpression"/> class.
            </para>
            
            <para>
            Here are some full examples: <br/>
            <table cellspacing="8">
            <tr>
            <th align="left">Expression</th>
            <th align="left"> </th>
            <th align="left">Meaning</th>
            </tr>
            <tr>
            <td align="left">"0 0 12 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 12pm (noon) every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * *"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ? *"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day" /&gt;</td>
            </tr>
            <tr>
            <td align="left">"0 15 10 * * ? 2005"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every day during the year 2005" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 * 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every minute starting at 2pm and ending at 2:59pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0/5 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0/5 14,18 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 0-5 14 * * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire every minute starting at 2pm and ending at 2:05pm, every day" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 10,44 14 ? 3 WED"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 2:10pm and at 2:44pm every Wednesday in the month of March." /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * MON-FRI"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 15 * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the 15th day of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 L * ?"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last day of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last Friday of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the last Friday of every month" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6L 2002-2005"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on every last Friday of every month during the years 2002, 2003, 2004 and 2005" /&gt;
            </td>
            </tr>
            <tr>
            <td align="left">"0 15 10 ? * 6#3"" /&gt;</td>
            <td align="left"> </td>
            <td align="left">Fire at 10:15am on the third Friday of every month" /&gt;
            </td>
            </tr>
            </table>
            </para>
            
            <para>
            Pay attention to the effects of '?' and '*' in the day-of-week and
            day-of-month fields!
            </para>
            
            <para>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in on of these fields).
            </li>
            <li>Be careful when setting fire times between mid-night and 1:00 AM -
            "daylight savings" can cause a skip or a repeat depending on whether the
            time moves back or jumps forward.</li>
            </ul>
            </para>
            </remarks>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with no settings.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with the given name and default group.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with the given name and group.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with the given name, group and
            expression.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="cronExpression"> A cron expression dictating the firing sequence of the <see cref="T:Quartz.ITrigger"/></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with the given name and group, and
            associated with the identified <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/>.</param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="jobName">name of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="jobGroup">Group of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.ICronTrigger"/> with the given name and group,
            associated with the identified <see cref="T:Quartz.IJobDetail"/>,
            and with the given "cron" expression.
            </summary>
            <remarks>
            The start-time will also be set to the current time, and the time zone
            will be set the the system's default time zone.
            </remarks>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="jobName">name of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="jobGroup">Group of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="cronExpression"> A cron expression dictating the firing sequence of the <see cref="T:Quartz.ITrigger"/></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.String,System.TimeZoneInfo)">
            <summary>
            Create a <see cref="T:Quartz.ICronTrigger"/> with the given name and group,
            associated with the identified <see cref="T:Quartz.IJobDetail"/>,
            and with the given "cron" expression resolved with respect to the <see cref="P:Quartz.Impl.Triggers.CronTriggerImpl.TimeZone"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="jobName">name of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="jobGroup">Group of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="cronExpression"> A cron expression dictating the firing sequence of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="timeZone">
            Specifies for which time zone the <code>cronExpression</code> should be interpreted, 
            i.e. the expression 0 0 10 * * ?, is resolved to 10:00 am in this time zone.
            </param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Create a <see cref="T:Quartz.ICronTrigger"/> that will occur at the given time,
            until the given end time.
            <para>
            If null, the start-time will also be set to the current time, the time
            zone will be set the the system's default.
            </para>
            </summary>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="jobName">name of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="jobGroup">Group of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="startTimeUtc">A <see cref="T:System.DateTimeOffset"/> set to the earliest time for the  <see cref="T:Quartz.ITrigger"/> to start firing.</param>
            <param name="endTime">A <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/> to quit repeat firing.</param>
            <param name="cronExpression"> A cron expression dictating the firing sequence of the <see cref="T:Quartz.ITrigger"/></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String,System.TimeZoneInfo)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CronTriggerImpl"/> with fire time dictated by the
            <param name="cronExpression"/> resolved with respect to the specified
            <param name="timeZone"/> occurring from the <see cref="F:Quartz.Impl.Triggers.CronTriggerImpl.startTimeUtc"/> until
            the given <paran name="endTimeUtc"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="group">The group of the <see cref="T:Quartz.ITrigger"/></param>
            <param name="jobName">name of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="jobGroup">Group of the <see cref="T:Quartz.IJobDetail"/> executed on firetime</param>
            <param name="startTimeUtc">A <see cref="T:System.DateTimeOffset"/> set to the earliest time for the  <see cref="T:Quartz.ITrigger"/> to start firing.</param>
            <param name="endTime">A <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/> to quit repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetNextFireTimeUtc">
             <summary>
             Returns the next time at which the <see cref="T:Quartz.ITrigger"/> is scheduled to fire. If
             the trigger will not fire again, <see langword="null"/> will be returned.  Note that
             the time returned can possibly be in the past, if the time that was computed
             for the trigger to next fire has already arrived, but the scheduler has not yet
             been able to fire the trigger (which would likely be due to lack of resources
             e.g. threads).
             </summary>
            <remarks>
             The value returned is not guaranteed to be valid until after the <see cref="T:Quartz.ITrigger"/>
             has been added to the scheduler.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ITrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.SetNextFireTimeUtc(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the next fire time.
            <para>
            <b>This method should not be invoked by client code.</b>
            </para>
            </summary>
            <param name="fireTime">The fire time.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.SetPreviousFireTimeUtc(System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets the previous fire time.
            <para>
            <b>This method should not be invoked by client code.</b>
            </para>
            </summary>
            <param name="fireTime">The fire time.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the next time at which the <see cref="T:Quartz.ITrigger"/> will fire,
            after the given time. If the trigger will not fire after the given time,
            <see langword="null"/> will be returned.
            </summary>
            <param name="afterTimeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetMayFireAgain">
            <summary>
            Used by the <see cref="T:Quartz.IScheduler"/> to determine whether or not
            it is possible for this <see cref="T:Quartz.ITrigger"/> to fire again.
            <para>
            If the returned value is <see langword="false"/> then the <see cref="T:Quartz.IScheduler"/>
            may remove the <see cref="T:Quartz.ITrigger"/> from the <see cref="T:Quartz.Spi.IJobStore"/>.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.ValidateMisfireInstruction(System.Int32)">
            <summary>
            Validates the misfire instruction.
            </summary>
            <param name="misfireInstruction">The misfire instruction.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            <para>
            To be implemented by the concrete classes that extend this class.
            </para>
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the MISFIRE_INSTRUCTION_XXX that was selected when the <see cref="T:Quartz.ITrigger"/>
            was created.
            </para>
            </summary>
            <param name="cal"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.WillFireOn(System.DateTimeOffset)">
            <summary>
            <para>
            Determines whether the date and (optionally) time of the given Calendar 
            instance falls on a scheduled fire-time of this trigger.
            </para>
            
            <para>
            Equivalent to calling <see cref="M:Quartz.Impl.Triggers.CronTriggerImpl.WillFireOn(System.DateTimeOffset,System.Boolean)"/>.
            </para>
            </summary>
            <param name="test">The date to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.WillFireOn(System.DateTimeOffset,System.Boolean)">
            <summary>
            Determines whether the date and (optionally) time of the given Calendar 
            instance falls on a scheduled fire-time of this trigger.
            <para>
            Note that the value returned is NOT validated against the related
            ICalendar (if any).
            </para>
            </summary>
            <param name="test">The date to compare</param>
            <param name="dayOnly">If set to true, the method will only determine if the
            trigger will fire during the day represented by the given Calendar
            (hours, minutes and seconds will be ignored).</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire'
            the trigger (Execute the associated <see cref="T:Quartz.IJob"/>), in order to
            give the <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next
            triggering (if any).
            </summary>
            <param name="cal"></param>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary>
            Updates the trigger with new calendar.
            </summary>
            <param name="calendar">The calendar to update with.</param>
            <param name="misfireThreshold">The misfire threshold.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            <para>
            After this method has been called, <see cref="M:Quartz.Impl.Triggers.CronTriggerImpl.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </summary>
            <param name="cal"></param>
            <returns>
            the first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.Impl.Triggers.CronTriggerImpl.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetTimeAfter(System.DateTimeOffset)">
            <summary>
            Gets the next time to fire after the given time.
            </summary>
            <param name="afterTime">The time to compute from.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CronTriggerImpl.GetTimeBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            NOT YET IMPLEMENTED: Returns the time before the given time
            that this <see cref="T:Quartz.ICronTrigger"/> will fire.
            </summary>
            <param name="date">The date.</param>
            <returns></returns> 
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.CronExpressionString">
            <summary>
            Gets or sets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.CronExpression">
            <summary>
            Set the CronExpression to the given one.  The TimeZone on the passed-in
            CronExpression over-rides any that was already set on the Trigger.
            </summary>
            <value>The cron expression.</value>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.StartTimeUtc">
            <summary>
            Returns the date/time on which the trigger may begin firing. This
            defines the initial boundary for trigger firings the trigger
            will not fire prior to this date and time.
            </summary>
            <value></value>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.EndTimeUtc">
            <summary>
            Get or sets the time at which the <c>CronTrigger</c> should quit
            repeating - even if repeastCount isn't yet satisfied. 
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.TimeZone">
            <summary>
            Sets the time zone for which the <see cref="P:Quartz.ICronTrigger.CronExpressionString"/> of this
            <see cref="T:Quartz.ICronTrigger"/> will be resolved.
            </summary>
            <remarks>
            If <see cref="P:Quartz.ICronTrigger.CronExpressionString"/> is set after this
            property, the TimeZone setting on the CronExpression will "win".  However
            if <see cref="P:Quartz.Impl.Triggers.CronTriggerImpl.CronExpressionString"/> is set after this property, the
            time zone applied by this method will remain in effect, since the 
            string cron expression does not carry a time zone!
            </remarks>
            <value>The time zone.</value>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.FinalFireTimeUtc">
            <summary>
            Returns the last UTC time at which the <see cref="T:Quartz.ITrigger"/> will fire, if
            the Trigger will repeat indefinitely, null will be returned.
            <para>
            Note that the return time *may* be in the past.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CronTriggerImpl.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.SimpleScheduleBuilder">
            <summary>
            <code>SimpleScheduleBuilder</code> is a <see cref="T:Quartz.IScheduleBuilder"/>
            that defines strict/literal interval-based schedules for
            <code>Trigger</code>s.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>,
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code>
            and the various <code>ScheduleBuilder</code> implementations.</para>
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
            JobDetail job = newJob(MyJob.class)
            .withIdentity("myJob")
            .build();
            Trigger trigger = newTrigger()
            .withIdentity(triggerKey("myTrigger", "myTriggerGroup"))
            .withSchedule(simpleSchedule()
            .withIntervalInHours(1)
            .repeatForever())
            .startAt(futureDate(10, MINUTES))
            .build();
            scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <seealso cref="T:Quartz.CalendarIntervalScheduleBuilder"/>
            <seealso cref="T:Quartz.CronScheduleBuilder"/>
            <seealso cref="T:Quartz.IScheduleBuilder"/>
            <seealso cref="T:Quartz.TriggerBuilder"/>
        </member>
        <member name="M:Quartz.IScheduleBuilder.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this
            ScheduleBuilder is given to.
            </summary>
            <seealso cref="M:Quartz.TriggerBuilder.WithSchedule(Quartz.IScheduleBuilder)"/>
        </member>
        <member name="M:Quartz.ScheduleBuilder`1.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this
            ScheduleBuilder is given to.
            </summary>
            <seealso cref="M:Quartz.TriggerBuilder.WithSchedule(Quartz.IScheduleBuilder)"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.Create">
            <summary>
            Create a SimpleScheduleBuilder.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatMinutelyForever">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with a 1 minute interval.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatMinutelyForever(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with an interval
            of the given number of minutes.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatSecondlyForever">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with a 1 second interval.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatSecondlyForever(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with an interval
            of the given number of seconds.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatHourlyForever">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with a 1 hour interval.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatHourlyForever(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat forever with an interval
            of the given number of hours.
            </summary>
            <remarks>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatMinutelyForTotalCount(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with a 1 minute interval.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatMinutelyForTotalCount(System.Int32,System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with an interval of the given number of minutes.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatSecondlyForTotalCount(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with a 1 second interval.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatSecondlyForTotalCount(System.Int32,System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with an interval of the given number of seconds.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatHourlyForTotalCount(System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with a 1 hour interval.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatHourlyForTotalCount(System.Int32,System.Int32)">
            <summary>
            Create a SimpleScheduleBuilder set to repeat the given number
            of times - 1  with an interval of the given number of hours.
            </summary>
            <remarks>
            <para>Note: Total count = 1 (at start time) + repeat count</para>
            </remarks>
            <returns>the new SimpleScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this
            ScheduleBuilder is given to.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="M:Quartz.TriggerBuilder.WithSchedule(Quartz.IScheduleBuilder)"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithInterval(System.TimeSpan)">
            <summary>
            Specify a repeat interval in milliseconds.
            </summary>
            <remarks>
            </remarks>
            <param name="timeSpan">the time span at which the trigger should repeat.</param>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="P:Quartz.ISimpleTrigger.RepeatInterval"/>
            <seealso cref="M:Quartz.SimpleScheduleBuilder.WithRepeatCount(System.Int32)"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithIntervalInSeconds(System.Int32)">
            <summary>
            Specify a repeat interval in seconds.
            </summary>
            <remarks>
            </remarks>
            <param name="seconds">the time span at which the trigger should repeat.</param>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="P:Quartz.ISimpleTrigger.RepeatInterval"/>
            <seealso cref="M:Quartz.SimpleScheduleBuilder.WithRepeatCount(System.Int32)"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithRepeatCount(System.Int32)">
            <summary>
            Specify a the number of time the trigger will repeat - total number of
            firings will be this number + 1.
            </summary>
            <remarks>
            </remarks>
            <param name="repeatCount">the number of seconds at which the trigger should repeat.</param>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="P:Quartz.ISimpleTrigger.RepeatCount"/>
            <seealso cref="M:Quartz.SimpleScheduleBuilder.RepeatForever"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.RepeatForever">
            <summary>
            Specify that the trigger will repeat indefinitely.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="P:Quartz.ISimpleTrigger.RepeatCount"/>
            <seealso cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/>
            <seealso cref="M:Quartz.SimpleScheduleBuilder.WithInterval(System.TimeSpan)"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionIgnoreMisfires">
            <summary>
            If the Trigger misfires, use the
            {@link Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY} instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CronScheduleBuilder</returns>
             <seealso cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionFireNow">
            <summary>
            If the Trigger misfires, use the
            <see cref="F:Quartz.MisfireInstruction.SimpleTrigger.FireNow"/> instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.SimpleTrigger.FireNow"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionNextWithExistingCount">
            <summary>
            If the Trigger misfires, use the
            <seea cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNextWithExistingCount"/> instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNextWithExistingCount"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionNextWithRemainingCount">
            <summary>
            If the Trigger misfires, use the
            {@link SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT} instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNextWithRemainingCount"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionNowWithExistingCount">
            <summary>
            If the Trigger misfires, use the
            {@link SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT} instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithExistingRepeatCount"/>
        </member>
        <member name="M:Quartz.SimpleScheduleBuilder.WithMisfireHandlingInstructionNowWithRemainingCount">
            <summary>
            If the Trigger misfires, use the
            {@link SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT} instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated SimpleScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithRemainingRepeatCount"/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.SqlServerDelegate">
            <summary>
            A SQL Server specific driver delegate.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SqlServerDelegate.GetSelectNextTriggerToAcquireSql(System.Int32)">
            <summary>
            Gets the select next trigger to acquire SQL clause.
            SQL Server specific version with TOP functionality
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.Util.DBConnectionManager">
            <summary>
            Manages a collection of IDbProviders, and provides transparent access
            to their database.
            </summary>
            <seealso cref="T:Quartz.Impl.AdoJobStore.IDbProvider"/>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Mohammad Rezaei</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.#ctor">
            <summary> 
            Private constructor
            </summary>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.AddConnectionProvider(System.String,Quartz.Impl.AdoJobStore.IDbProvider)">
            <summary>
            Adds the connection provider.
            </summary>
            <param name="dataSourceName">Name of the data source.</param>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.GetConnection(System.String)">
            <summary>
            Get a database connection from the DataSource with the given name.
            </summary>
            <returns> a database connection </returns>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.Shutdown(System.String)">
            <summary> 
            Shuts down database connections from the DataSource with the given name,
            if applicable for the underlying provider.
            </summary>
            <returns> a database connection </returns>
        </member>
        <member name="M:Quartz.Util.DBConnectionManager.GetDbProvider(System.String)">
            <summary>
            Gets the db provider.
            </summary>
            <param name="dsName">Name of the ds.</param>
            <returns></returns>
        </member>
        <member name="P:Quartz.Util.DBConnectionManager.Instance">
            <summary> 
            Get the class instance.
            </summary>
            <returns> an instance of this class
            </returns>
        </member>
        <member name="T:Quartz.TriggerTimeComparator">
            <summary>
            A Comparator that compares trigger's next fire times, or in other words,
            sorts them according to earliest next fire time.  If the fire times are
            the same, then the triggers are sorted according to priority (highest
            value first), if the priorities are the same, then they are sorted
            by key.
            </summary>
        </member>
        <member name="T:Quartz.JobExecutionException">
            <summary>
            An exception that can be thrown by a <see cref="T:Quartz.IJob"/>
            to indicate to the Quartz <see cref="T:Quartz.IScheduler"/> that an error
            occurred while executing, and whether or not the <see cref="T:Quartz.IJob"/> requests
            to be re-fired immediately (using the same <see cref="T:Quartz.IJobExecutionContext"/>,
            or whether it wants to be unscheduled.
            </summary>
            <remarks>
            Note that if the flag for 'refire immediately' is set, the flags for
            unscheduling the Job are ignored.
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.IJobExecutionContext"/>
            <seealso cref="T:Quartz.SchedulerException"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor">
            <summary>
            Create a JobExcecutionException, with the 're-fire immediately' flag set
            to <see langword="false" />.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Exception)">
            <summary>
            Create a JobExcecutionException, with the given cause.
            </summary>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.String)">
            <summary>
            Create a JobExcecutionException, with the given message.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.JobExecutionException"/> class.
            </summary>
            <param name="msg">The message.</param>
            <param name="cause">The original cause.</param>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Boolean)">
            <summary>
            Create a JobExcecutionException with the 're-fire immediately' flag set
            to the given value.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Create a JobExcecutionException with the given underlying exception, and
            the 're-fire immediately' flag set to the given value.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Create a JobExcecutionException with the given message, and underlying
            exception, and the 're-fire immediately' flag set to the given value.
            </summary>
        </member>
        <member name="M:Quartz.JobExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.JobExecutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Quartz.JobExecutionException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:Quartz.JobExecutionException.UnscheduleFiringTrigger">
            <summary>
            Gets or sets a value indicating whether to unschedule firing trigger.
            </summary>
            <value>
            	<c>true</c> if firing trigger should be unscheduled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Quartz.JobExecutionException.UnscheduleAllTriggers">
            <summary>
            Gets or sets a value indicating whether to unschedule all triggers.
            </summary>
            <value>
            	<c>true</c> if all triggers should be unscheduled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Quartz.JobExecutionException.RefireImmediately">
            <summary>
            Gets or sets a value indicating whether to refire immediately.
            </summary>
            <value><c>true</c> if to refire immediately; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit">
            <summary>
            Get or set the interval unit - the time unit on with the interval applies.
            </summary>
        </member>
        <member name="P:Quartz.ICalendarIntervalTrigger.RepeatInterval">
            <summary>
            Get the the time interval that will be added to the <see cref="T:Quartz.ICalendarIntervalTrigger"/>'s
            fire time (in the set repeat interval unit) in order to calculate the time of the 
            next trigger repeat.
            </summary>
        </member>
        <member name="P:Quartz.ICalendarIntervalTrigger.TimesTriggered">
            <summary>
            Get the number of times the <code>DateIntervalTrigger</code> has already fired.
            </summary>
        </member>
        <member name="T:Quartz.IDailyTimeIntervalTrigger">
            <summary>
            A <see cref="T:Quartz.ITrigger"/> that is used to fire a <see cref="T:Quartz.IJobDetail"/>
            based upon daily repeating time intervals.
            </summary>
            <remarks>
            <para>The trigger will fire every N (see <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/> ) seconds, minutes or hours
            (see <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatIntervalUnit"/> during a given time window on specified days of the week.</para>
            
            <para>For example#1, a trigger can be set to fire every 72 minutes between 8:00 and 11:00 everyday. It's fire times 
            be 8:00, 9:12, 10:24, then next day would repeat: 8:00, 9:12, 10:24 again.</para>
            
            <para>For example#2, a trigger can be set to fire every 23 minutes between 9:20 and 16:47 Monday through Friday. </para>
            
            <para>On each day, the starting fire time is reset to startTimeOfDay value, and then it will add repeatInterval value to it until
            the endTimeOfDay is reached. If you set daysOfWeek values, then fire time will only occur during those week days period.</para>
            
            <para>The default values for fields if not set are: startTimeOfDay defaults to 00:00:00, the endTimeOfDay default to 23:59:59, 
            and daysOfWeek is default to every day. The startTime default to current time-stamp now, while endTime has not value.</para>
            
            <para>If startTime is before startTimeOfDay, then it has no affect. Else if startTime after startTimeOfDay, then the first fire time
            for that day will be normal startTimeOfDay incremental values after startTime value. Same reversal logic is applied to endTime
            with endTimeOfDay.</para>
            </remarks>
            <see cref="T:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl"/>
            <see cref="T:Quartz.DailyTimeIntervalScheduleBuilder"/>
            <author>James House</author>
            <author>Zemian Deng saltnlight5@gmail.com</author>
            <author>Nuno Maia (.NET)</author>
        </member>
        <member name="M:Quartz.IDailyTimeIntervalTrigger.GetTriggerBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.RepeatCount">
            <summary>
            Get the the number of times for interval this trigger should repeat, 
            after which it will be automatically deleted.
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.RepeatIntervalUnit">
            <summary>
            Get the interval unit - the time unit on with the interval applies.
            The only intervals that are valid for this type of trigger are <see cref="F:Quartz.IntervalUnit.Second"/>,
            <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval">
            <summary>
            Get the the time interval that will be added to the <code>DateIntervalTrigger</code>'s
            fire time (in the set repeat interval unit) in order to calculate the time of the
            next trigger repeat.
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.StartTimeOfDayUtc">
            <summary>
            The time of day to start firing at the given interval.
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.EndTimeOfDayUtc">
            <summary>
            The time of day to complete firing at the given interval.
            </summary>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.DaysOfWeek">
            <summary>
            The days of the week upon which to fire.
            </summary>
            <returns>
            A Set containing the integers representing the days of the week, per the values 0-6 as defined by
            DayOfWees.Sunday - DayOfWeek.Saturday. 
            </returns>
        </member>
        <member name="P:Quartz.IDailyTimeIntervalTrigger.TimesTriggered">
            <summary>
            Get the number of times the <code>DateIntervalTrigger</code> has already fired.
            </summary>
        </member>
        <member name="T:Quartz.CronScheduleBuilder">
            <summary>
            <code>CronScheduleBuilder</code> is a <see cref="T:Quartz.IScheduleBuilder"/> that defines
            {@link CronExpression}-based schedules for <code>Trigger</code>s.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>,
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code>
            and the various <code>ScheduleBuilder</code> implementations.</para>
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
            IJobDetail job = JobBuilder.Create&lt;MyJob&gt;()
              .WithIdentity("myJob")
              .Build();
            ITrigger trigger = newTrigger()
             .WithIdentity(triggerKey("myTrigger", "myTriggerGroup"))
             .WithSimpleSchedule(x =&gt; x.WithIntervalInHours(1).RepeatForever())
             .StartAt(DateBuilder.FutureDate(10, IntervalUnit.Minute))
             .Build();
            scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.CronExpression"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
            <seealso cref="T:Quartz.IScheduleBuilder"/>
            <seealso cref="T:Quartz.SimpleScheduleBuilder"/>
            <seealso cref="T:Quartz.CalendarIntervalScheduleBuilder"/>
            <seealso cref="T:Quartz.TriggerBuilder"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this
            ScheduleBuilder is given to.
            </summary>
            <seealso cref="M:Quartz.TriggerBuilder.WithSchedule(Quartz.IScheduleBuilder)"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.CronSchedule(System.String)">
            <summary>
            Create a CronScheduleBuilder with the given cron-expression.
            </summary>
            <remarks>
            </remarks>
            <param name="cronExpression">the cron expression to base the schedule on.</param>
            <returns>the new CronScheduleBuilder</returns>
            <seealso cref="T:Quartz.CronExpression"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.DailyAtHourAndMinute(System.Int32,System.Int32)">
            <summary>
            Create a CronScheduleBuilder with a cron-expression that sets the
            schedule to fire every day at the given time (hour and minute).
            </summary>
            <remarks>
            </remarks>
            <param name="hour">the hour of day to fire</param>
            <param name="minute">the minute of the given hour to fire</param>
            <returns>the new CronScheduleBuilder</returns>
            <seealso cref="T:Quartz.CronExpression"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.WeeklyOnDayAndHourAndMinute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a CronScheduleBuilder with a cron-expression that sets the
            schedule to fire one per week on the given day at the given time
            (hour and minute).
            </summary>
            <remarks>
            </remarks>
            <param name="dayOfWeek">the day of the week to fire</param>
            <param name="hour">the hour of day to fire</param>
            <param name="minute">the minute of the given hour to fire</param>
            <returns>the new CronScheduleBuilder</returns>
            <seealso cref="T:Quartz.CronExpression"/>
            <seealso cref="F:Quartz.DateBuilder.Monday"/>
            <seealso cref="F:Quartz.DateBuilder.Tuesday"/>
            <seealso cref="F:Quartz.DateBuilder.Wednesday"/>
            <seealso cref="F:Quartz.DateBuilder.Thursday"/>
            <seealso cref="F:Quartz.DateBuilder.Friday"/>
            <seealso cref="F:Quartz.DateBuilder.Saturday"/>
            <seealso cref="F:Quartz.DateBuilder.Sunday"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.MonthlyOnDayAndHourAndMinute(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a CronScheduleBuilder with a cron-expression that sets the
            schedule to fire one per month on the given day of month at the given
            time (hour and minute).
            </summary>
            <remarks>
            </remarks>
            <param name="dayOfMonth">the day of the month to fire</param>
            <param name="hour">the hour of day to fire</param>
            <param name="minute">the minute of the given hour to fire</param>
            <returns>the new CronScheduleBuilder</returns>
            <seealso cref="T:Quartz.CronExpression"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.InTimeZone(System.TimeZoneInfo)">
            <summary>
            The <code>TimeZone</code> in which to base the schedule.
            </summary>
            <remarks>
            </remarks>
            <param name="tz">the time-zone for the schedule.</param>
            <returns>the updated CronScheduleBuilder</returns>
            <seealso cref="P:Quartz.CronExpression.TimeZone"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.WithMisfireHandlingInstructionIgnoreMisfires">
            <summary>
            If the Trigger misfires, use the
            <see cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/> instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CronScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.WithMisfireHandlingInstructionDoNothing">
            <summary>
            If the Trigger misfires, use the <see cref="F:Quartz.MisfireInstruction.CronTrigger.DoNothing"/>
            instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CronScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.CronTrigger.DoNothing"/>
        </member>
        <member name="M:Quartz.CronScheduleBuilder.WithMisfireHandlingInstructionFireAndProceed">
            <summary>
            If the Trigger misfires, use the <see cref="F:Quartz.MisfireInstruction.CronTrigger.FireOnceNow"/>
            instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CronScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.CronTrigger.FireOnceNow"/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.SimpleSemaphore">
            <summary> 
            Internal in-memory lock handler for providing thread/resource locking in 
            order to protect resources from being altered by multiple threads at the 
            same time.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.ObtainLock(Quartz.Impl.AdoJobStore.Common.DbMetadata,Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> 
            Grants a lock on the identified resource to the calling thread (blocking
            until it is available).
            </summary>
            <returns>True if the lock was obtained.</returns>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.ReleaseLock(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> Release the lock on the identified resource if it is held by the calling
            thread.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.IsLockOwner(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)">
            <summary> 
            Determine whether the calling thread owns a lock on the identified
            resource.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.SimpleSemaphore.ThreadLocks">
            <summary>
            Gets the thread locks.
            </summary>
            <value>The thread locks.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.SimpleSemaphore.RequiresConnection">
            <summary>
            Whether this Semaphore implementation requires a database connection for
            its lock management operations.
            </summary>
            <value></value>
            <seealso cref="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.IsLockOwner(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.ObtainLock(Quartz.Impl.AdoJobStore.Common.DbMetadata,Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.SimpleSemaphore.ReleaseLock(Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.String)"/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.NoSuchDelegateException">
            <summary>
            Exception class for when a driver delegate cannot be found for a given
            configuration, or lack thereof.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.NoSuchDelegateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.NoSuchDelegateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.Common.DbProviderFactory">
            <summary>
            Summary description for DbProviderFactory.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="T:Quartz.TimeOfDay">
            <summary>
            Represents a time in hour, minute and second of any given day.
            <remarks>
            <para>
            The hour is in 24-hour convention, meaning values are from 0 to 23. 
            </para>
            </remarks>
            </summary>
            <seealso cref="T:Quartz.IDailyTimeIntervalTrigger"/>
            <author>James House</author>
            <author>Zemian Deng saltnlight5@gmail.com</author>
            <author>Nuno Maia (.NET)</author>
        </member>
        <member name="M:Quartz.TimeOfDay.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a TimeOfDay instance for the given hour, minute and second.
            </summary>
            <param name="hour">The hour of day, between 0 and 23.</param>
            <param name="minute">The minute of the hour, between 0 and 59.</param>
            <param name="second">The second of the minute, between 0 and 59.</param>
        </member>
        <member name="M:Quartz.TimeOfDay.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a TimeOfDay instance for the given hour, minute (at the zero second of the minute).
            </summary>
            <param name="hour">The hour of day, between 0 and 23.</param>
            <param name="minute">The minute of the hour, between 0 and 59.</param>
        </member>
        <member name="M:Quartz.TimeOfDay.HourMinuteAndSecondOfDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a TimeOfDay instance for the given hour, minute and second.
            </summary>
            <param name="hour">The hour of day, between 0 and 23.</param>
            <param name="minute">The minute of the hour, between 0 and 59.</param>
            <param name="second">The second of the minute, between 0 and 59.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.TimeOfDay.HourAndMinuteOfDay(System.Int32,System.Int32)">
            <summary>
            Create a TimeOfDay instance for the given hour, minute (at the zero second of the minute)..
            </summary>
            <param name="hour">The hour of day, between 0 and 23.</param>
            <param name="minute">The minute of the hour, between 0 and 59.</param>
            <returns>The newly instantiated TimeOfDay</returns>
        </member>
        <member name="M:Quartz.TimeOfDay.Before(Quartz.TimeOfDay)">
            <summary>
            Determine with this time of day is before the given time of day.
            </summary>
            <param name="timeOfDay"></param>
            <returns>True this time of day is before the given time of day.</returns>
        </member>
        <member name="M:Quartz.TimeOfDay.GetTimeOfDayForDate(System.Nullable{System.DateTimeOffset})">
            <summary>
            Return a date with time of day reset to this object values. The millisecond value will be zero. 
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="P:Quartz.TimeOfDay.Hour">
            <summary>
            The hour of the day (between 0 and 23). 
            </summary>
        </member>
        <member name="P:Quartz.TimeOfDay.Minute">
            <summary>
            The minute of the hour (between 0 and 59). 
            </summary>
        </member>
        <member name="P:Quartz.TimeOfDay.Second">
            <summary>
            The second of the minute (between 0 and 59). 
            </summary>
        </member>
        <member name="T:Quartz.Plugin.History.LoggingJobHistoryPlugin">
            <summary>
            Logs a history of all job executions (and execution vetos) via common
            logging.
            </summary>
            <remarks>
            	<para>
            The logged message is customizable by setting one of the following message
            properties to a string that conforms to the syntax of <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </para>
            	<para>
            JobToBeFiredMessage - available message data are: <table>
            			<tr>
            				<th>Element</th>
            				<th>Data Type</th>
            				<th>Description</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>String</td>
            				<td>The Job's Name.</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>String</td>
            				<td>The Job's Group.</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>Date</td>
            				<td>The current time.</td>
            			</tr>
            			<tr>
            				<td>3</td>
            				<td>String</td>
            				<td>The Trigger's name.</td>
            			</tr>
            			<tr>
            				<td>4</td>
            				<td>String</td>
            				<td>The Triggers's group.</td>
            			</tr>
            			<tr>
            				<td>5</td>
            				<td>Date</td>
            				<td>The scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>6</td>
            				<td>Date</td>
            				<td>The next scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>7</td>
            				<td>Integer</td>
            				<td>The re-fire count from the JobExecutionContext.</td>
            			</tr>
            		</table>
            The default message text is <i>"Job {1}.{0} fired (by trigger {4}.{3}) at:
            {2, date, HH:mm:ss MM/dd/yyyy"</i>
            	</para>
            	<para>
            JobSuccessMessage - available message data are: <table>
            			<tr>
            				<th>Element</th>
            				<th>Data Type</th>
            				<th>Description</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>String</td>
            				<td>The Job's Name.</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>String</td>
            				<td>The Job's Group.</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>Date</td>
            				<td>The current time.</td>
            			</tr>
            			<tr>
            				<td>3</td>
            				<td>String</td>
            				<td>The Trigger's name.</td>
            			</tr>
            			<tr>
            				<td>4</td>
            				<td>String</td>
            				<td>The Triggers's group.</td>
            			</tr>
            			<tr>
            				<td>5</td>
            				<td>Date</td>
            				<td>The scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>6</td>
            				<td>Date</td>
            				<td>The next scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>7</td>
            				<td>Integer</td>
            				<td>The re-fire count from the JobExecutionContext.</td>
            			</tr>
            			<tr>
            				<td>8</td>
            				<td>Object</td>
            				<td>The string value (toString() having been called) of the result (if any) 
            that the Job set on the JobExecutionContext, with on it.  "NULL" if no 
            result was set.</td>
            			</tr>
            		</table>
            The default message text is <i>"Job {1}.{0} execution complete at {2, date,
            HH:mm:ss MM/dd/yyyy} and reports: {8"</i>
            	</para>
            	<para>
            JobFailedMessage - available message data are: <table>
            			<tr>
            				<th>Element</th>
            				<th>Data Type</th>
            				<th>Description</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>String</td>
            				<td>The Job's Name.</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>String</td>
            				<td>The Job's Group.</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>Date</td>
            				<td>The current time.</td>
            			</tr>
            			<tr>
            				<td>3</td>
            				<td>String</td>
            				<td>The Trigger's name.</td>
            			</tr>
            			<tr>
            				<td>4</td>
            				<td>String</td>
            				<td>The Triggers's group.</td>
            			</tr>
            			<tr>
            				<td>5</td>
            				<td>Date</td>
            				<td>The scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>6</td>
            				<td>Date</td>
            				<td>The next scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>7</td>
            				<td>Integer</td>
            				<td>The re-fire count from the JobExecutionContext.</td>
            			</tr>
            			<tr>
            				<td>8</td>
            				<td>String</td>
            				<td>The message from the thrown JobExecution Exception.
            </td>
            			</tr>
            		</table>
            The default message text is <i>"Job {1}.{0} execution failed at {2, date,
            HH:mm:ss MM/dd/yyyy} and reports: {8"</i>
            	</para>
            	<para>
            JobWasVetoedMessage - available message data are: <table>
            			<tr>
            				<th>Element</th>
            				<th>Data Type</th>
            				<th>Description</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>String</td>
            				<td>The Job's Name.</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>String</td>
            				<td>The Job's Group.</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>Date</td>
            				<td>The current time.</td>
            			</tr>
            			<tr>
            				<td>3</td>
            				<td>String</td>
            				<td>The Trigger's name.</td>
            			</tr>
            			<tr>
            				<td>4</td>
            				<td>String</td>
            				<td>The Triggers's group.</td>
            			</tr>
            			<tr>
            				<td>5</td>
            				<td>Date</td>
            				<td>The scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>6</td>
            				<td>Date</td>
            				<td>The next scheduled fire time.</td>
            			</tr>
            			<tr>
            				<td>7</td>
            				<td>Integer</td>
            				<td>The re-fire count from the JobExecutionContext.</td>
            			</tr>
            		</table>
            The default message text is <i>"Job {1}.{0} was vetoed.  It was to be fired 
            (by trigger {4}.{3}) at: {2, date, HH:mm:ss MM/dd/yyyy"</i>
            	</para>
            </remarks>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <see cref="T:Quartz.IScheduler"/> in order to give
            the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.Start">
            <summary>
            Called when the associated <see cref="T:Quartz.IScheduler"/> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.Shutdown">
            <summary> 
            Called in order to inform the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobToBeExecuted(Quartz.IJobExecutionContext)">
            <summary>
                Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/> is
                about to be executed (an associated <see cref="T:Quartz.ITrigger"/> has occurred). 
                <para>
                    This method will not be invoked if the execution of the Job was vetoed by a
                    <see cref="T:Quartz.ITriggerListener"/>.
                </para>
            </summary>
            <seealso cref="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobWasExecuted(Quartz.IJobExecutionContext,Quartz.JobExecutionException)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> after a <see cref="T:Quartz.IJobDetail"/>
            has been executed, and be for the associated <see cref="T:Quartz.ITrigger"/>'s
            <see cref="M:Quartz.Spi.IOperableTrigger.Triggered(Quartz.ICalendar)"/> method has been called.
            </summary>
            <param name="context"></param>
            <param name="jobException"></param>
        </member>
        <member name="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobExecutionVetoed(Quartz.IJobExecutionContext)">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a <see cref="T:Quartz.IJobDetail"/>
            was about to be executed (an associated <see cref="T:Quartz.ITrigger"/>
            has occured), but a <see cref="T:Quartz.ITriggerListener"/> vetoed it's
            execution.
            </summary>
            <param name="context"></param>
            <seealso cref="M:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobToBeExecuted(Quartz.IJobExecutionContext)"/>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobSuccessMessage">
            <summary> 
            Get or sets the message that is logged when a Job successfully completes its 
            execution.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobFailedMessage">
            <summary> 
            Get or sets the message that is logged when a Job fails its 
            execution.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobToBeFiredMessage">
            <summary> 
            Gets or sets the message that is logged when a Job is about to Execute.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingJobHistoryPlugin.JobWasVetoedMessage">
            <summary> 
            Gets or sets the message that is logged when a Job execution is vetoed by a
            trigger listener.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.History.LoggingJobHistoryPlugin.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.IJobListener"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.JobBuilder">
            <summary>
            <code>JobBuilder</code> is used to instantiate <see cref="T:Quartz.IJobDetail"/>s.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>, 
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code> 
            and the various <code>ScheduleBuilder</code> implementations.</para>
            
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
                    IJobDetail job = JobBuilder.Create&lt;MyJob&gt;()
                        .WithIdentity("myJob")
                        .Build();
                        
                    ITrigger trigger = TriggerBuilder.Create() 
                        .WithIdentity("myTrigger", "myTriggerGroup")
                        .WithSimpleSchedule(x =&gt; x.WithIntervalInHours(1).RepeatForever())
                        .StartAt(DateBuilder.FutureDate(10, IntervalUnit.Minute))
                        .Build();
                    
                    scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.TriggerBuilder"/>
            <seealso cref="T:Quartz.DateBuilder"/>
            <seealso cref="T:Quartz.IJobDetail"/>
        </member>
        <member name="M:Quartz.JobBuilder.Create">
            <summary>
            Create a JobBuilder with which to define a <code>JobDetail</code>.
            </summary>
            <returns>a new JobBuilder</returns>
        </member>
        <member name="M:Quartz.JobBuilder.Create(System.Type)">
            <summary>
            Create a JobBuilder with which to define a <code>JobDetail</code>,
            and set the class name of the <code>Job</code> to be executed.
            </summary>
            <returns>a new JobBuilder</returns>
        </member>
        <member name="M:Quartz.JobBuilder.Create``1">
            <summary>
            Create a JobBuilder with which to define a <code>JobDetail</code>,
            and set the class name of the <code>Job</code> to be executed.
            </summary>
            <returns>a new JobBuilder</returns>
        </member>
        <member name="M:Quartz.JobBuilder.Build">
            <summary>
            Produce the <code>JobDetail</code> instance defined by this 
            <code>JobBuilder</code>.
            </summary>
            <returns>the defined JobDetail.</returns>
        </member>
        <member name="M:Quartz.JobBuilder.WithIdentity(System.String)">
            <summary>
            Use a <code>JobKey</code> with the given name and default group to
            identify the JobDetail.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the JobBuilder,
            then a random, unique JobKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Job's JobKey</param>
            <returns>the updated JobBuilder</returns>
            <seealso cref="T:Quartz.JobKey"/> 
            <seealso cref="P:Quartz.IJobDetail.Key"/>
        </member>
        <member name="M:Quartz.JobBuilder.WithIdentity(System.String,System.String)">
            <summary>
            Use a <code>JobKey</code> with the given name and group to
            identify the JobDetail.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the JobBuilder,
            then a random, unique JobKey will be generated.</para>
            </remarks>
            <param name="name">the name element for the Job's JobKey</param>
            <param name="group"> the group element for the Job's JobKey</param>
            <returns>the updated JobBuilder</returns>
            <seealso cref="T:Quartz.JobKey"/>
            <seealso cref="P:Quartz.IJobDetail.Key"/>
        </member>
        <member name="M:Quartz.JobBuilder.WithIdentity(Quartz.JobKey)">
            <summary>
            Use a <code>JobKey</code> to identify the JobDetail.
            </summary>
            <remarks>
            <para>If none of the 'withIdentity' methods are set on the JobBuilder,
            then a random, unique JobKey will be generated.</para>
            </remarks>
            <param name="key">the Job's JobKey</param>
            <returns>the updated JobBuilder</returns>
            <seealso cref="T:Quartz.JobKey"/>
            <seealso cref="P:Quartz.IJobDetail.Key"/>
        </member>
        <member name="M:Quartz.JobBuilder.WithDescription(System.String)">
            <summary>
            Set the given (human-meaningful) description of the Job.
            </summary>
            <param name="description"> the description for the Job</param>
            <returns>the updated JobBuilder</returns>
            <seealso cref="P:Quartz.IJobDetail.Description"/>
        </member>
        <member name="M:Quartz.JobBuilder.OfType``1">
            <summary>
            Set the class which will be instantiated and executed when a
            Trigger fires that is associated with this JobDetail.
            </summary>
            <returns>the updated JobBuilder</returns>
            <seealso cref="P:Quartz.IJobDetail.JobType"/>
        </member>
        <member name="M:Quartz.JobBuilder.OfType(System.Type)">
            <summary>
            Set the class which will be instantiated and executed when a
            Trigger fires that is associated with this JobDetail.
            </summary>
            <returns>the updated JobBuilder</returns>
            <seealso cref="P:Quartz.IJobDetail.JobType"/>
        </member>
        <member name="M:Quartz.JobBuilder.RequestRecovery">
            <summary>
            Instructs the <code>Scheduler</code> whether or not the <code>Job</code>
            should be re-executed if a 'recovery' or 'fail-over' situation is
            encountered.
            </summary>
            <remarks>
            If not explicitly set, the default value is <code>false</code>.
            </remarks>
            <returns>the updated JobBuilder</returns>
            <seealso cref="P:Quartz.IJobDetail.RequestsRecovery"/>
        </member>
        <member name="M:Quartz.JobBuilder.RequestRecovery(System.Boolean)">
            <summary>
            Instructs the <code>Scheduler</code> whether or not the <code>Job</code>
            should be re-executed if a 'recovery' or 'fail-over' situation is
            encountered.
            </summary>
            <remarks>
            If not explicitly set, the default value is <code>false</code>.
            </remarks>
            <param name="shouldRecover"></param>
            <returns>the updated JobBuilder</returns>
        </member>
        <member name="M:Quartz.JobBuilder.StoreDurably">
            <summary>
            Whether or not the <code>Job</code> should remain stored after it is
            orphaned (no <code><see cref="T:Quartz.ITrigger"/>s</code> point to it).
            </summary>
            <remarks>
            If not explicitly set, the default value is <code>false</code>.
            </remarks>
            <returns>the updated JobBuilder</returns>
            <seealso cref="P:Quartz.IJobDetail.Durable"/>
        </member>
        <member name="M:Quartz.JobBuilder.StoreDurably(System.Boolean)">
             <summary>
             Whether or not the <code>Job</code> should remain stored after it is
             orphaned (no <code><see cref="T:Quartz.ITrigger"/>s</code> point to it).
             </summary>
             <remarks>
             If not explicitly set, the default value is <code>false</code>.
             </remarks>
             <param name="durability">the value to set for the durability property.</param>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.Durable"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.String)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.Int32)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.Int64)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.Single)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.Double)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(System.String,System.Boolean)">
             <summary>
             Add the given key-value pair to the JobDetail's <see cref="T:Quartz.JobDataMap"/>.
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="M:Quartz.JobBuilder.UsingJobData(Quartz.JobDataMap)">
             <summary>
             Set the JobDetail's <see cref="T:Quartz.JobDataMap"/>, adding any values to it
             that were already set on this JobBuilder using any of the
             other 'usingJobData' methods. 
             </summary>
            <returns>the updated JobBuilder</returns>
             <seealso cref="P:Quartz.IJobDetail.JobDataMap"/>
        </member>
        <member name="T:Quartz.Impl.SchedulerService">
            <summary>
            Holds references to Scheduler instances - ensuring uniqueness, and
            preventing garbage collection, and allowing 'global' lookups.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.SchedulerService.Bind(Quartz.IScheduler)">
            <summary>
            Binds the specified sched.
            </summary>
            <param name="sched">The sched.</param>
        </member>
        <member name="M:Quartz.Impl.SchedulerService.Remove(System.String)">
            <summary>
            Removes the specified sched name.
            </summary>
            <param name="schedName">Name of the sched.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.SchedulerService.Lookup(System.String)">
            <summary>
            Lookups the specified sched name.
            </summary>
            <param name="schedName">Name of the sched.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.SchedulerService.LookupAll">
            <summary>
            Lookups all.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.SchedulerService.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Quartz.Impl.RemoteScheduler">
            <summary>
            An implementation of the <see cref="T:Quartz.IScheduler"/> interface that remotely
            proxies all method calls to the equivalent call on a given <see cref="T:Quartz.Core.QuartzScheduler"/>
            instance, via remoting or similar technology.
            </summary>
            <seealso cref="T:Quartz.IScheduler"/>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.#ctor(System.String,Quartz.Spi.IRemotableSchedulerProxyFactory)">
            <summary>
            Construct a <see cref="T:Quartz.Impl.RemoteScheduler"/> instance to proxy the given
            RemoteableQuartzScheduler instance.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.IsJobGroupPaused(System.String)">
            <summary>
            returns true if the given JobGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup
            is paused
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetMetaData">
            <summary>
            Get a <see cref="T:Quartz.SchedulerMetaData"/> object describiing the settings
            and capabilities of the scheduler instance.
            <para>
            Note that the data returned is an 'instantaneous' snap-shot, and that as
            soon as it's returned, the meta data values may be different.
            </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetCurrentlyExecutingJobs">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerGroupNames">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetPausedTriggerGroups">
            <summary>
            Get the names of all <see cref="T:Quartz.ITrigger"/> groups that are paused.
            </summary>
            <value></value>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Start">
            <summary> 
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.StartDelayed(System.TimeSpan)">
            <summary> 
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Standby">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Shutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Shutdown(System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ScheduleJob(Quartz.IJobDetail,Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ScheduleJob(Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.DeleteJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.UnscheduleJob(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.RescheduleJob(Quartz.TriggerKey,Quartz.ITrigger)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.TriggerJob(Quartz.JobKey,Quartz.JobDataMap)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.PauseAll">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.ResumeAll">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggersOfJob(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetJobDetail(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.CheckExists(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.CheckExists(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Clear">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTrigger(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.AddCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.DeleteCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetCalendar(System.String)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.GetCalendarNames">
            <summary>
            Get the names of all registered <see cref="T:Quartz.ICalendar"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.RemoteScheduler.Interrupt(Quartz.JobKey)">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.SchedulerName">
            <summary>
            Returns the name of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.SchedulerInstanceId">
            <summary>
            Returns the instance Id of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.Context">
            <summary> 
            Returns the <see cref="T:Quartz.SchedulerContext"/> of the <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.InStandbyMode">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.IsShutdown">
            <summary>
            Calls the equivalent method on the 'proxied' <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.JobFactory">
            <summary>
            Set the <see cref="P:Quartz.Impl.RemoteScheduler.JobFactory"/> that will be responsible for producing
            instances of <see cref="T:Quartz.IJob"/> classes.
            <para>
            JobFactories may be of use to those wishing to have their application
            produce <see cref="T:Quartz.IJob"/> instances via some special mechanism, such as to
            give the opertunity for dependency injection.
            </para>
            </summary>
            <value></value>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <throws>  SchedulerException </throws>
        </member>
        <member name="P:Quartz.Impl.RemoteScheduler.IsStarted">
            <summary>
            Whether the scheduler has been started.
            </summary>
            <value></value>
            <remarks>
            Note: This only reflects whether <see cref="M:Quartz.Impl.RemoteScheduler.Start"/> has ever
            been called on this Scheduler, so it will return <see langword="true"/> even
            if the <see cref="T:Quartz.IScheduler"/> is currently in standby mode or has been
            since shutdown.
            </remarks>
            <seealso cref="M:Quartz.Impl.RemoteScheduler.Start"/>
            <seealso cref="P:Quartz.Impl.RemoteScheduler.IsShutdown"/>
            <seealso cref="P:Quartz.Impl.RemoteScheduler.InStandbyMode"/>
        </member>
        <member name="T:Quartz.Impl.DirectSchedulerFactory">
            <summary>
            A singleton implementation of <see cref="T:Quartz.ISchedulerFactory"/>.
            </summary>
            <remarks>
            Here are some examples of using this class:
            <para>
            To create a scheduler that does not write anything to the database (is not
            persistent), you can call <see cref="M:Quartz.Impl.DirectSchedulerFactory.CreateVolatileScheduler(System.Int32)"/>:
            </para>
            <pre>
            DirectSchedulerFactory.Instance.CreateVolatileScheduler(10); // 10 threads 
            // don't forget to start the scheduler: 
            DirectSchedulerFactory.Instance.GetScheduler().Start();
            </pre>
            <para>
            Several create methods are provided for convenience. All create methods
            eventually end up calling the create method with all the parameters:
            </para>
            <pre>
            public void CreateScheduler(string schedulerName, string schedulerInstanceId, IThreadPool threadPool, IJobStore jobStore)
            </pre>
            <para>
            Here is an example of using this method:
            </para>
            <pre>
            // create the thread pool 
            SimpleThreadPool threadPool = new SimpleThreadPool(maxThreads, ThreadPriority.Normal); 
            threadPool.Initialize(); 
            // create the job store 
            JobStore jobStore = new RAMJobStore(); 
            
            DirectSchedulerFactory.Instance.CreateScheduler("My Quartz Scheduler", "My Instance", threadPool, jobStore); 
            // don't forget to start the scheduler: 
            DirectSchedulerFactory.Instance.GetScheduler("My Quartz Scheduler", "My Instance").Start();
            </pre>
            </remarks>&gt;
            <author>Mohammad Rezaei</author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.Spi.IJobStore"/>
            <seealso cref="T:System.Threading.ThreadPool"/>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.DirectSchedulerFactory"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateVolatileScheduler(System.Int32)">
            <summary>
            Creates an in memory job store (<see cref="T:Quartz.Simpl.RAMJobStore"/>)
            The thread priority is set to Thread.NORM_PRIORITY
            </summary>
            <param name="maxThreads">The number of threads in the thread pool</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateRemoteScheduler(System.String)">
            <summary>
            Creates a proxy to a remote scheduler. This scheduler can be retrieved
            via <see cref="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler"/>.
            </summary>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateRemoteScheduler(System.String,System.String,System.String)">
            <summary>
            Same as <see cref="M:Quartz.Impl.DirectSchedulerFactory.CreateRemoteScheduler(System.String)"/>,
            with the addition of specifying the scheduler name and instance ID. This
            scheduler can only be retrieved via <see cref="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler(System.String)"/>.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="proxyAddress"></param>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore)">
            <summary> 
            Creates a scheduler using the specified thread pool and job store. This
            scheduler can be retrieved via DirectSchedulerFactory#GetScheduler()
            </summary>
            <param name="threadPool">
            The thread pool for executing jobs
            </param>
            <param name="jobStore">
            The type of job store
            </param>
            <throws>  SchedulerException </throws>
            <summary>           if initialization failed
            </summary>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore)">
            <summary>
            Same as DirectSchedulerFactory#createScheduler(ThreadPool threadPool, JobStore jobStore),
            with the addition of specifying the scheduler name and instance ID. This
            scheduler can only be retrieved via DirectSchedulerFactory#getScheduler(String)
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="jobStore">The type of job store</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a scheduler using the specified thread pool and job store and
            binds it for remote access.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="jobStore">The type of job store</param>
            <param name="idleWaitTime">The idle wait time. You can specify "-1" for
            the default value, which is currently 30000 ms.</param>
            <param name="dbFailureRetryInterval">The db failure retry interval.</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IJobStore,System.Collections.Generic.IDictionary{System.String,Quartz.Spi.ISchedulerPlugin},System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a scheduler using the specified thread pool and job store and
            binds it for remote access.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="jobStore">The type of job store</param>
            <param name="schedulerPluginMap"></param>
            <param name="idleWaitTime">The idle wait time. You can specify TimeSpan.Zero for
            the default value, which is currently 30000 ms.</param>
            <param name="dbFailureRetryInterval">The db failure retry interval.</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IThreadExecutor,Quartz.Spi.IJobStore,System.Collections.Generic.IDictionary{System.String,Quartz.Spi.ISchedulerPlugin},System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a scheduler using the specified thread pool and job store and
            binds it for remote access.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="threadExecutor">Thread executor.</param>
            <param name="jobStore">The type of job store</param>
            <param name="schedulerPluginMap"></param>
            <param name="idleWaitTime">The idle wait time. You can specify TimeSpan.Zero for
            the default value, which is currently 30000 ms.</param>
            <param name="dbFailureRetryInterval">The db failure retry interval.</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.CreateScheduler(System.String,System.String,Quartz.Spi.IThreadPool,Quartz.Spi.IThreadExecutor,Quartz.Spi.IJobStore,System.Collections.Generic.IDictionary{System.String,Quartz.Spi.ISchedulerPlugin},System.TimeSpan,System.TimeSpan,System.Int32,System.TimeSpan)">
            <summary>
            Creates a scheduler using the specified thread pool and job store and
            binds it for remote access.
            </summary>
            <param name="schedulerName">The name for the scheduler.</param>
            <param name="schedulerInstanceId">The instance ID for the scheduler.</param>
            <param name="threadPool">The thread pool for executing jobs</param>
            <param name="threadExecutor">Thread executor.</param>
            <param name="jobStore">The type of job store</param>
            <param name="schedulerPluginMap"></param>
            <param name="idleWaitTime">The idle wait time. You can specify TimeSpan.Zero for
            the default value, which is currently 30000 ms.</param>
            <param name="dbFailureRetryInterval">The db failure retry interval.</param>
            <param name="maxBatchSize">The maximum batch size of triggers, when acquiring them</param>
            <param name="batchTimeWindow">The time window for which it is allowed to "pre-acquire" triggers to fire</param>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler">
            <summary>
            Returns a handle to the Scheduler produced by this factory.
            <para>
            you must call createRemoteScheduler or createScheduler methods before
            calling getScheduler()
            </para>
            </summary>
            <returns></returns>
            <throws>  SchedulerException </throws>
        </member>
        <member name="M:Quartz.Impl.DirectSchedulerFactory.GetScheduler(System.String)">
            <summary>
            Returns a handle to the Scheduler with the given name, if it exists.
            </summary>
        </member>
        <member name="P:Quartz.Impl.DirectSchedulerFactory.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Quartz.Impl.DirectSchedulerFactory.AllSchedulers">
            <summary> <para>
            Returns a handle to all known Schedulers (made by any
            StdSchedulerFactory instance.).
            </para>
            </summary>
        </member>
        <member name="T:Quartz.Impl.Calendar.WeeklyCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the week. You
            may use it to exclude weekends for example. But you may define any day of
            the week.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.WeeklyCalendar"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.WeeklyCalendar"/> class.
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.Init">
            <summary>
            Initialize internal variables
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.IsDayExcluded(System.DayOfWeek)">
            <summary> 
            Return true, if wday is defined to be exluded. E. g.
            saturday and sunday.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.SetDayExcluded(System.DayOfWeek,System.Boolean)">
            <summary>
            Redefine a certain day of the week to be excluded (true) or included
            (false). Use java.util.Calendar's constants like MONDAY to determine the
            wday.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.AreAllDaysExcluded">
            <summary>
            Check if all week ays are excluded. That is no day is included.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.WeeklyCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return DateTime.MinValue if all days are excluded.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Calendar.WeeklyCalendar.DaysExcluded">
            <summary> 
            Get the array with the week days.
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 8. java.util.Calendar's constants like MONDAY should be used as
            index. A value of true is regarded as: exclude it.
            </summary>
        </member>
        <member name="T:Quartz.IInterruptableJob">
            <summary>
            The interface to be implemented by <see cref="T:Quartz.IJob"/>s that provide a 
            mechanism for having their execution interrupted.  It is NOT a requirement
            for jobs to implement this interface - in fact, for most people, none of
            their jobs will.
            </summary>
            <remarks>
            <para>
            The means of actually interrupting the Job must be implemented within the
            <see cref="T:Quartz.IJob"/> itself (the <see cref="M:Quartz.IInterruptableJob.Interrupt"/> method of this 
            interface is simply a means for the scheduler to inform the <see cref="T:Quartz.IJob"/>
            that a request has been made for it to be interrupted). The mechanism that
            your jobs use to interrupt themselves might vary between implementations.
            However the principle idea in any implementation should be to have the
            body of the job's <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> periodically check some flag to
            see if an interruption has been requested, and if the flag is set, somehow
            abort the performance of the rest of the job's work.  An example of 
            interrupting a job can be found in the java source for the class 
            <see cref="T:Quartz.Examples.Example7.DumbInterruptableJob"/>.  It is legal to use
            some combination of <see cref="M:System.Threading.Monitor.Wait(System.Object)"/> and <see cref="M:System.Threading.Monitor.Pulse(System.Object)"/> 
            synchronization within <see cref="M:System.Threading.Thread.Interrupt"/> and <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/>
            in order to have the <see cref="M:System.Threading.Thread.Interrupt"/> method block until the
            <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> signals that it has noticed the set flag.
            </para>
            
            <para>
            If the Job performs some form of blocking I/O or similar functions, you may
            want to consider having the <see cref="M:Quartz.IJob.Execute(Quartz.IJobExecutionContext)"/> method store a
            reference to the calling <see cref="T:System.Threading.Thread"/> as a member variable.  Then the
            implementation of this interfaces <see cref="M:System.Threading.Thread.Interrupt"/> method can call 
            <see cref="M:System.Threading.Thread.Interrupt"/> on that Thread.   Before attempting this, make
            sure that you fully understand what <see cref="M:System.Threading.Thread.Interrupt"/> 
            does and doesn't do.  Also make sure that you clear the Job's member 
            reference to the Thread when the Execute(..) method exits (preferably in a
            <see langword="finally"/> block.
            </para>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="M:Quartz.IScheduler.Interrupt(Quartz.JobKey)"/>
            <seealso cref="M:Quartz.IScheduler.Interrupt(System.String)"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.IInterruptableJob.Interrupt">
            <summary>
            Called by the <see cref="T:Quartz.IScheduler"/> when a user
            interrupts the <see cref="T:Quartz.IJob"/>.
            </summary>
            <returns> void (nothing) if job interrupt is successful.</returns>
        </member>
        <member name="T:Quartz.Job.IDirectoryScanListener">
            <summary>Interface for objects wishing to receive a 'call-back' from a <see cref="T:Quartz.Job.DirectoryScanJob"/></summary>
            <remarks><para>Instances should be stored in the <see cref="T:Quartz.SchedulerContext"/> such that the
            <see cref="T:Quartz.Job.DirectoryScanJob"/> can find it.</para></remarks>
            <author>James House</author>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Job.IDirectoryScanListener.FilesUpdatedOrAdded(System.IO.FileInfo[])">
            <param name="updatedFiles">An array of <see cref="T:System.IO.FileInfo"/> objects that were updated/added 
            since the last scan of the directory</param>
        </member>
        <member name="T:Quartz.Spi.ISchedulerExporter">
            <summary>
            Service interface for scheduler exporters.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Spi.ISchedulerExporter.Bind(Quartz.Simpl.IRemotableQuartzScheduler)">
            <summary>
            Binds (exports) scheduler to external context.
            </summary>
            <param name="scheduler"></param>
        </member>
        <member name="M:Quartz.Spi.ISchedulerExporter.UnBind(Quartz.Simpl.IRemotableQuartzScheduler)">
            <summary>
            Unbinds scheduler from external context.
            </summary>
            <param name="scheduler"></param>
        </member>
        <member name="T:Quartz.Simpl.RemotingSchedulerExporter">
            <summary>
            Scheduler exporter that exports scheduler to remoting context.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Simpl.RemotingSchedulerExporter.RegisterRemotingChannelIfNeeded">
            <summary>
            Registers remoting channel if needed. This is determined
            by checking whether there is a positive value for port.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerExporter.Port">
            <summary>
            Gets or sets the port used for remoting.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerExporter.BindName">
            <summary>
            Gets or sets the name to use when exporting
            scheduler to remoting context.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerExporter.ChannelName">
            <summary>
            Gets or sets the name to use when binding to 
            tcp channel.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerExporter.ChannelType">
            <summary>
            Sets the channel type when registering remoting.
            
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RemotingSchedulerExporter.TypeFilterLevel">
            <summary>
            Sets the <see cref="P:Quartz.Simpl.RemotingSchedulerExporter.TypeFilterLevel"/> used when
            exporting to remoting context. Defaults to
            <see cref="F:System.Runtime.Serialization.Formatters.TypeFilterLevel.Full"/>.
            </summary>
        </member>
        <member name="T:Quartz.TimeSpanParseRuleAttribute">
            <summary>
            Attribute to use with public <see cref="T:System.TimeSpan"/> properties that
            can be set with Quartz configuration. Attribute can be used to advice
            parsing to use correct type of time span (milliseconds, seconds, minutes, hours)
            as it may depend on property.
            </summary>
            <author>Marko Lahma (.NET)</author>
            <seealso cref="T:Quartz.TimeSpanParseRuleAttribute"/>
        </member>
        <member name="M:Quartz.TimeSpanParseRuleAttribute.#ctor(Quartz.TimeSpanParseRule)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.TimeSpanParseRuleAttribute"/> class.
            </summary>
            <param name="rule">The rule.</param>
        </member>
        <member name="P:Quartz.TimeSpanParseRuleAttribute.Rule">
            <summary>
            Gets the rule.
            </summary>
            <value>The rule.</value>
        </member>
        <member name="T:Quartz.TimeSpanParseRule">
            <summary>
            Possible parse rules for <see cref="T:System.TimeSpan"/>s.
            </summary>
        </member>
        <member name="F:Quartz.TimeSpanParseRule.Milliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Quartz.TimeSpanParseRule.Seconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Quartz.TimeSpanParseRule.Minutes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Quartz.TimeSpanParseRule.Hours">
            <summary>
            
            </summary>
        </member>
        <member name="F:Quartz.TimeSpanParseRule.Days">
            <summary>
            
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.Common.DbMetadata">
            <summary>
            Metadata information about specific ADO.NET driver library. Metadata is used to
            create correct types of object instances to interact with the underlying
            database.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbMetadata.Init">
            <summary>
            Initializes this instance. Parses information and initializes startup
            values.
            </summary>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.Common.DbMetadata.GetParameterName(System.String)">
            <summary>
            Gets the name of the parameter which includes the parameter prefix for this
            database.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.AssemblyName">
            <summary>Gets or sets the name of the assembly that holds the connection library.</summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>The name of the product.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ConnectionType">
            <summary>
            Gets or sets the type of the connection.
            </summary>
            <value>The type of the connection.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterType">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <value>The type of the parameter.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.CommandBuilderType">
            <summary>
            Gets the type of the command builder.
            </summary>
            <value>The type of the command builder.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.CommandBuilderDeriveParametersMethod">
            <summary>Gets the command builder's derive parameters method.</summary>
            <value>The command builder derive parameters method.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterNamePrefix">
            <summary>
            Gets or sets the parameter name prefix.
            </summary>
            <value>The parameter name prefix.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ExceptionType">
            <summary>
            Gets or sets the type of the exception that is thrown when using driver
            library.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.BindByName">
            <summary>
            Gets or sets a value indicating whether parameters are bind by name when using
            ADO.NET parameters.
            </summary>
            <value><c>true</c> if parameters are bind by name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterDbType">
            <summary>Gets or sets the type of the database parameters.</summary>
            <value>The type of the parameter db.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterDbTypeProperty">
            <summary>
            Gets the parameter db type property.
            </summary>
            <value>The parameter db type property.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterIsNullableProperty">
            <summary>
            Gets the parameter is nullable property.
            </summary>
            <value>The parameter is nullable property.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.DbBinaryTypeName">
            <summary>
            Gets or sets the type of the db binary column. This is a string representation of
            Enum element because this information is database driver specific.
            </summary>
            <value>The type of the db binary.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.DbBinaryType">
            <summary>Gets the type of the db binary.</summary>
            <value>The type of the db binary.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.ParameterDbTypePropertyName">
            <summary>
            Sets the name of the parameter db type property.
            </summary>
            <value>The name of the parameter db type property.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.Common.DbMetadata.UseParameterNamePrefixInParameterCollection">
            <summary>
            Gets or sets a value indicating whether [use parameter name prefix in parameter collection].
            </summary>
            <value>
            	<c>true</c> if [use parameter name prefix in parameter collection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl">
            <summary>
             A concrete <see cref="T:Quartz.ITrigger"/> that is used to fire a <see cref="T:Quartz.IJobDetail"/>
             based upon repeating calendar time intervals.
             </summary>
            <remarks>
            The trigger will fire every N (see <see cref="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.RepeatInterval"/>) units of calendar time
            (see <see cref="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.RepeatIntervalUnit"/>) as specified in the trigger's definition.  
            This trigger can achieve schedules that are not possible with <see cref="T:Quartz.ISimpleTrigger"/> (e.g 
            because months are not a fixed number of seconds) or <see cref="T:Quartz.ICronTrigger"/> (e.g. because
            "every 5 months" is not an even divisor of 12).
            <para>
            If you use an interval unit of <see cref="F:Quartz.IntervalUnit.Month"/> then care should be taken when setting
            a <code>startTime</code> value that is on a day near the end of the month.  For example,
            if you choose a start time that occurs on January 31st, and have a trigger with unit
            <see cref="F:Quartz.IntervalUnit.Month"/> and interval <code>1</code>, then the next fire time will be February 28th, 
            and the next time after that will be March 28th - and essentially each subsequent firing will 
            occur on the 28th of the month, even if a 31st day exists.  If you want a trigger that always
            fires on the last day of the month - regardless of the number of days in the month, 
            you should use <see cref="T:Quartz.ICronTrigger"/>.
            </para> 
            </remarks>
            <see cref="T:Quartz.ITrigger"/>
            <see cref="T:Quartz.ICronTrigger"/>
            <see cref="T:Quartz.ISimpleTrigger"/>
            <see cref="T:Quartz.NthIncludedDayTrigger"/>
            <since>2.0</since>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor">
            <summary>
            Create a <code>DateIntervalTrigger</code> with no settings.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor(System.String,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl"/> that will occur immediately, and
            repeat at the the given interval.
            </summary>
            <param name="name">Name for the trigger instance.</param>
            <param name="intervalUnit">The repeat interval unit (minutes, days, months, etc).</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor(System.String,System.String,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.ICalendarIntervalTrigger"/> that will occur immediately, and
            repeat at the the given interval
            </summary>
            <param name="name">Name for the trigger instance.</param>
            <param name="group">Group for the trigger instance.</param>
            <param name="intervalUnit">The repeat interval unit (minutes, days, months, etc).</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor(System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.ICalendarIntervalTrigger"/> that will occur at the given time,
            and repeat at the the given interval until the given end time.
            </summary>
            <param name="name">Name for the trigger instance.</param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to quit repeat firing.</param>
            <param name="intervalUnit">The repeat interval unit (minutes, days, months, etc).</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor(System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.ICalendarIntervalTrigger"/> that will occur at the given time,
            and repeat at the the given interval until the given end time.
            </summary>
            <param name="name">Name for the trigger instance.</param>
            <param name="group">Group for the trigger instance.</param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to quit repeat firing.</param>
            <param name="intervalUnit">The repeat interval unit (minutes, days, months, etc).</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.ICalendarIntervalTrigger"/> that will occur at the given time,
            and repeat at the the given interval until the given end time.
            </summary>
            <param name="name">Name for the trigger instance.</param>
            <param name="group">Group for the trigger instance.</param>
            <param name="jobName">Name of the associated job.</param>
            <param name="jobGroup">Group of the associated job.</param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code> to quit repeat firing.</param>
            <param name="intervalUnit">The repeat interval unit (minutes, days, months, etc).</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.ValidateMisfireInstruction(System.Int32)">
            <summary>
            Validates the misfire instruction.
            </summary>
            <param name="misfireInstruction">The misfire instruction.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> 
            Updates the <see cref="T:Quartz.ICalendarIntervalTrigger"/>'s state based on the
            MISFIRE_INSTRUCTION_XXX that was selected when the <code>DateIntervalTrigger</code>
            was created.
            </summary>
            <remarks>
             If the misfire instruction is set to MISFIRE_INSTRUCTION_SMART_POLICY,
            then the following scheme will be used:
            <ul>
            <li>The instruction will be interpreted as <code>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</code></li>
            </ul>
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.Triggered(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            <para>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire'
            the trigger (Execute the associated <see cref="T:Quartz.IJob"/>), in order to
            give the <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next
            triggering (if any).
            </para>
            </summary>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary> 
            This method should not be used by the Quartz client.
            <para>
            The implementation should update the <see cref="T:Quartz.ITrigger"/>'s state
            based on the given new version of the associated <see cref="T:Quartz.ICalendar"/>
            (the state should be updated so that it's next fire time is appropriate
            given the Calendar's new settings). 
            </para>
            </summary>
            <param name="calendar"> </param>
            <param name="misfireThreshold"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            <para>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            </para>
            
            <para>
            After this method has been called, <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </remarks>
            <returns> 
            The first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>        
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetNextFireTimeUtc">
             <summary>
             Returns the next time at which the <see cref="T:Quartz.ITrigger"/> is scheduled to fire. If
             the trigger will not fire again, <see langword="null"/> will be returned.  Note that
             the time returned can possibly be in the past, if the time that was computed
             for the trigger to next fire has already arrived, but the scheduler has not yet
             been able to fire the trigger (which would likely be due to lack of resources
             e.g. threads).
             </summary>
            <remarks>
             The value returned is not guaranteed to be valid until after the <see cref="T:Quartz.ITrigger"/>
             has been added to the scheduler.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ICalendarIntervalTrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the next time at which the <see cref="T:Quartz.ICalendarIntervalTrigger"/> will fire,
            after the given time. If the trigger will not fire after the given time,
            <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetMayFireAgain">
            <summary>
            Determines whether or not the <code>DateIntervalTrigger</code> will occur
            again.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.Validate">
            <summary>
            Validates whether the properties of the <see cref="T:Quartz.IJobDetail"/> are
            valid for submission into a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetScheduleBuilder">
            <summary>
            Get a <see cref="T:Quartz.IScheduleBuilder"/> that is configured to produce a
            schedule identical to this trigger's schedule.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="M:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.GetTriggerBuilder"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.StartTimeUtc">
            <summary>
            Get the time at which the <see cref="T:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl"/> should occur.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.EndTimeUtc">
            <summary>
            Get the time at which the <see cref="T:Quartz.ICalendarIntervalTrigger"/> should quit
            repeating.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.RepeatIntervalUnit">
            <summary>
            Get or set the interval unit - the time unit on with the interval applies.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.RepeatInterval">
            <summary>
            Get the the time interval that will be added to the <see cref="T:Quartz.ICalendarIntervalTrigger"/>'s
            fire time (in the set repeat interval unit) in order to calculate the time of the 
            next trigger repeat.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.TimesTriggered">
            <summary>
            Get the number of times the <code>DateIntervalTrigger</code> has already fired.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.CalendarIntervalTriggerImpl.FinalFireTimeUtc">
            <summary>
            Returns the final time at which the <code>DateIntervalTrigger</code> will
            fire, if there is no end time set, null will be returned.
            </summary>
            <value></value>
            <remarks>Note that the return time may be in the past.</remarks>
        </member>
        <member name="T:Quartz.Listener.TriggerListenerSupport">
             <summary>
              A helpful abstract base class for implementors of 
             <see cref="T:Quartz.ITriggerListener"/>.
              </summary>
             <remarks>
             <para>
             The methods in this class are empty so you only need to override the  
             subset for the <see cref="T:Quartz.ITriggerListener"/> events
             you care about.
             </para>
             
             <para>
             You are required to implement <see cref="P:Quartz.ITriggerListener.Name"/> 
             to return the unique name of your <see cref="T:Quartz.ITriggerListener"/>.  
             </para>
            </remarks>
             <author>Marko Lahma (.NET)</author>
             <seealso cref="T:Quartz.ITriggerListener"/>
        </member>
        <member name="P:Quartz.Listener.TriggerListenerSupport.Name">
            <summary>
            Get the name of the <see cref="T:Quartz.ITriggerListener"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.Spi.IObjectSerializer">
            <summary>
            Interface for object serializers.
            </summary>
            <author>Marko Lahma</author>
            <seealso cref="T:Quartz.Simpl.DefaultObjectSerializer"/>
        </member>
        <member name="M:Quartz.Spi.IObjectSerializer.Serialize``1(``0)">
            <summary>
            Serializes given object as bytes 
            that can be stored to permanent stores.
            </summary>
            <param name="obj">Object to serialize, always non-null.</param>
        </member>
        <member name="M:Quartz.Spi.IObjectSerializer.DeSerialize``1(System.Byte[])">
            <summary>
            Deserializes object from byte array presentation.
            </summary>
            <param name="data">Data to deserialize object from, always non-null and non-empty.</param>
        </member>
        <member name="T:Quartz.Impl.Triggers.SimpleTriggerImpl">
            <summary> 
            A concrete <see cref="T:Quartz.ITrigger"/> that is used to fire a <see cref="T:Quartz.IJobDetail"/>
            at a given moment in time, and optionally repeated at a specified interval.
            </summary>
            <seealso cref="T:Quartz.ITrigger"/>
            <seealso cref="T:Quartz.ICronTrigger"/>
            <author>James House</author>
            <author>Contributions by Lieven Govaerts of Ebitec Nv, Belgium.</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely">
            <summary>
            Used to indicate the 'repeat count' of the trigger is indefinite. Or in
            other words, the trigger should repeat continually until the trigger's
            ending timestamp.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> with no settings.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur immediately, and
            not repeat.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur immediately, and
            not repeat.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur immediately, and
            repeat at the the given interval the given number of times.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur immediately, and
            repeat at the the given interval the given number of times.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.DateTimeOffset)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur at the given time,
            and not repeat.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur at the given time,
            and not repeat.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur at the given time,
            and repeat at the the given interval the given number of times, or until
            the given end time.
            </summary>
            <param name="name">The name.</param>
            <param name="startTimeUtc">A UTC <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/> to fire.</param>
            <param name="endTimeUtc">A UTC <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/>
            to quit repeat firing.</param>
            <param name="repeatCount">The number of times for the <see cref="T:Quartz.ITrigger"/> to repeat
            firing, use <see cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/> for unlimited times.</param>
            <param name="repeatInterval">The time span to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur at the given time,
            and repeat at the the given interval the given number of times, or until
            the given end time.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="startTimeUtc">A UTC <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/> to fire.</param>
            <param name="endTimeUtc">A UTC <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/>
            to quit repeat firing.</param>
            <param name="repeatCount">The number of times for the <see cref="T:Quartz.ITrigger"/> to repeat
            firing, use <see cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/> for unlimited times.</param>
            <param name="repeatInterval">The time span to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> that will occur at the given time,
            fire the identified <see cref="T:Quartz.IJob"/> and repeat at the the given
            interval the given number of times, or until the given end time.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="jobName">Name of the job.</param>
            <param name="jobGroup">The job group.</param>
            <param name="startTimeUtc">A <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/>
            to fire.</param>
            <param name="endTimeUtc">A <see cref="T:System.DateTimeOffset"/> set to the time for the <see cref="T:Quartz.ITrigger"/>
            to quit repeat firing.</param>
            <param name="repeatCount">The number of times for the <see cref="T:Quartz.ITrigger"/> to repeat
            firing, use RepeatIndefinitely for unlimited times.</param>
            <param name="repeatInterval">The time span to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.ValidateMisfireInstruction(System.Int32)">
            <summary>
            Validates the misfire instruction.
            </summary>
            <param name="misfireInstruction">The misfire instruction.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary>
            Updates the <see cref="T:Quartz.ISimpleTrigger"/>'s state based on the
            MisfireInstruction value that was selected when the <see cref="T:Quartz.ISimpleTrigger"/>
            was created.
            </summary>
            <remarks>
            If MisfireSmartPolicyEnabled is set to true,
            then the following scheme will be used: <br/>
            <ul>
            <li>If the Repeat Count is 0, then the instruction will
            be interpreted as <see cref="F:Quartz.MisfireInstruction.SimpleTrigger.FireNow"/>.</li>
            <li>If the Repeat Count is <see cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/>, then
            the instruction will be interpreted as <see cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithRemainingRepeatCount"/>.
            <b>WARNING:</b> using MisfirePolicy.SimpleTrigger.RescheduleNowWithRemainingRepeatCount 
            with a trigger that has a non-null end-time may cause the trigger to 
            never fire again if the end-time arrived during the misfire time span. 
            </li>
            <li>If the Repeat Count is &gt; 0, then the instruction
            will be interpreted as <see cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithExistingRepeatCount"/>.
            </li>
            </ul>
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <see cref="T:Quartz.IScheduler"/> has decided to 'fire'
            the trigger (Execute the associated <see cref="T:Quartz.IJob"/>), in order to
            give the <see cref="T:Quartz.ITrigger"/> a chance to update itself for its next
            triggering (if any).
            </summary>
            <seealso cref="T:Quartz.JobExecutionException"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary>
            Updates the instance with new calendar.
            </summary>
            <param name="calendar">The calendar.</param>
            <param name="misfireThreshold">The misfire threshold.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            <para>
            After this method has been called, <see cref="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </summary>
            <returns> 
            The first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetNextFireTimeUtc">
            <summary>
            Returns the next time at which the <see cref="T:Quartz.ISimpleTrigger"/> will
            fire. If the trigger will not fire again, <see langword="null"/> will be
            returned. The value returned is not guaranteed to be valid until after
            the <see cref="T:Quartz.ITrigger"/> has been added to the scheduler.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ISimpleTrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be
            returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary> 
            Returns the next UTC time at which the <see cref="T:Quartz.ISimpleTrigger"/> will
            fire, after the given UTC time. If the trigger will not fire after the given
            time, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetFireTimeBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the last UTC time at which the <see cref="T:Quartz.ISimpleTrigger"/> will
            fire, before the given time. If the trigger will not fire before the
            given time, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.ComputeNumTimesFiredBetween(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Computes the number of times fired between the two UTC date times.
            </summary>
            <param name="startTimeUtc">The UTC start date and time.</param>
            <param name="endTimeUtc">The UTC end date and time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.GetMayFireAgain">
            <summary> 
            Determines whether or not the <see cref="T:Quartz.ISimpleTrigger"/> will occur
            again.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.SimpleTriggerImpl.Validate">
            <summary>
            Validates whether the properties of the <see cref="T:Quartz.IJobDetail"/> are
            valid for submission into a <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatCount">
            <summary>
            Get or set thhe number of times the <see cref="T:Quartz.Impl.Triggers.SimpleTriggerImpl"/> should
            repeat, after which it will be automatically deleted.
            </summary>
            <seealso cref="F:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatIndefinitely"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.SimpleTriggerImpl.RepeatInterval">
            <summary>
            Get or set the the time interval at which the <see cref="T:Quartz.ISimpleTrigger"/> should repeat.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.SimpleTriggerImpl.TimesTriggered">
            <summary>
            Get or set the number of times the <see cref="T:Quartz.ISimpleTrigger"/> has already
            fired.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.SimpleTriggerImpl.FinalFireTimeUtc">
            <summary> 
            Returns the final UTC time at which the <see cref="T:Quartz.ISimpleTrigger"/> will
            fire, if repeatCount is RepeatIndefinitely, null will be returned.
            <para>
            Note that the return time may be in the past.
            </para>
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.SimpleTriggerImpl.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
            <value></value>
        </member>
        <member name="T:Quartz.Plugin.Management.ShutdownHookPlugin">
            <summary> 
            This plugin catches the event of the VM terminating (such as upon a CRTL-C)
            and tells the scheuler to Shutdown.
            </summary>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Plugin.Management.ShutdownHookPlugin.Initialize(System.String,Quartz.IScheduler)">
            <summary>
            Called during creation of the <see cref="T:Quartz.IScheduler"/> in order to give
            the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.Management.ShutdownHookPlugin.Start">
            <summary>
            Called when the associated <see cref="T:Quartz.IScheduler"/> is started, in order
            to let the plug-in know it can now make calls into the scheduler if it
            needs to.
            </summary>
        </member>
        <member name="M:Quartz.Plugin.Management.ShutdownHookPlugin.Shutdown">
            <summary>
            Called in order to inform the <see cref="T:Quartz.Spi.ISchedulerPlugin"/> that it
            should free up all of it's resources because the scheduler is shutting
            down.
            </summary>
        </member>
        <member name="P:Quartz.Plugin.Management.ShutdownHookPlugin.CleanShutdown">
            <summary> 
            Determine whether or not the plug-in is configured to cause a clean
            Shutdown of the scheduler.
            <para>
            The default value is <see langword="true"/>.
            </para>
            </summary>
            <seealso cref="M:Quartz.IScheduler.Shutdown(System.Boolean)"/>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.TriggerStatus">
            <summary>
            Object representing a job or trigger key.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.TriggerStatus.#ctor(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Construct a new TriggerStatus with the status name and nextFireTime.
            </summary>
            <param name="status">The trigger's status</param>
            <param name="nextFireTime">The next time trigger will fire</param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.TriggerStatus.ToString">
            <summary>
            Return the string representation of the TriggerStatus.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.Core.JobRunShell">
            <summary> 
            JobRunShell instances are responsible for providing the 'safe' environment
            for <see cref="T:Quartz.IJob"/> s to run in, and for performing all of the work of
            executing the <see cref="T:Quartz.IJob"/>, catching ANY thrown exceptions, updating
            the <see cref="T:Quartz.ITrigger"/> with the <see cref="T:Quartz.IJob"/>'s completion code,
            etc.
            <para>
            A <see cref="T:Quartz.Core.JobRunShell"/> instance is created by a <see cref="T:Quartz.Core.IJobRunShellFactory"/>
            on behalf of the <see cref="T:Quartz.Core.QuartzSchedulerThread"/> which then runs the
            shell in a thread from the configured <see cref="T:System.Threading.ThreadPool"/> when the
            scheduler determines that a <see cref="T:Quartz.IJob"/> has been triggered.
            </para>
            </summary>
            <seealso cref="T:Quartz.Core.IJobRunShellFactory"/> 
            <seealso cref="T:Quartz.Core.QuartzSchedulerThread"/>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="T:Quartz.ITrigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.JobRunShell.#ctor(Quartz.IScheduler,Quartz.Spi.TriggerFiredBundle)">
            <summary>
            Create a JobRunShell instance with the given settings.
            </summary>
            <param name="scheduler">The <see cref="T:Quartz.IScheduler"/> instance that should be made
            available within the <see cref="T:Quartz.IJobExecutionContext"/>.</param>
            <param name="bndle"></param>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Initialize(Quartz.Core.QuartzScheduler)">
            <summary>
            Initializes the job execution context with given scheduler and bundle.
            </summary>
            <param name="sched">The scheduler.</param>
        </member>
        <member name="M:Quartz.Core.JobRunShell.RequestShutdown">
            <summary>
            Requests the Shutdown.
            </summary>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Run">
            <summary>
            This method has to be implemented in order that starting of the thread causes the object's
            run method to be called in that separately executing thread.
            </summary>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Begin">
            <summary>
            Runs begin procedures on this instance.
            </summary>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Complete(System.Boolean)">
            <summary>
            Completes the execution.
            </summary>
            <param name="successfulExecution">if set to <c>true</c> [successful execution].</param>
        </member>
        <member name="M:Quartz.Core.JobRunShell.Passivate">
            <summary>
            Passivates this instance.
            </summary>
        </member>
        <member name="M:Quartz.Core.JobRunShell.CompleteTriggerRetryLoop(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary>
            Completes the trigger retry loop.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="jobDetail">The job detail.</param>
            <param name="instCode">The inst code.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.JobRunShell.VetoedJobRetryLoop(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary>
            Vetoeds the job retry loop.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="jobDetail">The job detail.</param>
            <param name="instCode">The inst code.</param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.Matchers.KeyMatcher`1">
            <summary>
            Matches on the complete key being equal (both name and group). 
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.KeyMatcher`1.KeyEquals``1(``0)">
            <summary>
            Create a KeyMatcher that matches Keys that equal the given key. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.Matchers.AndMatcher`1">
            <summary>
            Matches using an AND operator on two Matcher operands. 
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.AndMatcher`1.And``1(Quartz.IMatcher{``0},Quartz.IMatcher{``0})">
            <summary>
            Create an AndMatcher that depends upon the result of both of the given matchers.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="leftOperand"></param>
            <param name="rightOperand"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Xml.XMLSchedulingDataProcessor">
            <summary> 
            Parses an XML file that declares Jobs and their schedules (Triggers).
            </summary>
            <remarks>
            <para>
            The xml document must conform to the format defined in "job_scheduling_data_2_0.xsd"
            </para>
            
            <para>
            After creating an instance of this class, you should call one of the <see cref="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFile"/>
            functions, after which you may call the ScheduledJobs()
            function to get a handle to the defined Jobs and Triggers, which can then be
            scheduled with the <see cref="T:Quartz.IScheduler"/>. Alternatively, you could call
            the <see cref="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs(Quartz.IScheduler)"/> function to do all of this
            in one step.
            </para>
            
            <para>
            The same instance can be used again and again, with the list of defined Jobs
            being cleared each time you call a <see cref="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFile"/> method,
            however a single instance is not thread-safe.
            </para>
            </remarks>
            <author><a href="mailto:bonhamcm@thirdeyeconsulting.com">Chris Bonham</a></author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.#ctor(Quartz.Spi.ITypeLoadHelper)">
            <summary>
            Constructor for XMLSchedulingDataProcessor.
            </summary>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFile">
            <summary> 
            Process the xml file in the default location (a file named
            "quartz_jobs.xml" in the current working directory).
            </summary>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFile(System.String)">
            <summary>
            Process the xml file named <see param="fileName" />.
            </summary>
            <param name="fileName">meta data file name.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFile(System.String,System.String)">
            <summary>
            Process the xmlfile named <see param="fileName" /> with the given system
            ID.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="systemId">The system id.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessStream(System.IO.Stream,System.String)">
            <summary>
            Process the xmlfile named <see param="fileName" /> with the given system
            ID.
            </summary>
            <param name="stream">The stream.</param>
            <param name="systemId">The system id.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs(Quartz.IScheduler,System.Boolean)">
            <summary>
            Process the xml file in the default location, and schedule all of the jobs defined within it.
            </summary>
            <remarks>Note that we will set overWriteExistingJobs after the default xml is parsed.</remarks>
            <param name="sched"></param>
            <param name="overWriteExistingJobs"></param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs(Quartz.IScheduler)">
            <summary> 
            Process the xml file in the default location, and schedule all of the
            jobs defined within it.
            </summary>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs(System.String,Quartz.IScheduler)">
            <summary>
            Process the xml file in the given location, and schedule all of the
            jobs defined within it.
            </summary>
            <param name="fileName">meta data file name.</param>
            <param name="sched">The scheduler.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ProcessFileAndScheduleJobs(System.String,System.String,Quartz.IScheduler)">
            <summary>
            Process the xml file in the given location, and schedule all of the
            jobs defined within it.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="systemId">The system id.</param>
            <param name="sched">The sched.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ScheduleJobs(Quartz.IScheduler)">
            <summary>
            Schedules the given sets of jobs and triggers.
            </summary>
            <param name="sched">The sched.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.AddValidationException(System.Xml.XmlException)">
            <summary>
            Adds a detected validation exception.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.ClearValidationExceptions">
            <summary>
            Resets the the number of detected validation exceptions.
            </summary>
        </member>
        <member name="M:Quartz.Xml.XMLSchedulingDataProcessor.MaybeThrowValidationException">
            <summary>
            Throws a ValidationException if the number of validationExceptions
            detected is greater than zero.
            </summary>
            <exception cref="T:Quartz.Xml.ValidationException"> 
            DTD validation exception.
            </exception>
        </member>
        <member name="P:Quartz.Xml.XMLSchedulingDataProcessor.OverWriteExistingData">
            <summary>
            Whether the existing scheduling data (with same identifiers) will be 
            overwritten. 
            </summary>
            <remarks>
            If false, and <code>IgnoreDuplicates</code> is not false, and jobs or 
            triggers with the same names already exist as those in the file, an 
            error will occur.
            </remarks> 
            <seealso cref="P:Quartz.Xml.XMLSchedulingDataProcessor.IgnoreDuplicates"/>
        </member>
        <member name="P:Quartz.Xml.XMLSchedulingDataProcessor.IgnoreDuplicates">
            <summary>
            If true (and <code>OverWriteExistingData</code> is false) then any 
            job/triggers encountered in this file that have names that already exist 
            in the scheduler will be ignored, and no error will be produced.
            </summary>
            <seealso cref="P:Quartz.Xml.XMLSchedulingDataProcessor.OverWriteExistingData"/>
        </member>
        <member name="T:Quartz.Xml.XMLSchedulingDataProcessor.Constants">
            <summary>
            Helper class to map constant names to their values.
            </summary>
        </member>
        <member name="T:Quartz.Xml.ValidationException">
            <summary> 
            Reports JobSchedulingDataProcessor validation exceptions.
            </summary>
            <author> <a href="mailto:bonhamcm@thirdeyeconsulting.com">Chris Bonham</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Xml.ValidationException.#ctor">
            <summary>
            Constructor for ValidationException.
            </summary>
        </member>
        <member name="M:Quartz.Xml.ValidationException.#ctor(System.String)">
            <summary>
            Constructor for ValidationException.
            </summary>
            <param name="message">exception message.</param>
        </member>
        <member name="M:Quartz.Xml.ValidationException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Constructor for ValidationException.
            </summary>
            <param name="errors">collection of validation exceptions.</param>
        </member>
        <member name="M:Quartz.Xml.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.SchedulerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="P:Quartz.Xml.ValidationException.ValidationExceptions">
            <summary>
            Gets the validation exceptions.
            </summary>
            <value>The validation exceptions.</value>
        </member>
        <member name="P:Quartz.Xml.ValidationException.Message">
            <summary>
            Returns the detail message string.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.JobStoreTX">
            <summary>
            <see cref="T:Quartz.Impl.AdoJobStore.JobStoreTX"/> is meant to be used in a standalone environment.
            Both commit and rollback will be handled by this class.
            </summary>
            <author><a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreTX.Initialize(Quartz.Spi.ITypeLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:Quartz.Spi.IJobStore"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
            <param name="loadHelper"></param>
            <param name="signaler"></param>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreTX.GetNonManagedTXConnection">
            <summary>
            For <see cref="T:Quartz.Impl.AdoJobStore.JobStoreTX"/>, the non-managed TX connection is just 
            the normal connection because it is not CMT.
            </summary> 
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetConnection"/>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.JobStoreTX.ExecuteInLock(System.String,System.Func{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder,System.Object})">
            <summary>
            Execute the given callback having optionally aquired the given lock.
            For <see cref="T:Quartz.Impl.AdoJobStore.JobStoreTX"/>, because it manages its own transactions
            and only has the one datasource, this is the same behavior as 
            <see cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Action{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder})"/>.
            </summary>
            <param name="lockName">
            The name of the lock to aquire, for example "TRIGGER_ACCESS". 
            If null, then no lock is aquired, but the lockCallback is still
            executed in a transaction.
            </param>
            <param name="txCallback">Callback to execute.</param>
            <returns></returns>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.ExecuteInNonManagedTXLock(System.String,System.Action{Quartz.Impl.AdoJobStore.ConnectionAndTransactionHolder})"/>
            <sssseealso crsef="JobStoreCMT.ExecuteInLock(string, ITransactionCallback)"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetNonManagedTXConnection"/>
            <seealso cref="M:Quartz.Impl.AdoJobStore.JobStoreSupport.GetConnection"/>
        </member>
        <member name="T:Quartz.Util.ObjectExtensions">
            <summary>
            Generic extension methods for objects.
            </summary>
        </member>
        <member name="M:Quartz.Util.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            Creates a deep copy of object by serializing to memory stream.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Quartz.UnableToInterruptJobException">
            <summary>
            An exception that is thrown to indicate that a call to 
            <see cref="M:Quartz.IInterruptableJob.Interrupt"/> failed without interrupting the Job.
            </summary>
            <seealso cref="T:Quartz.IInterruptableJob"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.UnableToInterruptJobException.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Quartz.UnableToInterruptJobException"/> with the given message.
            </summary>
        </member>
        <member name="M:Quartz.UnableToInterruptJobException.#ctor(System.Exception)">
            <summary>
            Create a <see cref="T:Quartz.UnableToInterruptJobException"/> with the given cause.
            </summary>
        </member>
        <member name="M:Quartz.UnableToInterruptJobException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.UnableToInterruptJobException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Quartz.Simpl.SystemPropertyInstanceIdGenerator">
            <summary>
            InstanceIdGenerator that will use a <see cref="F:Quartz.Simpl.SystemPropertyInstanceIdGenerator.SystemProperty"/> to configure the scheduler.
            If no value set for the property, a <see cref="T:Quartz.SchedulerException"/> is thrown.
            <author>Alex Snaps</author>
            </summary>
        </member>
        <member name="F:Quartz.Simpl.SystemPropertyInstanceIdGenerator.SystemProperty">
            <summary>
            System property to read the instanceId from.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SystemPropertyInstanceIdGenerator.GenerateInstanceId">
            <summary>
            Returns the cluster wide value for this scheduler instance's id, based on a system property.
            </summary>
        </member>
        <member name="T:Quartz.Listener.BroadcastTriggerListener">
            <summary>
            Holds a List of references to TriggerListener instances and broadcasts all
            events to them (in order).
            </summary>
            <remarks>
            <para>The broadcasting behavior of this listener to delegate listeners may be
            more convenient than registering all of the listeners directly with the
            Scheduler, and provides the flexibility of easily changing which listeners
            get notified.</para>
            </remarks>
            <seealso cref="M:Quartz.Listener.BroadcastTriggerListener.AddListener(Quartz.ITriggerListener)"/>
            <seealso cref="M:Quartz.Listener.BroadcastTriggerListener.RemoveListener(Quartz.ITriggerListener)"/>
            <seealso cref="M:Quartz.Listener.BroadcastTriggerListener.RemoveListener(System.String)"/>
            <author>James House (jhouse AT revolition DOT net)</author>
        </member>
        <member name="M:Quartz.Listener.BroadcastTriggerListener.#ctor(System.String)">
            <summary>
            Construct an instance with the given name.
            </summary>
            <remarks>
            (Remember to add some delegate listeners!)
            </remarks>
            <param name="name">the name of this instance</param>
        </member>
        <member name="M:Quartz.Listener.BroadcastTriggerListener.#ctor(System.String,System.Collections.Generic.IList{Quartz.ITriggerListener})">
            <summary>
            Construct an instance with the given name, and List of listeners.
            </summary>
            <remarks>
            </remarks>
            <param name="name">the name of this instance</param>
            <param name="listeners">the initial List of TriggerListeners to broadcast to.</param>
        </member>
        <member name="T:Quartz.MisfireInstruction">
            <summary>
             Misfire instructions.
            </summary>
             <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.MisfireInstruction.InstructionNotSet">
            <summary>
            Instruction not set (yet).
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.SmartPolicy">
            <summary>
            Use smart policy.
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that the
            <code>Trigger</code> will never be evaluated for a misfire situation,
            and that the scheduler will simply try to fire it as soon as it can,
            and then update the Trigger as if it had fired at the proper time.
            </summary>
            <remarks>
            NOTE: if a trigger uses this instruction, and it has missed 
            several of its scheduled firings, then several rapid firings may occur 
            as the trigger attempt to catch back up to where it would have been. 
            For example, a SimpleTrigger that fires every 15 seconds which has 
            misfired for 5 minutes will fire 20 times once it gets the chance to 
            fire.
            </remarks>
        </member>
        <member name="T:Quartz.MisfireInstruction.SimpleTrigger">
            <summary>
            Misfire policy settings for SimpleTrigger.
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.SimpleTrigger.FireNow">
            <summary> 
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ISimpleTrigger"/> wants to be fired
            now by <see cref="T:Quartz.IScheduler"/>.
            <para>
            <i>NOTE:</i> This instruction should typically only be used for
            'one-shot' (non-repeating) Triggers. If it is used on a trigger with a
            repeat count &gt; 0 then it is equivalent to the instruction 
            <see cref="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithRemainingRepeatCount"/>.
            </para>
            </summary>		
        </member>
        <member name="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithExistingRepeatCount">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ISimpleTrigger"/> wants to be
            re-scheduled to 'now' (even if the associated <see cref="T:Quartz.ICalendar"/>
            excludes 'now') with the repeat count left as-is.   This does obey the
            <see cref="T:Quartz.ITrigger"/> end-time however, so if 'now' is after the
            end-time the <see cref="T:Quartz.ITrigger"/> will not fire again.
            </summary>
            <remarks>
            <para>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with (this
            is only an issue if you for some reason wanted to be able to tell what
            the original values were at some later time).
            </para>
            </remarks>
        </member>
        <member name="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNowWithRemainingRepeatCount">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ISimpleTrigger"/> wants to be
            re-scheduled to 'now' (even if the associated <see cref="T:Quartz.ICalendar"/>
            excludes 'now') with the repeat count set to what it would be, if it had
            not missed any firings. This does obey the <see cref="T:Quartz.ITrigger"/> end-time 
            however, so if 'now' is after the end-time the <see cref="T:Quartz.ITrigger"/> will 
            not fire again.
            
            <para>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with.
            Instead, the repeat count on the trigger will be changed to whatever
            the remaining repeat count is (this is only an issue if you for some
            reason wanted to be able to tell what the original values were at some
            later time).
            </para>
            
            <para>
            <i>NOTE:</i> This instruction could cause the <see cref="T:Quartz.ITrigger"/>
            to go to the 'COMPLETE' state after firing 'now', if all the
            repeat-fire-times where missed.
            </para>
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNextWithRemainingCount">
            <summary> 
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ISimpleTrigger"/> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <see cref="T:Quartz.ICalendar"/>, and with the
            repeat count set to what it would be, if it had not missed any firings.
            </summary>
            <remarks>
            <i>NOTE/WARNING:</i> This instruction could cause the <see cref="T:Quartz.ITrigger"/>
            to go directly to the 'COMPLETE' state if all fire-times where missed.
            </remarks>
        </member>
        <member name="F:Quartz.MisfireInstruction.SimpleTrigger.RescheduleNextWithExistingCount">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ISimpleTrigger"/> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <see cref="T:Quartz.ICalendar"/>, and with the
            repeat count left unchanged.
            </summary>
            <remarks>
            <para>
            <i>NOTE/WARNING:</i> This instruction could cause the <see cref="T:Quartz.ITrigger"/>
            to go directly to the 'COMPLETE' state if all the end-time of the trigger 
            has arrived.
            </para>
            </remarks>
        </member>
        <member name="T:Quartz.MisfireInstruction.CronTrigger">
            <summary>
            misfire instructions for CronTrigger
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.CronTrigger.FireOnceNow">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ICronTrigger"/> wants to be fired now
            by <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.CronTrigger.DoNothing">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ICronTrigger"/> wants to have it's
            next-fire-time updated to the next time in the schedule after the
            current time (taking into account any associated <see cref="T:Quartz.ICalendar"/>,
            but it does not want to be fired now.
            </summary>
        </member>
        <member name="T:Quartz.MisfireInstruction.NthIncludedDayTrigger">
            <summary>
            misfire instructions for NthIncludedDayTrigger
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.NthIncludedDayTrigger.FireOnceNow">
            <summary> 
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire situation, the
            <see cref="T:Quartz.MisfireInstruction.NthIncludedDayTrigger"/> wants to be fired now by the 
            <see cref="T:Quartz.IScheduler"/>
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.NthIncludedDayTrigger.DoNothing">
            <summary> 
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire situation, the
            <see cref="T:Quartz.MisfireInstruction.NthIncludedDayTrigger"/> wants to have 
            nextFireTime updated to the next time in the schedule after
            the current time, but it does not want to be fired now.
            </summary>
        </member>
        <member name="T:Quartz.MisfireInstruction.CalendarIntervalTrigger">
            <summary>
            Misfire instructions for DateIntervalTrigger
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.FireOnceNow">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ICalendarIntervalTrigger"/> wants to be 
            fired now by <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.DoNothing">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.ICalendarIntervalTrigger"/> wants to have it's
            next-fire-time updated to the next time in the schedule after the
            current time (taking into account any associated <see cref="T:Quartz.ICalendar"/>,
            but it does not want to be fired now.
            </summary>
        </member>
        <member name="T:Quartz.MisfireInstruction.DailyTimeIntervalTrigger">
            <summary>
            Misfire instructions for DailyTimeIntervalTrigger
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.FireOnceNow">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.IDailyTimeIntervalTrigger"/> wants to be
            fired now by <see cref="T:Quartz.IScheduler"/>.
            </summary>
        </member>
        <member name="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.DoNothing">
            <summary>
            Instructs the <see cref="T:Quartz.IScheduler"/> that upon a mis-fire
            situation, the <see cref="T:Quartz.MisfireInstruction.DailyTimeIntervalTrigger"/> wants to have it's
            next-fire-time updated to the next time in the schedule after the
            current time (taking into account any associated <see cref="T:Quartz.ICalendar"/>,
            but it does not want to be fired now.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.RAMJobStore">
            <summary>
            This class implements a <see cref="T:Quartz.Spi.IJobStore"/> that
            utilizes RAM as its storage device.
            <para>
            As you should know, the ramification of this is that access is extrememly
            fast, but the data is completely volatile - therefore this <see cref="T:Quartz.Spi.IJobStore"/>
            should not be used if true persistence between program shutdowns is
            required.
            </para>
            </summary>
            <author>James House</author>
            <author>Sharada Jambula</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Simpl.RAMJobStore"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetFiredTriggerRecordId">
            <summary>
            Gets the fired trigger record id.
            </summary>
            <returns>The fired trigger record id.</returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.Initialize(Quartz.Spi.ITypeLoadHelper,Quartz.Spi.ISchedulerSignaler)">
            <summary>
            Called by the QuartzScheduler before the <see cref="T:Quartz.Spi.IJobStore"/> is
            used, in order to give the it a chance to Initialize.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.SchedulerStarted">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            the scheduler has started.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.SchedulerPaused">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has been paused.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.SchedulerResumed">
            <summary>
            Called by the QuartzScheduler to inform the <code>JobStore</code> that
            the scheduler has resumed after being paused.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.Shutdown">
            <summary>
            Called by the QuartzScheduler to inform the <see cref="T:Quartz.Spi.IJobStore"/> that
            it should free up all of it's resources because the scheduler is
            shutting down.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ClearAllSchedulingData">
            <summary>
            Clears (deletes!) all scheduling data - all <see cref="T:Quartz.IJob"/>s, <see cref="T:Quartz.ITrigger"/>s
            <see cref="T:Quartz.ICalendar"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreJobAndTrigger(Quartz.IJobDetail,Quartz.Spi.IOperableTrigger)">
            <summary>
            Store the given <see cref="T:Quartz.IJobDetail"/> and <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="newJob">The <see cref="T:Quartz.IJobDetail"/> to be stored.</param>
            <param name="newTrigger">The <see cref="T:Quartz.ITrigger"/> to be stored.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.IsJobGroupPaused(System.String)">
            <summary>
            Returns true if the given job group is paused.
            </summary>
            <param name="groupName">Job group name</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.IsTriggerGroupPaused(System.String)">
            <summary>
            returns true if the given TriggerGroup is paused.
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreJob(Quartz.IJobDetail,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.IJob"/>.
            </summary>
            <param name="newJob">The <see cref="T:Quartz.IJob"/> to be stored.</param>
            <param name="replaceExisting">If <see langword="true"/>, any <see cref="T:Quartz.IJob"/> existing in the
            <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group should be
            over-written.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveJob(Quartz.JobKey)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.IJob"/> with the given
            name, and any <see cref="T:Quartz.ITrigger"/> s that reference
            it.
            </summary>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.IJob"/> with the given name and
            group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveTrigger(Quartz.TriggerKey)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
            given name.
            </summary>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreTrigger(Quartz.Spi.IOperableTrigger,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="newTrigger">The <see cref="T:Quartz.ITrigger"/> to be stored.</param>
            <param name="replaceExisting">If <see langword="true"/>, any <see cref="T:Quartz.ITrigger"/> existing in
            the <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group should
            be over-written.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveTrigger(Quartz.TriggerKey,System.Boolean)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ITrigger"/> with the
            given name.
            
            </summary>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ITrigger"/> with the given
            name and group was found and removed from the store.
            </returns>
            <param name="key">The <see cref="T:Quartz.ITrigger"/> to be removed.</param>
            <param name="removeOrphanedJob">Whether to delete orpahaned job details from scheduler if job becomes orphaned from removing the trigger.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ReplaceTrigger(Quartz.TriggerKey,Quartz.Spi.IOperableTrigger)">
            <summary>
            Replaces the trigger.
            </summary>
            <param name="triggerKey">The <see cref="T:Quartz.TriggerKey"/> of the <see cref="T:Quartz.ITrigger"/> to be replaced.</param>
            <param name="newTrigger">The new trigger.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveJob(Quartz.JobKey)">
            <summary>
            Retrieve the <see cref="T:Quartz.IJobDetail"/> for the given
            <see cref="T:Quartz.IJob"/>.
            </summary>
            <returns>
            The desired <see cref="T:Quartz.IJob"/>, or null if there is no match.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveTrigger(Quartz.TriggerKey)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <returns>
            The desired <see cref="T:Quartz.ITrigger"/>, or null if there is no match.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.CheckExists(Quartz.JobKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.IJob"/> with the given identifier already 
            exists within the scheduler.
            </summary>
            <param name="jobKey">the identifier to check for</param>
            <returns>true if a Job exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.CheckExists(Quartz.TriggerKey)">
            <summary>
            Determine whether a <see cref="T:Quartz.ITrigger"/> with the given identifier already 
            exists within the scheduler.
            </summary>
            <param name="triggerKey">triggerKey the identifier to check for</param>
            <returns>true if a Trigger exists with the given identifier</returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerState(Quartz.TriggerKey)">
            <summary>
            Get the current state of the identified <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <seealso cref="F:Quartz.TriggerState.Normal"/>
            <seealso cref="F:Quartz.TriggerState.Paused"/>
            <seealso cref="F:Quartz.TriggerState.Complete"/>
            <seealso cref="F:Quartz.TriggerState.Error"/>
            <seealso cref="F:Quartz.TriggerState.Blocked"/>
            <seealso cref="F:Quartz.TriggerState.None"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.StoreCalendar(System.String,Quartz.ICalendar,System.Boolean,System.Boolean)">
            <summary>
            Store the given <see cref="T:Quartz.ICalendar"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="calendar">The <see cref="T:Quartz.ICalendar"/> to be stored.</param>
            <param name="replaceExisting">If <see langword="true"/>, any <see cref="T:Quartz.ICalendar"/> existing
            in the <see cref="T:Quartz.Spi.IJobStore"/> with the same name and group
            should be over-written.</param>
            <param name="updateTriggers">If <see langword="true"/>, any <see cref="T:Quartz.ITrigger"/>s existing
            in the <see cref="T:Quartz.Spi.IJobStore"/> that reference an existing
            Calendar with the same name with have their next fire time
            re-computed with the new <see cref="T:Quartz.ICalendar"/>.</param>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RemoveCalendar(System.String)">
            <summary>
            Remove (delete) the <see cref="T:Quartz.ICalendar"/> with the
            given name.
            <para>
            If removal of the <see cref="T:Quartz.ICalendar"/> would result in
            <see cref="T:Quartz.ITrigger"/>s pointing to non-existent calendars, then a
            <see cref="T:Quartz.JobPersistenceException"/> will be thrown.</para>
            </summary>
            <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be removed.</param>
            <returns>
            	<see langword="true"/> if a <see cref="T:Quartz.ICalendar"/> with the given name
            was found and removed from the store.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.RetrieveCalendar(System.String)">
            <summary>
            Retrieve the given <see cref="T:Quartz.ITrigger"/>.
            </summary>
            <param name="calName">The name of the <see cref="T:Quartz.ICalendar"/> to be retrieved.</param>
            <returns>
            The desired <see cref="T:Quartz.ICalendar"/>, or null if there is no match.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfJobs">
            <summary>
            Get the number of <see cref="T:Quartz.IJobDetail"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfTriggers">
            <summary>
            Get the number of <see cref="T:Quartz.ITrigger"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetNumberOfCalendars">
            <summary>
            Get the number of <see cref="T:Quartz.ICalendar"/> s that are
            stored in the <see cref="T:Quartz.Spi.IJobStore"/>.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetJobKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/> s that
            match the given group matcher.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetCalendarNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ICalendar"/> s
            in the <see cref="T:Quartz.Spi.IJobStore"/>.
            <para>
            If there are no ICalendars in the given group name, the result should be
            a zero-length array (not <see langword="null"/>).
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerKeys(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/> s
            that have the given group name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetJobGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.IJob"/>
            groups.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerGroupNames">
            <summary>
            Get the names of all of the <see cref="T:Quartz.ITrigger"/> groups.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggersForJob(Quartz.JobKey)">
            <summary>
            Get all of the Triggers that are associated to the given Job.
            <para>
            If there are no matches, a zero-length array should be returned.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerWrappersForJob(Quartz.JobKey)">
            <summary>
            Gets the trigger wrappers for job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetTriggerWrappersForCalendar(System.String)">
            <summary>
            Gets the trigger wrappers for calendar.
            </summary>
            <param name="calName">Name of the cal.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseTrigger(Quartz.TriggerKey)">
            <summary> 
            Pause the <see cref="T:Quartz.ITrigger"/> with the given name.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.ITrigger"/>s in the given group.
            <para>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new triggers that are added to the group while the group is
            paused.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseJob(Quartz.JobKey)">
            <summary> 
            Pause the <see cref="T:Quartz.IJobDetail"/> with the given
            name - by pausing all of its current <see cref="T:Quartz.ITrigger"/>s.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Pause all of the <see cref="T:Quartz.IJobDetail"/>s in the
            given group - by pausing all of their <see cref="T:Quartz.ITrigger"/>s.
            <para>
            The JobStore should "remember" that the group is paused, and impose the
            pause on any new jobs that are added to the group while the group is
            paused.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeTrigger(Quartz.TriggerKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.ITrigger"/> with the given key.
            </summary>
            <remarks>
            If the <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </remarks>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.ITrigger"/>s in the
            given group.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeJob(Quartz.JobKey)">
            <summary>
            Resume (un-pause) the <see cref="T:Quartz.IJobDetail"/> with
            the given name.
            <para>
            If any of the <see cref="T:Quartz.IJob"/>'s<see cref="T:Quartz.ITrigger"/> s missed one
            or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s misfire
            instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeJobs(Quartz.Impl.Matchers.GroupMatcher{Quartz.JobKey})">
            <summary>
            Resume (un-pause) all of the <see cref="T:Quartz.IJobDetail"/>s
            in the given group.
            <para>
            If any of the <see cref="T:Quartz.IJob"/> s had <see cref="T:Quartz.ITrigger"/> s that
            missed one or more fire-times, then the <see cref="T:Quartz.ITrigger"/>'s
            misfire instruction will be applied.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PauseAll">
            <summary>
            Pause all triggers - equivalent of calling <see cref="M:Quartz.Simpl.RAMJobStore.PauseTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every group.
            <para>
            When <see cref="M:Quartz.Simpl.RAMJobStore.ResumeAll"/> is called (to un-pause), trigger misfire
            instructions WILL be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Simpl.RAMJobStore.ResumeAll"/> 
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ResumeAll">
            <summary>
            Resume (un-pause) all triggers - equivalent of calling <see cref="M:Quartz.Simpl.RAMJobStore.ResumeTriggers(Quartz.Impl.Matchers.GroupMatcher{Quartz.TriggerKey})"/>
            on every trigger group and setting all job groups unpaused /&gt;.
            <para>
            If any <see cref="T:Quartz.ITrigger"/> missed one or more fire-times, then the
            <see cref="T:Quartz.ITrigger"/>'s misfire instruction will be applied.
            </para>
            </summary>
            <seealso cref="M:Quartz.Simpl.RAMJobStore.PauseAll"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ApplyMisfire(Quartz.Simpl.TriggerWrapper)">
            <summary>
            Applies the misfire.
            </summary>
            <param name="tw">The trigger wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.AcquireNextTriggers(System.DateTimeOffset,System.Int32,System.TimeSpan)">
            <summary>
            Get a handle to the next trigger to be fired, and mark it as 'reserved'
            by the calling scheduler.
            </summary>
            <seealso cref="T:Quartz.ITrigger"/>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.ReleaseAcquiredTrigger(Quartz.Spi.IOperableTrigger)">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler no longer plans to
            fire the given <see cref="T:Quartz.ITrigger"/>, that it had previously acquired
            (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.TriggersFired(System.Collections.Generic.IList{Quartz.Spi.IOperableTrigger})">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler is now firing the
            given <see cref="T:Quartz.ITrigger"/> (executing its associated <see cref="T:Quartz.IJob"/>),
            that it had previously acquired (reserved).
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.TriggeredJobComplete(Quartz.Spi.IOperableTrigger,Quartz.IJobDetail,Quartz.SchedulerInstruction)">
            <summary> 
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> that the scheduler has completed the
            firing of the given <see cref="T:Quartz.ITrigger"/> (and the execution its
            associated <see cref="T:Quartz.IJob"/>), and that the <see cref="T:Quartz.JobDataMap"/>
            in the given <see cref="T:Quartz.IJobDetail"/> should be updated if the <see cref="T:Quartz.IJob"/>
            is stateful.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.SetAllTriggersOfJobToState(Quartz.JobKey,Quartz.Simpl.InternalTriggerState)">
            <summary>
            Sets the state of all triggers of job to specified state.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.PeekTriggers">
            <summary>
            Peeks the triggers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Simpl.RAMJobStore.GetPausedTriggerGroups">
            <seealso cref="M:Quartz.Spi.IJobStore.GetPausedTriggerGroups"/>
        </member>
        <member name="P:Quartz.Simpl.RAMJobStore.MisfireThreshold">
            <summary> 
            The time span by which a trigger must have missed its
            next-fire-time, in order for it to be considered "misfired" and thus
            have its misfire instruction applied.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RAMJobStore.SupportsPersistence">
            <summary>
            Returns whether this instance supports persistence.
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:Quartz.Simpl.RAMJobStore.InstanceId">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> of the Scheduler instance's Id, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.RAMJobStore.InstanceName">
            <summary>
            Inform the <see cref="T:Quartz.Spi.IJobStore"/> of the Scheduler instance's name, 
            prior to initialize being invoked.
            </summary>
        </member>
        <member name="T:Quartz.Simpl.TriggerWrapperComparator">
            <summary>
            Comparer for trigger wrappers.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.TriggerWrapperComparator.Equals(Quartz.Simpl.TriggerWrapperComparator)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Quartz.Simpl.TriggerWrapperComparator.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Quartz.Simpl.InternalTriggerState">
            <summary>
            Possible internal trigger states 
            in RAMJobStore
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Waiting">
            <summary>
            Waiting 
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Acquired">
            <summary>
            Acquired
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Paused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Blocked">
            <summary>
            Blocked
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.PausedAndBlocked">
            <summary>
            Paused and Blocked
            </summary>
        </member>
        <member name="F:Quartz.Simpl.InternalTriggerState.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Quartz.Simpl.TriggerWrapper">
            <summary>
            Helper wrapper class
            </summary>
        </member>
        <member name="F:Quartz.Simpl.TriggerWrapper.key">
            <summary>
            The key used
            </summary>
        </member>
        <member name="F:Quartz.Simpl.TriggerWrapper.jobKey">
            <summary>
            Job's key
            </summary>
        </member>
        <member name="F:Quartz.Simpl.TriggerWrapper.trigger">
            <summary>
            The trigger
            </summary>
        </member>
        <member name="F:Quartz.Simpl.TriggerWrapper.state">
            <summary>
            Current state
            </summary>
        </member>
        <member name="M:Quartz.Simpl.TriggerWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Quartz.Simpl.TriggerWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Quartz.Simpl.DefaultObjectSerializer">
            <summary>
            Default object serialization strategy that uses <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> 
            under the hood.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Simpl.DefaultObjectSerializer.Serialize``1(``0)">
            <summary>
            Serializes given object as bytes 
            that can be stored to permanent stores.
            </summary>
            <param name="obj">Object to serialize.</param>
        </member>
        <member name="M:Quartz.Simpl.DefaultObjectSerializer.DeSerialize``1(System.Byte[])">
            <summary>
            Deserializes object from byte array presentation.
            </summary>
            <param name="data">Data to deserialize object from.</param>
        </member>
        <member name="T:Quartz.JobKey">
            <summary>
            Uniquely identifies a <see cref="T:Quartz.IJobDetail"/>.
            </summary>
            <remarks>
            <para>Keys are composed of both a name and group, and the name must be unique
            within the group.  If only a group is specified then the default group
            name will be used.</para> 
            
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <see cref="T:Quartz.TriggerBuilder"/>, <see cref="T:Quartz.JobBuilder"/>, 
            <see cref="T:Quartz.DateBuilder"/>, <see cref="T:Quartz.JobKey"/>, <see cref="T:Quartz.TriggerKey"/> 
            and the various <see cref="T:Quartz.IScheduleBuilder"/> implementations.</para>
            
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
                    JobDetail job = NewJob(typepof(MyJob))
                        .WithIdentity("myJob")
                        .Build();
                        
                    Trigger trigger = NewTrigger() 
                        .WithIdentity(TriggerKey("myTrigger", "myTriggerGroup"))
                        .WithSchedule(SimpleSchedule()
                            .WithIntervalInHours(1)
                            .RepeatForever())
                        .StartAt(FutureDate(10, MINUTES))
                        .Build();
                    
                    scheduler.ScheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.IJob"/>
            <seealso cref="F:Quartz.Util.Key`1.DefaultGroup"/>
        </member>
        <member name="T:Quartz.Util.Key`1">
            <summary>
            Object representing a job or trigger key.
            </summary>
            <author>  <a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.Util.Key`1.DefaultGroup">
            <summary>
            The default group for scheduling entities, with the value "DEFAULT".
            </summary>
        </member>
        <member name="M:Quartz.Util.Key`1.#ctor(System.String,System.String)">
            <summary> 
            Construct a new key with the given name and group.
            </summary>
            <param name="name">the name</param>
            <param name="group">the group</param>
        </member>
        <member name="M:Quartz.Util.Key`1.ToString">
            <summary> <para>
            Return the string representation of the key. The format will be:
            &lt;group&gt;.&lt;name&gt;.
            </para>
            
            </summary>
            <returns> the string representation of the key
            </returns>
        </member>
        <member name="P:Quartz.Util.Key`1.Name">
            <summary>
            Get the name portion of the key.
            </summary>
            <returns> the name
            </returns>
        </member>
        <member name="P:Quartz.Util.Key`1.Group">
            <summary> <para>
            Get the group portion of the key.
            </para>
            
            </summary>
            <returns> the group
            </returns>
        </member>
        <member name="T:Quartz.Impl.StdJobRunShellFactory">
            <summary> 
            Responsible for creating the instances of <see cref="T:Quartz.Core.JobRunShell"/>
            to be used within the <see cref="T:Quartz.Core.QuartzScheduler"/> instance.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Core.IJobRunShellFactory">
            <summary>
            Responsible for creating the instances of <see cref="T:Quartz.Core.JobRunShell"/>
            to be used within the <see cref="T:Quartz.Core.QuartzScheduler"/> instance.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.IJobRunShellFactory.Initialize(Quartz.IScheduler)">
            <summary>
            Initialize the factory, providing a handle to the <see cref="T:Quartz.IScheduler"/>
            that should be made available within the <see cref="T:Quartz.Core.JobRunShell"/> and 
            the <code>JobExecutionContext</code> s within it.
            </summary>
        </member>
        <member name="M:Quartz.Core.IJobRunShellFactory.CreateJobRunShell(Quartz.Spi.TriggerFiredBundle)">
            <summary>
            Called by the <see cref="T:Quartz.Core.QuartzSchedulerThread"/>
            to obtain instances of <see cref="T:Quartz.Core.JobRunShell"/>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdJobRunShellFactory.Initialize(Quartz.IScheduler)">
            <summary>
            Initialize the factory, providing a handle to the <see cref="T:Quartz.IScheduler"/>
            that should be made available within the <see cref="T:Quartz.Core.JobRunShell"/> and
            the <see cref="T:Quartz.IJobExecutionContext"/> s within it.
            </summary>
        </member>
        <member name="M:Quartz.Impl.StdJobRunShellFactory.CreateJobRunShell(Quartz.Spi.TriggerFiredBundle)">
            <summary>
            Called by the <see cref="T:Quartz.Core.QuartzSchedulerThread"/> to obtain instances of 
            <see cref="T:Quartz.Core.JobRunShell"/>.
            </summary>
        </member>
        <member name="T:Quartz.Impl.Calendar.DailyCalendar">
            <summary>
            This implementation of the Calendar excludes (or includes - see below) a
            specified time range each day. 
            </summary>
            <remarks>
            For example, you could use this calendar to
            exclude business hours (8AM - 5PM) every day. Each <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/>
            only allows a single time range to be specified, and that time range may not
            * cross daily boundaries (i.e. you cannot specify a time range from 8PM - 5AM).
            If the property <see cref="F:Quartz.Impl.Calendar.DailyCalendar.invertTimeRange"/> is <see langword="false"/> (default),
            the time range defines a range of times in which triggers are not allowed to
            * fire. If <see cref="F:Quartz.Impl.Calendar.DailyCalendar.invertTimeRange"/> is <see langword="true"/>, the time range
            is inverted: that is, all times <i>outside</i> the defined time range
            are excluded.
            <para>
            Note when using <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/>, it behaves on the same principals
            as, for example, WeeklyCalendar defines a set of days that are
            excluded <i>every week</i>. Likewise, <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> defines a
            set of times that are excluded <i>every day</i>.
            </para>
            </remarks>
            <author>Mike Funk</author>
            <author>Aaron Craven</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified strings and no baseCalendar. 
            <param name="rangeStartingTime"/> and <param name="rangeEndingTime"/>
            must be in the format "HH:MM[:SS[:mmm]]" where:
            <ul>
                <li>
                    HH is the hour of the specified time. The hour should be
                     specified using military (24-hour) time and must be in the range
                     0 to 23.
                </li>
                <li>
                    MM is the minute of the specified time and must be in the range
                    0 to 59.
                </li>
                <li>
                    SS is the second of the specified time and must be in the range
                    0 to 59.
                </li>
                <li>
                    mmm is the millisecond of the specified time and must be in the
                    range 0 to 999.
                </li>
                <li>items enclosed in brackets ('[', ']') are optional.</li>
                <li>
                    The time range starting time must be before the time range ending
                    time. Note this means that a time range may not cross daily 
                    boundaries (10PM - 2AM)
                </li>  
            </ul>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(Quartz.ICalendar,System.String,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified strings and the specified baseCalendar.
            <param name="rangeStartingTime"/> and <param name="rangeEndingTime"/>
            must be in the format "HH:MM[:SS[:mmm]]" where:
            <ul>
            		<li>
            HH is the hour of the specified time. The hour should be
            specified using military (24-hour) time and must be in the range
            0 to 23.
            </li>
            		<li>
            MM is the minute of the specified time and must be in the range
            0 to 59.
            </li>
            		<li>
            SS is the second of the specified time and must be in the range
            0 to 59.
            </li>
            		<li>
            mmm is the millisecond of the specified time and must be in the
            range 0 to 999.
            </li>
            		<li>
            items enclosed in brackets ('[', ']') are optional.
            </li>
            		<li>
            The time range starting time must be before the time range ending
            time. Note this means that a time range may not cross daily
            boundaries (10PM - 2AM)
            </li>
            	</ul>
            </summary>
            <param name="baseCalendar">The base calendar for this calendar instance see BaseCalendar for more
            information on base calendar functionality.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified values and no baseCalendar. Values are subject to
            the following validations:
            <ul>
                <li>
                    Hours must be in the range 0-23 and are expressed using military
            	    (24-hour) time.
                </li>
            	<li>Minutes must be in the range 0-59</li>
            	<li>Seconds must be in the range 0-59</li>
            	<li>Milliseconds must be in the range 0-999</li>
            	<li>
                    The time range starting time must be before the time range ending
            	    time. Note this means that a time range may not cross daily 
            	    boundaries (10PM - 2AM)
                </li>  
            </ul>
            </summary>
            <param name="rangeStartingHourOfDay">The range starting hour of day.</param>
            <param name="rangeStartingMinute">The range starting minute.</param>
            <param name="rangeStartingSecond">The range starting second.</param>
            <param name="rangeStartingMillis">The range starting millis.</param>
            <param name="rangeEndingHourOfDay">The range ending hour of day.</param>
            <param name="rangeEndingMinute">The range ending minute.</param>
            <param name="rangeEndingSecond">The range ending second.</param>
            <param name="rangeEndingMillis">The range ending millis.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(Quartz.ICalendar,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified values and the specified <param name="baseCalendar"/>. Values are
            subject to the following validations:
            <ul>
            		<li>
            Hours must be in the range 0-23 and are expressed using military
            (24-hour) time.
            </li>
            		<li>Minutes must be in the range 0-59</li>
            		<li>Seconds must be in the range 0-59</li>
            		<li>Milliseconds must be in the range 0-999</li>
            		<li>
            The time range starting time must be before the time range ending
            time. Note this means that a time range may not cross daily
            boundaries (10PM - 2AM)
            </li>
            	</ul>
            </summary>
            <param name="rangeStartingHourOfDay">The range starting hour of day.</param>
            <param name="rangeStartingMinute">The range starting minute.</param>
            <param name="rangeStartingSecond">The range starting second.</param>
            <param name="rangeStartingMillis">The range starting millis.</param>
            <param name="rangeEndingHourOfDay">The range ending hour of day.</param>
            <param name="rangeEndingMinute">The range ending minute.</param>
            <param name="rangeEndingSecond">The range ending second.</param>
            <param name="rangeEndingMillis">The range ending millis.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified <see cref="T:System.DateTime"/>s and no 
            baseCalendar. The Calendars are subject to the following
            considerations:
            <ul>
                <li>
                    Only the time-of-day fields of the specified Calendars will be
            	    used (the date fields will be ignored)
                </li>
            	<li>
                    The starting time must be before the ending time of the defined
            	    time range. Note this means that a time range may not cross
            	    daily boundaries (10PM - 2AM). <i>(because only time fields are
            	    are used, it is possible for two Calendars to represent a valid
            	    time range and 
            	    <c>rangeStartingCalendar.after(rangeEndingCalendar) ==  true</c>)
            		</i>
                </li>  
            </ul> 
            </summary>
            <param name="rangeStartingCalendarUtc">The range starting calendar.</param>
            <param name="rangeEndingCalendarUtc">The range ending calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(Quartz.ICalendar,System.DateTime,System.DateTime)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified <see cref="T:System.DateTime"/>s and the specified
            <param name="baseCalendar"/>. The Calendars are subject to the following
            considerations:
            <ul>
            		<li>
            Only the time-of-day fields of the specified Calendars will be
            used (the date fields will be ignored)
            </li>
            		<li>
            The starting time must be before the ending time of the defined
            time range. Note this means that a time range may not cross
            daily boundaries (10PM - 2AM). <i>(because only time fields are
            are used, it is possible for two Calendars to represent a valid
            time range and
            <c>rangeStartingCalendarUtc &gt; rangeEndingCalendarUtc == true</c>)</i>
            		</li>
            	</ul>
            </summary>
            <param name="rangeStartingCalendarUtc">The range starting calendar.</param>
            <param name="rangeEndingCalendarUtc">The range ending calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(System.Int64,System.Int64)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified values and no baseCalendar. The values are 
            subject to the following considerations:
            <ul>
                <li>
                    Only the time-of-day portion of the specified values will be
            	    used
                </li>
            	<li>
                    The starting time must be before the ending time of the defined
            	    time range. Note this means that a time range may not cross
            	    daily boundaries (10PM - 2AM). <i>(because only time value are
            	    are used, it is possible for the two values to represent a valid
            	    time range and <c>rangeStartingTime &gt; rangeEndingTime</c>)</i>
                </li>  
            </ul> 
            </summary>
            <param name="rangeStartingTimeInMillis">The range starting time in millis.</param>
            <param name="rangeEndingTimeInMillis">The range ending time in millis.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(Quartz.ICalendar,System.Int64,System.Int64)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> with a time range defined by the
            specified values and the specified <param name="baseCalendar"/>. The values
            are subject to the following considerations:
            <ul>
            		<li>
            Only the time-of-day portion of the specified values will be
            used
            </li>
            		<li>
            The starting time must be before the ending time of the defined
            time range. Note this means that a time range may not cross
            daily boundaries (10PM - 2AM). <i>(because only time value are
            are used, it is possible for the two values to represent a valid
            time range and <c>rangeStartingTime &gt; rangeEndingTime</c>)</i>
            		</li>
            	</ul>
            </summary>
            <param name="rangeStartingTimeInMillis">The range starting time in millis.</param>
            <param name="rangeEndingTimeInMillis">The range ending time in millis.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given time  is 'included' by the
            Calendar.
            </summary>
            <param name="timeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return 0 if all days are excluded.
            </summary>
            <param name="timeUtc"></param>
            <returns></returns>
            <seealso cref="M:Quartz.ICalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)"/>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.GetTimeRangeStartingTimeUtc(System.DateTimeOffset)">
            <summary>
            Returns the start time of the time range of the day 
            specified in <param name="timeUtc" />.
            </summary>
            <returns>
                a DateTime representing the start time of the
                time range for the specified date.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.GetTimeRangeEndingTimeUtc(System.DateTimeOffset)">
            <summary>
            Returns the end time of the time range of the day
            specified in <param name="timeUtc" />
            </summary>
            <returns>
            A DateTime representing the end time of the
            time range for the specified date.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.SetTimeRange(System.String,System.String)">
            <summary>
            Sets the time range for the <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> to the times 
            represented in the specified Strings. 
            </summary>
            <param name="rangeStartingTimeString">The range starting time string.</param>
            <param name="rangeEndingTimeString">The range ending time string.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.SetTimeRange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time range for the <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> to the times
            represented in the specified values. 
            </summary>
            <param name="rangeStartingHourOfDay">The range starting hour of day.</param>
            <param name="rangeStartingMinute">The range starting minute.</param>
            <param name="rangeStartingSecond">The range starting second.</param>
            <param name="rangeStartingMillis">The range starting millis.</param>
            <param name="rangeEndingHourOfDay">The range ending hour of day.</param>
            <param name="rangeEndingMinute">The range ending minute.</param>
            <param name="rangeEndingSecond">The range ending second.</param>
            <param name="rangeEndingMillis">The range ending millis.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.SetTimeRange(System.DateTime,System.DateTime)">
            <summary>
            Sets the time range for the <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> to the times
            represented in the specified <see cref="T:System.DateTime"/>s. 
            </summary>
            <param name="rangeStartingCalendarUtc">The range starting calendar.</param>
            <param name="rangeEndingCalendarUtc">The range ending calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.SetTimeRange(System.Int64,System.Int64)">
            <summary>
            Sets the time range for the <see cref="T:Quartz.Impl.Calendar.DailyCalendar"/> to the times
            represented in the specified values. 
            </summary>
            <param name="rangeStartingTime">The range starting time.</param>
            <param name="rangeEndingTime">The range ending time.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.GetStartOfDay(System.DateTimeOffset)">
            <summary>
            Gets the start of day, practically zeroes time part.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.GetEndOfDay(System.DateTimeOffset)">
            <summary>
            Gets the end of day, pratically sets time parts to maximum allowed values.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.DailyCalendar.Validate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the specified values for validity as a set of time values.
            </summary>
            <param name="hourOfDay">The hour of day.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="millis">The millis.</param>
        </member>
        <member name="P:Quartz.Impl.Calendar.DailyCalendar.InvertTimeRange">
            <summary>
            Indicates whether the time range represents an inverted time range (see
            class description).
            </summary>
            <value><c>true</c> if invert time range; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Quartz.Core.SchedulerSignalerImpl">
            <summary> 
            An interface to be used by <see cref="T:Quartz.Spi.IJobStore"/> instances in order to
            communicate signals back to the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="T:Quartz.Spi.ISchedulerSignaler">
            <summary> 
            An interface to be used by <see cref="T:Quartz.Spi.IJobStore"/> instances in order to
            communicate signals back to the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.ISchedulerSignaler.NotifyTriggerListenersMisfired(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler about misfired trigger.
            </summary>
            <param name="trigger">The trigger that misfired.</param>
        </member>
        <member name="M:Quartz.Spi.ISchedulerSignaler.NotifySchedulerListenersFinalized(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler about finalized trigger.
            </summary>
            <param name="trigger">The trigger that has finalized.</param>
        </member>
        <member name="M:Quartz.Spi.ISchedulerSignaler.SignalSchedulingChange(System.Nullable{System.DateTimeOffset})">
            <summary>
            Signals the scheduling change.
            </summary>
        </member>
        <member name="M:Quartz.Core.SchedulerSignalerImpl.NotifyTriggerListenersMisfired(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler about misfired trigger.
            </summary>
            <param name="trigger">The trigger that misfired.</param>
        </member>
        <member name="M:Quartz.Core.SchedulerSignalerImpl.NotifySchedulerListenersFinalized(Quartz.ITrigger)">
            <summary>
            Notifies the scheduler about finalized trigger.
            </summary>
            <param name="trigger">The trigger that has finalized.</param>
        </member>
        <member name="M:Quartz.Core.SchedulerSignalerImpl.SignalSchedulingChange(System.Nullable{System.DateTimeOffset})">
            <summary>
            Signals the scheduling change.
            </summary>
        </member>
        <member name="T:Quartz.SchedulerConstants">
            <summary>
            Scheduler constants.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.SchedulerConstants.DefaultGroup">
            <summary>
            A (possibly) useful constant that can be used for specifying the group
            that <see cref="T:Quartz.IJob"/> and <see cref="T:Quartz.ITrigger"/> instances belong to.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerConstants.DefaultRecoveryGroup">
            <summary>
            A constant <see cref="T:Quartz.ITrigger"/> group name used internally by the
            scheduler - clients should not use the value of this constant
            ("RECOVERING_JOBS") for thename of a <see cref="T:Quartz.ITrigger"/>'s group.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerConstants.DefaultFailOverGroup">
            <summary>
            A constant <see cref="T:Quartz.ITrigger"/> group name used internally by the
            scheduler - clients should not use the value of this constant
            ("FAILED_OVER_JOBS") for thename of a <see cref="T:Quartz.ITrigger"/>'s group.
            </summary>
        </member>
        <member name="F:Quartz.SchedulerConstants.FailedJobOriginalTriggerName">
            <summary>
             A constant <see cref="T:Quartz.JobDataMap"/> key that can be used to retrieve the
            name of the original <see cref="T:Quartz.ITrigger"/> from a recovery trigger's
            data map in the case of a job recovering after a failed scheduler
            instance.
            </summary>
            <seealso cref="P:Quartz.IJobDetail.RequestsRecovery"/>
        </member>
        <member name="F:Quartz.SchedulerConstants.FailedJobOriginalTriggerGroup">
            <summary>
            A constant <see cref="T:Quartz.JobDataMap"/> key that can be used to retrieve the
            group of the original <see cref="T:Quartz.ITrigger"/> from a recovery trigger's
            data map in the case of a job recovering after a failed scheduler
            instance.
            </summary>
            <seealso cref="P:Quartz.IJobDetail.RequestsRecovery"/>
        </member>
        <member name="F:Quartz.SchedulerConstants.FailedJobOriginalTriggerFiretimeInMillisecoonds">
            <summary>
             A constant <see cref="T:Quartz.JobDataMap"/> key that can be used to retrieve the
            scheduled fire time of the original <see cref="T:Quartz.ITrigger"/> from a recovery
            trigger's data map in the case of a job recovering after a failed scheduler
            instance.
            </summary>
            <seealso cref="P:Quartz.IJobDetail.RequestsRecovery"/>
        </member>
        <member name="T:Quartz.Util.ObjectUtils">
            <summary>
            Utility methods that are used to convert objects from one type into another.
            </summary>
            <author>Aleksandar Seovic</author>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.ConvertValueIfNecessary(System.Type,System.Object)">
            <summary>
            Convert the value to the required <see cref="T:System.Type"/> (if necessary from a string).
            </summary>
            <param name="newValue">The proposed change value.</param>
            <param name="requiredType">
            The <see cref="T:System.Type"/> we must convert to.
            </param>
            <returns>The new value, possibly the result of type conversion.</returns>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.IsAssignableFrom(System.Object,System.Type)">
            <summary>
            Determines whether value is assignable to required type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="requiredType">Type of the required.</param>
            <returns>
            	<c>true</c> if value can be assigned as given type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.InstantiateType``1(System.Type)">
            <summary>
            Instantiates an instance of the type specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.SetObjectProperties(System.Object,System.String[],System.Object[])">
            <summary>
            Sets the object properties using reflection.
            </summary>
        </member>
        <member name="M:Quartz.Util.ObjectUtils.SetObjectProperties(System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets the object properties using reflection.
            </summary>
            <param name="obj">The object to set values to.</param>
            <param name="props">The properties to set to object.</param>
        </member>
        <member name="T:Quartz.TriggerUtils">
            <summary>
            Convenience and utility methods for simplifying the construction and
            configuration of <see cref="T:Quartz.ITrigger"/>s and DateTimeOffsetOffsets.
            </summary>
            <seealso cref="T:Quartz.ICronTrigger"/>
            <seealso cref="T:Quartz.ISimpleTrigger"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.TriggerUtils.ComputeFireTimes(Quartz.Spi.IOperableTrigger,Quartz.ICalendar,System.Int32)">
            <summary>
            Returns a list of Dates that are the next fire times of a
            <see cref="T:Quartz.ITrigger"/>.
            The input trigger will be cloned before any work is done, so you need
            not worry about its state being altered by this method.
            </summary>
            <param name="trigg">The trigger upon which to do the work</param>
            <param name="cal">The calendar to apply to the trigger's schedule</param>
            <param name="numTimes">The number of next fire times to produce</param>
            <returns>List of java.util.Date objects</returns>
        </member>
        <member name="M:Quartz.TriggerUtils.ComputeEndTimeToAllowParticularNumberOfFirings(Quartz.Spi.IOperableTrigger,Quartz.ICalendar,System.Int32)">
            <summary>
            Compute the <code>Date</code> that is 1 second after the Nth firing of 
            the given <see cref="T:Quartz.ITrigger"/>, taking the triger's associated 
            <see cref="T:Quartz.ICalendar"/> into consideration.
            </summary>
            <remarks>
            The input trigger will be cloned before any work is done, so you need
            not worry about its state being altered by this method.
            </remarks>
            <param name="trigger">The trigger upon which to do the work</param>
            <param name="calendar">The calendar to apply to the trigger's schedule</param>
            <param name="numberOfTimes">The number of next fire times to produce</param>
            <returns>the computed Date, or null if the trigger (as configured) will not fire that many times</returns>
        </member>
        <member name="M:Quartz.TriggerUtils.ComputeFireTimesBetween(Quartz.Spi.IOperableTrigger,Quartz.ICalendar,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns a list of Dates that are the next fire times of a  <see cref="T:Quartz.ITrigger"/>
            that fall within the given date range. The input trigger will be cloned
            before any work is done, so you need not worry about its state being
            altered by this method.
            <para>
            NOTE: if this is a trigger that has previously fired within the given
            date range, then firings which have already occurred will not be listed
            in the output List.
            </para>
            </summary>
            <param name="trigg">The trigger upon which to do the work</param>
            <param name="cal">The calendar to apply to the trigger's schedule</param>
            <param name="from">The starting date at which to find fire times</param>
            <param name="to">The ending date at which to stop finding fire times</param>
            <returns>List of java.util.Date objects</returns>
        </member>
        <member name="T:Quartz.TriggerKey">
            <summary>
             Uniquely identifies a <see cref="T:Quartz.ITrigger"/>.
             </summary>
             <remarks>
             <para>Keys are composed of both a name and group, and the name must be unique
             within the group.  If only a name is specified then the default group
             name will be used.</para> 
            
            
             <para>Quartz provides a builder-style API for constructing scheduling-related
             entities via a Domain-Specific Language (DSL).  The DSL can best be
             utilized through the usage of static imports of the methods on the classes
             <code>TriggerBuilder</code>, <code>JobBuilder</code>, 
             <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code> 
             and the various <code>ScheduleBuilder</code> implementations.</para>
             
             <para>Client code can then use the DSL to write code such as this:</para>
             <pre>
                     JobDetail job = newJob(MyJob.class)
                         .withIdentity("myJob")
                         .build();
                         
                     Trigger trigger = newTrigger() 
                         .withIdentity(triggerKey("myTrigger", "myTriggerGroup"))
                         .withSchedule(simpleSchedule()
                             .withIntervalInHours(1)
                             .repeatForever())
                         .startAt(futureDate(10, MINUTES))
                         .build();
                     
                     scheduler.scheduleJob(job, trigger);
             </pre>
             </remarks>
             <seealso cref="T:Quartz.ITrigger"/>
             <seealso cref="F:Quartz.Util.Key`1.DefaultGroup"/>
        </member>
        <member name="T:Quartz.Simpl.SimpleTypeLoadHelper">
            <summary> 
            A <see cref="T:Quartz.Spi.ITypeLoadHelper"/> that simply calls <see cref="M:System.Type.GetType(System.String)"/>.
            </summary>
            <seealso cref="T:Quartz.Spi.ITypeLoadHelper"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Simpl.SimpleTypeLoadHelper.Initialize">
            <summary> 
            Called to give the ClassLoadHelper a chance to Initialize itself,
            including the oportunity to "steal" the class loader off of the calling
            thread, which is the thread that is initializing Quartz.
            </summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleTypeLoadHelper.LoadType(System.String)">
            <summary> Return the class with the given name.</summary>
        </member>
        <member name="M:Quartz.Simpl.SimpleTypeLoadHelper.GetResource(System.String)">
            <summary>
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a Uri object</returns>
        </member>
        <member name="M:Quartz.Simpl.SimpleTypeLoadHelper.GetResourceAsStream(System.String)">
            <summary>
            Finds a resource with a given name. This method returns null if no
            resource with this name is found.
            </summary>
            <param name="name">name of the desired resource
            </param>
            <returns> a Stream object
            </returns>
        </member>
        <member name="T:Quartz.Simpl.PropertySettingJobFactory">
            <summary> 
            A JobFactory that instantiates the Job instance (using the default no-arg
            constructor, or more specifically: <see cref="M:Quartz.Util.ObjectUtils.InstantiateType``1(System.Type)"/>), and
            then attempts to set all values from the <see cref="T:Quartz.IJobExecutionContext"/> and
            the <see cref="T:Quartz.IJobExecutionContext"/>'s merged <see cref="T:Quartz.JobDataMap"/> onto 
            properties of the <code>Job</code>.
            </summary>
            <seealso cref="T:Quartz.Spi.IJobFactory"/>
            <seealso cref="T:Quartz.Simpl.SimpleJobFactory"/>
            <seealso cref="T:Quartz.SchedulerContext"/>
            <seealso cref="P:Quartz.IJobExecutionContext.MergedJobDataMap"/>
            <seealso cref="P:Quartz.Simpl.PropertySettingJobFactory.WarnIfPropertyNotFound"/>
            <seealso cref="P:Quartz.Simpl.PropertySettingJobFactory.ThrowIfPropertyNotFound"/>
            <author>James Houser</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Simpl.PropertySettingJobFactory.NewJob(Quartz.Spi.TriggerFiredBundle,Quartz.IScheduler)">
            <summary>
            Called by the scheduler at the time of the trigger firing, in order to
            produce a <see cref="T:Quartz.IJob"/> instance on which to call Execute.
            </summary>
            <remarks>
            <para>
            It should be extremely rare for this method to throw an exception -
            basically only the the case where there is no way at all to instantiate
            and prepare the Job for execution.  When the exception is thrown, the
            Scheduler will move all triggers associated with the Job into the
            <see cref="F:Quartz.TriggerState.Error"/> state, which will require human
            intervention (e.g. an application restart after fixing whatever
            configuration problem led to the issue wih instantiating the Job.
            </para>
            </remarks>
            <param name="bundle">The TriggerFiredBundle from which the <see cref="T:Quartz.IJobDetail"/>
              and other info relating to the trigger firing can be obtained.</param>
            <param name="scheduler"></param>
            <returns>the newly instantiated Job</returns>
            <throws>  SchedulerException if there is a problem instantiating the Job. </throws>
        </member>
        <member name="M:Quartz.Simpl.PropertySettingJobFactory.SetObjectProperties(System.Object,Quartz.JobDataMap)">
            <summary>
            Sets the object properties.
            </summary>
            <param name="obj">The object to set properties to.</param>
            <param name="data">The data to set.</param>
        </member>
        <member name="P:Quartz.Simpl.PropertySettingJobFactory.ThrowIfPropertyNotFound">
            <summary> 
            Whether the JobInstantiation should fail and throw and exception if
            a key (name) and value (type) found in the JobDataMap does not 
            correspond to a proptery setter on the Job class.
            </summary>
        </member>
        <member name="P:Quartz.Simpl.PropertySettingJobFactory.WarnIfPropertyNotFound">
            <summary> 
            Get or set whether a warning should be logged if
            a key (name) and value (type) found in the JobDataMap does not 
            correspond to a proptery setter on the Job class.
            </summary>
        </member>
        <member name="T:Quartz.SchedulerContext">
            <summary>
            Holds context/environment data that can be made available to Jobs as they
            are executed. 
            </summary>
            <remarks>
            Future versions of Quartz may make distinctions on how it propagates
            data in <see cref="T:Quartz.SchedulerContext"/> between instances of proxies to a 
            single scheduler instance - i.e. if Quartz is being used via WCF of Remoting.
            </remarks>
            <seealso cref="P:Quartz.IScheduler.Context"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.SchedulerContext.#ctor">
            <summary>
            Create an empty <see cref="T:Quartz.JobDataMap"/>.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a <see cref="T:Quartz.JobDataMap"/> with the given data.
            </summary>
        </member>
        <member name="M:Quartz.SchedulerContext.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Quartz.Job.SendMailJob">
            <summary>
            A Job which sends an e-mail with the configured content to the configured
            recipient.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertySmtpHost">
            <summary> The host name of the smtp server. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertyRecipient">
            <summary> The e-mail address to send the mail to. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertyCcRecipient">
            <summary> The e-mail address to cc the mail to. Optional.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertySender">
            <summary> The e-mail address to claim the mail is from. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertyReplyTo">
            <summary> The e-mail address the message should say to reply to. Optional.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertySubject">
            <summary> The subject to place on the e-mail. REQUIRED.</summary>
        </member>
        <member name="F:Quartz.Job.SendMailJob.PropertyMessage">
            <summary> The e-mail message body. REQUIRED.</summary>
        </member>
        <member name="M:Quartz.Job.SendMailJob.Execute(Quartz.IJobExecutionContext)">
            <summary>
            Executes the job.
            </summary>
            <param name="context">The job execution context.</param>
        </member>
        <member name="T:Quartz.Impl.Calendar.CronCalendar">
            <summary>
            This implementation of the Calendar excludes the set of times expressed by a
            given CronExpression. 
            </summary>
            <remarks>
            For example, you could use this calendar to exclude all but business hours (8AM - 5PM) every 
            day using the expression "* * 0-7,18-23 ? * *". 
            <para>
            It is important to remember that the cron expression here describes a set of
            times to be <i>excluded</i> from firing. Whereas the cron expression in 
            CronTrigger describes a set of times that can
            be <i>included</i> for firing. Thus, if a <see cref="T:Quartz.ICronTrigger"/> has a 
            given cron expression and is associated with a <see cref="T:Quartz.Impl.Calendar.CronCalendar"/> with
            the <i>same</i> expression, the calendar will exclude all the times the 
            trigger includes, and they will cancel each other out.
            </para>
            </remarks>
            <author>Aaron Craven</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.CronCalendar"/> class.
            </summary>
            <param name="expression">a string representation of the desired cron expression</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.#ctor(Quartz.ICalendar,System.String)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.CronCalendar"/> with the given cron expression and 
            <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/>. 
            </summary>
            <param name="baseCalendar">
            the base calendar for this calendar instance 
            see BaseCalendar for more information on base
            calendar functionality
            </param>
            <param name="expression">a string representation of the desired cron expression</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.#ctor(Quartz.ICalendar,System.String,System.TimeZoneInfo)">
            <summary>
            Create a <see cref="T:Quartz.Impl.Calendar.CronCalendar"/> with the given cron expression and 
            <see cref="T:Quartz.Impl.Calendar.BaseCalendar"/>. 
            </summary>
            <param name="baseCalendar">
            the base calendar for this calendar instance 
            see BaseCalendar for more information on base
            calendar functionality
            </param>
            <param name="expression">a string representation of the desired cron expression</param>
            <param name="timeZone"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given time  is 'included' by the
            Calendar.
            </summary>
            <param name="timeUtc">the time to test</param>
            <returns>a boolean indicating whether the specified time is 'included' by the CronCalendar</returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next time that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return 0 if all days are excluded.
            </summary>
            <param name="timeUtc"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.CronCalendar.SetCronExpressionString(System.String)">
            <summary>
            Sets the cron expression for the calendar to a new value.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="P:Quartz.Impl.Calendar.CronCalendar.CronExpression">
            <summary>
             Returns the object representation of the cron expression that defines the
            dates and times this calendar excludes.
            </summary>
        </member>
        <member name="T:Quartz.Core.QuartzSchedulerResources">
            <summary>
            Contains all of the resources (<see cref="T:Quartz.Spi.IJobStore"/>,<see cref="T:Quartz.Spi.IThreadPool"/>,
            etc.) necessary to create a <see cref="T:Quartz.Core.QuartzScheduler"/> instance.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerResources.GetUniqueIdentifier(System.String,System.String)">
            <summary>
            Gets the unique identifier.
            </summary>
            <param name="schedName">Name of the scheduler.</param>
            <param name="schedInstId">The scheduler instance id.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerResources.GetUniqueIdentifier">
            <summary>
            Gets the unique identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Core.QuartzSchedulerResources.AddSchedulerPlugin(Quartz.Spi.ISchedulerPlugin)">
            <summary>
            Add the given <see cref="T:Quartz.Spi.ISchedulerPlugin"/> for the 
            <see cref="T:Quartz.Core.QuartzScheduler"/> to use. This method expects the plugin's
            "initialize" method to be invoked externally (either before or after
            this method is called).
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.Name">
            <summary>
            Get or set the name for the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.InstanceId">
            <summary>
            Get or set the instance Id for the <see cref="T:Quartz.Core.QuartzScheduler"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.ThreadName">
            <summary>
            Get or set the name for the <see cref="T:Quartz.Core.QuartzSchedulerThread"/>.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if name is null or empty.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.ThreadPool">
            <summary>
            Get or set the <see cref="P:Quartz.Core.QuartzSchedulerResources.ThreadPool"/> for the <see cref="T:Quartz.Core.QuartzScheduler"/>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if threadPool is null.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.JobStore">
            <summary>
            Get or set the <see cref="T:Quartz.Spi.IJobStore"/> for the <see cref="T:Quartz.Core.QuartzScheduler"/>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobStore is null.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.JobRunShellFactory">
            <summary> 
            Get or set the <see cref="P:Quartz.Core.QuartzSchedulerResources.JobRunShellFactory"/> for the <see cref="T:Quartz.Core.QuartzScheduler"/>
            to use.
            </summary>
            <exception cref="T:System.ArgumentException"> 
            if jobRunShellFactory is null.
            </exception>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.SchedulerPlugins">
            <summary>
            Get the <see cref="T:System.Collections.Generic.IList`1"/> of all  <see cref="T:Quartz.Spi.ISchedulerPlugin"/>s for the 
            <see cref="T:Quartz.Core.QuartzScheduler"/> to use.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.MakeSchedulerThreadDaemon">
            <summary>
            Gets or sets a value indicating whether to make scheduler thread daemon.
            </summary>
            <value>
            	<c>true</c> if scheduler should be thread daemon; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.SchedulerExporter">
            <summary>
            Gets or sets the scheduler exporter.
            </summary>
            <value>The scheduler exporter.</value>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.ThreadExecutor">
            <summary>
            The ThreadExecutor which runs the QuartzSchedulerThread.
            </summary>
        </member>
        <member name="P:Quartz.Core.QuartzSchedulerResources.BatchTimeWindow">
            <summary>
            Gets or sets the batch time window.
            </summary>
        </member>
        <member name="T:Quartz.DailyTimeIntervalScheduleBuilder">
            <summary>
            A <see cref="T:Quartz.IScheduleBuilder"/> implementation that build schedule for DailyTimeIntervalTrigger.
            </summary>
            <remarks>
            <para>
            This builder provide an extra convenient method for you to set the trigger's EndTimeOfDay. You may
            use either endingDailyAt() or EndingDailyAfterCount() to set the value. The later will auto calculate
            your EndTimeOfDay by using the interval, IntervalUnit and StartTimeOfDay to perform the calculation.
            </para>
            <para>
            When using EndingDailyAfterCount(), you should note that it is used to calculating EndTimeOfDay. So
            if your startTime on the first day is already pass by a time that would not add up to the count you
            expected, until the next day comes. Remember that DailyTimeIntervalTrigger will use StartTimeOfDay
            and endTimeOfDay as fresh per each day!
            </para>
            </remarks>
            <author>James House</author>
            <author>Zemian Deng saltnlight5@gmail.com</author>
            <author>Nuno Maia (.NET)</author>
        </member>
        <member name="F:Quartz.DailyTimeIntervalScheduleBuilder.AllDaysOfTheWeek">
            <summary>
            A set of all days of the week.
            </summary>
            <remarks>
            The set contains all values between <see cref="F:System.DayOfWeek.Sunday"/> and <see cref="F:System.DayOfWeek.Saturday"/>
            </remarks>
        </member>
        <member name="F:Quartz.DailyTimeIntervalScheduleBuilder.MondayThroughFriday">
            <summary>
            A set of the business days of the week (for locales similar to the USA).
            </summary>
            <remarks>
            The set contains all values between <see cref="F:System.DayOfWeek.Monday"/> and <see cref="F:System.DayOfWeek.Friday"/> 
            </remarks>
        </member>
        <member name="F:Quartz.DailyTimeIntervalScheduleBuilder.SaturdayAndSunday">
            <summary>
            A set of the weekend days of the week (for locales similar to the USA).
            </summary>
            <remarks>
            The set contains <see cref="F:System.DayOfWeek.Saturday"/> and <see cref="F:System.DayOfWeek.Sunday"/>
            </remarks>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.Create">
            <summary>
            Create a DailyTimeIntervalScheduleBuilder
            </summary>
            <returns>The new DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this 
            ScheduleBuilder is given to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithInterval(System.Int32,Quartz.IntervalUnit)">
            <summary>
            Specify the time unit and interval for the Trigger to be produced.
            </summary>
            <remarks>
            </remarks>
            <param name="interval">the interval at which the trigger should repeat.</param>
            <param name="unit"> the time unit (IntervalUnit) of the interval.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithIntervalInSeconds(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.Second that the produced
            Trigger will repeat at.
            </summary>
            <param name="intervalInSeconds">The number of seconds at which the trigger should repeat.</param>
            <returns>the updated DailyTimeIntervalScheduleBuilder&gt;</returns>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithIntervalInMinutes(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.Minute that the produced
            Trigger will repeat at.
            </summary>
            <param name="intervalInMinutes">The number of minutes at which the trigger should repeat.</param>
            <returns>the updated DailyTimeIntervalScheduleBuilder&gt;</returns>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithIntervalInHours(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.Hour that the produced
            Trigger will repeat at.
            </summary>
            <param name="intervalInHours">The number of hours at which the trigger should repeat.</param>
            <returns>the updated DailyTimeIntervalScheduleBuilder&gt;</returns>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/>
            <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.OnDaysOfTheWeek(Quartz.Collection.ISet{System.DayOfWeek})">
            <summary>
            Set the trigger to fire on the given days of the week.
            </summary>
            <param name="daysOfWeek">a Set containing the integers representing the days of the week, defined by <see cref="F:System.DayOfWeek.Sunday"/> - <see cref="F:System.DayOfWeek.Saturday"/>. 
            </param>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.OnMondayThroughFriday">
            <summary>
            Set the trigger to fire on the days from Monday through Friday.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.OnSaturdayAndSunday">
            <summary>
            Set the trigger to fire on the days Saturday and Sunday.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.OnEveryDay">
            <summary>
            Set the trigger to fire on all days of the week.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.StartingDailyAt(Quartz.TimeOfDay)">
            <summary>
            Set the trigger to begin firing each day at the given time.
            </summary>
            <param name="timeOfDayUtc"></param>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.EndingDailyAt(Quartz.TimeOfDay)">
            <summary>
            Set the startTimeOfDay for this trigger to end firing each day at the given time.
            </summary>
            <param name="timeOfDayUtc"></param>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.EndingDailyAfterCount(System.Int32)">
            <summary>
            Calculate and set the EndTimeOfDay using count, interval and StarTimeOfDay. This means
            that these must be set before this method is call.
            </summary>
            <param name="count"></param>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithMisfireHandlingInstructionIgnoreMisfires">
            <summary>
            If the Trigger misfires, use the 
            <see cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/> instruction.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithMisfireHandlingInstructionDoNothing">
            <summary>
            If the Trigger misfires, use the 
            <see cref="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.DoNothing"/> instruction.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.DoNothing"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithMisfireHandlingInstructionFireAndProceed">
            <summary>
            If the Trigger misfires, use the 
            <see cref="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.FireOnceNow"/> instruction.
            </summary>
            <returns>the updated DailyTimeIntervalScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.DailyTimeIntervalTrigger.FireOnceNow"/>
        </member>
        <member name="M:Quartz.DailyTimeIntervalScheduleBuilder.WithRepeatCount(System.Int32)">
            <summary>
            Set number of times for interval to repeat.
            </summary>
            <remarks>
            Note: if you want total count = 1 (at start time) + repeatCount
            </remarks>
            <param name="repeatCount"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.DailyTimeIntervalScheduleBuilderExtensions">
            <summary>
            Extension methods to aid fluent trigger syntax.
            </summary>
        </member>
        <member name="T:Quartz.CalendarIntervalScheduleBuilder">
            <summary>
            <code>CalendarIntervalScheduleBuilder</code> is a <see cref="T:Quartz.IScheduleBuilder"/>
            that defines calendar time (day, week, month, year) interval-based
            schedules for <code>Trigger</code>s.
            </summary>
            <remarks>
            <para>Quartz provides a builder-style API for constructing scheduling-related
            entities via a Domain-Specific Language (DSL).  The DSL can best be
            utilized through the usage of static imports of the methods on the classes
            <code>TriggerBuilder</code>, <code>JobBuilder</code>,
            <code>DateBuilder</code>, <code>JobKey</code>, <code>TriggerKey</code>
            and the various <code>ScheduleBuilder</code> implementations.</para>
            <para>Client code can then use the DSL to write code such as this:</para>
            <pre>
            JobDetail job = JobBuilder.Create&lt;MyJob&gt;()
             .WithIdentity("myJob")
             .Build();
            Trigger trigger = TriggerBuilder.Create()
             .WithIdentity("myTrigger", "myTriggerGroup")
             .WithSimpleSchedule(x =&gt; x.WithIntervalInHours(1).RepeatForever())
             .StartAt(DateBuilder.FutureDate(10, IntervalUnit.Minute))
             .Build();
            scheduler.scheduleJob(job, trigger);
            </pre>
            </remarks>
            <seealso cref="T:Quartz.ICalendarIntervalTrigger"/>
            <seealso cref="T:Quartz.CronScheduleBuilder"/>
            <seealso cref="T:Quartz.IScheduleBuilder"/>
            <seealso cref="T:Quartz.SimpleScheduleBuilder"/>
            <seealso cref="T:Quartz.TriggerBuilder"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.Create">
            <summary>
            Create a CalendarIntervalScheduleBuilder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.Build">
            <summary>
            Build the actual Trigger -- NOT intended to be invoked by end users,
            but will rather be invoked by a TriggerBuilder which this 
            ScheduleBuilder is given to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithInterval(System.Int32,Quartz.IntervalUnit)">
            <summary>
            Specify the time unit and interval for the Trigger to be produced.
            </summary>
            <remarks>
            </remarks>
            <param name="interval">the interval at which the trigger should repeat.</param>
            <param name="unit"> the time unit (IntervalUnit) of the interval.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInSeconds(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.SECOND that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInSeconds">the number of seconds at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInMinutes(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.MINUTE that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInMinutes">the number of minutes at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInHours(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.HOUR that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInHours">the number of hours at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInDays(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.DAY that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInDays">the number of days at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInWeeks(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.WEEK that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInWeeks">the number of weeks at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInMonths(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.MONTH that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInMonths">the number of months at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithIntervalInYears(System.Int32)">
            <summary>
            Specify an interval in the IntervalUnit.YEAR that the produced
            Trigger will repeat at.
            </summary>
            <remarks>
            </remarks>
            <param name="intervalInYears">the number of years at which the trigger should repeat.</param>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatInterval"/>
            <seealso cref="P:Quartz.ICalendarIntervalTrigger.RepeatIntervalUnit"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithMisfireHandlingInstructionIgnoreMisfires">
            <summary>
            If the Trigger misfires, use the
            {@link Trigger#MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY} instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CronScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.IgnoreMisfirePolicy"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithMisfireHandlingInstructionDoNothing">
            <summary>
            If the Trigger misfires, use the
            <see cref="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.DoNothing"/> instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.DoNothing"/>
        </member>
        <member name="M:Quartz.CalendarIntervalScheduleBuilder.WithMisfireHandlingInstructionFireAndProceed">
            <summary>
            If the Trigger misfires, use the
            <see cref="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.FireOnceNow"/> instruction.
            </summary>
            <remarks>
            </remarks>
            <returns>the updated CalendarIntervalScheduleBuilder</returns>
            <seealso cref="F:Quartz.MisfireInstruction.CalendarIntervalTrigger.FireOnceNow"/>
        </member>
        <member name="T:Quartz.TriggerState">
            <summary>
            All trigger states known to Scheduler.
            </summary>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.TriggerState.Normal">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> is in the "normal" state.
            </summary>
        </member>
        <member name="F:Quartz.TriggerState.Paused">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> is in the "paused" state.
            </summary>
        </member>
        <member name="F:Quartz.TriggerState.Complete">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> is in the "complete" state.
            </summary>
            <remarks>
            "Complete" indicates that the trigger has not remaining fire-times in
            its schedule.
            </remarks>
        </member>
        <member name="F:Quartz.TriggerState.Error">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> is in the "error" state.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Quartz.ITrigger"/> arrives at the error state when the scheduler
            attempts to fire it, but cannot due to an error creating and executing
            its related job. Often this is due to the <see cref="T:Quartz.IJob"/>'s
            class not existing in the classpath.
            </para>
            
            <para>
            When the trigger is in the error state, the scheduler will make no
            attempts to fire it.
            </para>
            </remarks>
        </member>
        <member name="F:Quartz.TriggerState.Blocked">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> is in the "blocked" state.
            </summary>
            <remarks>
            A <see cref="T:Quartz.ITrigger"/> arrives at the blocked state when the job that
            it is associated with has a <see cref="T:Quartz.DisallowConcurrentExecutionAttribute"/> and it is 
            currently executing.
            </remarks>
            <seealso cref="T:Quartz.DisallowConcurrentExecutionAttribute"/>
        </member>
        <member name="F:Quartz.TriggerState.None">
            <summary>
            Indicates that the <see cref="T:Quartz.ITrigger"/> does not exist.
            </summary>
        </member>
        <member name="T:Quartz.Util.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Quartz.Util.StringExtensions.NullSafeTrim(System.String)">
            <summary>
            Allows null-safe trimming of string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.StringExtensions.TrimEmptyToNull(System.String)">
            <summary>
            Trims string and if resulting string is empty, null is returned.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:Quartz.TriggerConstants.DefaultPriority">
            <summary>
            The default value for priority.
            </summary>
        </member>
        <member name="T:Quartz.ObjectAlreadyExistsException">
            <summary>
            An exception that is thrown to indicate that an attempt to store a new
            object (i.e. <see cref="T:Quartz.IJobDetail"/>,<see cref="T:Quartz.ITrigger"/>
            or <see cref="T:Quartz.ICalendar"/>) in a <see cref="T:Quartz.IScheduler"/>
            failed, because one with the same name and group already exists.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(System.String)">
            <summary> <para>
            Create a <see cref="T:Quartz.ObjectAlreadyExistsException"/> with the given
            message.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.ObjectAlreadyExistsException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(Quartz.IJobDetail)">
            <summary> <para>
            Create a <see cref="T:Quartz.ObjectAlreadyExistsException"/> and auto-generate a
            message using the name/group from the given <see cref="T:Quartz.IJobDetail"/>.
            </para>
            
            <para>
            The message will read: <br/>"Unable to store Job with name: '__' and
            group: '__', because one already exists with this identification."
            </para>
            </summary>
        </member>
        <member name="M:Quartz.ObjectAlreadyExistsException.#ctor(Quartz.ITrigger)">
            <summary> <para>
            Create a <see cref="T:Quartz.ObjectAlreadyExistsException"/> and auto-generate a
            message using the name/group from the given <see cref="T:Quartz.ITrigger"/>.
            </para>
            
            <para>
            The message will read: <br/>"Unable to store Trigger with name: '__' and
            group: '__', because one already exists with this identification."
            </para>
            </summary>
        </member>
        <member name="T:Quartz.Impl.Matchers.GroupMatcher`1">
            <summary>
            Matches on group (ignores name) property of Keys.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Matchers.GroupMatcher`1.GroupEquals(System.String)">
            <summary>
            Create a GroupMatcher that matches groups equaling the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.GroupMatcher`1.GroupStartsWith(System.String)">
            <summary>
            Create a GroupMatcher that matches groups starting with the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.GroupMatcher`1.GroupEndsWith(System.String)">
            <summary>
            Create a GroupMatcher that matches groups ending with the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Matchers.GroupMatcher`1.GroupContains(System.String)">
            <summary>
            Create a GroupMatcher that matches groups containing the given string.
            </summary>
            <param name="compareTo"></param>
            <returns></returns>
        </member>
        <member name="T:Quartz.Util.PropertiesParser">
            <summary>
            This is an utility class used to parse the properties.
            </summary>
            <author> James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Util.PropertiesParser"/> class.
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetStringProperty(System.String)">
            <summary>
            Gets the string property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetStringProperty(System.String,System.String)">
            <summary>
            Gets the string property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetStringArrayProperty(System.String)">
            <summary>
            Gets the string array property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetStringArrayProperty(System.String,System.String[])">
            <summary>
            Gets the string array property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetBooleanProperty(System.String)">
            <summary>
            Gets the boolean property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetBooleanProperty(System.String,System.Boolean)">
            <summary>
            Gets the boolean property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">if set to <c>true</c> [defaultValue].</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetByteProperty(System.String)">
            <summary>
            Gets the byte property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetByteProperty(System.String,System.Byte)">
            <summary>
            Gets the byte property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetCharProperty(System.String)">
            <summary>
            Gets the char property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetCharProperty(System.String,System.Char)">
            <summary>
            Gets the char property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetDoubleProperty(System.String)">
            <summary>
            Gets the double property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetDoubleProperty(System.String,System.Double)">
            <summary>
            Gets the double property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetFloatProperty(System.String)">
            <summary>
            Gets the float property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetFloatProperty(System.String,System.Single)">
            <summary>
            Gets the float property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetIntProperty(System.String)">
            <summary>
            Gets the int property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetIntProperty(System.String,System.Int32)">
            <summary>
            Gets the int property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetIntArrayProperty(System.String)">
            <summary>
            Gets the int array property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetIntArrayProperty(System.String,System.Int32[])">
            <summary>
            Gets the int array property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetLongProperty(System.String)">
            <summary>
            Gets the long property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetLongProperty(System.String,System.Int64)">
            <summary>
            Gets the long property.
            </summary>
            <param name="name">The name.</param>
            <param name="def">The def.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetTimeSpanProperty(System.String,System.TimeSpan)">
            <summary>
            Gets the TimeSpan property.
            </summary>
            <param name="name">The name.</param>
            <param name="def">The def.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetShortProperty(System.String)">
            <summary>
            Gets the short property.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetShortProperty(System.String,System.Int16)">
            <summary>
            Gets the short property.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetPropertyGroups(System.String)">
            <summary>
            Gets the property groups.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetPropertyGroup(System.String)">
            <summary>
            Gets the property group.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetPropertyGroup(System.String,System.Boolean)">
            <summary>
            Gets the property group.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="stripPrefix">if set to <c>true</c> [strip prefix].</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.GetPropertyGroup(System.String,System.Boolean,System.String[])">
            <summary>
            Get all properties that start with the given prefix.  
            </summary>
            <param name="prefix">The prefix for which to search.  If it does not end in a "." then one will be added to it for search purposes.</param>
            <param name="stripPrefix">Whether to strip off the given <paramref name="prefix"/> in the result's keys.</param>
            <param name="excludedPrefixes">Optional array of fully qualified prefixes to exclude.  For example if <see paramfref="prefix"/> is "a.b.c", then <see paramref="excludedPrefixes"/> might be "a.b.c.ignore".</param>
            <returns>Group of <see cref="T:System.Collections.Specialized.NameValueCollection"/> that start with the given prefix, optionally have that prefix removed, and do not include properties that start with one of the given excluded prefixes.</returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.ReadFromEmbeddedAssemblyResource(System.String)">
            <summary>
            Reads the properties from assembly (embedded resource).
            </summary>
            <param name="resourceName">The file name to read resources from.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Util.PropertiesParser.ReadFromFileResource(System.String)">
            <summary>
            Reads the properties from file system.
            </summary>
            <param name="fileName">The file name to read resources from.</param>
            <returns></returns>
        </member>
        <member name="P:Quartz.Util.PropertiesParser.UnderlyingProperties">
            <summary>
            Gets the underlying properties.
            </summary>
            <value>The underlying properties.</value>
        </member>
        <member name="T:Quartz.CronExpression">
            <summary>
            Provides a parser and evaluator for unix-like cron expressions. Cron 
            expressions provide the ability to specify complex time combinations such as
            &quot;At 8:00am every Monday through Friday&quot; or &quot;At 1:30am every 
            last Friday of the month&quot;. 
            </summary>
            <remarks>
            <para>
            Cron expressions are comprised of 6 required fields and one optional field
            separated by white space. The fields respectively are described as follows:
            </para>
            <table cellspacing="8">
            <tr>
            <th align="left">Field Name</th>
            <th align="left"> </th>
            <th align="left">Allowed Values</th>
            <th align="left"> </th>
            <th align="left">Allowed Special Characters</th>
            </tr>
            <tr>
            <td align="left">Seconds</td>
            <td align="left"> </td>
            <td align="left">0-59</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Minutes</td>
            <td align="left"> </td>
            <td align="left">0-59</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Hours</td>
            <td align="left"> </td>
            <td align="left">0-23</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Day-of-month</td>
            <td align="left"> </td>
            <td align="left">1-31</td>
            <td align="left"> </td>
            <td align="left">, - /// ? / L W C</td>
            </tr>
            <tr>
            <td align="left">Month</td>
            <td align="left"> </td>
            <td align="left">1-12 or JAN-DEC</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            <tr>
            <td align="left">Day-of-Week</td>
            <td align="left"> </td>
            <td align="left">1-7 or SUN-SAT</td>
            <td align="left"> </td>
            <td align="left">, - /// ? / L #</td>
            </tr>
            <tr>
            <td align="left">Year (Optional)</td>
            <td align="left"> </td>
            <td align="left">empty, 1970-2199</td>
            <td align="left"> </td>
            <td align="left">, - /// /</td>
            </tr>
            </table>
            <para>
            The '*' character is used to specify all values. For example, &quot;*&quot; 
            in the minute field means &quot;every minute&quot;.
            </para>
            <para>
            The '?' character is allowed for the day-of-month and day-of-week fields. It
            is used to specify 'no specific value'. This is useful when you need to
            specify something in one of the two fields, but not the other.
            </para>
            <para>
            The '-' character is used to specify ranges For example &quot;10-12&quot; in
            the hour field means &quot;the hours 10, 11 and 12&quot;.
            </para>
            <para>
            The ',' character is used to specify additional values. For example
            &quot;MON,WED,FRI&quot; in the day-of-week field means &quot;the days Monday,
            Wednesday, and Friday&quot;.
            </para>
            <para>
            The '/' character is used to specify increments. For example &quot;0/15&quot;
            in the seconds field means &quot;the seconds 0, 15, 30, and 45&quot;. And 
            &quot;5/15&quot; in the seconds field means &quot;the seconds 5, 20, 35, and
            50&quot;.  Specifying '*' before the  '/' is equivalent to specifying 0 is
            the value to start with. Essentially, for each field in the expression, there
            is a set of numbers that can be turned on or off. For seconds and minutes, 
            the numbers range from 0 to 59. For hours 0 to 23, for days of the month 0 to
            31, and for months 1 to 12. The &quot;/&quot; character simply helps you turn
            on every &quot;nth&quot; value in the given set. Thus &quot;7/6&quot; in the
            month field only turns on month &quot;7&quot;, it does NOT mean every 6th 
            month, please note that subtlety.  
            </para>
            <para>
            The 'L' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for &quot;last&quot;, but it has different 
            meaning in each of the two fields. For example, the value &quot;L&quot; in 
            the day-of-month field means &quot;the last day of the month&quot; - day 31 
            for January, day 28 for February on non-leap years. If used in the 
            day-of-week field by itself, it simply means &quot;7&quot; or 
            &quot;SAT&quot;. But if used in the day-of-week field after another value, it
            means &quot;the last xxx day of the month&quot; - for example &quot;6L&quot;
            means &quot;the last friday of the month&quot;. You can also specify an offset 
            from the last day of the month, such as "L-3" which would mean the third-to-last 
            day of the calendar month. <i>When using the 'L' option, it is important not to 
            specify lists, or ranges of values, as you'll get confusing/unexpected results.</i>
            </para>
            <para>
            The 'W' character is allowed for the day-of-month field.  This character 
            is used to specify the weekday (Monday-Friday) nearest the given day.  As an 
            example, if you were to specify &quot;15W&quot; as the value for the 
            day-of-month field, the meaning is: &quot;the nearest weekday to the 15th of
            the month&quot;. So if the 15th is a Saturday, the trigger will fire on 
            Friday the 14th. If the 15th is a Sunday, the trigger will fire on Monday the
            16th. If the 15th is a Tuesday, then it will fire on Tuesday the 15th. 
            However if you specify &quot;1W&quot; as the value for day-of-month, and the
            1st is a Saturday, the trigger will fire on Monday the 3rd, as it will not 
            'jump' over the boundary of a month's days.  The 'W' character can only be 
            specified when the day-of-month is a single day, not a range or list of days.
            </para>
            <para>
            The 'L' and 'W' characters can also be combined for the day-of-month 
            expression to yield 'LW', which translates to &quot;last weekday of the 
            month&quot;.
            </para>
            <para>
            The '#' character is allowed for the day-of-week field. This character is
            used to specify &quot;the nth&quot; XXX day of the month. For example, the 
            value of &quot;6#3&quot; in the day-of-week field means the third Friday of 
            the month (day 6 = Friday and &quot;#3&quot; = the 3rd one in the month). 
            Other examples: &quot;2#1&quot; = the first Monday of the month and 
            &quot;4#5&quot; = the fifth Wednesday of the month. Note that if you specify
            &quot;#5&quot; and there is not 5 of the given day-of-week in the month, then
            no firing will occur that month. If the '#' character is used, there can
            only be one expression in the day-of-week field (&quot;3#1,6#3&quot; is 
            not valid, since there are two expressions).
            </para>
            <para>
            <!--The 'C' character is allowed for the day-of-month and day-of-week fields.
            This character is short-hand for "calendar". This means values are
            calculated against the associated calendar, if any. If no calendar is
            associated, then it is equivalent to having an all-inclusive calendar. A
            value of "5C" in the day-of-month field means "the first day included by the
            calendar on or after the 5th". A value of "1C" in the day-of-week field
            means "the first day included by the calendar on or after Sunday". -->
            </para>
            <para>
            The legal characters and the names of months and days of the week are not
            case sensitive.
            </para>
            <para>
            <b>NOTES:</b>
            <ul>
            <li>Support for specifying both a day-of-week and a day-of-month value is
            not complete (you'll need to use the '?' character in one of these fields).
            </li>
            <li>Overflowing ranges is supported - that is, having a larger number on 
            the left hand side than the right. You might do 22-2 to catch 10 o'clock 
            at night until 2 o'clock in the morning, or you might have NOV-FEB. It is 
            very important to note that overuse of overflowing ranges creates ranges 
            that don't make sense and no effort has been made to determine which 
            interpretation CronExpression chooses. An example would be 
            "0 0 14-6 ? * FRI-MON". </li>
            </ul>
            </para>
            </remarks>
            <author>Sharada Jambula</author>
            <author>James House</author>
            <author>Contributions from Mads Henderson</author>
            <author>Refactoring from CronTrigger to CronExpression by Aaron Craven</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="F:Quartz.CronExpression.Second">
            <summary>
            Field specification for second.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.Minute">
            <summary>
            Field specification for minute.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.Hour">
            <summary>
            Field specification for hour.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.DayOfMonth">
            <summary>
            Field specification for day of month.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.Month">
            <summary>
            Field specification for month.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.DayOfWeek">
            <summary>
            Field specification for day of week.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.Year">
            <summary>
            Field specification for year.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.AllSpecInt">
            <summary>
            Field specification for all wildcard value '*'.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.NoSpecInt">
            <summary>
            Field specification for not specified value '?'.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.AllSpec">
            <summary>
            Field specification for wildcard '*'.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.NoSpec">
            <summary>
            Field specification for no specification at all '?'.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.seconds">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.minutes">
            <summary>
            minutes.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.hours">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.daysOfMonth">
            <summary>
            Days of month.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.months">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.daysOfWeek">
            <summary>
            Days of week.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.years">
            <summary>
            Years.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.lastdayOfWeek">
            <summary>
            Last day of week.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.nthdayOfWeek">
            <summary>
            Nth day of week.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.lastdayOfMonth">
            <summary>
            Last day of month.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.nearestWeekday">
            <summary>
            Nearest weekday.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.calendardayOfWeek">
            <summary>
            Calendar day of week.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.calendardayOfMonth">
            <summary>
            Calendar day of month.
            </summary>
        </member>
        <member name="F:Quartz.CronExpression.expressionParsed">
            <summary>
            Expression parsed.
            </summary>
        </member>
        <member name="M:Quartz.CronExpression.#ctor(System.String)">
            <summary>
             Constructs a new <see cref="P:Quartz.CronExpression.CronExpressionString"/> based on the specified 
             parameter.
             </summary>
             <param name="cronExpression">
             String representation of the cron expression the new object should represent
             </param>
             <see cref="P:Quartz.CronExpression.CronExpressionString"/>
        </member>
        <member name="M:Quartz.CronExpression.IsSatisfiedBy(System.DateTimeOffset)">
            <summary>
            Indicates whether the given date satisfies the cron expression. 
            </summary>
            <remarks>
            Note that  milliseconds are ignored, so two Dates falling on different milliseconds
            of the same second will always have the same result here.
            </remarks>
            <param name="dateUtc">The date to evaluate.</param>
            <returns>a boolean indicating whether the given date satisfies the cron expression</returns>
        </member>
        <member name="M:Quartz.CronExpression.GetNextValidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which
            satisfies the cron expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next valid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="M:Quartz.CronExpression.GetNextInvalidTimeAfter(System.DateTimeOffset)">
            <summary>
            Returns the next date/time <i>after</i> the given date/time which does
            <i>not</i> satisfy the expression.
            </summary>
            <param name="date">the date/time at which to begin the search for the next invalid date/time</param>
            <returns>the next valid date/time</returns>
        </member>
        <member name="M:Quartz.CronExpression.ToString">
            <summary>
            Returns the string representation of the <see cref="T:Quartz.CronExpression"/>
            </summary>
            <returns>The string representation of the <see cref="T:Quartz.CronExpression"/></returns>
        </member>
        <member name="M:Quartz.CronExpression.IsValidExpression(System.String)">
            <summary>
            Indicates whether the specified cron expression can be parsed into a 
            valid cron expression
            </summary>
            <param name="cronExpression">the expression to evaluate</param>
            <returns>a boolean indicating whether the given expression is a valid cron
                    expression</returns>
        </member>
        <member name="M:Quartz.CronExpression.BuildExpression(System.String)">
            <summary>
            Builds the expression.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Quartz.CronExpression.StoreExpressionVals(System.Int32,System.String,System.Int32)">
            <summary>
            Stores the expression values.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to traverse.</param>
            <param name="type">The type of value.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.CheckNext(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks the next value.
            </summary>
            <param name="pos">The position.</param>
            <param name="s">The string to check.</param>
            <param name="val">The value.</param>
            <param name="type">The type to search.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetExpressionSummary">
            <summary>
            Gets the expression summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetExpressionSetSummary(Quartz.Collection.ISet{System.Int32})">
            <summary>
            Gets the expression set summary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.SkipWhiteSpace(System.Int32,System.String)">
            <summary>
            Skips the white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.FindNextWhiteSpace(System.Int32,System.String)">
            <summary>
            Finds the next white space.
            </summary>
            <param name="i">The i.</param>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.AddToSet(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds to set.
            </summary>
            <param name="val">The val.</param>
            <param name="end">The end.</param>
            <param name="incr">The incr.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Quartz.CronExpression.GetSet(System.Int32)">
            <summary>
            Gets the set of given type.
            </summary>
            <param name="type">The type of set to get.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetValue(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the value.
            </summary>
            <param name="v">The v.</param>
            <param name="s">The s.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetNumericValue(System.String,System.Int32)">
            <summary>
            Gets the numeric value from string.
            </summary>
            <param name="s">The string to parse from.</param>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetMonthNumber(System.String)">
            <summary>
            Gets the month number.
            </summary>
            <param name="s">The string to map with.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetDayOfWeekNumber(System.String)">
            <summary>
            Gets the day of week number.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the time from given time parts.
            </summary>
            <param name="sc">The seconds.</param>
            <param name="mn">The minutes.</param>
            <param name="hr">The hours.</param>
            <param name="dayofmn">The day of month.</param>
            <param name="mon">The month.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetTimeAfter(System.DateTimeOffset)">
            <summary>
            Gets the next fire time after the given time.
            </summary>
            <param name="afterTimeUtc">The UTC time to start searching from.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.CreateDateTimeWithoutMillis(System.DateTimeOffset)">
            <summary>
            Creates the date time without milliseconds.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.SetCalendarHour(System.DateTimeOffset,System.Int32)">
            <summary>
            Advance the calendar to the particular hour paying particular attention
            to daylight saving problems.
            </summary>
            <param name="date">The date.</param>
            <param name="hour">The hour.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetTimeBefore(System.Nullable{System.DateTimeOffset})">
            <summary>
            Gets the time before.
            </summary>
            <param name="endTime">The end time.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.GetFinalFireTime">
            <summary>
            NOT YET IMPLEMENTED: Returns the final time that the 
            <see cref="T:Quartz.CronExpression"/> will match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.IsLeapYear(System.Int32)">
            <summary>
            Determines whether given year is a leap year.
            </summary>
            <param name="year">The year.</param>
            <returns>
            	<c>true</c> if the specified year is a leap year; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Quartz.CronExpression.GetLastDayOfMonth(System.Int32,System.Int32)">
            <summary>
            Gets the last day of month.
            </summary>
            <param name="monthNum">The month num.</param>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:Quartz.CronExpression.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Quartz.CronExpression.Equals(Quartz.CronExpression)">
            <summary>
            Determines whether the specified <see cref="T:Quartz.CronExpression"/> is equal to the current <see cref="T:Quartz.CronExpression"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:Quartz.CronExpression"/> is equal to the current <see cref="T:Quartz.CronExpression"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:Quartz.CronExpression"/> to compare with the current <see cref="T:Quartz.CronExpression"/>. </param>
        </member>
        <member name="M:Quartz.CronExpression.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Quartz.CronExpression.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Quartz.CronExpression.TimeZone">
            <summary>
            Sets or gets the time zone for which the <see cref="T:Quartz.CronExpression"/> of this
            <see cref="T:Quartz.ICronTrigger"/> will be resolved.
            </summary>
        </member>
        <member name="P:Quartz.CronExpression.CronExpressionString">
            <summary>
            Gets the cron expression string.
            </summary>
            <value>The cron expression string.</value>
        </member>
        <member name="T:Quartz.ValueSet">
            <summary>
            Helper class for cron expression handling.
            </summary>
        </member>
        <member name="F:Quartz.ValueSet.theValue">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:Quartz.ValueSet.pos">
            <summary>
            The position.
            </summary>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.SQLiteDelegate">
            <summary>
            This is a driver delegate for the SQLiteDelegate ADO.NET driver.
            </summary>
            <author>Marko Lahma</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.SQLiteDelegate.GetSelectNextTriggerToAcquireSql(System.Int32)">
            <summary>
            Gets the select next trigger to acquire SQL clause.
            SQLite version with LIMIT support.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.DelegateInitializationArgs">
            <summary>
            Initialization argumens holder for <see cref="T:Quartz.Impl.AdoJobStore.IDriverDelegate"/> implementations.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.UseProperties">
            <summary>
            Whether simple <see cref="T:System.Collections.Specialized.NameValueCollection"/> should be used (for serialization safety).
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.TablePrefix">
            <summary>
            The prefix of all table names.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.InstanceName">
            <summary>
            The instance's name.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.InstanceId">
            <summary>
            The instance id.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.DbProvider">
            <summary>
            The db provider.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.TypeLoadHelper">
            <summary>
            The type loading strategy.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.ObjectSerializer">
            <summary>
            Object serializer and deserializer strategy to use.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.DelegateInitializationArgs.InitString">
            <summary>
            Custom driver delegate initialization.
            </summary>
            <remarks>
            initStrings are of the format:
            settingName=settingValue|otherSettingName=otherSettingValue|...
            </remarks>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.InvalidConfigurationException">
            <summary>
            Exception class for when a driver delegate cannot be found for a given
            configuration, or lack thereof.
            </summary>
            <author>  <a href="mailto:jeff@binaryfeed.org">Jeffrey Wescott</a></author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.AdoJobStore.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.AdoJobStore.InvalidConfigurationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Quartz.Impl.AdoJobStore.FiredTriggerRecord">
            <summary>
            Conveys the state of a fired-trigger record.
            </summary>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.FireInstanceId">
            <summary>
            Gets or sets the fire instance id.
            </summary>
            <value>The fire instance id.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.FireTimestamp">
            <summary>
            Gets or sets the fire timestamp.
            </summary>
            <value>The fire timestamp.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.JobDisallowsConcurrentExecution">
            <summary>
            Gets or sets a value indicating whether job disallows concurrent execution.
            </summary>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.JobKey">
            <summary>
            Gets or sets the job key.
            </summary>
            <value>The job key.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.SchedulerInstanceId">
            <summary>
            Gets or sets the scheduler instance id.
            </summary>
            <value>The scheduler instance id.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.TriggerKey">
            <summary>
            Gets or sets the trigger key.
            </summary>
            <value>The trigger key.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.FireInstanceState">
            <summary>
            Gets or sets the state of the fire instance.
            </summary>
            <value>The state of the fire instance.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.JobRequestsRecovery">
            <summary>
            Gets or sets a value indicating whether [job requests recovery].
            </summary>
            <value><c>true</c> if [job requests recovery]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Impl.AdoJobStore.FiredTriggerRecord.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="T:Quartz.Spi.TriggerFiredBundle">
            <summary>
            A simple class (structure) used for returning execution-time data from the
            JobStore to the <see cref="T:Quartz.Core.QuartzSchedulerThread"/>.
            </summary>
            <seealso cref="T:Quartz.Core.QuartzScheduler"/>
            <author>James House</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Spi.TriggerFiredBundle.#ctor(Quartz.IJobDetail,Quartz.Spi.IOperableTrigger,Quartz.ICalendar,System.Boolean,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Spi.TriggerFiredBundle"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="trigger">The trigger.</param>
            <param name="cal">The calendar.</param>
            <param name="jobIsRecovering">if set to <c>true</c> [job is recovering].</param>
            <param name="fireTimeUtc">The fire time.</param>
            <param name="scheduledFireTimeUtc">The scheduled fire time.</param>
            <param name="prevFireTimeUtc">The previous fire time.</param>
            <param name="nextFireTimeUtc">The next fire time.</param>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.JobDetail">
            <summary>
            Gets the job detail.
            </summary>
            <value>The job detail.</value>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.Trigger">
            <summary>
            Gets the trigger.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.Calendar">
            <summary>
            Gets the calendar.
            </summary>
            <value>The calendar.</value>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.Recovering">
            <summary>
            Gets a value indicating whether this <see cref="T:Quartz.Spi.TriggerFiredBundle"/> is recovering.
            </summary>
            <value><c>true</c> if recovering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.FireTimeUtc">
            <returns> 
            Returns the UTC fire time.
            </returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.NextFireTimeUtc">
            <summary>
            Gets the next UTC fire time.
            </summary>
            <value>The next fire time.</value>
            <returns> Returns the nextFireTimeUtc.</returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.PrevFireTimeUtc">
            <summary>
            Gets the previous UTC fire time.
            </summary>
            <value>The previous fire time.</value>
            <returns> Returns the previous fire time. </returns>
        </member>
        <member name="P:Quartz.Spi.TriggerFiredBundle.ScheduledFireTimeUtc">
            <returns> 
            Returns the scheduled UTC fire time.
            </returns>
        </member>
        <member name="T:Quartz.Impl.Calendar.MonthlyCalendar">
            <summary>
            This implementation of the Calendar excludes a set of days of the month. You
            may use it to exclude every 1. of each month for example. But you may define
            any day of a month.
            </summary>
            <seealso cref="T:Quartz.ICalendar"/>
            <seealso cref="T:Quartz.Impl.Calendar.BaseCalendar"/>
            <author>Juergen Donnerstag</author>
            <author>Marko Lahma (.NET)</author>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Quartz.Impl.Calendar.MonthlyCalendar"/> class.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.#ctor(Quartz.ICalendar)">
            <summary>
            Constructor
            </summary>
            <param name="baseCalendar">The base calendar.</param>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.Init">
            <summary> 
            Initialize internal variables
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.IsDayExcluded(System.Int32)">
            <summary>
            Return true, if mday is defined to be exluded.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.SetDayExcluded(System.Int32,System.Boolean)">
            <summary>
            Redefine a certain day of the month to be excluded (true) or included
            (false).
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.AreAllDaysExcluded">
            <summary>
            Check if all days are excluded. That is no day is included.
            </summary>
            <returns> boolean
            </returns>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.IsTimeIncluded(System.DateTimeOffset)">
            <summary>
            Determine whether the given time (in milliseconds) is 'included' by the
            Calendar.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.GetNextIncludedTimeUtc(System.DateTimeOffset)">
            <summary>
            Determine the next time (in milliseconds) that is 'included' by the
            Calendar after the given time. Return the original value if timeStamp is
            included. Return DateTime.MinValue if all days are excluded.
            <para>
            Note that this Calendar is only has full-day precision.
            </para>
            </summary>
        </member>
        <member name="M:Quartz.Impl.Calendar.MonthlyCalendar.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Quartz.Impl.Calendar.MonthlyCalendar.DaysExcluded">
            <summary>
            Get or set the array which defines the exclude-value of each day of month
            Setting will redefine the array of days excluded. The array must of size greater or
            equal 31.
            </summary>
        </member>
        <member name="T:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl">
            <summary>
            A concrete implementation of DailyTimeIntervalTrigger that is used to fire a <code><see cref="T:Quartz.IJobDetail"/></code>
            based upon daily repeating time intervals.
            </summary>
            <remarks>
            <para>
            The trigger will fire every N (<see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/> ) seconds, minutes or hours
            (see <see cref="P:Quartz.IDailyTimeIntervalTrigger.RepeatInterval"/>) during a given time window on specified days of the week.
            </para>
            <para>
            For example#1, a trigger can be set to fire every 72 minutes between 8:00 and 11:00 everyday. It's fire times would
            be 8:00, 9:12, 10:24, then next day would repeat: 8:00, 9:12, 10:24 again.
            </para>
            <para>
            For example#2, a trigger can be set to fire every 23 minutes between 9:20 and 16:47 Monday through Friday.
            </para>
            <para>
            On each day, the starting fire time is reset to startTimeOfDay value, and then it will add repeatInterval value to it until
            the endTimeOfDay is reached. If you set daysOfWeek values, then fire time will only occur during those week days period. Again,
            remember this trigger will reset fire time each day with startTimeOfDay, regardless of your interval or endTimeOfDay!
            </para>
            <para>
            The default values for fields if not set are: startTimeOfDay defaults to 00:00:00, the endTimeOfDay default to 23:59:59,
            and daysOfWeek is default to every day. The startTime default to current time-stamp now, while endTime has not value.
            </para>
            <para>
            If startTime is before startTimeOfDay, then startTimeOfDay will be used and startTime has no affect. Else if startTime is 
            after startTimeOfDay, then the first fire time for that day will be the next interval after the startTime. For example, if
            you set startingTimeOfDay=9am, endingTimeOfDay=11am, interval=15 mins, and startTime=9:33am, then the next fire time will
            be 9:45pm. Note also that if you do not set startTime value, the trigger builder will default to current time, and current time 
            maybe before or after the startTimeOfDay! So be aware how you set your startTime.
            </para>
            <para>
            This trigger also supports "repeatCount" feature to end the trigger fire time after
            a certain number of count is reached. Just as the SimpleTrigger, setting repeatCount=0 
            means trigger will fire once only! Setting any positive count then the trigger will repeat 
            count + 1 times. Unlike SimpleTrigger, the default value of repeatCount of this trigger
            is set to REPEAT_INDEFINITELY instead of 0 though.
            </para>
            </remarks>
            <see cref="T:Quartz.IDailyTimeIntervalTrigger"/>
            <see cref="T:Quartz.DailyTimeIntervalScheduleBuilder"/>
            <author>James House</author>
            <author>Zemian Deng saltnlight5@gmail.com</author>
            <author>Nuno Maia (.NET)</author>
        </member>
        <member name="F:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.RepeatIndefinitely">
            <summary>
            Used to indicate the 'repeat count' of the trigger is indefinite. Or in
            other words, the trigger should repeat continually until the trigger's
            ending timestamp.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor">
            <summary>
            Create a  <see cref="T:Quartz.IDailyTimeIntervalTrigger"/> with no settings.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor(System.String,Quartz.TimeOfDay,Quartz.TimeOfDay,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <code>DailyTimeIntervalTrigger</code> that will occur immediately, and
            repeat at the the given interval.
            </summary>
            <param name="name"></param>
            <param name="startTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should begin occurring.</param>
            <param name="endTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should stop occurring.</param>
            <param name="intervalUnit">The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.</param>
            <param name="repeatInterval"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor(System.String,System.String,Quartz.TimeOfDay,Quartz.TimeOfDay,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <code>DailyTimeIntervalTrigger</code> that will occur immediately, and
            repeat at the the given interval.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="startTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should begin occurring.</param>
            <param name="endTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should stop occurring.</param>
            <param name="intervalUnit">The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.</param>
            <param name="repeatInterval"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor(System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Quartz.TimeOfDay,Quartz.TimeOfDay,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <code>DailyTimeIntervalTrigger</code> that will occur at the given time,
            and repeat at the the given interval until the given end time.
            </summary>
            <param name="name"></param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to quit repeat firing.</param>
            <param name="startTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should begin occurring.</param>
            <param name="endTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should stop occurring.</param>
            <param name="intervalUnit">The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor(System.String,System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Quartz.TimeOfDay,Quartz.TimeOfDay,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <code>DailyTimeIntervalTrigger</code> that will occur at the given time,
            and repeat at the the given interval until the given end time.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to quit repeat firing.</param>
            <param name="startTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should begin occurring.</param>
            <param name="endTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should stop occurring.</param>
            <param name="intervalUnit">The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.DateTimeOffset,Quartz.TimeOfDay,Quartz.TimeOfDay,Quartz.IntervalUnit,System.Int32)">
            <summary>
            Create a <code>DailyTimeIntervalTrigger</code> that will occur at the given time,
            fire the identified <code>Job</code> and repeat at the the given
            interval until the given end time.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="jobName"></param>
            <param name="jobGroup"></param>
            <param name="startTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to fire.</param>
            <param name="endTimeUtc">A <code>Date</code> set to the time for the <code>Trigger</code>to quit repeat firing.</param>
            <param name="startTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should begin occurring.</param>
            <param name="endTimeOfDayUtc">The <code>TimeOfDay</code> that the repeating should stop occurring.</param>
            <param name="intervalUnit">The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.</param>
            <param name="repeatInterval">The number of milliseconds to pause between the repeat firing.</param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.UpdateAfterMisfire(Quartz.ICalendar)">
            <summary> 
            Updates the <see cref="T:Quartz.ICalendarIntervalTrigger"/>'s state based on the
            MISFIRE_INSTRUCTION_XXX that was selected when the <code>DailyTimeIntervalTrigger</code>
            was created.
            </summary>
            <remarks>
             If the misfire instruction is set to MISFIRE_INSTRUCTION_SMART_POLICY,
            then the following scheme will be used:
            <ul>
            <li>The instruction will be interpreted as <code>MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</code></li>
            </ul>
            </remarks>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.Triggered(Quartz.ICalendar)">
            <summary>
            Called when the <code>{@link Scheduler}</code> has decided to 'fire'
            the trigger (execute the associated <code>Job</code>), in order to
            give the <code>Trigger</code> a chance to update itself for its next
            triggering (if any).
            </summary>
            <param name="calendar"></param>
            <see cref="M:Quartz.Impl.Triggers.AbstractTrigger.ExecutionComplete(Quartz.IJobExecutionContext,Quartz.JobExecutionException)"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="calendar"></param>
            <param name="misfireThreshold"></param>
            <see cref="M:Quartz.Impl.Triggers.AbstractTrigger.UpdateWithNewCalendar(Quartz.ICalendar,System.TimeSpan)"/>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.ComputeFirstFireTimeUtc(Quartz.ICalendar)">
            <summary>
            This method should not be used by the Quartz client.
            </summary>
            <remarks>
            <para>
            Called by the scheduler at the time a <see cref="T:Quartz.ITrigger"/> is first
            added to the scheduler, in order to have the <see cref="T:Quartz.ITrigger"/>
            compute its first fire time, based on any associated calendar.
            </para>
            
            <para>
            After this method has been called, <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            should return a valid answer.
            </para>
            </remarks>
            <returns> 
            The first time at which the <see cref="T:Quartz.ITrigger"/> will be fired
            by the scheduler, which is also the same value <see cref="M:Quartz.ITrigger.GetNextFireTimeUtc"/>
            will return (until after the first firing of the <see cref="T:Quartz.ITrigger"/>).
            </returns>        
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.GetNextFireTimeUtc">
             <summary>
             Returns the next time at which the <see cref="T:Quartz.ITrigger"/> is scheduled to fire. If
             the trigger will not fire again, <see langword="null"/> will be returned.  Note that
             the time returned can possibly be in the past, if the time that was computed
             for the trigger to next fire has already arrived, but the scheduler has not yet
             been able to fire the trigger (which would likely be due to lack of resources
             e.g. threads).
             </summary>
            <remarks>
             The value returned is not guaranteed to be valid until after the <see cref="T:Quartz.ITrigger"/>
             has been added to the scheduler.
             </remarks>
             <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.GetPreviousFireTimeUtc">
            <summary>
            Returns the previous time at which the <see cref="T:Quartz.ICalendarIntervalTrigger"/> fired.
            If the trigger has not yet fired, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.SetNextFireTimeUtc(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set the next time at which the <code>DailyTimeIntervalTrigger</code> should fire.
            </summary>
            <remarks>
            This method should not be invoked by client code.
            </remarks>
            <param name="value"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.SetPreviousFireTimeUtc(System.Nullable{System.DateTimeOffset})">
            <summary>
            Set the previous time at which the <code>DailyTimeIntervalTrigger</code> fired.
            </summary>
            <remarks>
            This method should not be invoked by client code.
            </remarks>
            <param name="previousFireTimeUtc"></param>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.GetFireTimeAfter(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns the next time at which the <code>DailyTimeIntervalTrigger</code> will
            fire, after the given time. If the trigger will not fire after the given
            time, <code>null</code> will be returned.
            </summary>
            <param name="afterTime"></param>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.AdvanceToNextDayOfWeek(System.DateTimeOffset,System.Boolean)">
            <summary>
            Given fireTime time, we need to advance/calculate and return a time of next available week day.
            </summary>
            <param name="fireTime">given next fireTime.</param>
            <param name="forceToAdvanceNextDay">flag to whether to advance day without check existing week day. This scenario
            can happen when a caller determine fireTime has passed the endTimeOfDay that fireTime should move to next day anyway.
            </param>
            <returns>a next day fireTime.</returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.GetMayFireAgain">
            <summary>
            Determines whether or not the <code>DailyTimeIntervalTrigger</code> will occur
            again.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.Validate">
            <summary>
            Validates whether the properties of the <code>JobDetail</code> are
            valid for submission into a <code>Scheduler</code>.
            </summary>
        </member>
        <member name="M:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.GetScheduleBuilder">
            <summary>
            Get a {@link ScheduleBuilder} that is configured to produce a 
            schedule identical to this trigger's schedule.
            </summary>
            <returns></returns>
            <see cref="T:Quartz.TriggerBuilder"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.StartTimeUtc">
            <summary>
            The time at which the <code>DailyTimeIntervalTrigger</code> should occur.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.EndTimeUtc">
            <summary>
            the time at which the <code>DailyTimeIntervalTrigger</code> should quit repeating.
            </summary>
            <see cref="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.FinalFireTimeUtc"/>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.RepeatCount">
            <summary>
            Get the the number of times for interval this trigger should repeat, 
            after which it will be automatically deleted.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.RepeatIntervalUnit">
            <summary>
            the interval unit - the time unit on with the interval applies.
            </summary>
            <remarks>
            The repeat interval unit. The only intervals that are valid for this type of trigger are
            <see cref="F:Quartz.IntervalUnit.Second"/>, <see cref="F:Quartz.IntervalUnit.Minute"/>, and <see cref="F:Quartz.IntervalUnit.Hour"/>.
            </remarks>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.RepeatInterval">
            <summary>
            the the time interval that will be added to the <code>DailyTimeIntervalTrigger</code>'s
            fire time (in the set repeat interval unit) in order to calculate the time of the
            next trigger repeat.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.TimesTriggered">
            <summary>
            the number of times the <code>DailyTimeIntervalTrigger</code> has already
            fired.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.FinalFireTimeUtc">
            <summary>
            Returns the final time at which the <code>DailyTimeIntervalTrigger</code> will
            fire, if there is no end time set, null will be returned.
            </summary>
            <remarks>Note that the return time may be in the past.</remarks>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.DaysOfWeek">
            <summary>
            The days of the week upon which to fire.
            </summary>
            <returns>
            A Set containing the integers representing the days of the week, per the values 0-6 as defined by
            DayOfWees.Sunday - DayOfWeek.Saturday. 
            </returns>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.StartTimeOfDayUtc">
            <summary>
            The time of day to start firing at the given interval.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.EndTimeOfDayUtc">
            <summary>
            The time of day to complete firing at the given interval.
            </summary>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.HasAdditionalProperties">
            <summary>
            This trigger has no additional properties besides what's defined in this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Quartz.Impl.Triggers.DailyTimeIntervalTriggerImpl.HasMillisecondPrecision">
            <summary>
            Tells whether this Trigger instance can handle events
            in millisecond precision.
            </summary>
        </member>
    </members>
</doc>
