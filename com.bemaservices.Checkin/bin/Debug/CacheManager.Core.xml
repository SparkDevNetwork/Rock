<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CacheManager.Core</name>
    </assembly>
    <members>
        <member name="T:CacheManager.Core.BaseCacheManager`1">
            <summary>
            The <see cref="T:CacheManager.Core.BaseCacheManager`1"/> implements <see cref="T:CacheManager.Core.ICacheManager`1"/> and is the main class
            of this library.
            The cache manager delegates all cache operations to the list of <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>'s which have been
            added. It will keep them in sync according to rules and depending on the configuration.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.#ctor(CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.BaseCacheManager`1"/> class
            using the specified <paramref name="configuration"/>.
            If the name of the <paramref name="configuration"/> is defined, the cache manager will
            use it. Otherwise a random string will be generated.
            </summary>
            <param name="configuration">
            The configuration which defines the structure and complexity of the cache manager.
            </param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="configuration"/> is null.
            </exception>
            <see cref="T:CacheManager.Core.CacheFactory"/>
            <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
            <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.#ctor(System.String,CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.BaseCacheManager`1"/> class
            using the specified <paramref name="name"/> and <paramref name="configuration"/>.
            </summary>
            <param name="name">The cache name.</param>
            <param name="configuration">
            The configuration which defines the structure and complexity of the cache manager.
            </param>
            <exception cref="T:System.ArgumentNullException">
            When <paramref name="name"/> or <paramref name="configuration"/> is null.
            </exception>
            <see cref="T:CacheManager.Core.CacheFactory"/>
            <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
            <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnAdd">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnClear">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnClearRegion">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnGet">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnPut">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnRemove">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnRemoveByHandle">
            <inheritdoc />
        </member>
        <member name="E:CacheManager.Core.BaseCacheManager`1.OnUpdate">
            <inheritdoc />
        </member>
        <member name="P:CacheManager.Core.BaseCacheManager`1.Configuration">
            <inheritdoc />
        </member>
        <member name="P:CacheManager.Core.BaseCacheManager`1.CacheHandles">
            <inheritdoc />
        </member>
        <member name="P:CacheManager.Core.BaseCacheManager`1.Backplane">
            <summary>
            Gets the configured cache backplane.
            </summary>
            <value>The backplane.</value>
        </member>
        <member name="P:CacheManager.Core.BaseCacheManager`1.Name">
            <summary>
            Gets the cache name.
            </summary>
            <value>The name of the cache.</value>
        </member>
        <member name="P:CacheManager.Core.BaseCacheManager`1.Logger">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.ClearRegion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Exists(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddInternal(CacheManager.Core.CacheItem{`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.PutInternal(CacheManager.Core.CacheItem{`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetCacheItemInternal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetCacheItemInternal(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.RemoveInternal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.RemoveInternal(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,System.String,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Expire(System.String,System.String,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.RemoveExpiration(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.RemoveExpiration(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,System.String,`0)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,System.Func{System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,System.String,System.Func{System.String,System.String,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,System.Func{System.String,CacheManager.Core.CacheItem{`0}})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.GetOrAdd(System.String,System.String,System.Func{System.String,System.String,CacheManager.Core.CacheItem{`0}})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryGetOrAdd(System.String,System.Func{System.String,`0},`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryGetOrAdd(System.String,System.String,System.Func{System.String,System.String,`0},`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryGetOrAdd(System.String,System.Func{System.String,CacheManager.Core.CacheItem{`0}},CacheManager.Core.CacheItem{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryGetOrAdd(System.String,System.String,System.Func{System.String,System.String,CacheManager.Core.CacheItem{`0}},CacheManager.Core.CacheItem{`0}@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(System.String,`0,System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(System.String,System.String,`0,System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(System.String,`0,System.Func{`0,`0},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(System.String,System.String,`0,System.Func{`0,`0},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(CacheManager.Core.CacheItem{`0},System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.AddOrUpdate(CacheManager.Core.CacheItem{`0},System.Func{`0,`0},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryUpdate(System.String,System.Func{`0,`0},`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryUpdate(System.String,System.String,System.Func{`0,`0},`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryUpdate(System.String,System.Func{`0,`0},System.Int32,`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.TryUpdate(System.String,System.String,System.Func{`0,`0},System.Int32,`0@)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Update(System.String,System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Update(System.String,System.String,System.Func{`0,`0})">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Update(System.String,System.Func{`0,`0},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.BaseCacheManager`1.Update(System.String,System.String,System.Func{`0,`0},System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.CacheFactory">
            <summary>
            Helper class to instantiate new <see cref="T:CacheManager.Core.ICacheManager`1"/> instances from configuration.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build(System.String,System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             <para>Instantiates a cache manager using the inline configuration defined by <paramref name="settings"/>.</para>
             <para>This Build method returns a <c>ICacheManager</c> with cache item type being <c>System.Object</c>.</para>
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build("myCacheName", settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             cache.Add("key", "value");
             ]]>
             </code>
             </example>
             <param name="cacheName">The name of the cache manager instance.</param>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <returns>The cache manager instance with cache item type being <c>System.Object</c>.</returns>
             <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the <paramref name="cacheName"/> or <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build(System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             <para>Instantiates a cache manager using the inline configuration defined by <paramref name="settings"/>.</para>
             <para>This Build method returns a <see cref="T:CacheManager.Core.ICacheManager`1"/> with cache item type being <see cref="T:System.Object"/>.</para>
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build(settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             cache.Add("key", "value");
             ]]>
             </code>
             </example>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <returns>The cache manager instance.</returns>
             <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
             <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build``1(System.String,System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             <para>Instantiates a cache manager using the inline configuration defined by <paramref name="settings"/>.</para>
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build("myCacheName", settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             cache.Add("key", "value");
             ]]>
             </code>
             </example>
             <param name="cacheName">The name of the cache manager instance.</param>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
             <returns>The cache manager instance with cache item type being <c>TCacheValue</c>.</returns>
             <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the <paramref name="cacheName"/> or <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build``1(System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             <para>Instantiates a cache manager using the inline configuration defined by <paramref name="settings"/>.</para>
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build(settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             cache.Add("key", "value");
             ]]>
             </code>
             </example>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
             <returns>The cache manager instance with cache item type being <c>TCacheValue</c>.</returns>
             <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
             <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build(System.Type,System.String,System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             Instantiates a cache manager using the given type and the inline configuration defined by <paramref name="settings"/>.
             Use this overload if you cannot invoke the generic method, for example in conjunction with dependency injection.
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build(typeof(string), "myCacheName", settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             ]]>
             </code>
             </example>
             <param name="cacheValueType">The type of the cache item value.</param>
             <param name="cacheName">The name of the cache manager instance.</param>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <returns>The cache manager instance.</returns>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the <paramref name="cacheName"/> or <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.Build(System.Type,System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
             <summary>
             Instantiates a cache manager using the given type and the inline configuration defined by <paramref name="settings"/>.
             Use this overload if you cannot invoke the generic method, for example in conjunction with dependency injection.
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var cache = CacheFactory.Build(typeof(string), settings =>
             {
                settings
                    .WithUpdateMode(CacheUpdateMode.Up)
                    .WithDictionaryHandle()
                        .EnablePerformanceCounters()
                        .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             ]]>
             </code>
             </example>
             <param name="cacheValueType">The type of the cache item value.</param>
             <param name="settings">
             The configuration. Use the settings element to configure the cache manager instance, add
             cache handles and also to configure the cache handles in a fluent way.
             </param>
             <returns>The cache manager instance.</returns>
             <exception cref="T:System.ArgumentNullException">
             Thrown if <paramref name="settings"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration``1(System.String)">
            <summary>
            <para>Instantiates a cache manager from app.config or web.config.</para>
            <para>
            The <paramref name="cacheName"/> must match with one cache element defined in your
            config file.
            </para>
            </summary>
            <example>
            The following example show how to use the CacheFactory to create a new cache manager
            instance from app/web.config.
            <code>
            <![CDATA[
                var cache = CacheFactory.FromConfiguration<object>("myCache");
                cache.Add("key", "value");
            ]]>
            </code>
            </example>
            <param name="cacheName">
            The name of the cache, must also match with the configured cache name.
            </param>
            <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
            <returns>The cache manager instance.</returns>
            <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cacheName"/> is null or an empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there are configuration errors within the cacheManager section.
            Thrown if no cacheManager section is defined or on certain configuration errors related
            to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration(System.Type,System.String)">
            <summary>
            Instantiates a cache manager from app.config or web.config.
            Use this overload only if you cannot use the generic overload. The return type will be <c>Object</c>.
            This method can be used for example in conjunction with dependency injection frameworks.
            <para>
            The <paramref name="cacheName"/> must match with one cache element defined in your
            config file.
            </para>
            </summary>
            <param name="cacheValueType">The type of the cache item value.</param>
            <param name="cacheName">
            The name of the cache, must also match with the configured cache name.
            </param>
            <returns>The cache manager instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cacheValueType"/> or <paramref name="cacheName"/> is null or an empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there are configuration errors within the cacheManager section.
            Thrown if no cacheManager section is defined or on certain configuration errors related
            to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration``1(System.String,System.String)">
            <summary>
            <para>Instantiates a cache manager from app.config or web.config.</para>
            <para>
            The <paramref name="cacheName"/> must match with one cache element defined in your
            config file.
            </para>
            </summary>
            <example>
            The following example show how to use the CacheFactory to create a new cache manager
            instance from app/web.config.
            <code>
            <![CDATA[
                var cache = CacheFactory.FromConfiguration<object>("cache", "section");
                cache.Add("key", "value");
            ]]>
            </code>
            </example>
            <param name="cacheName">The name of the cache.</param>
            <param name="sectionName">
            The cache manager section name.
            </param>
            <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
            <returns>The cache manager instance.</returns>
            <seealso cref="T:CacheManager.Core.ICacheManager`1"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cacheName"/> or <paramref name="sectionName"/> is null or an empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there are configuration errors within the cacheManager section.
            Thrown if no cacheManager section is defined or on certain configuration errors related
            to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration(System.Type,System.String,System.String)">
            <summary>
            Instantiates a cache manager from app.config or web.config.
            Use this overload only if you cannot use the generic overload. The return type will be <c>Object</c>.
            This method can be used for example in conjunction with dependency injection frameworks.
            <para>
            The <paramref name="cacheName"/> must match with one cache element defined in your
            config file.
            </para>
            </summary>
            <param name="cacheValueType">The type of the cache item value.</param>
            <param name="cacheName">The name of the cache.</param>
            <param name="sectionName">
            The cache manager section name.
            </param>
            <returns>The cache manager instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cacheValueType"/>, <paramref name="cacheName"/> or <paramref name="sectionName"/>
            is null or an empty.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if there are configuration errors within the cacheManager section.
            Thrown if no cacheManager section is defined or on certain configuration errors related
            to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration``1(System.String,CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            <para>Instantiates a cache manager using the given <paramref name="configuration"/>.</para>
            </summary>
            <param name="cacheName">The name of the cache.</param>
            <param name="configuration">
            The configured which will be used to configure the cache manager instance.
            </param>
            <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
            <returns>The cache manager instance.</returns>
            <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="configuration"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown on certain configuration errors related to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration``1(CacheManager.Core.ICacheManagerConfiguration)">
             <summary>
             <para>Instantiates a cache manager using the given <paramref name="configuration"/>.</para>
             </summary>
             <example>
             The following example show how to build a <c>CacheManagerConfiguration</c> and then
             using the <c>CacheFactory</c> to create a new cache manager instance.
             <code>
             <![CDATA[
             var managerConfiguration = ConfigurationBuilder.BuildConfiguration<object>(settings =>
             {
                 settings.WithUpdateMode(CacheUpdateMode.Up)
                     .WithDictionaryCacheHandle<object>>()
                         .EnablePerformanceCounters()
                         .WithExpiration(ExpirationMode.Sliding, TimeSpan.FromSeconds(10));
             });
            
             var cache = CacheFactory.FromConfiguration<object>(managerConfiguration);
             cache.Add("key", "value");
             ]]>
             </code>
             </example>
             <param name="configuration">
             The configured which will be used to configure the cache manager instance.
             </param>
             <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
             <returns>The cache manager instance.</returns>
             <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
             <exception cref="T:System.ArgumentNullException">
             Thrown if the <paramref name="configuration"/> is null.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             Thrown on certain configuration errors related to the cache handles.
             </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration(System.Type,System.String,CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Instantiates a cache manager using the given <paramref name="cacheValueType"/> and <paramref name="configuration"/>.
            Use this overload only if you cannot use the generic overload. The return type will be <c>Object</c>.
            This method can be used for example in conjunction with dependency injection frameworks.
            </summary>
            <param name="cacheValueType">The type of the cache item value.</param>
            <param name="cacheName">The name of the cache.</param>
            <param name="configuration">
            The configured which will be used to configure the cache manager instance.
            </param>
            <returns>The cache manager instance.</returns>
            <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <c>cacheValueType</c>, <c>cacheName</c> or <c>configuration</c> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown on certain configuration errors related to the cache handles.
            </exception>
        </member>
        <member name="M:CacheManager.Core.CacheFactory.FromConfiguration(System.Type,CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Instantiates a cache manager using the given <paramref name="cacheValueType"/> and <paramref name="configuration"/>.
            Use this overload only if you cannot use the generic overload. The return type will be <c>Object</c>.
            This method can be used for example in conjunction with dependency injection frameworks.
            </summary>
            <param name="cacheValueType">The type of the cache item value.</param>
            <param name="configuration">
            The configured which will be used to configure the cache manager instance.
            </param>
            <returns>The cache manager instance.</returns>
            <see cref="T:CacheManager.Core.ConfigurationBuilder"/>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the <paramref name="cacheValueType"/> or <paramref name="configuration"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown on certain configuration errors related to the cache handles.
            </exception>
        </member>
        <member name="T:CacheManager.Core.CacheHandleConfiguration">
            <summary>
            Defines all settings the cache handle should respect.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheHandleConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheHandleConfiguration"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheHandleConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheHandleConfiguration"/> class.
            </summary>
            <param name="handleName">Name of the handle. This value will also be used for the <see cref="P:CacheManager.Core.CacheHandleConfiguration.Key"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="handleName"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheHandleConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheHandleConfiguration"/> class.
            </summary>
            <param name="handleName">Name of the handle.</param>
            <param name="configurationKey">The key which can be used to identify another part of the configuration which the handle might need.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="handleName"/> or <paramref name="configurationKey"/> is null.
            </exception>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.EnablePerformanceCounters">
            <summary>
            Gets or sets a value indicating whether performance counters should be enabled or not.
            <para>
            If enabled, and the initialization of performance counters doesn't work, for example
            because of security reasons. The counters will get disabled silently.
            </para>
            </summary>
            <value><c>true</c> if performance counters should be enable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.EnableStatistics">
            <summary>
            Gets or sets a value indicating whether statistics should be enabled.
            </summary>
            <value><c>true</c> if statistics should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.ExpirationMode">
            <summary>
            Gets or sets the expiration mode.
            </summary>
            <value>The expiration mode.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.ExpirationTimeout">
            <summary>
            Gets or sets the expiration timeout.
            </summary>
            <value>The expiration timeout.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.Name">
            <summary>
            Gets or sets the name for the cache handle which is also the identifier of the configuration.
            </summary>
            <value>The name of the handle.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.Key">
            <summary>
            Gets or sets the configuration key.
            Some cache handles require to reference another part of the configuration by name.
            If not specified, the <see cref="P:CacheManager.Core.CacheHandleConfiguration.Name"/> will be used instead.
            </summary>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.IsBackplaneSource">
            <summary>
            Gets or sets a value indicating whether this instance is backplane source.
            <para>
            Only one cache handle inside one cache manager can be backplane source. Usually this is
            a distributed cache. It might not make any sense to define an in process cache as backplane source.
            </para>
            <para>If no backplane is configured for the cache, this setting will have no effect.</para>
            </summary>
            <value><c>true</c> if this instance should be backplane source; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.CacheHandleConfiguration.HandleType">
            <summary>
            Gets or sets the type of the handle.
            </summary>
            <value>The type of the handle.</value>
        </member>
        <member name="M:CacheManager.Core.CacheHandleConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.CacheItem`1">
            <summary>
            The item which will be stored in the cache holding the cache value and additional
            information needed by the cache handles and manager.
            </summary>
            <typeparam name="T">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <exception cref="T:System.ArgumentNullException">If key or value are null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor(System.String,System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">If key, value or region are null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor(System.String,`0,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="expiration">The expiration mode.</param>
            <param name="timeout">The expiration timeout.</param>
            <exception cref="T:System.ArgumentNullException">If key or value are null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor(System.String,System.String,`0,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The cache value.</param>
            <param name="region">The cache region.</param>
            <param name="expiration">The expiration mode.</param>
            <param name="timeout">The expiration timeout.</param>
            <exception cref="T:System.ArgumentNullException">If key, value or region are null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheItem`1"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">If info is null.</exception>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.IsExpired">
            <summary>
            Gets a value indicating whether the item is logically expired or not.
            Depending on the cache vendor, the item might still live in the cache although
            according to the expiration mode and timeout, the item is already expired.
            </summary>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.CreatedUtc">
            <summary>
            Gets the creation date of the cache item.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.ExpirationMode">
            <summary>
            Gets the expiration mode.
            </summary>
            <value>The expiration mode.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.ExpirationTimeout">
            <summary>
            Gets the expiration timeout.
            </summary>
            <value>The expiration timeout.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.Key">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.LastAccessedUtc">
            <summary>
            Gets or sets the last accessed date of the cache item.
            </summary>
            <value>The last accessed date.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.Region">
            <summary>
            Gets the cache region.
            </summary>
            <value>The cache region.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.Value">
            <summary>
            Gets the cache value.
            </summary>
            <value>The cache value.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.ValueType">
            <summary>
            Gets the type of the cache value.
            <para>This might be used for serialization and deserialization.</para>
            </summary>
            <value>The type of the cache value.</value>
        </member>
        <member name="P:CacheManager.Core.CacheItem`1.UsesExpirationDefaults">
            <summary>
            Gets a value indicating whether the cache item uses the cache handle's configured expiration.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data
            needed to serialize the target object.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for
            this serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">If info is null.</exception>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithAbsoluteExpiration(System.DateTimeOffset)">
            <summary>
            Creates a copy of the current cache item and sets a new absolute expiration date.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <param name="absoluteExpiration">The absolute expiration date.</param>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithAbsoluteExpiration(System.TimeSpan)">
            <summary>
            Creates a copy of the current cache item and sets a new absolute expiration date.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <param name="absoluteExpiration">The absolute expiration date.</param>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithSlidingExpiration(System.TimeSpan)">
            <summary>
            Creates a copy of the current cache item and sets a new sliding expiration value.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <param name="slidingExpiration">The sliding expiration value.</param>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithNoExpiration">
            <summary>
            Creates a copy of the current cache item without expiration. Can be used to update the cache
            and remove any previously configured expiration of the item.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithDefaultExpiration">
            <summary>
            Creates a copy of the current cache item with no explicit expiration, instructing the cache to use the default defined in the cache handle configuration.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithValue(`0)">
            <summary>
            Creates a copy of the current cache item with new value.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <param name="value">The new value.</param>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="M:CacheManager.Core.CacheItem`1.WithCreated(System.DateTime)">
            <summary>
            Creates a copy of the current cache item with a given created date.
            This method doesn't change the state of the item in the cache. Use <c>Put</c> or similar methods to update the cache with the returned copy of the item.
            </summary>
            <remarks>We do not clone the cache item or value.</remarks>
            <param name="created">The new created date.</param>
            <returns>The new instance of the cache item.</returns>
        </member>
        <member name="T:CacheManager.Core.CacheManagerConfiguration">
            <summary>
            The basic cache manager configuration class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.CacheManagerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> class.
            </summary>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.Builder">
            <summary>
            Gets a <see cref="T:CacheManager.Core.ConfigurationBuilder"/> for the current <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> instance
            to manipulate the configuration fluently.
            </summary>
            <returns>The <see cref="T:CacheManager.Core.ConfigurationBuilder"/>.</returns>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.Name">
            <summary>
            Gets or sets the name of the cache.
            </summary>
            <value>The name of the cache.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.UpdateMode">
            <summary>
            Gets or sets the <see cref="P:CacheManager.Core.CacheManagerConfiguration.UpdateMode"/> for the cache manager instance.
            <para>
            Drives the behavior of the cache manager how it should update the different cache
            handles it manages.
            </para>
            </summary>
            <value>The cache update mode.</value>
            <see cref="P:CacheManager.Core.CacheManagerConfiguration.UpdateMode"/>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.MaxRetries">
            <summary>
            Gets or sets the limit of the number of retry operations per action.
            <para>Default is 50.</para>
            </summary>
            <value>The maximum retries.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.RetryTimeout">
            <summary>
            Gets or sets the number of milliseconds the cache should wait before it will retry an action.
            <para>Default is 100.</para>
            </summary>
            <value>The retry timeout.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.BackplaneConfigurationKey">
            <summary>
            Gets or sets the configuration key the backplane might use.
            </summary>
            <value>The key of the backplane configuration.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.BackplaneChannelName">
            <summary>
            Gets or sets the backplane channel name.
            </summary>
            <value>The channel name.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.HasBackplane">
            <summary>
            Gets a value indicating whether this instance has a backplane defined.
            </summary>
            <value>
            <c>true</c> if this instance has cache backplane; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.BackplaneType">
            <summary>
            Gets or sets the factory method for a cache backplane.
            </summary>
            <value>The backplane activator.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.BackplaneTypeArguments">
            <summary>
            Gets or sets additional arguments which should be used instantiating the backplane.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.SerializerType">
            <summary>
            Gets or sets the factory method for a cache serializer.
            </summary>
            <value>The serializer activator.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.SerializerTypeArguments">
            <summary>
            Gets or sets additional arguments which should be used instantiating the serializer.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.LoggerFactoryType">
            <summary>
            Gets or sets the factory method for a logger factory.
            </summary>
            <value>
            The logger factory activator.
            </value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.LoggerFactoryTypeArguments">
            <summary>
            Gets or sets additional arguments which should be used instantiating the logger factory.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.CacheManagerConfiguration.CacheHandleConfigurations">
            <summary>
            Gets the list of cache handle configurations.
            </summary>
            <value>The list of cache handle configurations.</value>
        </member>
        <member name="M:CacheManager.Core.CacheManagerConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.CacheUpdateMode">
            <summary>
            Defines the possible update modes of the cache manager.
            <para>
            Update mode works on Get operations. If the cache manager finds the cache item in one of the
            cache handles, and other cache handles do not have that item, it might add the item to the
            other cache handles depending on the mode.
            </para>
            </summary>
        </member>
        <member name="F:CacheManager.Core.CacheUpdateMode.None">
            <summary>
            Instructs the cache manager not to synchronize cache items with other cache handles (on <see cref="M:CacheManager.Core.ICache`1.Get(System.String)"/> for example).
            </summary>
        </member>
        <member name="F:CacheManager.Core.CacheUpdateMode.Up">
            <summary>
            Instructs the cache manager to synchronize cache items with other cache handles above in the list of cache handles.
            The order of cache handles is defined by the configuration.
            <remarks>
            This is the default behavior and should only be turned off if really needed.
            </remarks>
            </summary>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheManagerSection">
            <summary>
            Configuration section for the CacheManager.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Configuration.CacheManagerSection.DefaultSectionName">
            <summary>
            The default section name.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerSection.CacheHandleDefinitions">
            <summary>
            Gets the cache handle definitions.
            </summary>
            <value>The cache handle definitions.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerSection.CacheManagers">
            <summary>
            Gets the cache managers.
            </summary>
            <value>The cache managers.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerSection.Xmlns">
            <summary>
            Gets or sets the XMLNS.
            </summary>
            <value>The XMLNS.</value>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheHandleDefinition">
            <summary>
            Part of the section defining the available cache handles.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheHandleDefinition.DefaultExpirationMode">
            <summary>
            Gets or sets the default expiration mode.
            </summary>
            <value>The default expiration mode.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheHandleDefinition.DefaultTimeout">
            <summary>
            Gets or sets the default timeout for the cache handle. If not overruled by the cache
            manager configuration, this value will be used instead. If nothing is defined, no
            expiration will be used.
            <para>
            It is possible to define timeout in hours minutes or seconds by having a number +
            suffix, e.g. 10h means 10 hours, 5m means 5 minutes, 23s means 23 seconds.
            </para>If no suffix is defined, minutes will be used.
            </summary>
            <value>The default timeout.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheHandleDefinition.HandleType">
            <summary>
            Gets or sets the type of the handle.
            </summary>
            <value>The type of the handle.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheHandleDefinition.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheHandleDefinitionCollection">
            <summary>
            The collection of cache handle definitions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheHandleDefinitionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Configuration.CacheHandleDefinitionCollection"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheHandleDefinitionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheHandleDefinitionCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheHandleDefinitionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheManagerCollection">
            <summary>
            Collection of cache configurations.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheManagerHandle">
            <summary>
            Configuration element which defines a cache handle configuration within a cache manager configuration.
            </summary>
            <see cref="T:CacheManager.Core.CacheHandleConfiguration"/>
            <see cref="T:CacheManager.Core.CacheManagerConfiguration"/>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandle.ExpirationMode">
            <summary>
            Gets or sets the expiration mode.
            </summary>
            <value>The expiration mode.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandle.IsBackplaneSource">
            <summary>
            Gets or sets a value indicating whether this instance is backplane source.
            </summary>
            <value><c>true</c> if this instance is backplane source; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandle.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandle.RefHandleId">
            <summary>
            Gets or sets the reference handle identifier.
            </summary>
            <value>The reference handle identifier.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandle.Timeout">
            <summary>
            Gets or sets the default timeout for the cache handle. If not overruled by the cache
            manager configuration, this value will be used instead. If nothing is defined, no
            expiration will be used.
            <para>
            It is possible to define timeout in hours minutes or seconds by having a number +
            suffix, e.g. 10h means 10 hours, 5m means 5 minutes, 23s means 23 seconds.
            </para>If no suffix is defined, minutes will be used.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:CacheManager.Core.Configuration.CacheManagerHandleCollection">
            <summary>
            The collection of cache handles defined for a cache manager.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerHandleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Configuration.CacheManagerHandleCollection"/> class.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.BackplaneName">
            <summary>
            Gets or sets the name of the backplane.
            </summary>
            <value>The name of the backplane.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.BackplaneType">
            <summary>
            Gets or sets the type of the backplane.
            </summary>
            <value>The type of the backplane.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.SerializerType">
            <summary>
            Gets or sets the type of the serializer.
            </summary>
            <value>The type of the serializer.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.EnablePerformanceCounters">
            <summary>
            Gets or sets a value indicating whether performance counters should be enabled.
            </summary>
            <value><c>true</c> if performance counters should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.EnableStatistics">
            <summary>
            Gets or sets a value indicating whether statistics should be enabled.
            </summary>
            <value><c>true</c> if statistics should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.MaximumRetries">
            <summary>
            Gets or sets the number of maximum retries.
            </summary>
            <value>The number of maximum retries.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.RetryTimeout">
            <summary>
            Gets or sets the retry timeout.
            </summary>
            <value>The retry timeout.</value>
        </member>
        <member name="P:CacheManager.Core.Configuration.CacheManagerHandleCollection.UpdateMode">
            <summary>
            Gets or sets the update mode.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerHandleCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerHandleCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.Configuration.CacheManagerHandleCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="T:CacheManager.Core.ConfigurationBuilder">
            <summary>
            Helper class to load cache manager configurations from file or to build new configurations
            in a fluent way.
            <para>
            This only loads configurations. To build a cache manager instance, use <c>CacheFactory</c>
            and pass in the configuration. Or use the <c>Build</c> methods of <c>CacheFactory</c>!
            </para>
            </summary>
            <see cref="T:CacheManager.Core.CacheFactory"/>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.ConfigurationBuilder"/> class
            which provides fluent configuration methods.
            </summary>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.ConfigurationBuilder"/> class
            which provides fluent configuration methods.
            </summary>
            <param name="name">The name of the cache manager.</param>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.#ctor(CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.ConfigurationBuilder"/> class
            which provides fluent configuration methods.
            Creates a builder which allows to modify the existing <paramref name="forConfiguration"/>.
            </summary>
            <param name="forConfiguration">The configuration the builder should be instantiated for.</param>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.#ctor(System.String,CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.ConfigurationBuilder"/> class
            which provides fluent configuration methods.
            Creates a builder which allows to modify the existing <paramref name="forConfiguration"/>.
            </summary>
            <param name="name">The name of the cache manager.</param>
            <param name="forConfiguration">The configuration the builder should be instantiated for.</param>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.BuildConfiguration(System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
            <summary>
            Builds a <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> which can be used to create a new cache
            manager instance.
            <para>
            Pass the configuration to <see cref="M:CacheManager.Core.CacheFactory.FromConfiguration``1(CacheManager.Core.ICacheManagerConfiguration)"/>
            to create a valid cache manager.
            </para>
            </summary>
            <param name="settings">
            The configuration settings to define the cache handles and other properties.
            </param>
            <returns>The <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.BuildConfiguration(System.String,System.Action{CacheManager.Core.ConfigurationBuilderCachePart})">
            <summary>
            Builds a <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> which can be used to create a new cache
            manager instance.
            <para>
            Pass the configuration to <see cref="M:CacheManager.Core.CacheFactory.FromConfiguration``1(CacheManager.Core.ICacheManagerConfiguration)"/>
            to create a valid cache manager.
            </para>
            </summary>
            <param name="name">The name of the cache manager.</param>
            <param name="settings">
            The configuration settings to define the cache handles and other properties.
            </param>
            <returns>The <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.LoadConfiguration(System.String)">
            <summary>
            Loads a configuration from web.config or app.config.
            <para>
            The <paramref name="configName"/> must match with the name attribute of one of the
            configured cache elements.
            </para>
            </summary>
            <param name="configName">The name of the cache element within the config file.</param>
            <returns>The <c>CacheManagerConfiguration</c></returns>
            <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.LoadConfiguration(System.String,System.String)">
            <summary>
            Loads a configuration from web.config or app.config, by section and config name.
            <para>
            The <paramref name="configName"/> must match with the name attribute of one of the
            configured cache elements.
            </para>
            </summary>
            <param name="sectionName">The name of the section.</param>
            <param name="configName">The name of the cache element within the config file.</param>
            <returns>The <c>CacheManagerConfiguration</c></returns>
            <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.LoadConfigurationFile(System.String,System.String)">
            <summary>
            Loads a configuration from the given <paramref name="configFileName"/>.
            <para>
            The <paramref name="configName"/> must match with the name attribute of one of the
            configured cache elements.
            </para>
            </summary>
            <param name="configFileName">The full path of the file to load the configuration from.</param>
            <param name="configName">The name of the cache element within the config file.</param>
            <returns>The <c>CacheManagerConfiguration</c></returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="configFileName"/> or <paramref name="configName"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the file specified by <paramref name="configFileName"/> does not exist.
            </exception>
            <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilder.LoadConfigurationFile(System.String,System.String,System.String)">
            <summary>
            Loads a configuration from the given <paramref name="configFileName"/> and <paramref name="sectionName"/>.
            <para>
            The <paramref name="configName"/> must match with the name attribute of one of the
            configured cache elements.
            </para>
            </summary>
            <param name="configFileName">The full path of the file to load the configuration from.</param>
            <param name="sectionName">The name of the configuration section.</param>
            <param name="configName">The name of the cache element within the config file.</param>
            <returns>The <c>CacheManagerConfiguration</c></returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="configFileName"/> or <paramref name="configName"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the file specified by <paramref name="configFileName"/> does not exist.
            </exception>
            <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>
        </member>
        <member name="T:CacheManager.Core.ConfigurationBuilderCacheHandlePart">
            <summary>
            Used to build a <c>CacheHandleConfiguration</c>.
            </summary>
            <see cref="T:CacheManager.Core.CacheManagerConfiguration"/>
        </member>
        <member name="P:CacheManager.Core.ConfigurationBuilderCacheHandlePart.And">
            <summary>
            Gets the parent builder part to add another cache configuration. Can be used to add
            multiple cache handles.
            </summary>
            <value>The parent builder part.</value>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.Build">
            <summary>
            Hands back the new <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> instance.
            </summary>
            <returns>The <see cref="T:CacheManager.Core.CacheManagerConfiguration"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.DisablePerformanceCounters">
            <summary>
            Disables performance counters for this cache handle.
            </summary>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.DisableStatistics">
            <summary>
            Disables statistic gathering for this cache handle.
            <para>This also disables performance counters as statistics are required for the counters.</para>
            </summary>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.EnablePerformanceCounters">
            <summary>
            Enables performance counters for this cache handle.
            <para>This also enables statistics, as this is required for performance counters.</para>
            </summary>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.EnableStatistics">
            <summary>
            Enables statistic gathering for this cache handle.
            <para>The statistics can be accessed via cacheHandle.Stats.GetStatistic.</para>
            </summary>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCacheHandlePart.WithExpiration(CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <summary>
            Sets the expiration mode and timeout of the cache handle.
            </summary>
            <param name="expirationMode">The expiration mode.</param>
            <param name="timeout">The timeout.</param>
            <returns>The builder part.</returns>
            <exception cref="T:System.InvalidOperationException">
            If expiration mode is not set to 'None', timeout cannot be zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if expiration mode is not 'None' and timeout is zero.
            </exception>
            <seealso cref="T:CacheManager.Core.ExpirationMode"/>
        </member>
        <member name="T:CacheManager.Core.ConfigurationBuilderCachePart">
            <summary>
            Used to build a <c>CacheManagerConfiguration</c>.
            </summary>
            <see cref="T:CacheManager.Core.CacheManagerConfiguration"/>
        </member>
        <member name="P:CacheManager.Core.ConfigurationBuilderCachePart.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithBackplane(System.Type,System.String,System.Object[])">
            <summary>
            Configures the backplane for the cache manager.
            <para>
            This is an optional feature. If specified, see the documentation for the
            <paramref name="backplaneType"/>. The <paramref name="configurationKey"/> might be used to
            reference another configuration item.
            </para>
            <para>
            If a backplane is defined, at least one cache handle must be marked as backplane
            source. The cache manager then will try to synchronize multiple instances of the same configuration.
            </para>
            </summary>
            <param name="backplaneType">The type of the backplane implementation.</param>
            <param name="configurationKey">The name.</param>
            <param name="args">Additional arguments the type might need to get initialized.</param>
            <returns>The builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configurationKey"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithBackplane(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Configures the backplane for the cache manager.
            <para>
            This is an optional feature. If specified, see the documentation for the
            <paramref name="backplaneType"/>. The <paramref name="configurationKey"/> might be used to
            reference another configuration item.
            </para>
            <para>
            If a backplane is defined, at least one cache handle must be marked as backplane
            source. The cache manager then will try to synchronize multiple instances of the same configuration.
            </para>
            </summary>
            <param name="backplaneType">The type of the backplane implementation.</param>
            <param name="configurationKey">The configuration key.</param>
            <param name="channelName">The backplane channel name.</param>
            <param name="args">Additional arguments the type might need to get initialized.</param>
            <returns>The builder instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="configurationKey"/> or <paramref name="channelName"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithDictionaryHandle(System.Boolean)">
            <summary>
            Adds a cache dictionary cache handle to the cache manager.
            </summary>
            <param name="isBackplaneSource">
            Set this to true if this cache handle should be the source of the backplane.
            <para>This setting will be ignored if no backplane is configured.</para>
            </param>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithDictionaryHandle(System.String,System.Boolean)">
            <summary>
            Adds a cache dictionary cache handle to the cache manager.
            </summary>
            <returns>The builder part.</returns>
            <param name="handleName">The name of the cache handle.</param>
            <param name="isBackplaneSource">
            Set this to true if this cache handle should be the source of the backplane.
            <para>This setting will be ignored if no backplane is configured.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handleName"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithHandle(System.Type,System.String,System.Boolean,System.Object[])">
            <summary>
            Adds a cache handle with the given <c>Type</c> and name.
            The type must be an open generic.
            </summary>
            <param name="cacheHandleBaseType">The cache handle type.</param>
            <param name="handleName">The name to be used for the cache handle.</param>
            <param name="isBackplaneSource">
            Set this to true if this cache handle should be the source of the backplane.
            <para>This setting will be ignored if no backplane is configured.</para>
            </param>
            <param name="configurationTypes">Internally used only.</param>
            <returns>The builder part.</returns>
            <exception cref="T:System.ArgumentNullException">If handleName is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            Only one cache handle can be the backplane's source.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if handleName or cacheHandleBaseType are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithHandle(System.Type,System.String)">
            <summary>
            Adds a cache handle with the given <c>Type</c> and name.
            The type must be an open generic.
            </summary>
            <param name="cacheHandleBaseType">The cache handle type.</param>
            <param name="handleName">The name to be used for the cache handle.</param>
            <returns>The builder part.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if handleName or cacheHandleBaseType are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithHandle(System.Type)">
            <summary>
            Adds a cache handle with the given <c>Type</c>.
            The type must be an open generic.
            </summary>
            <param name="cacheHandleBaseType">The cache handle type.</param>
            <returns>The builder part.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if handleName or cacheHandleBaseType are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithMaxRetries(System.Int32)">
            <summary>
            Sets the maximum number of retries per action.
            <para>Default is 50.</para>
            <para>
            Not every cache handle implements this, usually only distributed caches will use it.
            </para>
            </summary>
            <param name="retries">The maximum number of retries.</param>
            <returns>The configuration builder.</returns>
            <exception cref="T:System.InvalidOperationException">
            Maximum number of retries must be greater than 0.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithRetryTimeout(System.Int32)">
            <summary>
            Sets the timeout between each retry of an action in milliseconds.
            <para>Default is 100.</para>
            <para>
            Not every cache handle implements this, usually only distributed caches will use it.
            </para>
            </summary>
            <param name="timeoutMillis">The timeout in milliseconds.</param>
            <returns>The configuration builder.</returns>
            <exception cref="T:System.InvalidOperationException">
            Retry timeout must be greater than or equal to zero.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithUpdateMode(CacheManager.Core.CacheUpdateMode)">
            <summary>
            Sets the update mode of the cache.
            <para>If nothing is set, the default will be <c>CacheUpdateMode.None</c>.</para>
            </summary>
            <param name="updateMode">The update mode.</param>
            <returns>The builder part.</returns>
            <seealso cref="T:CacheManager.Core.CacheUpdateMode"/>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithSerializer(System.Type,System.Object[])">
            <summary>
            Sets the serializer which should be used to serialize cache items.
            </summary>
            <param name="serializerType">The type of the serializer.</param>
            <param name="args">Additional arguments the type might need to get initialized.</param>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithBinarySerializer">
            <summary>
            Configures a <see cref="T:CacheManager.Core.Internal.BinaryCacheSerializer"/> to be used for serialization and deserialization.
            </summary>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithBinarySerializer(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            Configures a <see cref="T:CacheManager.Core.Internal.BinaryCacheSerializer"/> to be used for serialization and deserialization.
            </summary>
            <param name="serializationFormatter">The <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for serialization.</param>
            <param name="deserializationFormatter">The <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for deserialization.</param>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.WithLogging(System.Type,System.Object[])">
            <summary>
            Enables logging by setting the <see cref="T:CacheManager.Core.Logging.ILoggerFactory"/> for the cache manager instance.
            </summary>
            <param name="loggerFactoryType">The type of the logger factory.</param>
            <param name="args">Additional arguments the type might need to get initialized.</param>
            <returns>The builder part.</returns>
        </member>
        <member name="M:CacheManager.Core.ConfigurationBuilderCachePart.Build">
            <summary>
            Hands back the new <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> instance.
            </summary>
            <returns>The <see cref="T:CacheManager.Core.ICacheManagerConfiguration"/>.</returns>
        </member>
        <member name="T:CacheManager.Core.ExpirationMode">
            <summary>
            Defines the supported expiration modes for cache items.
            <para>Value <c>None</c> will indicate that no expiration should be set.</para>
            </summary>
        </member>
        <member name="F:CacheManager.Core.ExpirationMode.Default">
            <summary>
            Default value for the expircation mode enum.
            CacheManager will default to <c>None</c>. The <code>Default</code> entry in the enum is used as separation from the other values
            and to make it possible to explicitly set the expiration to <c>None</c>.
            </summary>
        </member>
        <member name="F:CacheManager.Core.ExpirationMode.None">
            <summary>
            Defines no expiration.
            </summary>
        </member>
        <member name="F:CacheManager.Core.ExpirationMode.Sliding">
            <summary>
            Defines sliding expiration. The expiration timeout will be refreshed on every access.
            </summary>
        </member>
        <member name="F:CacheManager.Core.ExpirationMode.Absolute">
            <summary>
            Defines absolute expiration. The item will expire after the expiration timeout.
            </summary>
        </member>
        <member name="T:CacheManager.Core.ICache`1">
            <summary>
            This interface is the base contract for the main stack of this library.
            <para>
            The <c>ICacheHandle</c> and <c>ICacheManager</c> interfaces are derived from <c>ICache</c>,
            meaning the method call signature throughout the stack is very similar.
            </para>
            <para>
            We want the flexibility of having a simple get/put/delete cache up to multiple caches
            layered on top of each other, still using the same simple and easy to understand interface.
            </para>
            <para>
            The <c>TCacheValue</c> can, but most not be used in the sense of strongly typing. This
            means, you can define and configure a cache for certain object types within your domain. But
            you can also use <c>object</c> and store anything you want within the cache. All underlying
            cache technologies usually do not care about types of the cache items.
            </para>
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="P:CacheManager.Core.ICache`1.Item(System.String)">
            <summary>
            Gets or sets a value for the specified key. The indexer is identical to the
            corresponding <see cref="M:CacheManager.Core.ICache`1.Put(System.String,`0)"/> and <see cref="M:CacheManager.Core.ICache`1.Get(System.String)"/> calls.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="P:CacheManager.Core.ICache`1.Item(System.String,System.String)">
            <summary>
            Gets or sets a value for the specified key and region. The indexer is identical to the
            corresponding <see cref="M:CacheManager.Core.ICache`1.Put(System.String,`0,System.String)"/> and
            <see cref="M:CacheManager.Core.ICache`1.Get(System.String,System.String)"/> calls.
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Add(System.String,`0)">
            <summary>
            Adds a value for the specified key to the cache.
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="key"/> already exists within the cache!
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Add(System.String,`0,System.String)">
            <summary>
            Adds a value for the specified key and region to the cache.
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="key"/> already exists within the cache!
            </para>
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/>, <paramref name="value"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Add(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds the specified <c>CacheItem</c> to the cache.
            <para>
            Use this overload to overrule the configured expiration settings of the cache and to
            define a custom expiration for this <paramref name="item"/> only.
            </para>
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="item"/> already exists within the cache!
            </para>
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="item"/> or the item's key or value is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Clear">
            <summary>
            Clears this cache, removing all items in the base cache and all regions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.ICache`1.ClearRegion(System.String)">
            <summary>
            Clears the cache region, removing all items from the specified <paramref name="region"/> only.
            </summary>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="region"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Exists(System.String)">
            <summary>
            Returns a value indicating if the <paramref name="key"/> exists in at least one cache layer
            configured in CacheManger, without actually retrieving it from the cache.
            </summary>
            <param name="key">The cache key to check.</param>
            <returns><c>True</c> if the <paramref name="key"/> exists, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Exists(System.String,System.String)">
            <summary>
            Returns a value indicating if the <paramref name="key"/> in <paramref name="region"/> exists in at least one cache layer
            configured in CacheManger, without actually retrieving it from the cache (if supported).
            </summary>
            <param name="key">The cache key to check.</param>
            <param name="region">The cache region.</param>
            <returns><c>True</c> if the <paramref name="key"/> exists, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Get(System.String)">
            <summary>
            Gets a value for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Get(System.String,System.String)">
            <summary>
            Gets a value for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Get``1(System.String)">
            <summary>
            Gets a value for the specified key and will cast it to the specified type.
            </summary>
            <typeparam name="TOut">The type the value is converted and returned.</typeparam>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">
            If no explicit cast is defined from <c>TCacheValue</c> to <c>TOut</c>.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Get``1(System.String,System.String)">
            <summary>
            Gets a value for the specified key and region and will cast it to the specified type.
            </summary>
            <typeparam name="TOut">The type the cached value should be converted to.</typeparam>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If no explicit cast is defined from <c>TCacheValue</c> to <c>TOut</c>.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.GetCacheItem(System.String)">
            <summary>
            Gets the <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The <c>CacheItem</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.GetCacheItem(System.String,System.String)">
            <summary>
            Gets the <c>CacheItem</c> for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>The <c>CacheItem</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Put(System.String,`0)">
            <summary>
            Puts a value for the specified key into the cache.
            <para>
            If the <paramref name="key"/> already exists within the cache, the existing value will
            be replaced with the new <paramref name="value"/>.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Put(System.String,`0,System.String)">
            <summary>
            Puts a value for the specified key and region into the cache.
            <para>
            If the <paramref name="key"/> already exists within the cache, the existing value will
            be replaced with the new <paramref name="value"/>.
            </para>
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/>, <paramref name="value"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the specified <c>CacheItem</c> into the cache.
            <para>
            If the <paramref name="item"/> already exists within the cache, the existing item will
            be replaced with the new <paramref name="item"/>.
            </para>
            <para>
            Use this overload to overrule the configured expiration settings of the cache and to
            define a custom expiration for this <paramref name="item"/> only.
            </para>
            </summary>
            <param name="item">The <c>CacheItem</c> to be cached.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="item"/> or the item's key or value is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Remove(System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.ICache`1.Remove(System.String,System.String)">
            <summary>
            Removes a value from the cache for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="T:CacheManager.Core.ICacheManager`1">
            <summary>
            This interface extends the <c>ICache</c> interface by some cache manager specific methods and events.
            </summary>
            <typeparam name="TCacheValue">The type of the cache item value.</typeparam>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnAdd">
            <summary>
            Occurs when an item was successfully added to the cache.
            <para>The event will not get triggered if <c>Add</c> would return false.</para>
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnClear">
            <summary>
            Occurs when <c>Clear</c> gets called, after the cache has been cleared.
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnClearRegion">
            <summary>
            Occurs when <c>ClearRegion</c> gets called, after the cache region has been cleared.
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnGet">
            <summary>
            Occurs when an item was retrieved from the cache.
            <para>The event will only get triggered on cache hit. Misses do not trigger!</para>
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnPut">
            <summary>
            Occurs when an item was put into the cache.
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnRemove">
            <summary>
            Occurs when an item was successfully removed from the cache.
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnRemoveByHandle">
            <summary>
            Occurs when an item was removed by the cache handle due to expiration or e.g. memory pressure eviction.
            The <see cref="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Reason"/> property indicates the reason while the <see cref="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Level"/> indicates
            which handle triggered the event.
            </summary>
        </member>
        <member name="E:CacheManager.Core.ICacheManager`1.OnUpdate">
            <summary>
            Occurs when an item was successfully updated.
            </summary>
        </member>
        <member name="P:CacheManager.Core.ICacheManager`1.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:CacheManager.Core.ICacheManager`1.Name">
            <summary>
            Gets the cache name.
            </summary>
            <value>The cache name.</value>
        </member>
        <member name="P:CacheManager.Core.ICacheManager`1.CacheHandles">
            <summary>
            Gets a list of cache handles currently registered within the cache manager.
            </summary>
            <value>The cache handles.</value>
            <remarks>
            This list is read only, any changes to the returned list instance will not affect the
            state of the cache manager instance.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(System.String,`0,System.Func{`0,`0})">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="addValue">
            The value which should be added in case the item doesn't already exist.
            </param>
            <param name="updateValue">
            The function to perform the update in case the item does already exist.
            </param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> are null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(System.String,System.String,`0,System.Func{`0,`0})">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="addValue">
            The value which should be added in case the item doesn't already exist.
            </param>
            <param name="updateValue">
            The function to perform the update in case the item does already exist.
            </param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/>
            are null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(System.String,`0,System.Func{`0,`0},System.Int32)">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="addValue">
            The value which should be added in case the item doesn't already exist.
            </param>
            <param name="updateValue">
            The function to perform the update in case the item does already exist.
            </param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>Null</c>.
            </param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(System.String,System.String,`0,System.Func{`0,`0},System.Int32)">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="addValue">
            The value which should be added in case the item doesn't already exist.
            </param>
            <param name="updateValue">
            The function to perform the update in case the item does already exist.
            </param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>Null</c>.
            </param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(CacheManager.Core.CacheItem{`0},System.Func{`0,`0})">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="addItem">The item which should be added or updated.</param>
            <param name="updateValue">The function to perform the update, if the item does exist.</param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="addItem"/> or <paramref name="updateValue"/> are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.AddOrUpdate(CacheManager.Core.CacheItem{`0},System.Func{`0,`0},System.Int32)">
            <summary>
            Adds an item to the cache or, if the item already exists, updates the item using the
            <paramref name="updateValue"/> function.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="addItem">The item which should be added or updated.</param>
            <param name="updateValue">The function to perform the update, if the item does exist.</param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>Null</c>.
            </param>
            <returns>
            The value which has been added or updated, or null, if the update was not successful.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="addItem"/> or <paramref name="updateValue"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,`0)">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The method returns either the existing item's value or the newly added <paramref name="value"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="value">The value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,System.String,`0)">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The method returns either the existing item's value or the newly added <paramref name="value"/>.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="value">The value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/>, <paramref name="region"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,System.Func{System.String,`0})">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,System.String,System.Func{System.String,System.String,`0})">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,System.Func{System.String,CacheManager.Core.CacheItem{`0}})">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.GetOrAdd(System.String,System.String,System.Func{System.String,System.String,CacheManager.Core.CacheItem{`0}})">
            <summary>
            Returns an existing item or adds the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <returns>Either the added or the existing value.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryGetOrAdd(System.String,System.Func{System.String,`0},`0@)">
            <summary>
            Tries to either retrieve an existing item or add the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <param name="value">The cache value.</param>
            <returns><c>True</c> if the operation succeeds, <c>False</c> in case there are too many retries or the <paramref name="valueFactory"/> returns null.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryGetOrAdd(System.String,System.String,System.Func{System.String,System.String,`0},`0@)">
            <summary>
            Tries to either retrieve an existing item or add the item to the cache if it does not exist.
            The <paramref name="valueFactory"/> will be evaluated only if the item does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <param name="value">The cache value.</param>
            <returns><c>True</c> if the operation succeeds, <c>False</c> in case there are too many retries or the <paramref name="valueFactory"/> returns null.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryGetOrAdd(System.String,System.Func{System.String,CacheManager.Core.CacheItem{`0}},CacheManager.Core.CacheItem{`0}@)">
            <summary>
            Tries to either retrieve an existing item or add the item to the cache if it does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <param name="item">The cache item.</param>
            <returns><c>True</c> if the operation succeeds, <c>False</c> in case there are too many retries or the <paramref name="valueFactory"/> returns null.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryGetOrAdd(System.String,System.String,System.Func{System.String,System.String,CacheManager.Core.CacheItem{`0}},CacheManager.Core.CacheItem{`0}@)">
            <summary>
            Tries to either retrieve an existing item or add the item to the cache if it does not exist.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="valueFactory">The method which creates the value which should be added.</param>
            <param name="item">The cache item.</param>
            <returns><c>True</c> if the operation succeeds, <c>False</c> in case there are too many retries or the <paramref name="valueFactory"/> returns null.</returns>
            <exception cref="T:System.ArgumentException">
            If either <paramref name="key"/> or <paramref name="valueFactory"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Update(System.String,System.Func{`0,`0})">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <returns>The updated value, or null, if the update was not successful.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Update(System.String,System.String,System.Func{`0,`0})">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <returns>The updated value, or null, if the update was not successful.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/>
            are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Update(System.String,System.Func{`0,`0},System.Int32)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>Null</c>.
            </param>
            <returns>The updated value, or null, if the update was not successful.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Update(System.String,System.String,System.Func{`0,`0},System.Int32)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>Null</c>.
            </param>
            <returns>The updated value, or null, if the update was not successful.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryUpdate(System.String,System.Func{`0,`0},`0@)">
            <summary>
            Tries to update an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="value">The updated value, or null, if the update was not successful.</param>
            <returns><c>True</c> if the update operation was successful, <c>False</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> are null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryUpdate(System.String,System.String,System.Func{`0,`0},`0@)">
            <summary>
            Tries to update an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="value">The updated value, or null, if the update was not successful.</param>
            <returns><c>True</c> if the update operation was successful, <c>False</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/>
            are null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryUpdate(System.String,System.Func{`0,`0},System.Int32,`0@)">
            <summary>
            Tries to update an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>False</c>.
            </param>
            <param name="value">The updated value, or null, if the update was not successful.</param>
            <returns><c>True</c> if the update operation was successful, <c>False</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.TryUpdate(System.String,System.String,System.Func{`0,`0},System.Int32,`0@)">
            <summary>
            Tries to update an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The region of the key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">
            The number of tries which should be performed in case of version conflicts.
            If the cache cannot perform an update within the number of <paramref name="maxRetries"/>,
            this method will return <c>False</c>.
            </param>
            <param name="value">The updated value, or null, if the update was not successful.</param>
            <returns><c>True</c> if the update operation was successful, <c>False</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="region"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <summary>
            Explicitly sets the expiration <paramref name="mode"/> and <paramref name="timeout"/> for the
            <paramref name="key"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="mode">The expiration mode.</param>
            <param name="timeout">The expiration timeout.</param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,System.String,CacheManager.Core.ExpirationMode,System.TimeSpan)">
            <summary>
            Explicitly sets the expiration <paramref name="mode"/> and <paramref name="timeout"/> for the
            <paramref name="key"/> in <paramref name="region"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="mode">The expiration mode.</param>
            <param name="timeout">The expiration timeout.</param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,System.DateTimeOffset)">
            <summary>
            Explicitly sets an absolute expiration date for the <paramref name="key"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="absoluteExpiration">
            The expiration date. The value must be greater than zero.
            </param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,System.String,System.DateTimeOffset)">
            <summary>
            Explicitly sets an absolute expiration date for the <paramref name="key"/> in <paramref name="region"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="absoluteExpiration">
            The expiration date. The value must be greater than zero.
            </param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,System.TimeSpan)">
            <summary>
            Explicitly sets a sliding expiration date for the <paramref name="key"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="slidingExpiration">
            The expiration timeout. The value must be greater than zero.
            </param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.Expire(System.String,System.String,System.TimeSpan)">
            <summary>
            Explicitly sets a sliding expiration date for the <paramref name="key"/> in <paramref name="region"/> in all cache layers.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
            <param name="slidingExpiration">
            The expiration timeout. The value must be greater than zero.
            </param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.RemoveExpiration(System.String)">
            <summary>
            Explicitly removes any expiration settings previously defined for the <paramref name="key"/>
            in all cache layers and sets the expiration mode to <see cref="F:CacheManager.Core.ExpirationMode.None"/>.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:CacheManager.Core.ICacheManager`1.RemoveExpiration(System.String,System.String)">
            <summary>
            Explicitly removes any expiration settings previously defined for the <paramref name="key"/> in <paramref name="region"/>
            in all cache layers and sets the expiration mode to <see cref="F:CacheManager.Core.ExpirationMode.None"/>.
            This operation overrides any configured expiration per cache handle for this particular item.
            </summary>
            <remarks>
            Don't use this in concurrency critical scenarios if you are using distributed caches as <code>Expire</code> is not atomic;
            <code>Expire</code> uses <see cref="M:CacheManager.Core.ICache`1.Put(CacheManager.Core.CacheItem{`0})"/> to store the item with the new expiration.
            </remarks>
            <param name="key">The cache key.</param>
            <param name="region">The cache region.</param>
        </member>
        <member name="T:CacheManager.Core.ICacheManagerConfiguration">
            <summary>
            The writable configuration contract used primarrily internal only
            </summary>
        </member>
        <member name="P:CacheManager.Core.ICacheManagerConfiguration.CacheHandleConfigurations">
            <summary>
            Gets the list of cache handle configurations.
            </summary>
            <value>The list of cache handle configurations.</value>
        </member>
        <member name="P:CacheManager.Core.ICacheManagerConfiguration.Builder">
            <summary>
            Gets a <see cref="T:CacheManager.Core.ConfigurationBuilder"/> for the current <see cref="T:CacheManager.Core.CacheManagerConfiguration"/> instance
            to manipulate the configuration fluently.
            </summary>
            <returns>The <see cref="T:CacheManager.Core.ConfigurationBuilder"/>.</returns>
        </member>
        <member name="T:CacheManager.Core.IReadOnlyCacheManagerConfiguration">
            <summary>
            The readonly configuration contract for cache managers.
            </summary>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.BackplaneChannelName">
            <summary>
            Gets the backplane channel name.
            </summary>
            <value>The channel name.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.BackplaneConfigurationKey">
            <summary>
            Gets the configuration key the backplane might use.
            </summary>
            <value>The key of the backplane configuration.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.BackplaneType">
            <summary>
            Gets the factory method for a cache backplane.
            </summary>
            <value>The backplane activator.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.BackplaneTypeArguments">
            <summary>
            Gets additional arguments which should be used instantiating the backplane.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.HasBackplane">
            <summary>
            Gets a value indicating whether this instance has a backplane defined.
            </summary>
            <value>
            <c>true</c> if this instance has cache backplane; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.LoggerFactoryType">
            <summary>
            Gets the factory method for a logger factory.
            </summary>
            <value>
            The logger factory activator.
            </value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.LoggerFactoryTypeArguments">
            <summary>
            Gets additional arguments which should be used instantiating the logger factory.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.MaxRetries">
            <summary>
            Gets the limit of the number of retry operations per action.
            <para>Default is 50.</para>
            </summary>
            <value>The maximum retries.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.Name">
            <summary>
            Gets the name of the cache.
            </summary>
            <value>The name of the cache.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.RetryTimeout">
            <summary>
            Gets the number of milliseconds the cache should wait before it will retry an action.
            <para>Default is 100.</para>
            </summary>
            <value>The retry timeout.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.SerializerType">
            <summary>
            Gets the factory method for a cache serializer.
            </summary>
            <value>The serializer activator.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.SerializerTypeArguments">
            <summary>
            Gets additional arguments which should be used instantiating the serializer.
            </summary>
            <value>The list of arguments.</value>
        </member>
        <member name="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.UpdateMode">
            <summary>
            Gets the <see cref="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.UpdateMode"/> for the cache manager instance.
            <para>
            Drives the behavior of the cache manager how it should update the different cache
            handles it manages.
            </para>
            </summary>
            <value>The cache update mode.</value>
            <see cref="P:CacheManager.Core.IReadOnlyCacheManagerConfiguration.UpdateMode"/>
        </member>
        <member name="T:CacheManager.Core.Internal.BackplaneAction">
            <summary>
            Defines the possible actions of the backplane message.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.BackplaneAction.Invalid">
            <summary>
            Default value is invalid to ensure we are not getting wrong results.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.BackplaneAction.Changed">
            <summary>
            The changed action.
            <see cref="T:CacheManager.Core.Internal.CacheItemChangedEventAction"/>
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.BackplaneAction.Clear">
            <summary>
            The clear action.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.BackplaneAction.ClearRegion">
            <summary>
            The clear region action.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.BackplaneAction.Removed">
            <summary>
            If the cache item has been removed.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheItemChangedEventAction">
            <summary>
            The enum defines the actual operation used to change the value in the cache.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemChangedEventAction.Invalid">
            <summary>
            Default value is invalid to ensure we are not getting wrong results.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemChangedEventAction.Put">
            <summary>
            If Put was used to change the value.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemChangedEventAction.Add">
            <summary>
            If Add was used to change the value.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemChangedEventAction.Update">
            <summary>
            If Update was used to change the value.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.BackplaneMessage">
            <summary>
            Implements a simple message which can be send as a string to the server.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.BackplaneMessage.Action">
            <summary>
            Gets or sets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BackplaneMessage.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BackplaneMessage.OwnerIdentity">
            <summary>
            Gets or sets the owner identity.
            </summary>
            <value>The owner identity.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BackplaneMessage.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BackplaneMessage.ChangeAction">
            <summary>
            Gets or sets the cache action.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ToString">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForChanged(System.Byte[],System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the changed action.
            </summary>
            <param name="owner">The owner.</param>
            <param name="key">The key.</param>
            <param name="changeAction">The cache change action.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForChanged(System.Byte[],System.String,System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the changed action.
            </summary>
            <param name="owner">The owner.</param>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="changeAction">The cache change action.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForClear(System.Byte[])">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the clear action.
            </summary>
            <param name="owner">The owner.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForClearRegion(System.Byte[],System.String)">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the clear region action.
            </summary>
            <param name="owner">The owner.</param>
            <param name="region">The region.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">If region is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForRemoved(System.Byte[],System.String)">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the removed action.
            </summary>
            <param name="owner">The owner.</param>
            <param name="key">The key.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.ForRemoved(System.Byte[],System.String,System.String)">
            <summary>
            Creates a new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> for the removed action.
            </summary>
            <param name="owner">The owner.</param>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <returns>The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage"/> instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.Serialize(CacheManager.Core.Internal.BackplaneMessage[])">
            <summary>
            Serializes this instance.
            </summary>
            <returns>The string representing this message.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BackplaneMessage.Deserialize(System.Byte[],System.Byte[])">
            <summary>
            Deserializes the <paramref name="message"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="skipOwner">If specified, if the first received message has the same owner, all messages will be skipped.</param>
            <returns>
            The new <see cref="T:CacheManager.Core.Internal.BackplaneMessage" /> instance.
            </returns>
            <exception cref="T:System.ArgumentException">If <paramref name="message"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the message is not valid.</exception>
        </member>
        <member name="T:CacheManager.Core.Internal.BaseCache`1">
            <summary>
            The BaseCache class implements the overall logic of this cache library and delegates the
            concrete implementation of how e.g. add, get or remove should work to a derived class.
            <para>
            To use this base class simply override the abstract methods for Add, Get, Put and Remove.
            <br/> All other methods defined by <c>ICache</c> will be delegated to those methods.
            </para>
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.BaseCache`1"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CacheManager.Core.Internal.BaseCache`1"/> class.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCache`1.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger instance.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCache`1.Disposed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CacheManager.Core.Internal.BaseCache`1"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCache`1.Disposing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CacheManager.Core.Internal.BaseCache`1"/> is disposing.
            </summary>
            <value><c>true</c> if disposing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCache`1.Item(System.String)">
            <summary>
            Gets or sets a value for the specified key. The indexer is identical to the
            corresponding <see cref="M:CacheManager.Core.Internal.BaseCache`1.Put(System.String,`0)"/> and <see cref="M:CacheManager.Core.Internal.BaseCache`1.Get(System.String)"/> calls.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCache`1.Item(System.String,System.String)">
            <summary>
            Gets or sets a value for the specified key and region. The indexer is identical to the
            corresponding <see cref="M:CacheManager.Core.Internal.BaseCache`1.Put(System.String,`0,System.String)"/> and
            <see cref="M:CacheManager.Core.Internal.BaseCache`1.Get(System.String,System.String)"/> calls.
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Add(System.String,`0)">
            <summary>
            Adds a value for the specified key to the cache.
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="key"/> already exists within the cache!
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Add(System.String,`0,System.String)">
            <summary>
            Adds a value for the specified key and region to the cache.
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="key"/> already exists within the cache!
            </para>
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/>, <paramref name="value"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Add(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds the specified <c>CacheItem</c> to the cache.
            <para>
            Use this overload to overrule the configured expiration settings of the cache and to
            define a custom expiration for this <paramref name="item"/> only.
            </para>
            <para>
            The <c>Add</c> method will <b>not</b> be successful if the specified
            <paramref name="item"/> already exists within the cache!
            </para>
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="item"/> or the item's key or value is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Clear">
            <summary>
            Clears this cache, removing all items in the base cache and all regions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.ClearRegion(System.String)">
            <summary>
            Clears the cache region, removing all items from the specified <paramref name="region"/> only.
            </summary>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="region"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Exists(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Get(System.String)">
            <summary>
            Gets a value for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Get(System.String,System.String)">
            <summary>
            Gets a value for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Get``1(System.String)">
            <summary>
            Gets a value for the specified key and will cast it to the specified type.
            </summary>
            <typeparam name="TOut">The type the value is converted and returned.</typeparam>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The value being stored in the cache for the given <paramref name="key"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">
            If no explicit cast is defined from <c>TCacheValue</c> to <c>TOut</c>.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Get``1(System.String,System.String)">
            <summary>
            Gets a value for the specified key and region and will cast it to the specified type.
            </summary>
            <typeparam name="TOut">The type the cached value should be converted to.</typeparam>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            The value being stored in the cache for the given <paramref name="key"/> and <paramref name="region"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            If no explicit cast is defined from <c>TCacheValue</c> to <c>TOut</c>.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.GetCacheItem(System.String)">
            <summary>
            Gets the <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The <c>CacheItem</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.GetCacheItem(System.String,System.String)">
            <summary>
            Gets the <c>CacheItem</c> for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>The <c>CacheItem</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Put(System.String,`0)">
            <summary>
            Puts a value for the specified key into the cache.
            <para>
            If the <paramref name="key"/> already exists within the cache, the existing value will
            be replaced with the new <paramref name="value"/>.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Put(System.String,`0,System.String)">
            <summary>
            Puts a value for the specified key and region into the cache.
            <para>
            If the <paramref name="key"/> already exists within the cache, the existing value will
            be replaced with the new <paramref name="value"/>.
            </para>
            <para>
            With <paramref name="region"/> specified, the key will <b>not</b> be found in the global cache.
            </para>
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="value">The value which should be cached.</param>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/>, <paramref name="value"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Put(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the specified <c>CacheItem</c> into the cache.
            <para>
            If the <paramref name="item"/> already exists within the cache, the existing item will
            be replaced with the new <paramref name="item"/>.
            </para>
            <para>
            Use this overload to overrule the configured expiration settings of the cache and to
            define a custom expiration for this <paramref name="item"/> only.
            </para>
            </summary>
            <param name="item">The <c>CacheItem</c> to be cached.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="item"/> or the item's key or value is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Remove(System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Remove(System.String,System.String)">
            <summary>
            Removes a value from the cache for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="key"/> or <paramref name="region"/> is null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.AddInternal(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds a value to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.PutInternal(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts a value into the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManaged">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.GetCacheItemInternal(System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.GetCacheItemInternal(System.String,System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.RemoveInternal(System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.RemoveInternal(System.String,System.String)">
            <summary>
            Removes a value from the cache for the specified key and region.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.CheckDisposed">
            <summary>
            Checks if the instance is disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the instance is disposed.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCache`1.GetCasted``1(System.Object)">
            <summary>
            Casts the value to <c>TOut</c>.
            </summary>
            <typeparam name="TOut">The type.</typeparam>
            <param name="value">The value.</param>
            <returns>The casted value.</returns>
        </member>
        <member name="T:CacheManager.Core.Internal.BaseCacheHandle`1">
            <summary>
            The <c>BaseCacheHandle</c> implements all the logic which might be common for all the cache
            handles. It abstracts the <see cref="T:CacheManager.Core.ICache`1"/> interface and defines new properties and
            methods the implementer must use.
            <para>Actually it is not advisable to not use <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>.</para>
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.#ctor(CacheManager.Core.ICacheManagerConfiguration,CacheManager.Core.CacheHandleConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/> class.
            </summary>
            <param name="managerConfiguration">The manager's configuration.</param>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="managerConfiguration"/> or <paramref name="configuration"/> are null.
            </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="configuration"/> name is empty.</exception>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCacheHandle`1.IsDistributedCache">
            <summary>
            Indicates if this cache handle is a distributed cache.
            </summary>
            <remarks>
            The value will be evaluated by the backplane logic to figure out what to do if remote events are received.
            <para>
            If the cache handle is distributed, a remote remove event for example does not cause another <c>Remove</c> call. 
            For in-memory cache handles which are backplane source though, it would trigger a <c>Remove</c>.
            </para>
            </remarks>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCacheHandle`1.Configuration">
            <summary>
            Gets the cache handle configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCacheHandle`1.Count">
            <summary>
            Gets the number of items the cache handle currently maintains.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BaseCacheHandle`1.Stats">
            <summary>
            Gets the cache stats object.
            </summary>
            <value>The stats.</value>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.Update(System.String,System.Func{`0,`0},System.Int32)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">The number of tries.</param>
            <returns>The update result which is interpreted by the cache manager.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.Update(System.String,System.String,System.Func{`0,`0},System.Int32)">
            <summary>
            Updates an existing key in the cache.
            <para>
            The cache manager will make sure the update will always happen on the most recent version.
            </para>
            <para>
            If version conflicts occur, if for example multiple cache clients try to write the same
            key, and during the update process, someone else changed the value for the key, the
            cache manager will retry the operation.
            </para>
            <para>
            The <paramref name="updateValue"/> function will get invoked on each retry with the most
            recent value which is stored in cache.
            </para>
            </summary>
            <param name="key">The key to update.</param>
            <param name="region">The cache region.</param>
            <param name="updateValue">The function to perform the update.</param>
            <param name="maxRetries">The number of tries.</param>
            <returns>The update result which is interpreted by the cache manager.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="key"/>, <paramref name="region"/> or <paramref name="updateValue"/> is null.
            </exception>
            <remarks>
            If the cache does not use a distributed cache system. Update is doing exactly the same
            as Get plus Put.
            </remarks>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.AddInternal(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds a value to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.PutInternal(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the <paramref name="item"/> into the cache. If the item exists it will get updated
            with the new value. If the item doesn't exist, the item will be added to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.TriggerCacheSpecificRemove(System.String,System.String,CacheManager.Core.Internal.CacheItemRemovedReason,System.Object)">
            <summary>
            Can be used to signal a remove event to the <see cref="T:CacheManager.Core.ICacheManager`1"/> in case the underlying cache supports this and the implementation
            can react on evictions and expiration of cache items.
            </summary>
            <param name="key">The cache key.</param>
            <param name="region">The cache region. Can be null.</param>
            <param name="reason">The reason.</param>
            <param name="value">The original cache value. The value might be null if the underlying cache system doesn't support returning the value on eviction.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.AddInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds a value to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
            <param name="disposeManaged">Indicator if managed resources should be released.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.GetItemExpiration(CacheManager.Core.CacheItem{`0})">
            <summary>
            Gets the item expiration.
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the updated cache item.</returns>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            If expiration mode is defined without timeout.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.BaseCacheHandle`1.PutInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the <paramref name="item"/> into the cache. If the item exists it will get updated
            with the new value. If the item doesn't exist, the item will be added to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
        </member>
        <member name="T:CacheManager.Core.Internal.BinaryCacheSerializer">
            <summary>
            Basic binary serialization implementation of the <see cref="T:CacheManager.Core.Internal.ICacheSerializer"/>.
            This implementation will be used in case no other serializer is configured for the cache manager
            and serialization is needed (only distributed caches will have to serialize the cache value).
            Binary serialization will not be available in some environments.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.#ctor(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.BinaryCacheSerializer"/> class.
            </summary>
            <param name="serializationFormatter">The formatter to use to do the serialization.</param>
            <param name="deserializationFormatter">The formatter to use to do the deserialization.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.BinaryCacheSerializer"/> class.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.BinaryCacheSerializer.DeserializationFormatter">
            <summary>
            Gets the formatter which should be used during deserialization.
            If nothing is specified the default <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> will be used.
            </summary>
            <value>The deserialization formatter.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.BinaryCacheSerializer.SerializationFormatter">
            <summary>
            Gets the formatter which should be used during serialization.
            If nothing is specified the default <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> will be used.
            </summary>
            <value>The serialization formatter.</value>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.Deserialize(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.DeserializeCacheItem``1(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.BinaryCacheSerializer.SerializeCacheItem``1(CacheManager.Core.CacheItem{``0})">
            <inheritdoc/>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheBackplane">
            <summary>
            In CacheManager, a cache backplane is used to keep in process and distributed caches in
            sync. <br/> If the cache manager runs inside multiple nodes or applications accessing the
            same distributed cache, and an in process cache is configured to be in front of the
            distributed cache handle. All Get calls will hit the in process cache. <br/> Now when an
            item gets removed for example by one client, all other clients still have that cache item
            available in the in process cache. <br/> This could lead to errors and unexpected behavior,
            therefore a cache backplane will send a message to all other cache clients to also remove
            that item.
            <para>
            The same mechanism will apply to any Update, Put, Remove, Clear or ClearRegion call of the cache.
            </para>
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheBackplane.MessagesSent">
            <summary>
            Number of messages sent.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheBackplane.MessagesReceived">
            <summary>
            Number of messages received.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheBackplane.SentChunks">
            <summary>
            Number of message chunks sent.
            Messages are sent in chunks to improve performance and decrease network traffic.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.#ctor(CacheManager.Core.ICacheManagerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheBackplane" /> class.
            </summary>
            <param name="configuration">The cache manager configuration.</param>
            <exception cref="T:System.ArgumentNullException">If configuration is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CacheManager.Core.Internal.CacheBackplane"/> class.
            </summary>
        </member>
        <member name="E:CacheManager.Core.Internal.CacheBackplane.Changed">
            <summary>
            The event gets fired whenever a change message for a key comes in,
            which means, another client changed a key.
            </summary>
        </member>
        <member name="E:CacheManager.Core.Internal.CacheBackplane.Cleared">
            <summary>
            The event gets fired whenever a cache clear message comes in.
            </summary>
        </member>
        <member name="E:CacheManager.Core.Internal.CacheBackplane.ClearedRegion">
            <summary>
            The event gets fired whenever a clear region message comes in.
            </summary>
        </member>
        <member name="E:CacheManager.Core.Internal.CacheBackplane.Removed">
            <summary>
            The event gets fired whenever a removed message for a key comes in.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheBackplane.CacheConfiguration">
            <summary>
            Gets the cache configuration.
            </summary>
            <value>
            The cache configuration.
            </value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheBackplane.ConfigurationKey">
            <summary>
            Gets the name of the configuration to be used.
            <para>The key might be used to find cache vendor specific configuration.</para>
            </summary>
            <value>The configuration key.</value>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyChange(System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Notifies other cache clients about a changed cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyChange(System.String,System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Notifies other cache clients about a changed cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyClear">
            <summary>
            Notifies other cache clients about a cache clear.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyClearRegion(System.String)">
            <summary>
            Notifies other cache clients about a cache clear region call.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyRemove(System.String)">
            <summary>
            Notifies other cache clients about a removed cache key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.NotifyRemove(System.String,System.String)">
            <summary>
            Notifies other cache clients about a removed cache key.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerChanged(System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Sends a changed message for the given <paramref name="key"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerChanged(System.String,System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Sends a changed message for the given <paramref name="key"/> in <paramref name="region"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerCleared">
            <summary>
            Sends a cache cleared message.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerClearedRegion(System.String)">
            <summary>
            Sends a region cleared message for the given <paramref name="region"/>.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerRemoved(System.String)">
            <summary>
            Sends a removed message for the given <paramref name="key"/>.
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.TriggerRemoved(System.String,System.String)">
            <summary>
            Sends a removed message for the given <paramref name="key"/> in <paramref name="region"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheBackplane.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="managed">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="T:CacheManager.Core.Internal.RegionEventArgs">
            <summary>
            Arguments for the region cleared event
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.RegionEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.RegionEventArgs" /> class.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.RegionEventArgs.Region">
            <summary>
            Gets the region which got cleared.
            </summary>
            <value>The region.</value>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheItemEventArgs">
            <summary>
            Base cache events arguments.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheItemEventArgs" /> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheItemEventArgs" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemEventArgs.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemEventArgs.Region">
            <summary>
            Gets the region.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheItemChangedEventArgs">
            <summary>
            Arguments for cache change events.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemChangedEventArgs.#ctor(System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheItemChangedEventArgs" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="action">The cache action.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemChangedEventArgs.#ctor(System.String,System.String,CacheManager.Core.Internal.CacheItemChangedEventAction)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheItemChangedEventArgs" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="action">The cache action.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemChangedEventArgs.Action">
            <summary>
            Gets the action used to change a key in the cache.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheActionEventArgOrigin">
            <summary>
            The origin enum indicates if the cache event was triggered locally or through the backplane.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheActionEventArgOrigin.Local">
            <summary>
            Locally triggered action.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheActionEventArgOrigin.Remote">
            <summary>
            Remote, through the backplane triggered action.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheItemRemovedReason">
            <summary>
            A flag indicating the reason when an item got removed from the cache.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemRemovedReason.Expired">
            <summary>
            A <see cref="T:CacheManager.Core.CacheItem`1"/> was removed because it expired.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemRemovedReason.Evicted">
            <summary>
            A <see cref="T:CacheManager.Core.CacheItem`1"/> was removed because the underlying cache decided to remove it.
            This can happen if cache-specific memory limits are reached for example.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheItemRemovedReason.ExternalDelete">
            <summary>
            A <see cref="T:CacheManager.Core.CacheItem`1"/> was removed manually, without using CacheManager APIs (like using del via redis-cli).
            </summary>
            <remarks>
            This will eventually trigger a <see cref="E:CacheManager.Core.ICacheManager`1.OnRemoveByHandle"/> for the responsible cache layer and 
            <see cref="E:CacheManager.Core.ICacheManager`1.OnRemove"/> as the item has been removed.
            </remarks>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheItemRemovedEventArgs">
            <summary>
            Event arguments for cache actions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemRemovedEventArgs.#ctor(System.String,System.String,CacheManager.Core.Internal.CacheItemRemovedReason,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheItemRemovedEventArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="reason">The reason.</param>
            <param name="value">The original cached value which got removed. Might be null depending on the cache sub system.</param>
            <param name="level">The cache level the event got triggered by.</param>
            <exception cref="T:System.ArgumentNullException">If key is null.</exception>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Region">
            <summary>
            Gets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Reason">
            <summary>
            Gets the reason flag indicating details why the <see cref="T:CacheManager.Core.CacheItem`1"/> has been removed.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Level">
            <summary>
            Gets a value indicating the cache level the event got triggered by.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheItemRemovedEventArgs.Value">
            <summary>
            Gets the original cached value which was removed by this event.
            <para>
            The property might return <c>Null</c> if the underlying cache system doesn't 
            support returning the value on eviction (for example Redis).
            </para>
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheItemRemovedEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.Internal.CacheActionEventArgs">
            <summary>
            Event arguments for cache actions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheActionEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheActionEventArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <exception cref="T:System.ArgumentNullException">If key is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheActionEventArgs.#ctor(System.String,System.String,CacheManager.Core.Internal.CacheActionEventArgOrigin)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheActionEventArgs"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="origin">The origin the event ocured. If remote, the event got triggered by the backplane and was not actually excecuted locally.</param>
            <exception cref="T:System.ArgumentNullException">If key is null.</exception>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheActionEventArgs.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheActionEventArgs.Region">
            <summary>
            Gets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheActionEventArgs.Origin">
            <summary>
            Gets the event origin indicating if the event was triggered by a local action or remotly, through the backplane.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheActionEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.Internal.CacheClearEventArgs">
            <summary>
            Event arguments for cache clear events.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheClearEventArgs.#ctor(CacheManager.Core.Internal.CacheActionEventArgOrigin)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheClearEventArgs"/> class.
            </summary>
            <param name="origin">The origin the event ocured. If remote, the event got triggered by the backplane and was not actually excecuted locally.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheClearEventArgs.Origin">
            <summary>
            Gets the event origin indicating if the event was triggered by a local action or remotly, through the backplane.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheClearEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.Internal.CacheClearRegionEventArgs">
            <summary>
            Event arguments for clear region events.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheClearRegionEventArgs.#ctor(System.String,CacheManager.Core.Internal.CacheActionEventArgOrigin)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheClearRegionEventArgs"/> class.
            </summary>
            <param name="region">The region.</param>
            <param name="origin">The origin the event ocured. If remote, the event got triggered by the backplane and was not actually excecuted locally.</param>
            <exception cref="T:System.ArgumentNullException">If region is null.</exception>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheClearRegionEventArgs.Region">
            <summary>
            Gets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.CacheClearRegionEventArgs.Origin">
            <summary>
            Gets the event origin indicating if the event was triggered by a local action or remotly, through the backplane.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheClearRegionEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:CacheManager.Core.Internal.CachePerformanceCounterType">
            <summary>
            Supported performance counter types.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.Items">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.HitRatio">
            <summary>
            The hit ratio.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.HitRatioBase">
            <summary>
            The hit ratio base.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.TotalHits">
            <summary>
            The total hits.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.TotalMisses">
            <summary>
            The total misses.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.TotalWrites">
            <summary>
            The total writes.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.ReadsPerSecond">
            <summary>
            The reads per second.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.WritesPerSecond">
            <summary>
            The writes per second.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CachePerformanceCounterType.HitsPerSecond">
            <summary>
            The hits per second.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheSerializer">
            <summary>
            Base implementation for cache serializers.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.GetOpenGeneric">
            <summary>
            Returns the open generic type of this class.
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.CreateNewItem``1(CacheManager.Core.Internal.ICacheItemProperties,System.Object)">
            <summary>
            Creates a new instance of the serializer specific cache item.
            Items should implement <see cref="T:CacheManager.Core.Internal.SerializerCacheItem`1"/> and the implementation should call
            the second constructor taking exactly these two arguments.
            </summary>
            <param name="properties">The item properties to copy from.</param>
            <param name="value">The actual cache item value.</param>
            <returns>The serializer specific cache item instance.</returns>
            <typeparam name="TCacheValue">The cache value type.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.Serialize``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.Deserialize(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.SerializeCacheItem``1(CacheManager.Core.CacheItem{``0})">
            <inheritdoc/>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheSerializer.DeserializeCacheItem``1(System.Byte[],System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheStats`1">
            <summary>
            <para>Stores statistical information for a <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>.</para>
            <para>
            Statistical counters are stored globally for the <see cref="T:CacheManager.Core.Internal.BaseCacheHandle`1"/>
            and for each cache region!
            </para>
            <para>
            To retrieve a counter for a region only, specify the optional region attribute of GetStatistics.
            </para>
            </summary>
            <remarks>
            The class is primarily used internally. Only the GetStatistics is visible. Therefore the
            class is sealed.
            </remarks>
            <typeparam name="TCacheValue">Inherited object type of the owning cache handle.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.CacheStats`1"/> class.
            </summary>
            <param name="cacheName">Name of the cache.</param>
            <param name="handleName">Name of the handle.</param>
            <param name="enabled">
            If set to <c>true</c> the stats are enabled. Otherwise any statistics and performance
            counters will be disabled.
            </param>
            <param name="enablePerformanceCounters">
            If set to <c>true</c> performance counters and statistics will be enabled.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If cacheName or handleName are null.
            </exception>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:CacheManager.Core.Internal.CacheStats`1"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.GetStatistic(CacheManager.Core.Internal.CacheStatsCounterType,System.String)">
             <summary>
             <para>
             Returns the corresponding statistical information of the
             <see cref="T:CacheManager.Core.Internal.CacheStatsCounterType"/> type.
             </para>
             <para>
             If the cache handles is configured to disable statistics, the method will always return zero.
             </para>
             </summary>
             <remarks>
             In multi threaded environments the counters can be changed while reading. Do not rely on
             those counters as they might not be 100% accurate.
             </remarks>
             <example>
             <code>
             <![CDATA[
             var cache = CacheFactory.FromConfiguration("myCache");
            
             foreach (var handle in cache.CacheHandles)
             {
                var stats = handle.Stats;
                var region = "myRegion";
                Console.WriteLine(string.Format(
                        "Items: {0}, Hits: {1}, Miss: {2}, Remove: {3}, ClearRegion: {4}, Clear: {5}, Adds: {6}, Puts: {7}, Gets: {8}",
                            stats.GetStatistic(CacheStatsCounterType.Items, region),
                            stats.GetStatistic(CacheStatsCounterType.Hits, region),
                            stats.GetStatistic(CacheStatsCounterType.Misses, region),
                            stats.GetStatistic(CacheStatsCounterType.RemoveCalls, region),
                            stats.GetStatistic(CacheStatsCounterType.ClearRegionCalls, region),
                            stats.GetStatistic(CacheStatsCounterType.ClearCalls, region),
                            stats.GetStatistic(CacheStatsCounterType.AddCalls, region),
                            stats.GetStatistic(CacheStatsCounterType.PutCalls, region),
                            stats.GetStatistic(CacheStatsCounterType.GetCalls, region)
                        ));
             }
             ]]>
             </code>
             </example>
             <param name="type">The stats type to retrieve the number for.</param>
             <param name="region">
             The region. The returned value will represent the counter of the region only.
             </param>
             <returns>
             A number representing the counts for the specified <see cref="T:CacheManager.Core.Internal.CacheStatsCounterType"/>
             and region.
             </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.GetStatistic(CacheManager.Core.Internal.CacheStatsCounterType)">
             <summary>
             <para>
             Returns the corresponding statistical information of the
             <see cref="T:CacheManager.Core.Internal.CacheStatsCounterType"/> type.
             </para>
             <para>
             If the cache handles is configured to disable statistics, the method will always return zero.
             </para>
             </summary>
             <remarks>
             In multithreaded environments the counters can be changed while reading. Do not rely on
             those counters as they might not be 100% accurate.
             </remarks>
             <example>
             <code>
             <![CDATA[
             var cache = CacheFactory.FromConfiguration("myCache");
            
             foreach (var handle in cache.CacheHandles)
             {
                var stats = handle.Stats;
                Console.WriteLine(string.Format(
                        "Items: {0}, Hits: {1}, Miss: {2}, Remove: {3}, ClearRegion: {4}, Clear: {5}, Adds: {6}, Puts: {7}, Gets: {8}",
                            stats.GetStatistic(CacheStatsCounterType.Items),
                            stats.GetStatistic(CacheStatsCounterType.Hits),
                            stats.GetStatistic(CacheStatsCounterType.Misses),
                            stats.GetStatistic(CacheStatsCounterType.RemoveCalls),
                            stats.GetStatistic(CacheStatsCounterType.ClearRegionCalls),
                            stats.GetStatistic(CacheStatsCounterType.ClearCalls),
                            stats.GetStatistic(CacheStatsCounterType.AddCalls),
                            stats.GetStatistic(CacheStatsCounterType.PutCalls),
                            stats.GetStatistic(CacheStatsCounterType.GetCalls)
                        ));
             }
             ]]>
             </code>
             </example>
             <param name="type">The stats type to retrieve the number for.</param>
             <returns>A number representing the counts for the specified <see cref="T:CacheManager.Core.Internal.CacheStatsCounterType"/>.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnAdd(CacheManager.Core.CacheItem{`0})">
            <summary>
            Called when an item gets added to the cache.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnClear">
            <summary>
            Called when the cache got cleared.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnClearRegion(System.String)">
            <summary>
            Called when a cache region got cleared.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnGet(System.String)">
            <summary>
            Called when cache Get got invoked.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnHit(System.String)">
            <summary>
            Called when a Get was successful.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnMiss(System.String)">
            <summary>
            Called when a Get was not successful.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnPut(CacheManager.Core.CacheItem{`0},System.Boolean)">
            <summary>
            Called when an item got updated.
            </summary>
            <param name="item">The item.</param>
            <param name="itemAdded">If <c>true</c> the item didn't exist and has been added.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnRemove(System.String)">
            <summary>
            Called when an item has been removed from the cache.
            </summary>
            <param name="region">The region.</param>
        </member>
        <member name="M:CacheManager.Core.Internal.CacheStats`1.OnUpdate(System.String,System.String,CacheManager.Core.Internal.UpdateItemResult{`0})">
            <summary>
            Called when an item has been updated.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">If key or result are null.</exception>
        </member>
        <member name="T:CacheManager.Core.Internal.CacheStatsCounterType">
            <summary>
            Defines the different counter types the cache manager supports.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.Hits">
            <summary>
            The number of hits.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.Misses">
            <summary>
            The number of misses.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.Items">
            <summary>
            The total number of items.
            <para>
            This might not be accurate in distribute cache scenarios because we count only the items
            added or removed locally.
            </para>
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.RemoveCalls">
            <summary>
            The number of remove calls.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.AddCalls">
            <summary>
            The number of add calls.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.PutCalls">
            <summary>
            The number of put calls.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.GetCalls">
            <summary>
            The number of get calls.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.ClearCalls">
            <summary>
            The number of clear calls.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.CacheStatsCounterType.ClearRegionCalls">
            <summary>
            The number of clear region calls.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.DictionaryCacheHandle`1">
            <summary>
            This handle is for internal use and testing. It does not implement any expiration.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.#ctor(CacheManager.Core.ICacheManagerConfiguration,CacheManager.Core.CacheHandleConfiguration,CacheManager.Core.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.DictionaryCacheHandle`1"/> class.
            </summary>
            <param name="managerConfiguration">The manager configuration.</param>
            <param name="configuration">The cache handle configuration.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.DictionaryCacheHandle`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.DictionaryCacheHandle`1.Logger">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.Clear">
            <summary>
            Clears this cache, removing all items in the base cache and all regions.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.ClearRegion(System.String)">
            <summary>
            Clears the cache region, removing all items from the specified <paramref name="region"/> only.
            </summary>
            <param name="region">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">If region is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.Exists(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.AddInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Adds a value to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <returns>
            <c>true</c> if the key was not already added to the cache, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.GetCacheItemInternal(System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.GetCacheItemInternal(System.String,System.String)">
            <summary>
            Gets a <c>CacheItem</c> for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>The <c>CacheItem</c>.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.PutInternalPrepared(CacheManager.Core.CacheItem{`0})">
            <summary>
            Puts the <paramref name="item"/> into the cache. If the item exists it will get updated
            with the new value. If the item doesn't exist, the item will be added to the cache.
            </summary>
            <param name="item">The <c>CacheItem</c> to be added to the cache.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.RemoveInternal(System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.RemoveInternal(System.String,System.String)">
            <summary>
            Removes a value from the cache for the specified key.
            </summary>
            <param name="key">The key being used to identify the item within the cache.</param>
            <param name="region">The cache region.</param>
            <returns>
            <c>true</c> if the key was found and removed from the cache, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CacheManager.Core.Internal.DictionaryCacheHandle`1.GetKey(System.String,System.String)">
            <summary>
            Gets the key.
            </summary>
            <param name="key">The key.</param>
            <param name="region">The region.</param>
            <returns>The full key.</returns>
            <exception cref="T:System.ArgumentException">If Key is empty.</exception>
        </member>
        <member name="T:CacheManager.Core.Internal.ICacheItemProperties">
            <summary>
            Contract which exposes only the properties of the <see cref="T:CacheManager.Core.CacheItem`1"/> without T value.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.CreatedUtc">
            <summary>
            Gets the creation date of the cache item.
            </summary>
            <value>The creation date.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.ExpirationMode">
            <summary>
            Gets the expiration mode.
            </summary>
            <value>The expiration mode.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.ExpirationTimeout">
            <summary>
            Gets the expiration timeout.
            </summary>
            <value>The expiration timeout.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.Key">
            <summary>
            Gets the cache key.
            </summary>
            <value>The cache key.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.LastAccessedUtc">
            <summary>
            Gets or sets the last accessed date of the cache item.
            </summary>
            <value>The last accessed date.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.Region">
            <summary>
            Gets the cache region.
            </summary>
            <value>The cache region.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.UsesExpirationDefaults">
            <summary>
            Gets a value indicating whether the cache item uses the cache handle's configured expiration.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.ICacheItemProperties.ValueType">
            <summary>
            Gets the type of the cache value.
            <para>This might be used for serialization and deserialization.</para>
            </summary>
            <value>The type of the cache value.</value>
        </member>
        <member name="T:CacheManager.Core.Internal.ICacheSerializer">
            <summary>
            Defines the contract for serialization of the cache value and cache items.
            The cache item serialization should be separated in case the serialization
            technology does not support immutable objects; in that case <see cref="T:CacheManager.Core.CacheItem`1"/> might not
            be serializable directly and the implementation has to wrap the cache item.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.ICacheSerializer.Serialize``1(``0)">
            <summary>
            Serializes the given <paramref name="value"/> and returns the serialized data as byte array.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialization result</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.ICacheSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserializes the <paramref name="data"/> into the given <paramref name="target"/> <c>Type</c>.
            </summary>
            <param name="data">The data which should be deserialized.</param>
            <param name="target">The type of the object to deserialize into.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.ICacheSerializer.SerializeCacheItem``1(CacheManager.Core.CacheItem{``0})">
            <summary>
            Serializes the given <paramref name="value"/>.
            </summary>
            <typeparam name="T">The type of the cache value.</typeparam>
            <param name="value">The value to serialize.</param>
            <returns>The serialized result.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.ICacheSerializer.DeserializeCacheItem``1(System.Byte[],System.Type)">
            <summary>
            Deserializes the <paramref name="value"/> into a <see cref="T:CacheManager.Core.CacheItem`1"/>.
            The <paramref name="valueType"/> must not match the <typeparamref name="T"/> in case
            <typeparamref name="T"/> is <c>object</c> for example, the <paramref name="valueType"/>
            might be the real type of the value. This is needed to properly deserialize in some cases.
            </summary>
            <typeparam name="T">The type of the cache value.</typeparam>
            <param name="value">The data to deserialize from.</param>
            <param name="valueType">The type of the actual serialized cache value.</param>
            <returns>The deserialized cache item.</returns>
        </member>
        <member name="T:CacheManager.Core.Internal.RequiresSerializerAttribute">
            <summary>
            Can be used to decorate cache handles which require serialization
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.ICacheItemConverter">
            <summary>
            Simple converter contract used by the serializer cache item. Serializers will use that to convert back to
            The <see cref="T:CacheManager.Core.CacheItem`1"/>.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.ICacheItemConverter.ToCacheItem``1">
            <summary>
            Converts the current instance to a <see cref="T:CacheManager.Core.CacheItem`1"/>.
            The returned item must return the orignial created and last accessed date!
            </summary>
            <typeparam name="TTarget">The type.</typeparam>
            <returns>The cache item.</returns>
        </member>
        <member name="T:CacheManager.Core.Internal.SerializerCacheItem`1">
            <summary>
            Basic abstraction for serializers to work with cache items.
            </summary>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Internal.SerializerCacheItem`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.SerializerCacheItem`1"/> class.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.SerializerCacheItem`1.#ctor(CacheManager.Core.Internal.ICacheItemProperties,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Internal.SerializerCacheItem`1"/> class.
            </summary>
            <param name="properties">The actual properties.</param>
            <param name="value">The cache value.</param>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.CreatedUtc">
            <summary>
            Gets or sets the created utc date in ticks.
            Can be converted from and to <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.ExpirationMode">
            <summary>
            Gets or sets the expiration mode.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.ExpirationTimeout">
            <summary>
            Gets or sets the expiration timeout in milliseconds.
            Can be coverted from and to <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.LastAccessedUtc">
            <summary>
            Gets or sets the last accessed utc date in ticks.
            Can be converted from and to <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.UsesExpirationDefaults">
            <summary>
            Gets or sets a value indicating whether the default expiration should be used.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.ValueType">
            <summary>
            Gets or sets the value type.
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.SerializerCacheItem`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.SerializerCacheItem`1.ToCacheItem``1">
            <inheritdoc/>
        </member>
        <member name="T:CacheManager.Core.Internal.TypeCache">
            <summary>
            Used by serializers to find value types
            </summary>
        </member>
        <member name="P:CacheManager.Core.Internal.TypeCache.ObjectType">
            <summary>
            Gets <c>typeof(object)</c>.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.TypeCache.RegisterResolveType(System.Func{System.String,System.Type})">
            <summary>
            Registers a custom type resolver in case you really need to manipulate the way serialization works with types.
            The <paramref name="resolve"/> func is allowed to return null in case you cannot resolve the requested type.
            Any exception the <paramref name="resolve"/> func might throw will not bubble up.
            </summary>
            <param name="resolve">The resolver</param>
        </member>
        <member name="M:CacheManager.Core.Internal.TypeCache.GetType(System.String)">
            <summary>
            Gets <see cref="T:System.Type"/> by full name (with falling back to the first part only).
            </summary>
            <param name="type">The type name.</param>
            <returns>The <see cref="T:System.Type"/> if valid.</returns>
            <exception cref="T:System.TypeLoadException">In case the <paramref name="type"/> is not a valid type. (Might also throw other type load related exceptions).</exception>
        </member>
        <member name="T:CacheManager.Core.Internal.UpdateItemResultState">
            <summary>
            Represents that state of an update operation.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.UpdateItemResultState.Success">
            <summary>
            The state represents a successful update operation.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.UpdateItemResultState.TooManyRetries">
            <summary>
            The state represents a failed attempt. The retries limit had been reached.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.UpdateItemResultState.ItemDidNotExist">
            <summary>
            The state represents a failed attempt. The cache item did not exist, so no update could
            be made.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Internal.UpdateItemResultState.FactoryReturnedNull">
            <summary>
            Internal state representing a failure where the factory function returns null instead of a valid value.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Internal.UpdateItemResult">
            <summary>
            Helper class to create correct instances.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Internal.UpdateItemResult.ForItemDidNotExist``1">
            <summary>
            Creates a new instance of the <see cref="T:CacheManager.Core.Internal.UpdateItemResult`1"/> class with
            properties typical for the case where the cache item did not exist for an update operation.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
            <returns>The item result.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.UpdateItemResult.ForFactoryReturnedNull``1">
            <summary>
            Creates a new instance of the <see cref="T:CacheManager.Core.Internal.UpdateItemResult`1"/> indicating that the
            cache value factory returned null instead of a valid value.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
            <returns>The item result.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.UpdateItemResult.ForSuccess``1(CacheManager.Core.CacheItem{``0},System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:CacheManager.Core.Internal.UpdateItemResult`1"/> class with
            properties typical for a successful update operation.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
            <param name="value">The value.</param>
            <param name="conflictOccurred">Set to <c>true</c> if a conflict occurred.</param>
            <param name="triesNeeded">The tries needed.</param>
            <returns>The item result.</returns>
        </member>
        <member name="M:CacheManager.Core.Internal.UpdateItemResult.ForTooManyRetries``1(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:CacheManager.Core.Internal.UpdateItemResult`1"/> class with
            properties typical for an update operation which failed because it exceeded the limit of tries.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
            <param name="triesNeeded">The tries needed.</param>
            <returns>The item result.</returns>
        </member>
        <member name="T:CacheManager.Core.Internal.UpdateItemResult`1">
            <summary>
            Used by cache handle implementations to let the cache manager know what happened during an
            update operation.
            </summary>
            <typeparam name="TCacheValue">The type of the cache value.</typeparam>
        </member>
        <member name="P:CacheManager.Core.Internal.UpdateItemResult`1.NumberOfTriesNeeded">
            <summary>
            Gets the number of tries the cache needed to update the item.
            </summary>
            <value>The number of retries needed.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.UpdateItemResult`1.UpdateState">
            <summary>
            Gets a value indicating whether the update operation was successful or not.
            </summary>
            <value>The current <see cref="T:CacheManager.Core.Internal.UpdateItemResultState"/>.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.UpdateItemResult`1.Value">
            <summary>
            Gets the updated value.
            </summary>
            <value>The updated value.</value>
        </member>
        <member name="P:CacheManager.Core.Internal.UpdateItemResult`1.VersionConflictOccurred">
            <summary>
            Gets a value indicating whether a version conflict occurred during an update operation.
            </summary>
            <value><c>true</c> if a version conflict occurred; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CacheManager.Core.Logging.ILogger">
            <summary>
            Represents a type used to perform logging.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Logging.ILogger.Log(CacheManager.Core.Logging.LogLevel,System.Int32,System.Object,System.Exception)">
            <summary>
            Logs a message for the given <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="eventId">The optional even id.</param>
            <param name="message">The log message.</param>
            <param name="exception">The optional exception.</param>
        </member>
        <member name="M:CacheManager.Core.Logging.ILogger.IsEnabled(CacheManager.Core.Logging.LogLevel)">
            <summary>
            Checks if the given LogLevel is enabled.
            </summary>
            <param name="logLevel">The log level.</param>
            <returns><c>True</c> if the <paramref name="logLevel"/> is enabled, <c>False</c> otherwise.</returns>
        </member>
        <member name="M:CacheManager.Core.Logging.ILogger.BeginScope(System.Object)">
            <summary>
            Begins a logical operation scope.
            </summary>
            <param name="state">The identifier for the scope.</param>
            <returns>An <c>IDisposable</c> that ends the logical operation scope on dispose.</returns>
        </member>
        <member name="T:CacheManager.Core.Utility.Clock">
            <summary>
            Time related helper.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Utility.Clock.TicksPerMillisecond">
            <summary>
            Number of ticks per millisecond.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Utility.Clock.UnixEpochTicks">
            <summary>
            Ticks since 1970.
            </summary>
        </member>
        <member name="F:CacheManager.Core.Utility.Clock.UnixEpochSeconds">
            <summary>
            Seconds since 1970.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Utility.Clock.GetUnixTimestampMillis">
            <summary>
            Computes a timestamp representing milliseconds since 1970.
            </summary>
            <returns>The milliseconds.</returns>
        </member>
        <member name="M:CacheManager.Core.Utility.Clock.GetUnixTimestampTicks">
            <summary>
            Computes a timestamp representing ticks since 1970.
            </summary>
            <returns>The ticks.</returns>
        </member>
        <member name="M:CacheManager.Core.Utility.Clock.ToUnixTimestampMillis(System.DateTime)">
            <summary>
            Computes the milliseconds since 1970 up to the given <paramref name="date"/>.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> base.</param>
            <returns>The milliseconds since 1970.</returns>
        </member>
        <member name="T:CacheManager.Core.Utility.Guard">
            <summary>
            Utility class to do <c>null</c> and other checks.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.NotNull``1(``0,System.String)">
            <summary>
            Validates that <paramref name="value"/> is not <c>null</c> and otherwise throws an exception.
            <c>Structs</c> are allowed although <paramref name="value"/> cannot be <c>null</c> in this case.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The parameter value to validate.</param>
            <param name="parameterName">The parameter name.</param>
            <returns>The <paramref name="value"/>, if not <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates that <paramref name="value"/> is not null or empty and otherwise throws an exception.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="name">The parameter name.</param>
            <returns>The <paramref name="value"/>, if not null or empty.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.NotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Validates that <paramref name="value"/> is not null or empty and otherwise throws an exception.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="name">The parameter name.</param>
            <returns>The <paramref name="value"/>, if not null or empty.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
            <typeparam name="T">Type of the collection.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Validates that <paramref name="value"/> is not null, empty or contains whitespace only
            and otherwise throws an exception.
            </summary>
            <param name="value">The parameter value to validate.</param>
            <param name="name">The parameter name.</param>
            <returns>The <paramref name="value"/> if not null or empty.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is empty.</exception>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.Ensure(System.Boolean,System.String,System.Object[])">
            <summary>
            Validates that <paramref name="condition"/> is true and otherwise throws an exception.
            </summary>
            <param name="condition">The condition to validate.</param>
            <param name="message">The message to throw if the configuration is <c>false</c>.</param>
            <param name="args"><c>string.Format</c> will be used to format <paramref name="message"/>
            and <c>args</c> to create the exception message.</param>
            <returns><c>true</c> if the <paramref name="condition"/> is valid.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="condition"/> is false.</exception>
        </member>
        <member name="M:CacheManager.Core.Utility.Guard.EnsureNotNull``1(``0,System.String,System.Object[])">
            <summary>
            Validates that <paramref name="value"/> is not <c>null</c> and otherwise throws an exception.
            <c>Structs</c> are allowed although <paramref name="value"/> cannot be <c>null</c> in this case.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="message">The message to throw if the <paramref name="value"/> is <c>null</c>.</param>
            <param name="args"><c>string.Format</c> will be used to format <paramref name="message"/>
            and <c>args</c> to create the exception message.</param>
            <returns>The <paramref name="value"/> if not <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CacheManager.Core.Utility.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="M:CacheManager.Core.Utility.ValidatedNotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Utility.ValidatedNotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:CacheManager.Core.Utility.IObjectPoolPolicy`1">
            <summary>
            Contract used by <see cref="T:CacheManager.Core.Utility.ObjectPool`1"/> to define how to create and return instances to a pool.
            </summary>
            <typeparam name="T">The type of objects of the pool.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Utility.IObjectPoolPolicy`1.CreateNew">
            <summary>
            Creates a new instance of <typeparamref name="T"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Utility.IObjectPoolPolicy`1.Return(`0)">
            <summary>
            Checks if the instance can be returned and may reset the instance to a state which can be reused.
            </summary>
            <param name="value">The instance which should be returned.</param>
            <returns><c>True</c> if the instance can be returned, <c>False</c> otherwise.</returns>
        </member>
        <member name="T:CacheManager.Core.Utility.ObjectPool`1">
            <summary>
            Simple policy based pool for objects.
            </summary>
            <typeparam name="T">The object type to pool.</typeparam>
        </member>
        <member name="M:CacheManager.Core.Utility.ObjectPool`1.#ctor(CacheManager.Core.Utility.IObjectPoolPolicy{`0},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:CacheManager.Core.Utility.ObjectPool`1"/> class.
            </summary>
            <param name="policy">The object pool policy.</param>
            <param name="maxItems">Number of items to keep, defaults to number of processors * 2.</param>
        </member>
        <member name="M:CacheManager.Core.Utility.ObjectPool`1.Lease">
            <summary>
            Returns either a pooled or new instance of <typeparamref name="T"/>.
            </summary>
            <returns>The pooled or new instance.</returns>
        </member>
        <member name="M:CacheManager.Core.Utility.ObjectPool`1.Return(`0)">
            <summary>
            Returns the instance to the pool (if possible).
            </summary>
            <param name="value">The instance to return to the pool.</param>
        </member>
    </members>
</doc>
