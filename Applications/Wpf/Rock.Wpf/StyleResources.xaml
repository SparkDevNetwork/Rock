<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:fa="http://schemas.fontawesome.io/icons/"
    xmlns:local="clr-namespace:Rock.Wpf">

    <!--  Brushes  -->
    <SolidColorBrush x:Key="WindowBackColor" Color="#ee7725" />
    <SolidColorBrush x:Key="WindowForeColor" Color="White" />
    <SolidColorBrush x:Key="GridHighlightColor" Color="Gray" />
    <SolidColorBrush x:Key="GridAlternateColor" Color="#efefef" />
    <SolidColorBrush x:Key="HorizontalGridLinesBrush" Color="#d4d4d4" />
    <SolidColorBrush x:Key="BorderBrush" Color="#d4d4d4" />
    <SolidColorBrush x:Key="PageBackgroundBrush" Color="#efefef" />
    <SolidColorBrush x:Key="PanelHeaderBrush" Color="#f3f3f3" />
    <SolidColorBrush x:Key="FontAwesomeIconColor" Color="#797979" />
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="#ffff" />
    <SolidColorBrush x:Key="BootstrapDanger" Color="#d4442e" />
    <SolidColorBrush x:Key="LabelColor" Color="#2b2b2b" />

    <!--
        Label Styles
    -->

    <!--  Label style  -->

    <Style x:Key="labelStyle" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="4,4,0,0" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.FontSize" Value="14" />
        <Setter Property="Label.Foreground" Value="{StaticResource LabelColor}" />
        <Setter Property="FontFamily" Value="./resources/#Roboto-Regular" />
    </Style>

    <Style x:Key="labelStyleSmall" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Roboto" />
        <Setter Property="Padding" Value="4,4,0,0" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.FontSize" Value="12" />
        <Setter Property="Label.Foreground" Value="#797979" />
    </Style>

    <Style
        x:Key="labelStyleSmallError"
        BasedOn="{StaticResource labelStyleSmall}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground" Value="{StaticResource BootstrapDanger}" />
    </Style>


    <!--  Label style: Bold  -->
    <Style
        x:Key="labelStyleError"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground" Value="{StaticResource BootstrapDanger}" />
    </Style>

    <!--  Label style: Bold  -->
    <Style
        x:Key="labelStyleBold"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Medium" />
        <Setter Property="FontWeight" Value="SemiBold" />
    </Style>

    <Style
        x:Key="labelStyleMedium"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Medium" />
        <Setter Property="FontWeight" Value="SemiBold" />
    </Style>

    <!--  Label style: Caption  -->
    <Style
        x:Key="labelStyleCaption"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Label.FontWeight" Value="Bold" />
        <Setter Property="Label.FontSize" Value="16" />
    </Style>

    <Style
        x:Key="labelStyleStepCaption"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Label.FontWeight" Value="Bold" />
        <Setter Property="Label.FontSize" Value="18" />
    </Style>

    <Style
        x:Key="labelStyleCaptionError"
        BasedOn="{StaticResource labelStyleCaption}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground" Value="{StaticResource BootstrapDanger}" />
    </Style>


    <!--  Label style: Title  -->
    <Style x:Key="labelStylePanelTitle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Label.Margin" Value="0,2,0,0" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.FontSize" Value="16" />
        <Setter Property="Label.Foreground" Value="#6A6A6A" />
    </Style>

    <!--  Label style: Title  -->
    <Style x:Key="labelStyleTitle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/##Roboto-Bold" />
        <Setter Property="Label.Margin" Value="20,0,0,10" />
        <Setter Property="Label.VerticalAlignment" Value="Center" />
        <Setter Property="Label.HorizontalAlignment" Value="Right" />
        <Setter Property="Label.FontWeight" Value="Bold" />
        <Setter Property="Label.FontSize" Value="30" />
        <Setter Property="Label.Foreground" Value="#d6d6d6" />
    </Style>

    <!--  Label style: Legend  -->
    <Style x:Key="labelStyleLegend" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Medium" />
        <Setter Property="Label.Margin" Value="0,0,0,0" />
        <Setter Property="Label.VerticalAlignment" Value="Center" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="Label.FontWeight" Value="SemiBold" />
        <Setter Property="Label.FontSize" Value="21" />
        <Setter Property="Label.Foreground" Value="#6a6a6a" />
    </Style>

    <!--  *** Banner ***  -->

    <!--  Panel Default  -->
    <Style x:Key="stackPanelDefault" TargetType="{x:Type StackPanel}">
        <Setter Property="Background" Value="#ffffff" />
    </Style>
    <!--  Panel Style: panelBanner  -->
    <Style x:Key="panelBanner" TargetType="{x:Type StackPanel}">
        <Setter Property="Background" Value="#dbd5cb" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="Orientation" Value="Horizontal" />
    </Style>

    <!--  Label style: Banner Title  -->
    <Style x:Key="labelStyleBannerTitle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Label.FontWeight" Value="Bold" />
        <Setter Property="Label.FontSize" Value="28" />
        <Setter Property="Label.Foreground" Value="#6a6a6a" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!--  Label style: Banner Text  -->
    <Style x:Key="labelStyleBannerText" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Light" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.FontSize" Value="28" />
        <Setter Property="Label.Foreground" Value="#6a6a6a" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!--  Grid style: PanelGrid  -->
    <Style x:Key="gridPanel" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="#ffffff" />
    </Style>

    <Style x:Key="gridPanelBorderColumn" TargetType="{x:Type ColumnDefinition}">
        <Setter Property="Width" Value="44" />
    </Style>

    <Style x:Key="gridPanelBorderRow" TargetType="{x:Type RowDefinition}">
        <Setter Property="Height" Value="44" />
    </Style>

    <!--  Logo style: bottom right  -->
    <Style x:Key="logoStyleBottomRight" TargetType="{x:Type Frame}">
        <Setter Property="Opacity" Value="0.2" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="0.15" ScaleY="0.15" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Label style: Alert  -->
    <Style x:Key="labelStyleAlertBase" TargetType="Label">
        <Setter Property="Padding" Value="10" />
        <Setter Property="FontFamily" Value="Roboto-Medium" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="BorderThickness" Value="0,2,0,0" />
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style
        x:Key="labelStyleAlertInfo"
        BasedOn="{StaticResource labelStyleAlertBase}"
        TargetType="Label">
        <Setter Property="Background" Value="#ecf9fd" />
        <Setter Property="Foreground" Value="#31708f" />
        <Setter Property="BorderBrush" Value="#009ce3" />
    </Style>

    <Style
        x:Key="labelStyleAlertSuccess"
        BasedOn="{StaticResource labelStyleAlertBase}"
        TargetType="Label">
        <Setter Property="Background" Value="#eaf6ef" />
        <Setter Property="Foreground" Value="#108043" />
        <Setter Property="BorderBrush" Value="#16c98d" />
    </Style>

    <Style
        x:Key="labelStyleAlertWarning"
        BasedOn="{StaticResource labelStyleAlertBase}"
        TargetType="Label">
        <Setter Property="Background" Value="#fffae5" />
        <Setter Property="Foreground" Value="#8a6d3b" />
        <Setter Property="BorderBrush" Value="#ffc870" />
    </Style>

    <Style
        x:Key="labelStyleAlertDanger"
        BasedOn="{StaticResource labelStyleAlertBase}"
        TargetType="Label">
        <Setter Property="Background" Value="#fcf2f1" />
        <Setter Property="Foreground" Value="#e55235" />
        <Setter Property="BorderBrush" Value="{StaticResource BootstrapDanger}" />
    </Style>


    <!--  Label style: Grid Title  -->
    <Style
        x:Key="labelStyleGridTitle"
        BasedOn="{StaticResource labelStyleLegend}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.FontSize" Value="14" />
    </Style>

    <!--  Label style: dt (Bootstrap Definition Title)  -->
    <Style
        x:Key="labelStyleDt"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Medium" />
        <Setter Property="Label.FontWeight" Value="SemiBold" />
    </Style>

    <!--  Label style: dd (Bootstrap Definition definition)  -->
    <Style
        x:Key="labelStyleDd"
        BasedOn="{StaticResource labelStyle}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Margin" Value="0,0,0,8" />
    </Style>

    <!--  Label style: Icon (FontAwesome Icon)  -->
    <Style x:Key="labelStyleIcon" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="0,0,4,0" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="./resources/#FontAwesome" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.Foreground" Value="#000" />
    </Style>

    <Style
        x:Key="labelStyleIconPrimary"
        BasedOn="{StaticResource labelStyleIcon}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground" Value="#fff" />
    </Style>

    <Style
        x:Key="labelStyleIconRight"
        BasedOn="{StaticResource labelStyleIcon}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Margin" Value="4,6,0,4" />
    </Style>

    <Style
        x:Key="labelStyleIconLeft"
        BasedOn="{StaticResource labelStyleIcon}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Margin" Value="0,6,0,4" />
    </Style>

    <Style
        x:Key="labelStyleIconPrimaryRight"
        BasedOn="{StaticResource labelStyleIconPrimary}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Margin" Value="4,6,0,4" />
    </Style>

    <Style
        x:Key="labelStyleIconPrimaryLeft"
        BasedOn="{StaticResource labelStyleIconPrimary}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Margin" Value="0,6,0,4" />
    </Style>

    <Style
        x:Key="labelStyleHighlight"
        BasedOn="{StaticResource labelStyleIcon}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Padding" Value="6,3,6,3" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="11" />
    </Style>

    <Style
        x:Key="labelStyleHighlightDefault"
        BasedOn="{StaticResource labelStyleHighlight}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Background" Value="#6a6a6a" />
        <Setter Property="Label.Foreground" Value="#ffffff" />
    </Style>

    <Style
        x:Key="labelStyleHighlightInfo"
        BasedOn="{StaticResource labelStyleHighlight}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Background" Value="#3bc2df" />
        <Setter Property="Label.Foreground" Value="#ffffff" />
    </Style>

    <!--  Label style: Button Text  -->
    <Style x:Key="labelStyleButtonText" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.Foreground" Value="#000" />
    </Style>

    <Style
        x:Key="labelStyleButtonTextPrimary"
        BasedOn="{StaticResource labelStyleButtonText}"
        TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground" Value="White" />
    </Style>

    <!--  Textblock Style  -->
    <Style x:Key="textBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Label.Margin" Value="0,0,0,0" />
        <Setter Property="Label.VerticalAlignment" Value="Center" />
        <Setter Property="Label.HorizontalAlignment" Value="Left" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.Foreground" Value="#6a6a6a" />
    </Style>

    <!--  Textblock Style: Title Paragraph  -->
    <Style
        x:Key="textBlockStyleTitleParagraph"
        BasedOn="{StaticResource textBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="Label.FontWeight" Value="Normal" />
        <Setter Property="Label.FontSize" Value="14" />
        <Setter Property="Label.Foreground" Value="#6a6a6a" />
    </Style>

    <!--  Textblock Style: Grid Data  -->
    <Style
        x:Key="textBlockStyleGridDataTitle"
        BasedOn="{StaticResource textBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Medium" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style
        x:Key="textBlockStyleGridData"
        BasedOn="{StaticResource textBlockStyle}"
        TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <!--
        Grid related Styles
    -->

    <!--  Grid Style (white)  -->

    <Style x:Key="gridStyleWhite" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="#ffffff" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Grid Column Header style  -->
    <Style x:Key="gridHeaderStyleWhite" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
        <Setter Property="Background" Value="#ffffff" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="#ffffff" />
    </Style>

    <Style x:Key="gridCellStyleWhite" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#ffffff" />
                <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="MinHeight" Value="38" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="5,0,12,0" />
        <Setter Property="Cursor" Value="Hand" />

        <!--  from http://stackoverflow.com/a/3995839/1755417  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="gridCellStyleNumberWhiteAlignRight"
        BasedOn="{StaticResource gridCellStyleWhite}"
        TargetType="{x:Type DataGridCell}" />
    <Style
        x:Key="gridCellStyleNumberWhite"
        BasedOn="{StaticResource gridCellStyleWhite}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    <Style
        x:Key="gridCellStyleDateTimeWhite"
        BasedOn="{StaticResource gridCellStyleWhite}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ContentStringFormat" Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>

    <Style
        x:Key="gridCellStyleAmountWhite"
        BasedOn="{StaticResource gridCellStyleWhite}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ContentStringFormat" Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>


    <Style x:Key="gridStyle" TargetType="{x:Type DataGrid}">
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background" Value="#efefef" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  Grid Style (Legacy/Grey, used by Check Scanner)  -->


    <!--  Grid Column Header style  -->
    <Style x:Key="gridHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontFamily" Value="./resources/#Roboto-Bold" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="#dddddd" />
    </Style>

    <Style
        x:Key="gridHeaderStyleWide"
        BasedOn="{StaticResource gridHeaderStyle}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Width" Value="450" />
    </Style>

    <Style
        x:Key="gridHeaderStyleNumber"
        BasedOn="{StaticResource gridHeaderStyle}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style
        x:Key="gridHeaderStyleDateTime"
        BasedOn="{StaticResource gridHeaderStyleNumber}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Width" Value="180" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <Style
        x:Key="gridHeaderStyleCurrency"
        BasedOn="{StaticResource gridHeaderStyleNumber}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Width" Value="120" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
    </Style>

    <Style
        x:Key="gridHeaderStyleActions"
        BasedOn="{StaticResource gridHeaderStyle}"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>

    <!--  Grid Cell Style  -->
    <Style x:Key="gridCellStyle" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#d4d4d4" />
                <Setter Property="Foreground" Value="#2b2b2b" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="MinHeight" Value="38" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />

        <!--  from http://stackoverflow.com/a/3995839/1755417  -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style
        x:Key="gridCellStyleIfVariance"
        BasedOn="{StaticResource gridCellStyle}"
        TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#d4d4d4" />
                <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="gridCellStyleNumberAlignRight"
        BasedOn="{StaticResource gridCellStyle}"
        TargetType="{x:Type DataGridCell}" />
    <Style
        x:Key="gridCellStyleNumber"
        BasedOn="{StaticResource gridCellStyle}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    <Style
        x:Key="gridCellStyleDateTime"
        BasedOn="{StaticResource gridCellStyle}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ContentStringFormat" Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>

    <Style
        x:Key="gridCellStyleAmount"
        BasedOn="{StaticResource gridCellStyle}"
        TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ContentStringFormat" Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>

    <!--
        Button styles
    -->

    <!--  Button Style  -->
    <Style x:Key="buttonStyle" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <SolidColorBrush x:Key="focusBackgroundColor" Color="{TemplateBinding Button.Background}" />
            <SolidColorBrush x:Key="focusBorderBrush" Color="{TemplateBinding Button.BorderBrush}" />
        </Style.Resources>
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Foreground" Value="#000" />
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        Name="buttonBorder"
                        Padding="12,0,12,0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ToolTip="{TemplateBinding ToolTip}"
                            ToolTipService.ShowOnDisabled="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".35" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="buttonBorder" Property="BorderBrush" Value="{DynamicResource focusBorderBrush}" />
                            <Setter TargetName="buttonBorder" Property="Background" Value="{DynamicResource focusBackgroundColor}" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="buttonBorder" Property="Background" Value="#ee7624" />
                            <Setter Property="Foreground" Value="#fefefe" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Button Style: Action  -->
    <Style
        x:Key="buttonStyleAction"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Background" Value="#466673" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
    </Style>

    <!--  Font Awesome Button Primary  -->
    <!--  Button Style: Primary  -->
    <Style
        x:Key="buttonFontAwesomStylePrimary"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#797979" />
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="BorderBrush" Value="#b7b7b7" />

    </Style>
    <Style
        x:Key="buttonFontAwesomStylePrimaryLG"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="52" />
        <Setter Property="Foreground" Value="#797979" />
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="BorderBrush" Value="#b7b7b7" />

    </Style>

    <Style
        x:Key="buttonStylePrimary"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Style.Resources>
            <SolidColorBrush x:Key="focusBackgroundColor" Color="#d05e10" />
            <SolidColorBrush x:Key="focusBorderBrush" Color="#893e0b" />
        </Style.Resources>
        <Setter Property="Foreground" Value="#fefefe" />
        <Setter Property="Background" Value="#ee7624" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
    </Style>
    <Style
        x:Key="buttonStyleAlternate"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
        <Setter Property="Background" Value="#fefefe" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Robot-bold" />

    </Style>

    <!--  Button Style: Secondary  -->
    <Style
        x:Key="buttonStyleSecondary"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#007acc" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Robot-bold" />
    </Style>
    <!--  ToggleButton Style  -->
    <Style
        x:Key="toggleButtonStyle"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource LabelColor}" />
        <Setter Property="Background" Value="#fefefe" />
        <Setter Property="BorderBrush" Value="#c4c4c4" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="50" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Roboto-Regular" />
    </Style>

    <!--  Button Style: Grid Command  -->
    <Style x:Key="buttonStyleGridColumnIcon" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="./resources/#FontAwesome" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="24" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontSize" Value="15" />
    </Style>

    <!--  Button Style: Mini  -->
    <Style
        x:Key="buttonStyleMini"
        BasedOn="{StaticResource buttonStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="24" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <!--  Button Style: Mini Action  -->
    <Style
        x:Key="buttonStyleMiniAction"
        BasedOn="{StaticResource buttonStyleAction}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="24" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <!--  Button Style: Mini Icon  -->
    <Style
        x:Key="buttonStyleMiniIcon"
        BasedOn="{StaticResource buttonStyleMini}"
        TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="./resources/#FontAwesome" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="36" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <!--  Button Style: Mini Icon Danger  -->
    <Style
        x:Key="buttonStyleMiniIconDanger"
        BasedOn="{StaticResource buttonStyleMiniIcon}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Background" Value="#e03737" />
        <Setter Property="BorderBrush" Value="#982b2b" />
    </Style>

    <!--  Button Style: Primary Mini  -->
    <Style
        x:Key="buttonStylePrimaryMini"
        BasedOn="{StaticResource buttonStylePrimary}"
        TargetType="{x:Type Button}">
        <Setter Property="Height" Value="24" />
        <Setter Property="FontSize" Value="12" />
    </Style>

    <!--
        Border Styles
    -->

    <Style x:Key="borderStylePanelTitle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="BorderBrush" Value="#e2e2e2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="borderStyleWell" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#ffffff" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,10" />
        <Setter Property="BorderBrush" Value="#e2e2e2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="borderStyleMain" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="20,20,20,20" />
    </Style>

    <Style
        x:Key="borderStyleMainWithToolMenu"
        BasedOn="{StaticResource borderStyleMain}"
        TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="20,36,20,20" />
    </Style>

    <!--
        Input Styles
    -->
    <Style x:Key="inputStyleBase" TargetType="{x:Type Control}">
        <Setter Property="Margin" Value="4,4,0,0" />
        <Setter Property="Width" Value="210" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />

    </Style>

    <!--  Checkbox Style  -->
    <Style x:Key="checkboxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="4,0,0,0" />
    </Style>

    <!--  Radiobutton Style  -->
    <Style x:Key="radioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="FontFamily" Value="Roboto-Regular" />
    </Style>

    <Style x:Key="indentStyle" TargetType="FrameworkElement">
        <Setter Property="Margin" Value="16,0,0,0" />
    </Style>

    <!--  Textbox Style  -->
    <Style
        x:Key="textboxStyle"
        BasedOn="{StaticResource ResourceKey=inputStyleBase}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource WindowBackColor}" />
                            <Setter Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource WindowBackColor}" />
                            <Setter Property="BorderThickness" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="textboxStyleNumber"
        BasedOn="{StaticResource ResourceKey=textboxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style
        x:Key="textboxStyleNumberError"
        BasedOn="{StaticResource ResourceKey=textboxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="{StaticResource BootstrapDanger}" />
    </Style>

    <Style
        x:Key="textboxStyleCurrency"
        BasedOn="{StaticResource ResourceKey=textboxStyleNumber}"
        TargetType="{x:Type TextBox}" />

    <Style
        x:Key="textboxStyleCurrencyError"
        BasedOn="{StaticResource ResourceKey=textboxStyleNumberError}"
        TargetType="{x:Type TextBox}" />

    <Style
        x:Key="textboxStyleMultiline"
        BasedOn="{StaticResource ResourceKey=textboxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="48" />
        <Setter Property="AcceptsReturn" Value="True" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style
        x:Key="textboxStyleError"
        BasedOn="{StaticResource ResourceKey=textboxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush" Value="{StaticResource BootstrapDanger}" />
    </Style>

    <!--  Textbox Style: url  -->
    <Style
        x:Key="textboxStyleUrl"
        BasedOn="{StaticResource ResourceKey=textboxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="420" />
    </Style>

    <!--  Date Picker Style  -->
    <Style
        x:Key="datePickerStyle"
        BasedOn="{StaticResource ResourceKey=inputStyleBase}"
        TargetType="{x:Type DatePicker}" />
    <Style
        x:Key="datePickerErrorStyle"
        BasedOn="{StaticResource ResourceKey=inputStyleBase}"
        TargetType="{x:Type DatePicker}">
        <Setter Property="BorderBrush" Value="{StaticResource BootstrapDanger}" />
    </Style>

    <!--  ComboBox Style  -->
    <Style
        x:Key="comboBoxStyle"
        BasedOn="{StaticResource ResourceKey=inputStyleBase}"
        TargetType="ComboBox" />

    <!--  ComboBox Style XL  -->
    <Style
        x:Key="comboBoxStyleXL"
        BasedOn="{StaticResource ResourceKey=comboBoxStyle}"
        TargetType="ComboBox">
        <Setter Property="Width" Value="320" />
    </Style>

    <!--  Page Styles  -->
    <Style x:Key="pageBackground" TargetType="{x:Type Page}">
        <Setter Property="Background" Value="#efefef" />
    </Style>
    <Style x:Key="pageBackgroundGrey" TargetType="{x:Type Page}">
        <Setter Property="Background" Value="#f3f3f4" />
    </Style>
    <Style x:Key="pageBackgroundLogin" TargetType="{x:Type Page}">
        <Setter Property="Background" Value="#dbd5cb" />
    </Style>

    <!--  Menu Style  -->
    <Style x:Key="menuStyle" TargetType="Menu">
        <Setter Property="Background" Value="#dbd5cb" />
    </Style>

    <Style x:Key="rowDefinitionActions" TargetType="RowDefinition">
        <Setter Property="Height" Value="55" />
    </Style>

    <Style x:Key="rowDefinitionPanelTitle" TargetType="RowDefinition">
        <Setter Property="Height" Value="70" />
    </Style>

    <Style x:Key="WindowButton" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="25" />
        <Setter Property="Width" Value="25" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        Name="buttonBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0">
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".35" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" Value="#ee7624" />
                            <Setter Property="Foreground" Value="#fefefe" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImageButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        Name="buttonBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0">
                        <ContentPresenter
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="buttonBorder" Property="Opacity" Value=".35" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" Value="#ee7624" />
                            <Setter Property="Foreground" Value="#fefefe" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#00000000" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#00000000" />
        </Style.Resources>
    </Style>



    <!--  Font Awesome Icons  -->
    <!--  String values needed for Font Awesome Icons  -->
    <!--  https://fontawesome.com/cheatsheet?from=io  -->
    <FontFamily x:Key="FontAwesome">./resources/#FontAwesome</FontFamily>

    <!--  Label style: Icon (FontAwesome Icon)  -->
    <Style x:Key="windowCommandIcon" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="./resources/#FontAwesome" />
        <Setter Property="Label.FontSize" Value="12" />
        <Setter Property="Opacity" Value=".8" />
        <Setter Property="Label.Foreground" Value="#FFF" />
    </Style>


    <!--  Custom Window Style and Control Template Targets Window Title Bar  -->
    <local:WindowMinimizeCommand x:Key="MinimizeCommand" />
    <local:WindowMaximizeCommand x:Key="MaximizeCommand" />
    <local:WindowRestoreCommand x:Key="RestoreCommand" />
    <local:WindowCloseCommand x:Key="CloseCommand" />
    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
        <Grid Background="{StaticResource WindowBackColor}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="5,0,5,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="75" />
                    </Grid.ColumnDefinitions>
                    <Label
                        Grid.Column="0"
                        Padding="0"
                        local:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"
                        local:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                        <Image
                            Width="16"
                            local:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"
                            local:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                            DockPanel.Dock="Left"
                            Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=Icon}" />
                    </Label>
                    <Label
                        Grid.Column="1"
                        Padding="3,0,0,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        HorizontalContentAlignment="Left"
                        VerticalContentAlignment="Center"
                        local:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                        local:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                        local:ShowSystemMenuBehavior.RightButtonShow="true"
                        local:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                        local:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                        Content="{TemplateBinding Property=Title}"
                        DockPanel.Dock="Left"
                        FontSize="16"
                        Foreground="{StaticResource WindowForeColor}" />
                    <StackPanel Grid.Column="2" Orientation="Horizontal">
                        <Button
                            x:Name="btnMinimize"
                            Command="{StaticResource MinimizeCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                            DockPanel.Dock="Right"
                            Style="{StaticResource WindowButton}">
                            <Label
                                Height="20"
                                Margin="0,0,0,10"
                                Content="&#xf2d1;"
                                Style="{StaticResource windowCommandIcon}" />
                        </Button>
                        <Button
                            x:Name="btnMaximze"
                            Command="{StaticResource MaximizeCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                            DockPanel.Dock="Right"
                            Style="{StaticResource WindowButton}"
                            Visibility="Visible">
                            <Label Content="&#xf2d0;" Style="{StaticResource windowCommandIcon}" />
                        </Button>
                        <Button
                            x:Name="btnRestore"
                            Command="{StaticResource RestoreCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                            DockPanel.Dock="Right"
                            Style="{StaticResource WindowButton}"
                            Visibility="Collapsed">
                            <Label Content="&#xf2d2;" Style="{StaticResource windowCommandIcon}" />
                        </Button>
                        <Button
                            Command="{StaticResource CloseCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                            DockPanel.Dock="Right"
                            Style="{StaticResource WindowButton}">
                            <Label
                                Content="&#xf00d;"
                                FontSize="14"
                                Style="{StaticResource windowCommandIcon}" />
                        </Button>
                    </StackPanel>
                </Grid>
                <Border
                    Grid.Row="1"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter x:Name="WindowContent" />
                        </AdornerDecorator>
                        <ResizeGrip
                            x:Name="WindowResizeGrip"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            IsTabStop="false"
                            Visibility="Collapsed" />
                    </Grid>
                </Border>
            </Grid>
            <Thumb
                x:Name="ThumbTop"
                Height="6"
                Margin="14,0"
                VerticalAlignment="Top"
                local:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNS"
                Opacity="0" />
            <Thumb
                x:Name="ThumbTopLeft"
                Width="6"
                Height="6"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                local:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNWSE"
                Opacity="0" />
            <Thumb
                x:Name="ThumbBottom"
                Height="6"
                Margin="14,0"
                VerticalAlignment="Bottom"
                local:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNS"
                Opacity="0" />
            <Thumb
                x:Name="ThumbTopRight"
                Width="6"
                Height="6"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                local:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNESW"
                Opacity="0" />
            <Thumb
                x:Name="ThumbRight"
                Width="6"
                Margin="0,14"
                HorizontalAlignment="Right"
                local:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeWE"
                Opacity="0" />
            <Thumb
                x:Name="ThumbBottomRight"
                Width="6"
                Height="6"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                local:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNWSE"
                Opacity="0" />
            <Thumb
                x:Name="ThumbLeft"
                Width="6"
                Margin="0,14"
                HorizontalAlignment="Left"
                local:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeWE"
                Opacity="0" />
            <Thumb
                x:Name="ThumbBottomLeft"
                Width="6"
                Height="6"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                local:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                Cursor="SizeNESW"
                Opacity="0" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="btnMaximze" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="btnRestore" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
                <Setter TargetName="btnMaximze" Property="Visibility" Value="Visible" />
                <Setter TargetName="btnRestore" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="CustomWindowStyle" TargetType="{x:Type NavigationWindow}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Template" Value="{StaticResource WindowTemplate}" />
    </Style>
    <!--  ComboBox Template  -->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ComboBox.Static.Background" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF0F0F0" />
        <GradientStop Offset="1.0" Color="#FFE5E5E5" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000" />
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFECF4FC" />
        <GradientStop Offset="1.0" Color="#FFDCECFC" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA" />
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFEBF4FC" />
        <GradientStop Offset="1.0" Color="#FFDCECFC" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000" />
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFDAECFC" />
        <GradientStop Offset="1.0" Color="#FFC4E0FC" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5" />
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFDAEBFC" />
        <GradientStop Offset="1.0" Color="#FFC4E0FC" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent" />
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060" />
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="templateRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{StaticResource ComboBox.Static.Border}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <Border
                            x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="true">
                            <Path
                                x:Name="arrow"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                Fill="{StaticResource ComboBox.Static.Glyph}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Static.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Static.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ComboBox.MouseOver.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.MouseOver.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.MouseOver.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.MouseOver.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ComboBox.Pressed.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Pressed.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Pressed.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Pressed.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ComboBox.Disabled.Glyph}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Disabled.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Disabled.Border}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource ComboBox.Disabled.Editable.Border}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border
                        x:Name="dropDownBorder"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter
                x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF" />
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer
                        x:Name="PART_ContentHost"
                        Background="Transparent"
                        Focusable="false"
                        HorizontalScrollBarVisibility="Hidden"
                        VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup
                x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Themes:SystemDropShadowChrome
                    x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border
                        x:Name="dropDownBorder"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas
                                    x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle
                                        x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter
                                    x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton
                x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />
            <Border
                x:Name="border"
                Margin="{TemplateBinding BorderThickness}"
                Background="{StaticResource TextBox.Static.Background}">
                <TextBox
                    x:Name="PART_EditableTextBox"
                    Margin="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Style="{StaticResource ComboBoxEditableTextBox}" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="Opacity" Value="0.56" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="ComboBoxCustomStyle"
        BasedOn="{StaticResource comboBoxStyle}"
        TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="6,3,5,3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>