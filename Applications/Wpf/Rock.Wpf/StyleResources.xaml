<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"      
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 
          Label Styles
        -->

    <!-- Label style -->
    
    <Style x:Key="lblWarningCaptionStyle" TargetType="Label">
        <Setter Property="Foreground" Value="#8a6d3b" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="lblAlertCaptionStyle" TargetType="Label">
        <Setter Property="Foreground" Value="#e55235" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="labelStyle"
           TargetType="{x:Type Label}">
        <Setter Property="Padding"
                Value="4,4,0,0" />
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.FontSize"
                Value="14"></Setter>
        <Setter Property="Label.Foreground"
                Value="#2b2b2b"></Setter>
    </Style>

    <Style x:Key="labelStyleSmall"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Roboto" />
        <Setter Property="Padding"
                Value="4,4,0,0" />
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.FontSize"
                Value="12"></Setter>
        <Setter Property="Label.Foreground"
                Value="#797979"></Setter>
    </Style>


    <!-- Label style: Bold -->
    <Style x:Key="labelStyleError"
           BasedOn="{StaticResource labelStyle}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="Red"></Setter>
    </Style>

    <!-- Label style: Bold -->
    <Style x:Key="labelStyleBold"
           BasedOn="{StaticResource labelStyle}"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Medium"></Setter>
        <Setter Property="FontWeight"
                Value="SemiBold"></Setter>
    </Style>

    <!-- Label style: Caption -->
    <Style x:Key="labelStyleCaption"
           BasedOn="{StaticResource labelStyle}"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Bold"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Bold"></Setter>
        <Setter Property="Label.FontSize"
                Value="16"></Setter>
    </Style>


    <!-- Label style: Title -->
    <Style x:Key="labelStylePanelTitle"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Bold"></Setter>
        <Setter Property="Label.Margin"
                Value="0,2,0,0"></Setter>
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.FontSize"
                Value="16"></Setter>
        <Setter Property="Label.Foreground"
                Value="#6A6A6A"></Setter>
    </Style>

    <!-- Label style: Title -->
    <Style x:Key="labelStyleTitle"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/##Roboto-Bold"></Setter>
        <Setter Property="Label.Margin"
                Value="20,0,0,10"></Setter>
        <Setter Property="Label.VerticalAlignment"
                Value="Center"></Setter>
        <Setter Property="Label.HorizontalAlignment"
                Value="Right"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Bold"></Setter>
        <Setter Property="Label.FontSize"
                Value="30"></Setter>
        <Setter Property="Label.Foreground"
                Value="#d6d6d6"></Setter>
    </Style>

    <!-- Label style: Legend -->
    <Style x:Key="labelStyleLegend"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Medium"></Setter>
        <Setter Property="Label.Margin"
                Value="0,0,0,0"></Setter>
        <Setter Property="Label.VerticalAlignment"
                Value="Center"></Setter>
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="Label.FontWeight"
                Value="SemiBold"></Setter>
        <Setter Property="Label.FontSize"
                Value="21"></Setter>
        <Setter Property="Label.Foreground"
                Value="#6a6a6a"></Setter>
    </Style>

    <!-- *** Banner ***  -->

    <!-- Panel Default -->
    <Style x:Key="stackPanelDefault" TargetType="{x:Type StackPanel}">
        <Setter Property="Background" Value="#ffffff" />
    </Style>
    <!-- Panel Style: panelBanner -->
    <Style x:Key="panelBanner"
           TargetType="{x:Type StackPanel}">
        <Setter Property="Background"
                Value="#dbd5cb" />
        <Setter Property="Margin"
                Value="10" />
        <Setter Property="Orientation"
                Value="Horizontal" />
    </Style>

    <!-- Label style: Banner Title -->
    <Style x:Key="labelStyleBannerTitle"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Bold"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Bold"></Setter>
        <Setter Property="Label.FontSize"
                Value="28"></Setter>
        <Setter Property="Label.Foreground"
                Value="#6a6a6a"></Setter>
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="Margin"
                Value="4,0,0,0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!-- Label style: Banner Text -->
    <Style x:Key="labelStyleBannerText"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Light"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.FontSize"
                Value="28"></Setter>
        <Setter Property="Label.Foreground"
                Value="#6a6a6a"></Setter>
        <Setter Property="HorizontalAlignment"
                Value="Left" />
    </Style>

    <!-- Grid style: PanelGrid -->
    <Style x:Key="gridPanel"
           TargetType="{x:Type Grid}">
        <Setter Property="Background"
                Value="#ffffff" />
    </Style>

    <Style x:Key="gridPanelBorderColumn"
           TargetType="{x:Type ColumnDefinition}">
        <Setter Property="Width"
                Value="44" />
    </Style>

    <Style x:Key="gridPanelBorderRow"
           TargetType="{x:Type RowDefinition}">
        <Setter Property="Height"
                Value="44" />
    </Style>

    <!--  Logo style: bottom right -->
    <Style x:Key="logoStyleBottomRight"
           TargetType="{x:Type Frame}">
        <Setter Property="Opacity"
                Value="0.2" />
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="Padding"
                Value="16" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="0.15"
                                ScaleY="0.15" />
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label style: Alert-->
    <Style x:Key="stackPanelWarningtStyle" TargetType="StackPanel">
        <Setter Property="Background" Value="#fffae5" />
    </Style>

    <Style x:Key="stackPanelAlertStyle" TargetType="StackPanel">
        <Setter Property="Background" Value="#fcf2f1" />
    </Style>
    <Style x:Key="stackPanelInfotStyle" TargetType="StackPanel">
        <Setter Property="Background" Value="#ecf9fd" />
    </Style>

    <Style x:Key="borderWarningStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="#ffc870" />
        <Setter Property="BorderThickness" Value="0,2,0,0" />
    </Style>

    <Style x:Key="borderAlertgStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="Red" />
        <Setter Property="BorderThickness" Value="0,2,0,0" />
    </Style>
    <Style x:Key="borderInfoStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="#009ce3" />
        <Setter Property="BorderThickness" Value="0,2,0,0" />
    </Style>
    
    <Style x:Key="alertCaptionSytle" TargetType="Label">
        <Setter Property="Foreground" Value="#e55235" />
    </Style>
    <Style x:Key="InfoCaptionSytle" TargetType="Label">
        <Setter Property="Foreground" Value=" #31708f" />
        <Setter Property="FontFamily" Value="Roboto-Medium"/>
        <Setter Property="FontWeight" Value="Medium" />
    </Style>
    <Style x:Key="WarningCaptionSytle" TargetType="Label">
        <Setter Property="Foreground" Value="#e55235" />
        <Setter Property="FontFamily" Value="Roboto-Medium"/>
        <Setter Property="FontWeight" Value="Medium" />
    </Style>

    <Style x:Key="WarningTextStyle" TargetType="Label">
        <Setter Property="Foreground" Value="#484848" />
        <Setter Property="FontFamily" Value="Roboto-Medium"/>
        <Setter Property="FontWeight" Value="Medium" />
    </Style>
    <Style x:Key="AlertTextStyle" TargetType="Label">
        <Setter Property="Foreground" Value="#484848" />
    </Style>

    <Style x:Key="labelStyleAlert"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="#c09853"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">

                    <TextBlock Margin="10,0,0,0" Text="{TemplateBinding Content}"
                                   TextWrapping="Wrap" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label style: Success-->
    <Style x:Key="labelStyleAlertSuccess"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="#468847"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="4,4,4,4"
                            BorderThickness="1"
                            BorderBrush="#d6e9c6"
                            Padding="14,8,35,8"
                            Background="#dff0d8"
                            Margin="10">
                        <TextBlock Text="{TemplateBinding Content}"
                                   TextWrapping="Wrap" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label style: Information-->
    <Style x:Key="labelStyleAlertInfo"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="#31708f"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <TextBlock Text="{TemplateBinding Content}"  Margin="10,0,0,0" TextWrapping="Wrap" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label style: Error-->
    <Style x:Key="labelStyleAlertError"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="#b94a48"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border CornerRadius="4,4,4,4"
                            BorderThickness="1"
                            BorderBrush="#eed3d7"
                            Padding="14,8,35,8"
                            Background="#F2DEDE"
                            Margin="5">
                        <TextBlock Text="{TemplateBinding Content}"
                                   TextWrapping="Wrap"
                                   TextTrimming="CharacterEllipsis" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label style: Grid Title-->
    <Style x:Key="labelStyleGridTitle"
           TargetType="{x:Type Label}"
           BasedOn="{StaticResource labelStyleLegend}">
        <Setter Property="Label.FontSize"
                Value="14"></Setter>
    </Style>

    <!-- Label style: dt (Bootstrap Definition Title)-->
    <Style x:Key="labelStyleDt"
           BasedOn="{StaticResource labelStyle}"
           TargetType="{x:Type Label}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Medium"></Setter>
        <Setter Property="Label.FontWeight"
                Value="SemiBold" />
    </Style>

    <!-- Label style: dd (Bootstrap Definition definition)-->
    <Style x:Key="labelStyleDd"
           BasedOn="{StaticResource labelStyle}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Margin"
                Value="0,0,0,8" />
    </Style>

    <!-- Label style: Icon (FontAwesome Icon)-->
    <Style x:Key="labelStyleIcon"
           TargetType="{x:Type Label}">
        <Setter Property="Padding"
                Value="0,0,4,0" />
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="FontFamily"
                Value="./resources/#FontAwesome" />
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.Foreground"
                Value="#000"></Setter>
    </Style>

    <Style x:Key="labelStyleIconPrimary"
           BasedOn="{StaticResource labelStyleIcon}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="#fff"></Setter>
    </Style>

    <Style x:Key="labelStyleIconRight"
           BasedOn="{StaticResource labelStyleIcon}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Margin"
                Value="4,6,0,4"></Setter>
    </Style>

    <Style x:Key="labelStyleIconLeft"
           BasedOn="{StaticResource labelStyleIcon}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Margin"
                Value="0,6,0,4"></Setter>
    </Style>

    <Style x:Key="labelStyleIconPrimaryRight"
           BasedOn="{StaticResource labelStyleIconPrimary}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Margin"
                Value="4,6,0,4"></Setter>
    </Style>

    <Style x:Key="labelStyleIconPrimaryLeft"
           BasedOn="{StaticResource labelStyleIconPrimary}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Margin"
                Value="0,6,0,4"></Setter>
    </Style>

    <Style x:Key="labelStyleHighlight"
           BasedOn="{StaticResource labelStyleIcon}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Padding"
                Value="6,3,6,3" />
        <Setter Property="FontWeight"
                Value="SemiBold" />
        <Setter Property="FontSize"
                Value="11" />
    </Style>

    <Style x:Key="labelStyleHighlightDefault"
           BasedOn="{StaticResource labelStyleHighlight}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Background"
                Value="#6a6a6a"></Setter>
        <Setter Property="Label.Foreground"
                Value="#ffffff"></Setter>
    </Style>

    <Style x:Key="labelStyleHighlightInfo"
           BasedOn="{StaticResource labelStyleHighlight}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Background"
                Value="#3bc2df"></Setter>
        <Setter Property="Label.Foreground"
                Value="#ffffff"></Setter>
    </Style>

    <!-- Label style: Button Text-->
    <Style x:Key="labelStyleButtonText"
           TargetType="{x:Type Label}">
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.Foreground"
                Value="#000"></Setter>
    </Style>

    <Style x:Key="labelStyleButtonTextPrimary"
           BasedOn="{StaticResource labelStyleButtonText}"
           TargetType="{x:Type Label}">
        <Setter Property="Label.Foreground"
                Value="White"></Setter>
    </Style>

    <!-- Textblock Style: Title Paragraph  -->
    <Style x:Key="textBlockStyleTitleParagraph"
           TargetType="{x:Type TextBlock}">
        <Setter Property="Label.Margin"
                Value="0,0,0,0">
        </Setter>
        <Setter Property="Label.VerticalAlignment"
                Value="Center"></Setter>
        <Setter Property="Label.HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="Label.FontWeight"
                Value="Normal"></Setter>
        <Setter Property="Label.FontSize"
                Value="14"></Setter>
        <Setter Property="Label.Foreground"
                Value="#6a6a6a"></Setter>
    </Style>

    <!-- Textblock Style: Grid Data  -->
    <Style x:Key="textBlockStyleGridDataTitle"
           TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Medium"></Setter>
        <Setter Property="Padding"
                Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="FontWeight"
                Value="SemiBold"></Setter>
        <Setter Property="FontSize"
                Value="14"></Setter>
    </Style>
    <Style x:Key="textBlockStyleGridData"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding"
                Value="6,0,0,0" />
        <Setter Property="HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="FontWeight"
                Value="Normal"></Setter>
        <Setter Property="FontSize"
                Value="1"></Setter>
    </Style>

    <!--
            Grid related Styles
        -->

    <!-- Grid Style -->
    <Style x:Key="gridStyle"
           TargetType="{x:Type DataGrid}">
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="Background"
                            Value="#efefef" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>


    
    <!-- Grid Column Header style -->
    <Style x:Key="gridHeaderStyle"
           TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontFamily"
                Value="./resources/#Roboto-Bold"></Setter>
        <Setter Property="Padding"
                Value="6" />
        <Setter Property="HorizontalAlignment"
                Value="Left"></Setter>
        <Setter Property="VerticalAlignment"
                Value="Bottom" />
        <Setter Property="FontWeight"
                Value="Bold"></Setter>
        <Setter Property="FontSize"
                Value="14"></Setter>
        <Setter Property="Foreground"
                Value="#2b2b2b"></Setter>
        <Setter Property="Background"
                Value="#efefef"></Setter>
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="#dddddd" />
    </Style>

    
    <Style x:Key="gridHeaderStyleWide"
           TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource gridHeaderStyle}">
        <Setter Property="Width"
                Value="450" />
    </Style>

    <Style x:Key="gridHeaderStyleNumber"
           TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource gridHeaderStyle}">
        <Setter Property="HorizontalContentAlignment"
                Value="Right" />
    </Style>

    <Style x:Key="gridHeaderStyleDateTime"
           TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource gridHeaderStyleNumber}">
        <Setter Property="Width"
                Value="180" />
        <Setter Property="HorizontalContentAlignment"
                Value="Left" />
    </Style>

    <Style x:Key="gridHeaderStyleCurrency"
           TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource gridHeaderStyleNumber}">
        <Setter Property="Width"
                Value="120" />
        <Setter Property="HorizontalContentAlignment"
                Value="Right" />
    </Style>

    <Style x:Key="gridHeaderStyleActions"
           TargetType="{x:Type DataGridColumnHeader}"
           BasedOn="{StaticResource gridHeaderStyle}">
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
    </Style>

    <!-- Grid Cell Style -->
    <Style x:Key="gridCellStyle"
           TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected"
                     Value="True">
                <Setter Property="Background"
                        Value="#d4d4d4" />
                <Setter Property="Foreground"
                        Value="#2b2b2b" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="MinHeight"
                Value="38" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Cursor"
                Value="Hand" />

        <!-- from http://stackoverflow.com/a/3995839/1755417 -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="gridCellStyleNumberAlignRight"
           TargetType="{x:Type DataGridCell}"
           BasedOn="{StaticResource gridCellStyle}">
    </Style>
    <Style x:Key="gridCellStyleNumber"
           TargetType="{x:Type DataGridCell}"
           BasedOn="{StaticResource gridCellStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Center" />
    </Style>
    <Style x:Key="gridCellStyleDateTime"
           TargetType="{x:Type DataGridCell}"
           BasedOn="{StaticResource gridCellStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="ContentStringFormat"
                Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>

    <Style x:Key="gridCellStyleAmount"
           TargetType="{x:Type DataGridCell}"
           BasedOn="{StaticResource gridCellStyle}">
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="ContentStringFormat"
                Value="g" />
        <Setter Property="Width" Value="180" />
    </Style>

    <!-- 
        Button styles 
        -->

    <!-- Button Style -->
    <Style x:Key="buttonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="Height"
                Value="36" />
        <Setter Property="Foreground"
                Value="#000" />
        <Setter Property="Background"
                Value="#efefef" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Name="buttonBorder"
                            BorderThickness="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="12,0,12,0"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".7">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".35">
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="#ee7624">
                            </Setter>
                            <Setter Property="Foreground"
                                    Value="#fefefe">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button Style: Action -->
    <Style x:Key="buttonStyleAction"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#fff" />
        <Setter Property="Background"
                Value="#466673" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />
    </Style>

    <!-- Font Awesome Button Primary-->
    <!-- Button Style: Primary -->
    <Style x:Key="buttonFontAwesomStylePrimary"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#797979" />
        <Setter Property="Background"
                Value="#efefef" />
        <Setter Property="BorderBrush"
                Value="#b7b7b7" />

    </Style>
    <Style x:Key="buttonStylePrimary"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#fefefe" />
        <Setter Property="Background"
                Value="#ee7624" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />

    </Style>
    <Style x:Key="buttonStyleAlternate"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#2b2b2b" />
        <Setter Property="Background"
                Value="#fefefe" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Robot-bold" />

    </Style>

    <!-- Button Style: Secondary -->
    <Style x:Key="buttonStyleSecondary"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#007acc" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Robot-bold" />
    </Style>
    <!-- ToggleButton Style -->
    <Style x:Key="toggleButtonStyle"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="#2b2b2b" />
        <Setter Property="Background"
                Value="#fefefe" />
        <Setter Property="BorderBrush"
                Value="#c4c4c4" />
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="Height"
                Value="50" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontFamily" Value="Roboto-Regular" />
    </Style>

    <!-- Button Style: Mini -->
    <Style x:Key="buttonStyleMini"
           BasedOn="{StaticResource buttonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Height"
                Value="24" />
        <Setter Property="FontSize"
                Value="12" />
    </Style>

    <!-- Button Style: Mini Action -->
    <Style x:Key="buttonStyleMiniAction"
           BasedOn="{StaticResource buttonStyleAction}"
           TargetType="{x:Type Button}">
        <Setter Property="Height"
                Value="24" />
        <Setter Property="FontSize"
                Value="12" />
    </Style>

    <!-- Button Style: Mini Icon-->
    <Style x:Key="buttonStyleMiniIcon"
           BasedOn="{StaticResource buttonStyleMini}"
           TargetType="{x:Type Button}">
        <Setter Property="FontFamily"
                Value="./resources/#FontAwesome" />
        <Setter Property="Height"
                Value="24" />
        <Setter Property="Width"
                Value="36" />
        <Setter Property="FontSize"
                Value="12" />
    </Style>

    <!-- Button Style: Mini Icon Danger -->
    <Style x:Key="buttonStyleMiniIconDanger"
           BasedOn="{StaticResource buttonStyleMiniIcon}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="#fff" />
        <Setter Property="Background"
                Value="#e03737" />
        <Setter Property="BorderBrush"
                Value="#982b2b" />
    </Style>

    <!-- Button Style: Primary Mini -->
    <Style x:Key="buttonStylePrimaryMini"
           BasedOn="{StaticResource buttonStylePrimary}"
           TargetType="{x:Type Button}">
        <Setter Property="Height"
                Value="24" />
        <Setter Property="FontSize"
                Value="12" />
    </Style>

    <!-- 
        Border Styles 
        -->

    <Style x:Key='borderStylePanelTitle'
           TargetType="{x:Type Border}">
        <Setter Property="Background"
                Value="#efefef" />
        <Setter Property="MinHeight"
                Value="20" />
        <Setter Property="BorderBrush"
                Value="#e2e2e2" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Margin"
                Value="0,0,0,0" />
    </Style>

    <Style x:Key='borderStyleWell'
           TargetType="{x:Type Border}">
        <Setter Property="Background"
                Value="#ffffff" />
        <Setter Property="MinHeight"
                Value="20" />
        <Setter Property="Padding"
                Value="6,10" />
        <Setter Property="BorderBrush"
                Value="#e2e2e2" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Margin"
                Value="0,0,0,0" />
    </Style>

    <!-- 
           Input Styles
        -->
    <Style x:Key="inputStyleBase"
           TargetType="{x:Type Control}">
        <Setter Property="Margin"
                Value="4,4,0,0" />
        <Setter Property="Width"
                Value="210" />
        <Setter Property="Height"
                Value="30" />
        <Setter Property="Padding" Value="4"></Setter>
        <Setter Property="HorizontalAlignment"
                Value="Left"></Setter>
    </Style>

    <!-- Checkbox Style -->
    <Style x:Key="checkboxStyle"
           TargetType="{x:Type CheckBox}">
        <Setter Property="Height" Value="22" />
    </Style>

    <!-- Radiobutton Style -->
    <Style x:Key="radioButtonStyle"
           TargetType="{x:Type RadioButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="FontFamily" Value="Roboto-Regular" />

    </Style>

    <Style x:Key="indentStyle"
           TargetType="FrameworkElement">
        <Setter Property="Margin" Value="16,0,0,0" />
    </Style>

    <!-- Textbox Style -->
    <Style x:Key="textboxStyle"
           TargetType="{x:Type Control}"
           BasedOn="{StaticResource ResourceKey=inputStyleBase}">
    </Style>

    <Style x:Key="textboxStyleMultiline"
           TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource ResourceKey=textboxStyle}">
        <Setter Property="Height"
                Value="48" />
        <Setter Property="AcceptsReturn"
                Value="True" />
        <Setter Property="TextWrapping"
                Value="Wrap" />
    </Style>

    <Style x:Key="textboxStyleError"
           BasedOn="{StaticResource ResourceKey=textboxStyle}"
           TargetType="{x:Type Control}">
        <Setter Property="BorderBrush"
                Value="Red" />
    </Style>

    <!-- Textbox Style: url -->
    <Style x:Key="textboxStyleUrl"
           BasedOn="{StaticResource ResourceKey=textboxStyle}"
           TargetType="{x:Type Control}">
        <Setter Property="Width"
                Value="420" />
    </Style>

    <!-- Date Picker Style -->
    <Style x:Key="datePickerStyle"
           TargetType="{x:Type DatePicker}"
           BasedOn="{StaticResource ResourceKey=inputStyleBase}">
    </Style>
    <Style x:Key="datePickerErrorStyle"
           TargetType="{x:Type DatePicker}"
           BasedOn="{StaticResource ResourceKey=inputStyleBase}">
        <Setter Property="BorderBrush" Value="Red"/>
    </Style>

    <!-- ComboBox Style -->
    <Style x:Key="comboBoxStyle"
           TargetType="ComboBox"
           BasedOn="{StaticResource ResourceKey=inputStyleBase}">
    </Style>

    <!-- ComboBox Style XL -->
    <Style x:Key="comboBoxStyleXL"
           TargetType="ComboBox"
           BasedOn="{StaticResource ResourceKey=comboBoxStyle}">
        <Setter Property="Width"
                Value="320" />
    </Style>

    <!-- Page Styles -->
    <Style x:Key="pageBackground"
           TargetType="{x:Type Page}">
        <Setter Property="Background"
                Value="#efefef" />
    </Style>
    <Style x:Key="pageBackgroundGrey"
           TargetType="{x:Type Page}">
        <Setter Property="Background"
                Value="#f3f3f4" />
    </Style>
    <Style x:Key="pageBackgroundLogin"
           TargetType="{x:Type Page}">
        <Setter Property="Background"
                Value="#dbd5cb" />
    </Style>

    <!-- Menu Style -->
    <Style x:Key="menuStyle"
           TargetType="Menu">
        <Setter Property="Background"
                Value="#dbd5cb" />
    </Style>

    <Style x:Key="rowDefinitionActions"
           TargetType="RowDefinition">
        <Setter Property="Height"
                Value="55" />
    </Style>

    <Style x:Key="rowDefinitionPanelTitle"
           TargetType="RowDefinition">
        <Setter Property="Height"
                Value="70" />
    </Style>

    <Style TargetType="{x:Type Button}"  x:Key="WindowButton">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Name="buttonBorder"
                            BorderThickness="0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".7">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".35">
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="#ee7624">
                            </Setter>
                            <Setter Property="Foreground"
                                    Value="#fefefe">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}"  x:Key="ImageButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Name="buttonBorder"
                            BorderThickness="0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="Cursor"
                                    Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".7">
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="buttonBorder"
                                    Property="Opacity"
                                    Value=".35">
                            </Setter>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="#ee7624">
                            </Setter>
                            <Setter Property="Foreground"
                                    Value="#fefefe">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#00000000"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#00000000"/>
        </Style.Resources>
    </Style>

    <!-- Brushes -->
    <SolidColorBrush x:Key="WindowBackColor" Color="#ee7725"/>
    <SolidColorBrush x:Key="WindowForeColor" Color="White"/>
    <SolidColorBrush x:Key="GridHighlightColor" Color="Gray" />
    <SolidColorBrush x:Key="GridAlternateColor" Color="#efefef" />
    <SolidColorBrush x:Key="HorizontalGridLinesBrush" Color="#d4d4d4"/>
    <SolidColorBrush x:Key="BorderBrush" Color="#d4d4d4" />
    <SolidColorBrush x:Key="PageBackgroundBrush" Color="#efefef" />
    <SolidColorBrush x:Key="PanelHeaderBrush" Color="#f3f3f3" />
    <SolidColorBrush x:Key="FontAwesomIconColor" Color="#797979" />
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="#ffff" />

    <!-- Font Awesome Icons-->
    <!-- String values needed for Font Awesome Icons -->
    <!--https://fontawesome.com/cheatsheet?from=io -->
    <FontFamily x:Key="FontAwesome">./resources/#FontAwesome</FontFamily>
 

</ResourceDictionary>