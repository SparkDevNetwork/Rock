<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonMark</name>
    </assembly>
    <members>
        <member name="T:CommonMark.CommonMarkAdditionalFeatures">
            <summary>
            Lists additional features that can be enabled in <see cref="T:CommonMark.CommonMarkSettings"/>.
            These features are not part of the standard and should not be used if interoperability with other
            CommonMark implementations is required.
            </summary>
        </member>
        <member name="F:CommonMark.CommonMarkAdditionalFeatures.None">
            <summary>
            No additional features are enabled. This is the default.
            </summary>
        </member>
        <member name="F:CommonMark.CommonMarkAdditionalFeatures.StrikethroughTilde">
            <summary>
            The parser will recognize syntax <c>~~foo~~</c> that will be rendered as <c>&lt;del&gt;foo&lt;/del&gt;</c>.
            </summary>
        </member>
        <member name="F:CommonMark.CommonMarkAdditionalFeatures.All">
            <summary>
            All additional features are enabled.
            </summary>
        </member>
        <member name="T:CommonMark.CommonMarkConverter">
            <summary>
            Contains methods for parsing and formatting CommonMark data.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkConverter.Version">
            <summary>
            Gets the CommonMark package version number.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkConverter.AssemblyVersion">
            <summary>
            Gets the CommonMark assembly version number. Note that might differ from the actual release version
            since the assembly version is not always incremented to reduce possible reference errors when updating.
            </summary>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage1(System.IO.TextReader,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the first stage of the conversion - parses block elements from the source and created the syntax tree.
            </summary>
            <param name="source">The reader that contains the source data.</param>
            <param name="settings">The object containing settings for the parsing process.</param>
            <returns>The block element that represents the document.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during block parsing.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage2(CommonMark.Syntax.Block,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the second stage of the conversion - parses block element contents into inline elements.
            </summary>
            <param name="document">The top level document element.</param>
            <param name="settings">The object containing settings for the parsing process.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="document"/> does not represent a top level document.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="document"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during inline parsing.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.ProcessStage3(CommonMark.Syntax.Block,System.IO.TextWriter,CommonMark.CommonMarkSettings)">
            <summary>
            Performs the last stage of the conversion - converts the syntax tree to HTML representation.
            </summary>
            <param name="document">The top level document element.</param>
            <param name="target">The target text writer where the result will be written to.</param>
            <param name="settings">The object containing settings for the formatting process.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="document"/> does not represent a top level document.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="document"/> or <paramref name="target"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during formatting.</exception>
            <exception cref="T:System.IO.IOException">when error occur while writing the data to the target.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Parse(System.IO.TextReader,CommonMark.CommonMarkSettings)">
            <summary>
            Parses the given source data and returns the document syntax tree. Use <see cref="M:CommonMark.CommonMarkConverter.ProcessStage3(CommonMark.Syntax.Block,System.IO.TextWriter,CommonMark.CommonMarkSettings)"/> to
            convert the document to HTML using the built-in converter.
            </summary>
            <param name="source">The reader that contains the source data.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading or writing the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Parse(System.String,CommonMark.CommonMarkSettings)">
            <summary>
            Parses the given source data and returns the document syntax tree. Use <see cref="M:CommonMark.CommonMarkConverter.ProcessStage3(CommonMark.Syntax.Block,System.IO.TextWriter,CommonMark.CommonMarkSettings)"/> to
            convert the document to HTML using the built-in converter.
            </summary>
            <param name="source">The source data.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading or writing the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Convert(System.IO.TextReader,System.IO.TextWriter,CommonMark.CommonMarkSettings)">
            <summary>
            Converts the given source data and writes the result directly to the target.
            </summary>
            <param name="source">The reader that contains the source data.</param>
            <param name="target">The target text writer where the result will be written to.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> or <paramref name="target"/> is <c>null</c></exception>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing or formatting.</exception>
            <exception cref="T:System.IO.IOException">when error occur while reading or writing the data.</exception>
        </member>
        <member name="M:CommonMark.CommonMarkConverter.Convert(System.String,CommonMark.CommonMarkSettings)">
            <summary>
            Converts the given source data and returns the result as a string.
            </summary>
            <param name="source">The source data.</param>
            <param name="settings">The object containing settings for the parsing and formatting process.</param>
            <exception cref="T:CommonMark.CommonMarkException">when errors occur during parsing or formatting.</exception>
            <returns>The converted data.</returns>
        </member>
        <member name="T:CommonMark.CommonMarkException">
            <summary>
            An exception that is caught during CommonMark parsing or formatting.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkException.BlockElement">
            <summary>
            Gets the block that caused the exception. Can be <c>null</c>.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkException.InlineElement">
            <summary>
            Gets the inline element that caused the exception. Can be <c>null</c>.
            </summary>
        </member>
        <member name="M:CommonMark.CommonMarkException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkException" /> class.</summary>
        </member>
        <member name="M:CommonMark.CommonMarkException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CommonMark.CommonMarkException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CommonMark.CommonMarkException.#ctor(System.String,CommonMark.Syntax.Inline,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkException" /> class with a specified error message, a reference to the element that caused it and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inline">The inline element that is related to the exception cause.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CommonMark.CommonMarkException.#ctor(System.String,CommonMark.Syntax.Block,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkException" /> class with a specified error message, a reference to the element that caused it and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="block">The block element that is related to the exception cause.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CommonMark.CommonMarkSettings">
            <summary>
            Class used to configure the behavior of <see cref="T:CommonMark.CommonMarkConverter"/>.
            </summary>
            <remarks>This class is not thread-safe so any changes to a instance that is reused (for example, the 
            <see cref="P:CommonMark.CommonMarkSettings.Default"/>) has to be updated while it is not in use otherwise the
            behaviour is undefined.</remarks>
        </member>
        <member name="M:CommonMark.CommonMarkSettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.CommonMarkSettings" /> class.</summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.OutputFormat">
            <summary>
            Gets or sets the output format used by the last stage of conversion.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.OutputDelegate">
            <summary>
            Gets or sets the custom output delegate function used for formatting CommonMark output.
            Setting this to a non-null value will also set <see cref="P:CommonMark.CommonMarkSettings.OutputFormat"/> to <see cref="F:CommonMark.OutputFormat.CustomDelegate"/>.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.RenderSoftLineBreaksAsLineBreaks">
            <summary>
            Gets or sets a value indicating whether soft line breaks should be rendered as hard line breaks.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.TrackSourcePosition">
            <summary>
            Gets or sets a value indicating whether the parser tracks precise positions in the source data for
            block and inline elements. This is disabled by default because it incurs an additional performance cost to
            keep track of the original position.
            Setting this to <c>true</c> will populate <see cref="P:CommonMark.Syntax.Inline.SourcePosition"/>, 
            <see cref="P:CommonMark.Syntax.Inline.SourceLength"/>, <see cref="P:CommonMark.Syntax.Block.SourcePosition"/> and 
            <see cref="P:CommonMark.Syntax.Block.SourceLength"/> properties with correct information, otherwise the values
            of these properties are undefined.
            This also controls if these values will be written to the output.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.AdditionalFeatures">
            <summary>
            Gets or sets any additional features (that are not present in the current CommonMark specification) that
            the parser and/or formatter will recognize.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.UriResolver">
            <summary>
            Gets or sets the delegate that is used to resolve addresses during rendering process. Can be used to process application relative URLs (<c>~/foo/bar</c>).
            </summary>
            <example><code>CommonMarkSettings.Default.UriResolver = VirtualPathUtility.ToAbsolute;</code></example>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.Default">
            <summary>
            The default settings for the converter. If the properties of this instance are modified, the changes will be applied to all
            future conversions that do not specify their own settings.
            </summary>
        </member>
        <member name="M:CommonMark.CommonMarkSettings.Clone">
            <summary>
            Creates a copy of this configuration object.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.InlineParsers">
            <summary>
            Gets the delegates that parse inline elements according to these settings.
            </summary>
        </member>
        <member name="P:CommonMark.CommonMarkSettings.InlineParserSpecialCharacters">
            <summary>
            Gets the characters that have special meaning for inline element parsers according to these settings.
            </summary>
        </member>
        <member name="T:CommonMark.OutputFormat">
            <summary>
            Specifies different formatters supported by the converter.
            </summary>
        </member>
        <member name="F:CommonMark.OutputFormat.Html">
            <summary>
            The output is standard HTML format according to the CommonMark specification.
            </summary>
        </member>
        <member name="F:CommonMark.OutputFormat.SyntaxTree">
            <summary>
            The output is a debug view of the syntax tree. Usable for debugging.
            </summary>
        </member>
        <member name="F:CommonMark.OutputFormat.CustomDelegate">
            <summary>
            The output is written using a delegate function specified in <see cref="P:CommonMark.CommonMarkSettings.OutputDelegate"/>.
            </summary>
        </member>
        <member name="T:CommonMark.Utilities">
            <summary>
            Reusable utility functions, not directly related to parsing or formatting data.
            </summary>
        </member>
        <member name="M:CommonMark.Utilities.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning to the Debug window.
            </summary>
            <param name="message">The message with optional formatting placeholders.</param>
            <param name="args">The arguments for the formatting placeholders.</param>
        </member>
        <member name="M:CommonMark.Utilities.CheckUnicodeCategory(System.Char,System.Boolean@,System.Boolean@)">
            <summary>
            Checks if the given character is an Unicode space or punctuation character.
            </summary>
        </member>
        <member name="M:CommonMark.Utilities.IsFirstLineBlank(System.String,System.Int32)">
            <summary>
            Determines if the first line (ignoring the first <paramref name="startIndex"/>) of a string contains only spaces.
            </summary>
        </member>
        <member name="T:CommonMark.Formatters.HtmlFormatter">
            <summary>
            An extendable implementation for writing CommonMark data as HTML.
            </summary>
        </member>
        <member name="P:CommonMark.Formatters.HtmlFormatter.RenderTightParagraphs">
            <summary>
            Gets a stack of values indicating whether the paragraph tags should be ommitted.
            Every element that impacts this setting has to push a value when opening and pop it when closing.
            The most recent value is used to determine the current state.
            </summary>
        </member>
        <member name="P:CommonMark.Formatters.HtmlFormatter.RenderPlainTextInlines">
            <summary>
            Gets a stack of values indicating whether the inline elements should be rendered as plain text
            (without formatting). This usually is done within image description attributes that do not support
            HTML tags.
            Every element that impacts this setting has to push a value when opening and pop it when closing.
            The most recent value is used to determine the current state.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.#ctor(System.IO.TextWriter,CommonMark.CommonMarkSettings)">
            <summary>Initializes a new instance of the <see cref="T:CommonMark.Formatters.HtmlFormatter" /> class.</summary>
            <param name="target">The target text writer.</param>
            <param name="settings">The settings used when formatting the data.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <c>null</c></exception>
        </member>
        <member name="P:CommonMark.Formatters.HtmlFormatter.Settings">
            <summary>
            Gets the settings used for formatting data.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteDocument(CommonMark.Syntax.Block)">
            <summary>
            Writes the given CommonMark document to the output stream as HTML.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteBlock(CommonMark.Syntax.Block,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Writes the specified block element to the output stream. Does not write the child nodes, instead
            the <paramref name="ignoreChildNodes"/> is used to notify the caller whether it should recurse
            into the child nodes.
            </summary>
            <param name="block">The block element to be written to the output stream.</param>
            <param name="isOpening">Specifies whether the block element is being opened (or started).</param>
            <param name="isClosing">Specifies whether the block element is being closed. If the block does not
            have child nodes, then both <paramref name="isClosing"/> and <paramref name="isOpening"/> can be
            <c>true</c> at the same time.</param>
            <param name="ignoreChildNodes">Instructs the caller whether to skip processing of child nodes or not.</param>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteInline(CommonMark.Syntax.Inline,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Writes the specified inline element to the output stream. Does not write the child nodes, instead
            the <paramref name="ignoreChildNodes"/> is used to notify the caller whether it should recurse
            into the child nodes.
            </summary>
            <param name="inline">The inline element to be written to the output stream.</param>
            <param name="isOpening">Specifies whether the inline element is being opened (or started).</param>
            <param name="isClosing">Specifies whether the inline element is being closed. If the inline does not
            have child nodes, then both <paramref name="isClosing"/> and <paramref name="isOpening"/> can be
            <c>true</c> at the same time.</param>
            <param name="ignoreChildNodes">Instructs the caller whether to skip processing of child nodes or not.</param>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.Write(System.String)">
            <summary>
            Writes the specified text to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.Write(CommonMark.Syntax.StringContent)">
            <summary>
            Writes the specified text to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.Write(System.Char)">
            <summary>
            Writes the specified character to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.EnsureNewLine">
            <summary>
            Ensures that the output ends with a newline. This means that newline character will be written
            only if the writer does not currently end with a newline.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteLine">
            <summary>
            Writes a newline to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteLine(System.String)">
            <summary>
            Writes the specified text and a newline to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteEncodedHtml(CommonMark.Syntax.StringContent)">
            <summary>
            Encodes the given text with HTML encoding (ampersand-encoding) and writes the result to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteEncodedHtml(System.String)">
            <summary>
            Encodes the given text with HTML encoding (ampersand-encoding) and writes the result to the target writer.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WriteEncodedUrl(System.String)">
            <summary>
            Encodes the given text with URL encoding (percent-encoding) and writes the result to the target writer.
            Note that the result is intended to be written to HTML attribute so this also encodes <c>&amp;</c> character
            as <c>&amp;amp;</c>.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WritePositionAttribute(CommonMark.Syntax.Block)">
            <summary>
            Writes a <c>data-sourcepos="start-end"</c> attribute to the target writer. 
            This method should only be called if <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> is set to <c>true</c>.
            Note that the attribute is preceded (but not succeeded) by a single space.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatter.WritePositionAttribute(CommonMark.Syntax.Inline)">
            <summary>
            Writes a <c>data-sourcepos="start-end"</c> attribute to the target writer. 
            This method should only be called if <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> is set to <c>true</c>.
            Note that the attribute is preceded (but not succeeded) by a single space.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatterSlim.EscapeUrl(System.String,CommonMark.Formatters.HtmlTextWriter)">
            <summary>
            Escapes special URL characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatterSlim.EscapeHtml(CommonMark.Syntax.StringPart,CommonMark.Formatters.HtmlTextWriter)">
            <summary>
            Escapes special HTML characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatterSlim.EscapeHtml(CommonMark.Syntax.StringContent,CommonMark.Formatters.HtmlTextWriter)">
            <summary>
            Escapes special HTML characters.
            </summary>
            <remarks>Orig: escape_html(inp, preserve_entities)</remarks>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatterSlim.InlinesToPlainText(CommonMark.Formatters.HtmlTextWriter,CommonMark.Syntax.Inline,System.Collections.Generic.Stack{CommonMark.Formatters.HtmlFormatterSlim.InlineStackEntry})">
            <summary>
            Writes the inline list to the given writer as plain text (without any HTML tags).
            </summary>
            <seealso href="https://github.com/jgm/CommonMark/issues/145"/>
        </member>
        <member name="M:CommonMark.Formatters.HtmlFormatterSlim.InlinesToHtml(CommonMark.Formatters.HtmlTextWriter,CommonMark.Syntax.Inline,CommonMark.CommonMarkSettings,System.Collections.Generic.Stack{CommonMark.Formatters.HtmlFormatterSlim.InlineStackEntry})">
            <summary>
            Writes the inline list to the given writer as HTML code. 
            </summary>
        </member>
        <member name="T:CommonMark.Formatters.HtmlTextWriter">
            <summary>
            A wrapper for <see cref="T:CommonMark.Formatters.HtmlFormatterSlim"/> that keeps track if the last symbol has been a newline.
            </summary>
        </member>
        <member name="F:CommonMark.Formatters.HtmlTextWriter.Buffer">
            <summary>
            A reusable char buffer. This is used internally in <see cref="M:CommonMark.Formatters.HtmlTextWriter.Write(CommonMark.Syntax.StringPart)"/> (and thus will modify the buffer)
            but can also be used from <see cref="T:CommonMark.Formatters.HtmlFormatterSlim"/> class.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlTextWriter.WriteConstant(System.Char[])">
            <summary>
            Writes a value that is known not to contain any newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlTextWriter.WriteConstant(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a value that is known not to contain any newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlTextWriter.WriteConstant(System.String)">
            <summary>
            Writes a value that is known not to contain any newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlTextWriter.WriteLineConstant(System.String)">
            <summary>
            Writes a value that is known not to contain any newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.HtmlTextWriter.EnsureLine">
            <summary>
            Adds a newline if the writer does not currently end with a newline.
            </summary>
        </member>
        <member name="M:CommonMark.Formatters.Printer.PrintBlocks(System.IO.TextWriter,CommonMark.Syntax.Block,CommonMark.CommonMarkSettings)">
            <summary>
            Write the block data to the given writer.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.EndsWithBlankLine(CommonMark.Syntax.Block)">
            <summary>
            Check to see if a block ends with a blank line, descending if needed into lists and sublists.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.BreakOutOfLists(CommonMark.Syntax.Block@,CommonMark.Parser.LineInfo)">
            <summary>
            Break out of all containing lists
            </summary>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.CreateChildBlock(CommonMark.Syntax.Block,CommonMark.Parser.LineInfo,CommonMark.Syntax.BlockTag,System.Int32)">
            <summary>
            Adds a new block as child of another. Return the child.
            </summary>
            <remarks>Original: add_child</remarks>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.ProcessInlines(CommonMark.Syntax.Block,System.Collections.Generic.Dictionary{System.String,CommonMark.Syntax.Reference},CommonMark.CommonMarkSettings)">
            <summary>
            Walk through the block, its children and siblings, parsing string content into inline content where appropriate.
            </summary>
            <param name="block">The document level block from which to start the processing.</param>
            <param name="refmap">The reference mapping used when parsing links.</param>
            <param name="settings">The settings that influence how the inline parsing is performed.</param>
        </member>
        <member name="M:CommonMark.Parser.BlockMethods.ParseListMarker(System.String,System.Int32,CommonMark.Syntax.ListData@)">
            <summary>
            Attempts to parse a list item marker (bullet or enumerated).
            On success, returns length of the marker, and populates
            data with the details.  On failure, returns 0.
            </summary>
            <remarks>Original: int parse_list_marker(string ln, int pos, ref ListData dataptr)</remarks>
        </member>
        <member name="M:CommonMark.Parser.EntityDecoder.DecodeEntity(System.String)">
            <summary>
            Decodes the given HTML entity to the matching Unicode characters.
            </summary>
            <param name="entity">The entity without <c>&amp;</c> and <c>;</c> symbols, for example, <c>copy</c>.</param>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="M:CommonMark.Parser.EntityDecoder.DecodeEntity(System.Int32)">
            <summary>
            Decodes the given UTF-32 character code to the matching set of UTF-16 characters.
            </summary>
            <returns>The unicode character set or <c>null</c> if the entity was not recognized.</returns>
        </member>
        <member name="F:CommonMark.Parser.EntityDecoder._entityMap">
            <summary>
            Source: http://www.w3.org/html/wg/drafts/html/master/syntax.html#named-character-references
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.InitializeParsers(CommonMark.CommonMarkSettings)">
            <summary>
            Initializes the array of delegates for inline parsing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.NormalizeReference(CommonMark.Syntax.StringPart)">
            <summary>
            Collapses internal whitespace to single space, removes leading/trailing whitespace, folds case.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.LookupReference(System.Collections.Generic.Dictionary{System.String,CommonMark.Syntax.Reference},CommonMark.Syntax.StringPart)">
            <summary>
            Checks if the reference dictionary contains a reference with the given label and returns it,
            otherwise returns <c>null</c>.
            Returns <see cref="F:CommonMark.Syntax.Reference.InvalidReference"/> if the reference label is not valid.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.AddReference(System.Collections.Generic.Dictionary{System.String,CommonMark.Syntax.Reference},CommonMark.Syntax.StringPart,System.String,System.String)">
            <summary>
            Adds a new reference to the dictionary, if the label does not already exist there.
            Assumes that the length of the label does not exceed <see cref="F:CommonMark.Syntax.Reference.MaximumReferenceLabelLength"/>.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ScanToClosingBackticks(CommonMark.Parser.Subject,System.Int32)">
            <summary>
            Searches the subject for a span of backticks that matches the given length.
            Returns <c>0</c> if the closing backticks cannot be found, otherwise returns
            the position in the subject after the closing backticks.
            Also updates the position on the subject itself.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.NormalizeWhitespace(System.String,System.Int32,System.Int32)">
            <summary>
            Collapses consecutive space and newline characters into a single space.
            Additionaly removes leading and trailing spaces.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ScanEmphasisDelimeters(CommonMark.Parser.Subject,System.Char,System.Boolean@,System.Boolean@)">
            <summary>
            Scans the subject for a series of the given emphasis character, testing if they could open and/or close
            an emphasis element.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.HandleEntity(CommonMark.Parser.Subject)">
            <summary>
            Parses the entity at the current position. Returns a new string inline.
            Assumes that there is a <c>&amp;</c> at the current position.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ParseEntity(CommonMark.Parser.Subject)">
            <summary>
            Parses the entity at the current position.
            Assumes that there is a <c>&amp;</c> at the current position.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ParseStringEntities(System.String)">
            <summary>
            Creates a new <see cref="T:CommonMark.Syntax.Inline"/> element that represents string content but the given content
            is processed to decode any HTML entities in it.
            This method is guaranteed to return just one Inline, without nested elements.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.Unescape(System.String)">
            <summary>
            Destructively unescape a string: remove backslashes before punctuation or symbol characters.
            </summary>
            <param name="url">The string data that will be changed by unescaping any punctuation or symbol characters.</param>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.CleanUrl(System.String)">
            <summary>
            Clean a URL: remove surrounding whitespace and surrounding &lt; &gt; and remove \ that escape punctuation and other symbols.
            </summary>
            <remarks>Original: clean_url(ref string)</remarks>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.CleanTitle(System.String)">
            <summary>
            Clean a title: remove surrounding quotes and remove \ that escape punctuation.
            </summary>
            <remarks>Original: clean_title(ref string)</remarks>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ParseInline(CommonMark.Parser.Subject,System.Func{CommonMark.Parser.Subject,CommonMark.Syntax.Inline}[],System.Char[])">
            <summary>
            Parse an inline element from the subject. The subject position is updated to after the element.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineMethods.ParseReferenceLabel(CommonMark.Parser.Subject)">
            <summary>
            Parses the contents of [..] for a reference label. Only used for parsing 
            reference definition labels for use with the reference dictionary because 
            it does not properly parse nested inlines.
            
            Assumes the source starts with '[' character or spaces before '['.
            Returns null and does not advance if no matching ] is found.
            Note the precedence:  code backticks have precedence over label bracket
            markers, which have precedence over *, _, and other inline formatting
            markers. So, 2 below contains a link while 1 does not:
            1. [a link `with a ](/url)` character
            2. [a link *with emphasized ](/url) text*        /// </summary>
        </member>
        <member name="T:CommonMark.Parser.InlineStack">
            <summary>
            Describes an element in a stack of possible inline openers.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Priority">
            <summary>
            The parser priority if this stack entry.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Previous">
            <summary>
            Previous entry in the stack. <c>null</c> if this is the last one.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Next">
            <summary>
            Next entry in the stack. <c>null</c> if this is the last one.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.StartingInline">
            <summary>
            The at-the-moment text inline that could be transformed into the opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.DelimeterCount">
            <summary>
            The number of delimeter characters found for this opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Delimeter">
            <summary>
            The character that was used in the opener.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.StartPosition">
            <summary>
            The position in the <see cref="F:CommonMark.Parser.Subject.Buffer"/> where this inline element was found.
            Used only if the specific parser requires this information.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.InlineStack.Flags">
            <summary>
            The flags set for this stack entry.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.InlineStack.RemoveStackEntry(CommonMark.Parser.InlineStack,CommonMark.Parser.Subject,CommonMark.Parser.InlineStack)">
            <summary>
            Removes a subset of the stack.
            </summary>
            <param name="first">The first entry to be removed.</param>
            <param name="subj">The subject associated with this stack. Can be <c>null</c> if the pointers in the subject should not be updated.</param>
            <param name="last">The last entry to be removed. Can be <c>null</c> if everything starting from <paramref name="first"/> has to be removed.</param>
        </member>
        <member name="F:CommonMark.Parser.LineInfo.LineOffset">
            <summary>
            Gets or sets the offset in the source data at which the current line starts.
            </summary>
        </member>
        <member name="T:CommonMark.Parser.Scanner">
            <summary>
            Contains the regular expressions that are used in the parsers.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Scanner.schemeArray">
            <summary>
            List of valid schemes of an URL. The array must be sorted.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_autolink_uri(System.String,System.Int32,System.Int32)">
            <summary>
            Try to match URI autolink after first &lt;, returning number of chars matched.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_autolink_email(System.String,System.Int32,System.Int32)">
            <summary>
            Try to match email autolink after first &lt;, returning num of chars matched.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_link_url(System.String,System.Int32,System.Int32)">
            <summary>
            Try to match a URL in a link or reference, return number of chars matched.
            This may optionally be contained in &lt;..&gt;; otherwise
            whitespace and unbalanced right parentheses aren't allowed.
            Newlines aren't ever allowed.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_link_title(System.String,System.Int32,System.Int32)">
            <summary>
            Try to match a link title (in single quotes, in double quotes, or
            in parentheses), returning number of chars matched.  Allow one
            level of internal nesting (quotes within quotes).
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_spacechars(System.String,System.Int32,System.Int32)">
            <summary>
            Match space characters, including newlines.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_atx_header_start(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Match ATX header start.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_setext_header_line(System.String,System.Int32,System.Int32)">
            <summary>
            Match sexext header line.  Return 1 for level-1 header,
            2 for level-2, 0 for no match.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_hrule(System.String,System.Int32,System.Int32)">
            <summary>
            Scan a horizontal rule line: "...three or more hyphens, asterisks,
            or underscores on a line by themselves. If you wish, you may use
            spaces between the hyphens or asterisks."
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_open_code_fence(System.String,System.Int32,System.Int32)">
            <summary>
            Scan an opening code fence. Returns the number of characters forming the fence.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_close_code_fence(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scan a closing code fence with length at least len.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_entity(System.String,System.Int32,System.Int32,System.String@,System.Int32@)">
            <summary>
            Scans an entity.
            Returns number of chars matched.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.HasNonWhitespace(CommonMark.Syntax.StringPart)">
            <summary>
            Determines if the given string has non-whitespace characters in it
            </summary>
        </member>
        <member name="M:CommonMark.Parser.Scanner.scan_html_tag(System.String,System.Int32,System.Int32)">
            <summary>
            Try to match an HTML tag after first &lt;, returning number of chars matched.
            </summary>
        </member>
        <member name="T:CommonMark.Parser.ScannerCharacterMatcher">
            <summary>
            Class containing methods for fast forward matching of string contents
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchWhitespaces(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a whitespace.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetter(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchHtmlTagNameCharacter(System.String,System.Char@,System.Int32@,System.Int32)">
            <summary>
            Moves along the given string as long as the current character is a valid HTML tag character 
            (ASCII letter or digit or dash).
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetterOrDigit(System.String,System.Char@,System.Int32@,System.Int32,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or digit or one of the given additional characters.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetterOrDigit(System.String,System.Char@,System.Int32@,System.Int32,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or digit or one of the given additional characters.
            </summary>
        </member>
        <member name="M:CommonMark.Parser.ScannerCharacterMatcher.MatchAsciiLetter(System.String,System.Char@,System.Int32@,System.Int32,System.Char,System.Char)">
            <summary>
            Moves along the given string as long as the current character is a ASCII letter or one of the given additional characters.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.Buffer">
            <summary>
            Gets or sets the whole buffer this instance is created over.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.Position">
            <summary>
            Gets or sets the current position in the buffer.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.Length">
            <summary>
            Gets or sets the length of the usable buffer. This can be less than the actual length of the
            buffer if some characters at the end of the buffer have to be ignored.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.LastInline">
            <summary>
            The last top-level inline parsed from this subject.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.LastPendingInline">
            <summary>
            The last entry of the current stack of possible emphasis openers. Can be <c>null</c>.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.FirstPendingInline">
            <summary>
            The first entry of the current stack of possible emphasis openers. Can be <c>null</c>.
            </summary>
        </member>
        <member name="F:CommonMark.Parser.Subject.ReusableStringBuilder">
            <summary>
            A reusable StringBuilder that should be used instead of creating new instances to conserve memory.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.Block">
            <summary>
            Represents a block-level element of the parsed document.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Block.#ctor(CommonMark.Syntax.BlockTag,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Block"/> class.
            </summary>
            <param name="tag">The type of the element this instance represents.</param>
            <param name="sourcePosition">The position of the first character of this block in the source text.</param>
        </member>
        <member name="M:CommonMark.Syntax.Block.#ctor(CommonMark.Syntax.BlockTag,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Block"/> class.
            </summary>
            <param name="tag">The type of the element this instance represents.</param>
            <param name="startLine">The number of the first line in the source text that contains this element.</param>
            <param name="startColumn">The number of the first column (within the first line) in the source text that contains this element.</param>
            <param name="sourcePosition">The position of the first character of this block in the source text.</param>
        </member>
        <member name="M:CommonMark.Syntax.Block.AsEnumerable">
            <summary>
            Returns an enumerable that allows the iteration over all block and inline elements within this
            instance. Note that the enumerator should not be used if optimal performance is desired and instead
            a custom implementation should be written.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Block.CreateDocument">
            <summary>
            Creates a new top-level document block.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.Tag">
            <summary>
            Gets or sets the type of the element this instance represents.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.HtmlBlockType">
            <summary>
            Gets or sets the type of the HTML block. Only applies when <see cref="P:CommonMark.Syntax.Block.Tag"/> equals <see cref="F:CommonMark.Syntax.BlockTag.HtmlBlock"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.StartLine">
            <summary>
            Gets or sets the number of the first line in the source text that contains this element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.StartColumn">
            <summary>
            Gets or sets the number of the first column (within the first line) in the source text that contains this element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.EndLine">
            <summary>
            Gets or sets the number of the last line in the source text that contains this element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.SourcePosition">
            <summary>
            Gets or sets the position of the block element within the source data. This position is before 
            any opening characters. <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> must be enabled
            for this value to be defined.
            </summary>
            <seealso cref="P:CommonMark.Syntax.Block.SourceLength"/>
        </member>
        <member name="P:CommonMark.Syntax.Block.SourceLength">
            <summary>
            Gets or sets the length of the block element within the source data. This includes also characters that
            close the block element and in most cases the newline characters right after the block element.
            <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> must be enabled for this value to be defined.
            </summary>
            <seealso cref="P:CommonMark.Syntax.Block.SourcePosition"/>
        </member>
        <member name="P:CommonMark.Syntax.Block.IsOpen">
            <summary>
            Gets or sets a value indicating whether this block element has been completed (and thus new lines cannot be added
            to it) or is still open. By default all elements are created as open and are closed when the parser detects it.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.IsLastLineBlank">
            <summary>
            Gets or sets a value indicating whether the last line parsed for this block element was blank (containing only
            whitespaces).
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.FirstChild">
            <summary>
            Gets or sets the first child element of this instance. <c>null</c> if there are no children.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.LastChild">
            <summary>
            Gets or sets the last child element (the last sibling of <see cref="P:CommonMark.Syntax.Block.FirstChild"/>) of this instance. 
            <c>null</c> if there are no children.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.Parent">
            <summary>
            Gets or sets the parent element of this block.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.Top">
            <summary>
            Gets or sets the root element (that represents the document itself).
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.StringContent">
            <summary>
            Gets or sets the string content of this block. The content consists of multiple string parts to avoid string concatenation.
            Note that some parts of the parser (for example, <see cref="T:CommonMark.Formatters.HtmlFormatter"/>) might assume that
            the parts are not split within certain objects, so it is advised that the parts are split on newline.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.InlineContent">
            <summary>
            Gets or sets the first inline element that was parsed from <see cref="P:CommonMark.Syntax.Block.StringContent"/> property.
            Note that once the inlines are parsed, <see cref="P:CommonMark.Syntax.Block.StringContent"/> will be set to <c>null</c>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.ListData">
            <summary>
            Gets or sets the additional properties that apply to list elements.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.FencedCodeData">
            <summary>
            Gets or sets the additional properties that apply to fenced code blocks.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.HeaderLevel">
            <summary>
            Gets or sets the heading level (as in <c>&lt;h1&gt;</c> or <c>&lt;h2&gt;</c>).
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.ReferenceMap">
            <summary>
            Gets or sets the dictionary containing resolved link references. Only set on the document node, <c>null</c>
            and not used for all other elements.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.NextSibling">
            <summary>
            Gets or sets the next sibling of this block element. <c>null</c> if this is the last element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Block.Previous">
            <summary>
            Gets or sets the previous sibling of this block element. <c>null</c> if this is the first element.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.BlockTag">
            <summary>
            Specifies the element type of a <see cref="T:CommonMark.Syntax.Block"/> instance.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.Document">
            <summary>
            The root element that represents the document itself. There should only be one in the tree.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.BlockQuote">
            <summary>
            A block-quote element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.List">
            <summary>
            A list element. Will contain nested blocks with type of <see cref="F:CommonMark.Syntax.BlockTag.ListItem"/>.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.ListItem">
            <summary>
            An item in a block element of type <see cref="F:CommonMark.Syntax.BlockTag.List"/>.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.FencedCode">
            <summary>
            A code block element that was formatted with fences (for example, <c>~~~\nfoo\n~~~</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.IndentedCode">
            <summary>
            A code block element that was formatted by indenting the lines with at least 4 spaces.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.HtmlBlock">
            <summary>
            A raw HTML code block element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.Paragraph">
            <summary>
            A paragraph block element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.AtxHeader">
            <summary>
            A header element that was parsed from an ATX style markup (<c>## heading 2</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.SETextHeader">
            <summary>
            A header element that was parsed from a Setext style markup (<c>heading\n========</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.HorizontalRuler">
            <summary>
            A horizontal ruler element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.BlockTag.ReferenceDefinition">
            <summary>
            A text block that contains only link reference definitions.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.EnumeratorEntry">
            <summary>
            Represents a single element in the document tree when traversing through it with the enumerator.
            </summary>
            <seealso cref="M:CommonMark.Syntax.Block.AsEnumerable"/>
        </member>
        <member name="M:CommonMark.Syntax.EnumeratorEntry.#ctor(System.Boolean,System.Boolean,CommonMark.Syntax.Block)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.EnumeratorEntry"/> class.
            </summary>
            <param name="opening">Specifies if this instance represents the opening of the block element.</param>
            <param name="closing">Specifies if this instance represents the closing of the block element (returned by the
            enumerator after the children have been enumerated). Both <paramref name="closing"/> and <paramref name="opening"/>
            can be specified at the same time if there are no children for the <paramref name="block"/> element.</param>
            <param name="block">The block element being returned from the enumerator.</param>
        </member>
        <member name="M:CommonMark.Syntax.EnumeratorEntry.#ctor(System.Boolean,System.Boolean,CommonMark.Syntax.Inline)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.EnumeratorEntry"/> class.
            </summary>
            <param name="opening">Specifies if this instance represents the opening of the inline element.</param>
            <param name="closing">Specifies if this instance represents the closing of the inline element (returned by the
            enumerator after the children have been enumerated). Both <paramref name="closing"/> and <paramref name="opening"/>
            can be specified at the same time if there are no children for the <paramref name="inline"/> element.</param>
            <param name="inline">The inlien element being returned from the enumerator.</param>
        </member>
        <member name="P:CommonMark.Syntax.EnumeratorEntry.IsOpening">
            <summary>
            Gets the value indicating whether this instance represents the opening of the element (returned before enumerating
            over the children of the element).
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.EnumeratorEntry.IsClosing">
            <summary>
            Gets the value indicating whether this instance represents the closing of the element (returned by the
            enumerator after the children have been enumerated). Both <see name="IsOpening"/> and <see name="IsClosing"/>
            can be <c>true</c> at the same time if there are no children for the given element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.EnumeratorEntry.Inline">
            <summary>
            Gets the inline element. Can be <c>null</c> if <see cref="P:CommonMark.Syntax.EnumeratorEntry.Block"/> is set.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.EnumeratorEntry.Block">
            <summary>
            Gets the inline element. Can be <c>null</c> if <see cref="P:CommonMark.Syntax.EnumeratorEntry.Inline"/> is set.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.EnumeratorEntry.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.FencedCodeData">
            <summary>
            Contains additional data for fenced code blocks. Used in <see cref="P:CommonMark.Syntax.Block.FencedCodeData"/>/
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceLength">
            <summary>
            Gets or sets the number of characters that were used in the opening code fence.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceOffset">
            <summary>
            Gets or sets the number of spaces the opening fence was indented.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.FenceChar">
            <summary>
            Gets or sets the character that is used in the fences.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.FencedCodeData.Info">
            <summary>
            Gets or sets the additional information that was present in the same line as the opening fence.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.HtmlBlockType">
            <summary>
            Specifies the type of the HTML block a <see cref="T:CommonMark.Syntax.Block"/> instance represents.
            See http://spec.commonmark.org/0.22/#html-block
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.None">
            <summary>
            This is not a HTML block.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.InterruptingBlockWithEmptyLines">
            <summary>
            The HTML block represents <c>script</c>, <c>pre</c> or <c>style</c> element. Unline other HTML tags
            these are allowed to contain blank lines.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.Comment">
            <summary>
            The block represents an HTML comment.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.ProcessingInstruction">
            <summary>
            The block represents a processing instruction <c>&lt;??&gt;</c>
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.DocumentType">
            <summary>
            The block represents a doctype element <c>&lt;!...&gt;</c>
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.CData">
            <summary>
            The block represents <c>&lt;![CDATA[...]]</c> element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.InterruptingBlock">
            <summary>
            This HTML block can interrupt paragraphs.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.HtmlBlockType.NonInterruptingBlock">
            <summary>
            This HTML block cannot interrupt paragraphs.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.Inline">
            <summary>
            Represents a parsed inline element in the document.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(CommonMark.Syntax.InlineTag)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class.
            </summary>
            <param name="tag">The type of inline element.</param>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(CommonMark.Syntax.InlineTag,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class.
            </summary>
            <param name="tag">The type of inline element. Should be one of the types that require literal content, for example, <see cref="F:CommonMark.Syntax.InlineTag.Code"/>.</param>
            <param name="content">The literal contents of the inline element.</param>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(CommonMark.Syntax.InlineTag,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class. The element type is set to <see cref="F:CommonMark.Syntax.InlineTag.String"/>
            </summary>
            <param name="content">The literal string contents of the inline element.</param>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class. The element type is set to <see cref="F:CommonMark.Syntax.InlineTag.String"/>
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class. The element type is set to <see cref="F:CommonMark.Syntax.InlineTag.String"/>
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Inline.#ctor(CommonMark.Syntax.InlineTag,CommonMark.Syntax.Inline)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Inline"/> class.
            </summary>
            <param name="tag">The type of inline element. Should be one of the types that contain child elements, for example, <see cref="F:CommonMark.Syntax.InlineTag.Emphasis"/>.</param>
            <param name="content">The first descendant element of the inline that is being created.</param>
        </member>
        <member name="P:CommonMark.Syntax.Inline.Tag">
            <summary>
            Gets of sets the type of the inline element this instance represents.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.LiteralContent">
            <summary>
            Gets or sets the literal content of this element. This is only used if the <see cref="P:CommonMark.Syntax.Inline.Tag"/> property specifies
            a type that can have literal content.
            
            Note that for <see cref="F:CommonMark.Syntax.InlineTag.Link"/> this property contains the title of the link.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.TargetUrl">
            <summary>
            Gets or sets the target URL for this element. Only used for <see cref="F:CommonMark.Syntax.InlineTag.Link"/> and 
            <see cref="F:CommonMark.Syntax.InlineTag.Image"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.FirstChild">
            <summary>
            Gets or sets the first descendant of this element. This is only used if the <see cref="P:CommonMark.Syntax.Inline.Tag"/> property specifies
            a type that can have nested elements. 
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.SourcePosition">
            <summary>
            Gets or sets the position of the element within the source data.
            Note that if <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> is not enabled, this property will contain
            the position relative to the containing block and not the whole document (not accounting for processing done
            in earlier parser stage, such as converting tabs to spaces).
            </summary>
            <seealso cref="P:CommonMark.Syntax.Inline.SourceLength"/>
        </member>
        <member name="P:CommonMark.Syntax.Inline.SourceLength">
            <summary>
            Gets or sets the length of the element within the source data.
            Note that if <see cref="P:CommonMark.CommonMarkSettings.TrackSourcePosition"/> is not enabled, this property will contain
            the length within the containing block (not accounting for processing done in earlier parser stage, such as
            converting tabs to spaces).
            </summary>
            <seealso cref="P:CommonMark.Syntax.Inline.SourcePosition"/>
        </member>
        <member name="P:CommonMark.Syntax.Inline.Linkable">
            <summary>
            Gets the link details. This is now obsolete in favor of <see cref="P:CommonMark.Syntax.Inline.TargetUrl"/> and <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/>
            properties and this property will be removed in future.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.NextSibling">
            <summary>
            Gets the next sibling inline element. Returns <c>null</c> if this is the last element.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.LastSibling">
            <summary>
            Gets the last sibling of this inline. If no siblings are defined, returns self.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Inline.DelimiterCharacter">
            <summary>
            Gets the delimiter character for this inline element.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.InlineContentLinkable">
            <summary>
            An obsolete class. Used to contain properties specific to link inline elements.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.InlineContentLinkable.Url">
            <summary>
            Gets or sets the URL of a link. Moved to <see cref="P:CommonMark.Syntax.Inline.TargetUrl"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.InlineContentLinkable.Title">
            <summary>
            Gets or sets the title of a link. Moved to <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/>.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.InlineTag">
            <summary>
            Specifies the element type of an <see cref="T:CommonMark.Syntax.Inline"/> instance.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.String">
            <summary>
            Represents a simple literal string content. Uses <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/> to specify the data.
            Cannot contain nested elements.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.SoftBreak">
            <summary>
            Represents a soft-break which by default is rendered as a simple newline and thus does not impact
            the display of the resulting HTML code. The <see cref="P:CommonMark.CommonMarkSettings.RenderSoftLineBreaksAsLineBreaks"/>
            property can be used to override this behavior and render soft-breaks as <c>&lt;br;&gt;</c> HTML
            elements.
            Cannot contain literal content or nested elements.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.LineBreak">
            <summary>
            Represents a line-break which by default is rendered as a <c>&lt;br;&gt;</c> HTML element.
            Cannot contain literal content or nested elements.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Code">
            <summary>
            Represents an inline code element. Uses <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/> to specify the data.
            Cannot contain nested elements.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.RawHtml">
            <summary>
            Represents raw HTML code. Uses <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/> to specify the data.
            Cannot contain nested elements.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Emphasis">
            <summary>
            Represents an emphasis element. Uses <see cref="P:CommonMark.Syntax.Inline.FirstChild"/> to specify the contents.
            Cannot contain literal content.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Strong">
            <summary>
            Represents a strong emphasis element. Uses <see cref="P:CommonMark.Syntax.Inline.FirstChild"/> to specify the contents.
            Cannot contain literal content.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Link">
            <summary>
            Represents a link element. Uses <see cref="P:CommonMark.Syntax.Inline.FirstChild"/> to specify the content (or label).
            Uses <see cref="P:CommonMark.Syntax.Inline.TargetUrl"/> to specify the target of the link and 
            <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/> to store the title of the link.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Image">
            <summary>
            Represents an image element. Uses <see cref="P:CommonMark.Syntax.Inline.FirstChild"/> to specify the label (description).
            Uses <see cref="P:CommonMark.Syntax.Inline.TargetUrl"/> to specify the source of the image and 
            <see cref="P:CommonMark.Syntax.Inline.LiteralContent"/> to store the title of the image.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.InlineTag.Strikethrough">
            <summary>
            Represents an inline element that has been "removed" (visually represented as strikethrough).
            Only present if the <see cref="F:CommonMark.CommonMarkAdditionalFeatures.StrikethroughTilde"/> is enabled.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.ListData">
            <summary>
            Contains additional data for list block elements. Used in <see cref="P:CommonMark.Syntax.Block.ListData"/> property.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.MarkerOffset">
            <summary>
            Gets or sets the number of spaces the list markers are indented.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.Padding">
            <summary>
            Gets or sets the position of the list item contents in the source text line.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.Start">
            <summary>
            Gets or sets the number for the first list item if <see cref="P:CommonMark.Syntax.ListData.ListType"/> is set to
            <see cref="F:ListType.Ordered"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.BulletChar">
            <summary>
            Gets or sets the character used for unordered lists. Used if <see cref="P:CommonMark.Syntax.ListData.ListType"/> is set to
            <see cref="F:ListType.Bullet"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.ListType">
            <summary>
            Gets or sets the type (ordered or unordered) of this list.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.Delimiter">
            <summary>
            Gets or sets the character that follows the number if <see cref="P:CommonMark.Syntax.ListData.ListType"/> is set to
            <see cref="F:ListType.Ordered"/>.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.ListData.IsTight">
            <summary>
            Gets or sets a value indicating whether the list is tight (such list will not render additional explicit
            paragraph elements).
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.ListDelimiter">
            <summary>
            Defines the delimeter used in the source for ordered lists.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.ListDelimiter.Period">
            <summary>
            The item numbering is followed with a period (<c>1. foo</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.ListDelimiter.Parenthesis">
            <summary>
            The item numbering is followed with a closing parenthesis (<c>1) foo</c>).
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.ListType">
            <summary>
            Defines the type of a list block element.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.ListType.Bullet">
            <summary>
            The list is unordered and its items are represented with bullets.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.ListType.Ordered">
            <summary>
            The list is ordered and its items are numbered.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.Reference">
            <summary>
            Represents a parsed reference link definition.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Reference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Reference"/> class.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.Reference.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommonMark.Syntax.Reference"/> class.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.MaximumReferenceLabelLength">
            <summary>
            Represents the maximum allowed length of a reference definition (<c>foo</c> in <c>[foo]: /url</c>).
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.SelfReference">
            <summary>
            A special constant reference that represents an collapsed reference link: [foo][]
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.Reference.InvalidReference">
            <summary>
            A special constant reference that signifies that the reference label was not found: [foo][bar]
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Label">
            <summary>
            Gets or sets the label (the key by which it is referenced in the mapping) of the reference.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Url">
            <summary>
            Gets or sets the URL of the reference.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.Reference.Title">
            <summary>
            Gets or sets the title of the reference (used in <c>&lt;a title="..."&gt;</c>).
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.StringContent">
            <summary>
            Registers blocks of string data together so that it is not needed to concatenate multiple substrings
            together - thus reducing memory usage and number of string instances.
            </summary>
        </member>
        <member name="P:CommonMark.Syntax.StringContent.Length">
            <summary>
            Gets the total length of string data.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a part of the given string data to this instance.
            </summary>
            <param name="source">The source string.</param>
            <param name="startIndex">The index of the first character that will be appended.</param>
            <param name="length">The length of the substring that will be appended.</param>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.ToString(System.Text.StringBuilder)">
            <summary>
            Returns all of the data as a single string.
            </summary>
            <param name="buffer">A reusable instance of <see cref="T:System.Text.StringBuilder"/>. Any existing content will be removed from it.</param>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.ToString">
            <summary>
            Returns all of the data as a single string.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.FillSubject(CommonMark.Parser.Subject)">
            <summary>
            Resets the given subject instance with data from this string content.
            Note that this method calls <see cref="M:CommonMark.Syntax.StringContent.TrimEnd"/> thus changing the source data as well.
            </summary>
            <param name="subj">The subject instance which will be reinitialized with the data from this instance.</param>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes the data contained in this instance to the given text writer.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.WriteTo(CommonMark.Formatters.HtmlTextWriter)">
            <summary>
            Writes the data contained in this instance to the given html text writer.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.StartsWith(System.Char)">
            <summary>
            Checks if the first character of the string content matches the given.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces the whole string content with the given substring.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified character in this instance.
            </summary>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.TakeFromStart(System.Int32,System.Boolean)">
            <summary>
            Returns a substring starting at the beginning this instance with the given length.
            Optionally the returned characters are removed from this instance.
            </summary>
            <param name="length">The number of characters to return.</param>
            <param name="trim">If set to <c>true</c>, the characters are removed from this instance.</param>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.TrimEnd">
            <summary>
            Removes any space or newline characters from the end of the string data.
            </summary>
        </member>
        <member name="M:CommonMark.Syntax.StringContent.RemoveTrailingBlankLines">
            <summary>
            Removes any trailing blank lines.
            </summary>
        </member>
        <member name="T:CommonMark.Syntax.StringPart">
            <summary>
            Represents a part of <see cref="T:CommonMark.Syntax.StringContent"/>.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.Source">
            <summary>
            Gets or sets the string object this part is created from.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.StartIndex">
            <summary>
            Gets or sets the index at which this part starts.
            </summary>
        </member>
        <member name="F:CommonMark.Syntax.StringPart.Length">
            <summary>
            Gets or sets the length of the part.
            </summary>
        </member>
    </members>
</doc>
