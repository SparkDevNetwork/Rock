<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="internalValue"
                   formGroupClasses="rock-code-editor"
                   name="codeeditor">
        <div class="control-wrapper">
            <div v-if="hasMergeFields" class="codeeditor-header margin-b-md clearfix">
            </div>

            <div v-if="props.editor == 'ace'" :class="codeEditorClass" :style="codeEditorStyle">
                <pre v-once :id="codeEditorId" class="position-absolute inset-0 m-0 ace_editor">{{ internalValue }}</pre>
            </div>
            <div v-else-if="props.editor == 'monaco'" ref="editorWrapper" :class="codeEditorClass + ' border border-panel'" :style="codeEditorStyle"></div>
        </div>
    </RockFormField>
</template>

<script lang="ts">
    declare global {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var ace: any | undefined;
        var registerMonacoImport: Record<string, (m: unknown) => void>;
    }
</script>

<script setup lang="ts">
    import { computed, nextTick, onMounted, PropType, ref, watch } from "vue";
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import { loadJavaScriptAsync } from "@Obsidian/Utility/page";
    import { newGuid } from "@Obsidian/Utility/guid";
    import { isFullscreen, enterFullscreen, exitFullscreen } from "@Obsidian/Utility/fullscreen";
    import { updateRefValue } from "@Obsidian/Utility/component";

    const aceThemes = {
        0: "rock",
        1: "chrome",
        2: "crimson_editor",
        3: "dawn",
        4: "dreamweaver",
        5: "eclipse",
        6: "solarized_light",
        7: "textmate",
        8: "tomorrow",
        9: "xcode",
        10: "github",
        11: "ambiance",
        12: "chaos",
        13: "clouds_midnight",
        14: "cobalt",
        15: "idle_fingers",
        16: "kr_theme",
        17: "merbivore",
        18: "merbivore_soft",
        19: "mono_industrial",
        20: "monokai",
        21: "pastel_on_dark",
        22: "solarized_dark",
        23: "terminal",
        24: "tomorrow_night",
        25: "tomorrow_night_blue",
        26: "tomorrow_night_bright",
        27: "tomorrow_night_eighties",
        28: "twilight",
        29: "vibrant_ink",
    } as const;

    const monacoThemes = {
        0: "vs",
        1: "vs-dark",
        2: "hc-light",
        3: "hc-black"
    } as const;

    // The valid theme types for intellisense.
    type AceThemeTypes = keyof typeof aceThemes | typeof aceThemes[keyof typeof aceThemes];
    type MonacoThemeTypes = keyof typeof monacoThemes | typeof monacoThemes[keyof typeof monacoThemes];
    type ThemeTypes = AceThemeTypes | MonacoThemeTypes;

    const modes = {
        0: "text",
        1: "css",
        2: "html",
        3: "lava",
        4: "javascript",
        5: "less",
        6: "powershell",
        7: "sql",
        8: "typescript",
        9: "csharp",
        10: "markdown",
        11: "xml"
    } as const;

    // The valid mode types for intellisense.
    type ModeTypes = keyof typeof modes | typeof modes[keyof typeof modes];

    const props = defineProps({
        /** The text value of the code editor. */
        modelValue: {
            type: String as PropType<string>,
            default: ""
        },

        /** The editor library to use for handling the code editor functionality. */
        editor: {
            type: String as PropType<"ace" | "monaco">,
            default: "ace"
        },

        /** The name of the theme to use when styling the editor. */
        theme: {
            type: [String, Number] as PropType<ThemeTypes>,
            default: "rock"
        },

        /** The name of the syntax mode that represents the expected language. */
        mode: {
            type: [String, Number] as PropType<ModeTypes>,
            default: "text"
        },

        /** If set then line wrapping will be disabled. */
        noLineWrap: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** The height of the editor in pixels. */
        editorHeight: {
            type: Number as PropType<number>,
            required: false
        },

        /** A list of merge fields to make available. Not currently used! */
        mergeFields: {
            type: Array as PropType<string[]>,
            required: false
        },

        /** If set then the the editor will be disabled and read-only. */
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void;
    }>();

    let aceScriptLoaded: Promise<boolean> | undefined;
    let monacoScriptLoaded: Promise<boolean> | undefined;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const monacoImport = ref<any>();

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let editor: any | unknown;

    let observer: ResizeObserver | undefined;

    const internalValue = ref(props.modelValue);
    const uniqueId = newGuid();
    const editorWrapper = ref<HTMLDivElement>();

    // #region Computed Values

    const codeEditorClass = computed((): string => {
        return "code-editor-container";
    });

    const codeEditorId = computed((): string => {
        return `codeeditor-div-${uniqueId}`;
    });

    const codeEditorStyle = computed((): Record<string, string> => {
        return {
            position: "relative",
            height: `${editorHeight.value}px`
        };
    });

    const hasMergeFields = computed((): boolean => {
        return !!props.mergeFields && props.mergeFields.length > 0;
    });

    const editorHeight = computed((): number => {
        let height = props.editorHeight ?? 200;

        if (hasMergeFields.value) {
            height -= 40;
        }

        return height;
    });

    // Since themes can be passed in as the number or string, we need to convert it to the string version
    const themeName = computed<string>(() => {
        if (props.theme === 0 && props.editor === "ace") {
            return "github";
        }

        if (typeof props.theme === "number" && props.editor === "ace") {
            return aceThemes[props.theme];
        }

        if (typeof props.theme === "number" && props.editor === "monaco") {
            return monacoThemes[props.theme];
        }

        return (props.theme as string)?.toLowerCase() ?? "github";
    });

    // Since modes can be passed in as the number or string, we need to convert it to the string version
    const modeName = computed<string>(() => {
        let theMode: string;

        if (typeof props.mode == "number") {
            theMode = modes[props.mode];
        }
        else {
            theMode = props.mode?.toLowerCase() || "text";
        }

        if (theMode === "lava" && props.editor === "monaco") {
            theMode = "liquid";
        }

        return theMode;
    });

    // #endregion

    // Watch for changes in the configuration.
    watch(() => [themeName.value, modeName.value, props.noLineWrap, props.disabled], async (...args) => {
        // Also check for the existence of the function before calling it because `editor` can be an old version if
        // config changed before the new editor was initialized.
        if (editor && props.editor == "ace" && typeof editor.setTheme === "function") {
            editor.setTheme(`ace/theme/${themeName.value}`);
            editor.getSession().setMode(`ace/mode/${modeName.value}`);
            editor.getSession().setUseWrapMode(!props.noLineWrap);
            editor.setReadOnly(props.disabled);
        }
        else if (editor && props.editor == "monaco" && typeof editor.updateOptions === "function") {
            editor.updateOptions({
                theme: themeName.value,
                wordWrap: props.noLineWrap ? "off" : "on",
                readOnly: props.disabled,
            });
            monacoImport.value.editor.setModelLanguage(editor.getModel(), modeName.value);
        }
    });

    watch(() => props.modelValue, () => {
        updateRefValue(internalValue, props.modelValue);

        if (editor && editor.getValue() !== internalValue.value) {
            editor.setValue(internalValue.value, 1);
        }
    });

    watch(() => props.editor, initialize);

    watch(internalValue, () => {
        emit("update:modelValue", internalValue.value);
    });

    /**
     * Loads the Monaco editor library. Will prevent loading the library more than once.
     */
    async function loadMonaco(): Promise<boolean> {
        if (monacoScriptLoaded) {
            return monacoScriptLoaded;
        }

        monacoScriptLoaded = new Promise((resolve, reject) => {
            let resolved = false;

            // This allows the script module we create below to expose `monaco` to this component.
            window.registerMonacoImport = window.registerMonacoImport || {};
            window.registerMonacoImport[uniqueId] = (m) => {
                monacoImport.value = m;
                resolved = true;
                resolve(true);
            };

            // Create a script tag to load the monaco editor as an ES module.
            // Combines techniques from https://stackoverflow.com/questions/63179813/how-to-run-the-monaco-editor-from-a-cdn-like-cdnjs/76553340#76553340
            // and https://stackoverflow.com/questions/63179813/how-to-run-the-monaco-editor-from-a-cdn-like-cdnjs/68746273#68746273
            // since our build process doesn't work well with the way the monaco editor is constructed to work.
            const script = document.createElement("script");
            script.type = "module";
            script.innerHTML = `
            import * as monaco from 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/+esm';

            // Before loading vs/editor/editor.main, define a global MonacoEnvironment that overwrites
            // the default worker url location (used when creating WebWorkers). The problem here is that
            // HTML5 does not allow cross-domain web workers, so we need to proxy the instantiation of
            // a web worker through a same-domain script
            window.MonacoEnvironment = {
                getWorkerUrl: function(workerId, label) {
                    return "data:text/javascript;charset=utf-8,${encodeURIComponent("self.MonacoEnvironment = { baseUrl: 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/' };")}";
                }
            };

            let register = window.registerMonacoImport?.["${uniqueId}"];

            if (typeof register === "function") {
                register(monaco);
            }
            else {
                console.error("Monaco import not registered. window.registerMonacoImport['${uniqueId}'] function not found.");
            }`;

            const styles = document.createElement("link");
            styles.rel = "stylesheet";
            styles.href = "https://cdn.jsdelivr.net/npm/@vscode/codicons@0.0.36/dist/codicon.min.css";

            document.head.appendChild(styles);
            document.body.appendChild(script);

            // Make promise reject after a timeout.
            setTimeout(() => {
                if (!resolved) {
                    reject();
                }
            }, 20000);
        });

        return monacoScriptLoaded;
    }

    /**
     * Loads the ACE editor library. Will prevent loading the library more than once.
     */
    async function loadAce(): Promise<boolean> {
        if (aceScriptLoaded) {
            return aceScriptLoaded;
        }

        aceScriptLoaded = loadJavaScriptAsync("/Scripts/ace/ace.js", () => !!window.ace);
        return aceScriptLoaded;
    }

    /**
     * Initialize the correct editor with the given configuration
     */
    async function initialize(): Promise<void> {
        if (editor) {
            if ("dispose" in editor && typeof editor.dispose === "function") {
                // Dispose Monaco editor.
                await editor.dispose();
                observer?.disconnect();
            }
            else if ("destroy" in editor && typeof editor.destroy === "function") {
                // Dispose Ace editor.
                await editor.destroy();
            }
        }

        if (editorWrapper.value) {
            editorWrapper.value.innerHTML = "";
        }

        if (props.editor == "ace") {
            await loadAce();
            editor = window.ace.edit(codeEditorId.value);
            editor.setTheme(`ace/theme/${themeName.value}`);
            editor.getSession().setMode(`ace/mode/${modeName.value}`);
            editor.getSession().setUseWrapMode(!props.noLineWrap);
            editor.setShowPrintMargin(false);
            editor.setReadOnly(props.disabled);

            // Disable warning about block scrolling.
            editor.$blockScrolling = Infinity;

            // Add custom command to toggle fullscreen mode.
            editor.commands.addCommand({
                name: "Toggle Fullscreen",
                bindKey: "F11",
                exec: async () => {
                    if (isFullscreen()) {
                        exitFullscreen();
                    }
                    else {
                        enterFullscreen(editor.container, () => editor.resize());
                    }

                    editor.resize();
                }
            });

            // Whenever the content of the editor changes, update our value.
            editor.getSession().on("change", () => {
                updateRefValue(internalValue, editor.getValue());
            });

            // Fix issue when code editor is inside a modal.
            nextTick(() => {
                editor.resize();
            });
        }
        else if (props.editor == "monaco") {
            await loadMonaco();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            editor = monacoImport.value.editor.create(editorWrapper.value, {
                value: internalValue.value,
                language: modeName.value,
                theme: themeName.value,
                wordWrap: props.noLineWrap ? "off" : "on",
                readOnly: props.disabled,
                minimap: {
                    enabled: false
                }
            });

            editor.onEndUpdate(() => {
                updateRefValue(internalValue, editor.getValue());
            });

            observer = new ResizeObserver(() => {
                editor.layout();
            });

            observer.observe(editorWrapper.value!);
        }
    }

    onMounted(initialize);

</script>
