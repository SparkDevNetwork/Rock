<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <BaseAsyncPicker v-if="isPickerVisible"
                     v-model="internalValue"
                     v-bind="standardProps"
                     :displayStyle="displayStyle"
                     :items="actualItems" />
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { PickerDisplayStyle } from "@Obsidian/Enums/Controls/pickerDisplayStyle";
    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { areEqual } from "@Obsidian/Utility/guid";
    import { useHttp } from "@Obsidian/Utility/http";
    import { useSuspense } from "@Obsidian/Utility/suspense";
    import { containsRequiredRule } from "@Obsidian/ValidationRules";
    import { CampusPickerItemBag } from "@Obsidian/ViewModels/Controls/campusPickerItemBag";
    import { CampusPickerGetCampusesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/campusPickerGetCampusesOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, computed, ref } from "vue";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";

    const props = defineProps({
        /** The currently selected campus value(s). */
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        /** Forces the picker to be displayed even if only one campus can be selected. */
        forceVisible: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** If true then inactive campuses will be included in the list of options. */
        includeInactive: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Campus type defined value guids that limit which campuses are included in the list of options. */
        campusTypeFilter: {
            type: [String, Array] as PropType<Guid | Guid[]>,
            required: false
        },

        /** Campus status defined value guids that limit which campuses are included in the list of options. */
        campusStatusFilter: {
            type: [String, Array] as PropType<Guid | Guid[]>,
            required: false
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag | ListItemBag[] | null): void,
        (e: "isVisible", value: boolean): void
    }>();

    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const standardProps = useStandardAsyncPickerProps(props);
    const http = useHttp();
    const loadedItems = ref<CampusPickerItemBag[] | null>(null);

    // #endregion

    // #region Computed Values

    /**
     * The actual items to make available to the picker. This allows us to do any
     * post-processing, such as adding additional items, and still be lazy loaded as well.
     */
    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {
        if (loadedItems.value) {
            return filterAndConvertItems(loadedItems.value);
        }

        return loadOptions;
    });

    const displayStyle = computed((): PickerDisplayStyle => {
        if (standardProps.displayStyle !== PickerDisplayStyle.Auto) {
            return standardProps.displayStyle;
        }

        return standardProps.multiple ? PickerDisplayStyle.List : PickerDisplayStyle.Auto;
    });

    const isPickerVisible = computed((): boolean => {
        if (props.forceVisible) {
            emit("isVisible", true);
            return true;
        }

        if (!loadedItems.value) {
            emit("isVisible", false);
            return false;
        }

        const isVisible = filterAndConvertItems(loadedItems.value).length > 1;
        emit("isVisible", isVisible);
        return isVisible;
    });

    const calculatedStatusFilters = computed((): Guid[] => {
        if (!props.campusStatusFilter) {
            return [];
        }
        else if (Array.isArray(props.campusStatusFilter)) {
            return [...props.campusStatusFilter];
        }
        else {
            return [props.campusStatusFilter];
        }
    });

    const calculatedTypeFilters = computed((): Guid[] => {
        if (!props.campusTypeFilter) {
            return [];
        }
        else if (Array.isArray(props.campusTypeFilter)) {
            return [...props.campusTypeFilter];
        }
        else {
            return [props.campusTypeFilter];
        }
    });

    // #endregion

    // #region Functions

    /**
     * Loads the items from the server.
     */
    async function loadOptions(): Promise<ListItemBag[]> {
        const options: Partial<CampusPickerGetCampusesOptionsBag> = {
        };
        const result = await http.post<CampusPickerItemBag[]>("/api/v2/Controls/CampusPickerGetCampuses", undefined, options);

        if (result.isSuccess && result.data) {
            loadedItems.value = result.data;

            const items = filterAndConvertItems(result.data);

            const noSelection = !internalValue.value
                || (Array.isArray(internalValue.value) && !internalValue.value.length)
                || (!Array.isArray(internalValue.value) && !internalValue.value.value);

            // If no selection and there is only one value and we are required, select it.
            if (noSelection && containsRequiredRule(props.rules) && items.length === 1) {
                internalValue.value = items[0];
            }

            return items;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            loadedItems.value = [];
            return [];
        }
    }

    /**
     * Filters the campuses based on property settings and then converts them
     * to plain ListItemBag objects.
     *
     * @param campuses The collection of campuses to be filtered.
     *
     * @returns The filtered campuses as ListItemBag objects.
     */
    function filterAndConvertItems(campuses: CampusPickerItemBag[]): ListItemBag[] {
        return campuses.filter(isCampusIncluded).map(c => ({
            value: c.value,
            text: c.text
        }));
    }

    /**
     * Check is the campus should be included in the list based on the
     * current settings provided.
     *
     * @param campus The campus to be filtered.
     *
     * @returns True if the campus should be included; otherwise false.
     */
    function isCampusIncluded(campus: CampusPickerItemBag): boolean {
        let isIncluded = true;
        const currentValues = !internalValue.value ? [] : (Array.isArray(internalValue.value) ? internalValue.value.map(c => c.value) : [internalValue.value.value]);

        // No early bailout otherwise the computed() call will not track
        // dependencies properly.

        if (!props.includeInactive && !campus.isActive) {
            isIncluded = false;
        }

        if (calculatedStatusFilters.value.length > 0) {
            if (!calculatedStatusFilters.value.some(g => areEqual(g, campus.campusStatus))) {
                isIncluded = false;
            }
        }

        if (calculatedTypeFilters.value.length > 0) {
            if (!calculatedTypeFilters.value.some(g => areEqual(g, campus.campusType))) {
                isIncluded = false;
            }
        }

        // If the campus is currently selected, then keep it in the list even if
        // it would otherwise be filtered out.
        if (currentValues.some(g => areEqual(g, campus.value))) {
            isIncluded = true;
        }

        return isIncluded;
    }

    // #endregion

    // If we do not have an option set that would force us to always be
    // visible then perform some custom logic.
    if (!props.forceVisible) {
        // At this point the base picker will be not be instantiated yet.
        // Start loading the options so we can determine if we should
        // be visible or not.
        const suspense = useSuspense();

        if (suspense) {
            suspense.addOperation(loadOptions());
        }
        else {
            loadOptions();
        }
    }
</script>
