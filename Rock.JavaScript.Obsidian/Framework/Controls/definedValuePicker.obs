<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <template v-if="allowAdd && isShowingAddForm">
        <RockLabel :help="help">{{ label }}</RockLabel>
        <Loading :isLoading="isLoading" class="well">
            <NotificationBox v-if="fetchError" alertType="danger">Error: {{ fetchError }}</NotificationBox>
            <NotificationBox v-else-if="saveError" alertType="danger">Error: {{ saveError }}</NotificationBox>

            <RockForm v-else @submit="saveNewValue">
                <TextBox label="Value" v-model="newValue" rules="required" />
                <TextBox label="Description" v-model="newDescription" textMode="multiline" />
                <AttributeValuesContainer v-if="attributes != null" v-model="attributeValues" :attributes="attributes" isEditMode :showCategoryLabel="false" />
                <RockButton type="submit" :btnType="BtnType.Primary" :btnSize="BtnSize.ExtraSmall">Add</RockButton>
                <RockButton :btnType="BtnType.Link" :btnSize="BtnSize.ExtraSmall" @click="hideAddForm">Cancel</RockButton>
            </RockForm>

            <RockButton v-if="fetchError || saveError" :btnType="BtnType.Link" :btnSize="BtnSize.ExtraSmall" @click="hideAddForm">Cancel</RockButton>
        </Loading>
    </template>

    <template v-else>
        <BaseAsyncPicker v-model="internalValue" v-bind="standardProps" :items="itemsSource" :disabled="disabled">
            <template #inputGroupAppend v-if="allowAdd">
                <span class="input-group-btn">
                    <RockButton @click="showAddForm" :btnType="BtnType.Default" aria-label="Add Item"><i class="fa fa-plus" aria-hidden></i></RockButton>
                </span>
            </template>
            <template #append="{ isInputGroupSupported }" v-if="allowAdd">
                <RockButton v-if="!isInputGroupSupported" @click="showAddForm" :btnType="BtnType.Link">Add Item</RockButton>
            </template>
        </BaseAsyncPicker>
    </template>
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { useSecurityGrantToken } from "@Obsidian/Utility/block";
    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { useHttp } from "@Obsidian/Utility/http";
    import { DefinedValuePickerGetDefinedValuesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/definedValuePickerGetDefinedValuesOptionsBag";
    import { DefinedValuePickerSaveNewValueOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/definedValuePickerSaveNewValueOptionsBag";
    import { DefinedValuePickerGetAttributesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/definedValuePickerGetAttributesOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, ref, watch } from "vue";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";
    import RockLabel from "./rockLabel.obs";
    import RockForm from "./rockForm.obs";
    import AttributeValuesContainer from "./attributeValuesContainer.obs";
    import TextBox from "./textBox.obs";
    import RockButton from "./rockButton.obs";
    import Loading from "./loading.obs";
    import NotificationBox from "./notificationBox.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },

        definedTypeGuid: {
            type: String as PropType<Guid>,
            required: false
        },

        allowAdd: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", _value: ListItemBag | ListItemBag[] | null): void
    }>();

    const http = useHttp();

    // #region Picker

    const standardProps = useStandardAsyncPickerProps(props);
    const securityGrantToken = useSecurityGrantToken();
    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const itemsSource = ref<(() => Promise<ListItemBag[]>) | null>(null);

    async function loadItems(): Promise<ListItemBag[]> {
        const options: Partial<DefinedValuePickerGetDefinedValuesOptionsBag> = {
            definedTypeGuid: props.definedTypeGuid,
            securityGrantToken: securityGrantToken.value
        };
        const url = "/api/v2/Controls/DefinedValuePickerGetDefinedValues";
        const result = await http.post<ListItemBag[]>(url, undefined, options);

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            return [];
        }
    }

    function fetchValues(): void {
        itemsSource.value = () => loadItems();
    }

    watch(() => props.definedTypeGuid, fetchValues);

    fetchValues();

    // #endregion

    // #region Add Value

    const isShowingAddForm = ref(false);
    const isLoading = ref(false);
    const fetchError = ref<false | string>(false);
    const saveError = ref<false | string>(false);

    async function showAddForm(): Promise<void> {
        if (!props.allowAdd) return;

        isShowingAddForm.value = true;

        if (attributes.value == null) {
            isLoading.value = true;
            fetchError.value = false;
            saveError.value = false;

            const options: Partial<DefinedValuePickerGetAttributesOptionsBag> = {
                definedTypeGuid: props.definedTypeGuid,
                securityGrantToken: securityGrantToken.value
            };
            const url = "/api/v2/Controls/DefinedValuePickerGetAttributes";
            const result = await http.post<PublicAttributeBag[]>(url, undefined, options);

            if (result.isSuccess && result.data) {
                attributes.value = result.data.reduce(function (acc, val) {
                    acc[val.key as string] = val;
                    return acc;
                }, {});
            }
            else {
                attributes.value = null;
                fetchError.value = "Unable to fetch attribute data.";
            }

            isLoading.value = false;
        }
    }

    function hideAddForm(): void {
        isShowingAddForm.value = false;
        fetchError.value = false;
        saveError.value = false;
    }

    async function saveNewValue(): Promise<void> {
        isLoading.value = true;
        saveError.value = false;

        const options: Partial<DefinedValuePickerSaveNewValueOptionsBag> = {
            definedTypeGuid: props.definedTypeGuid,
            securityGrantToken: securityGrantToken.value,
            value: newValue.value,
            description: newDescription.value,
            attributeValues: attributeValues.value
        };
        const url = "/api/v2/Controls/DefinedValuePickerSaveNewValue";
        const result = await http.post<ListItemBag>(url, undefined, options);

        if (result.isSuccess && result.data) {
            fetchValues();

            if (props.multiple) {
                if (Array.isArray(internalValue.value)) {
                    internalValue.value.push(result.data);
                }
                else {
                    internalValue.value = [result.data];
                }
            }
            else {
                internalValue.value = result.data;
            }

            hideAddForm();
            newValue.value = "";
            newDescription.value = "";
            attributeValues.value = {};
        }
        else {
            saveError.value = "Unable to save new Defined Value.";
        }

        isLoading.value = false;
    }


    const attributes = ref<Record<string, PublicAttributeBag> | null>(null);
    const attributeValues = ref<Record<string, string>>({});
    const newValue = ref("");
    const newDescription = ref("");

    // #endregion
</script>
