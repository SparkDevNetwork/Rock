<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <template v-if="allowAdd && isShowingAddForm">
        <DefinedValueEditor :definedTypeGuid="toGuidOrNull(definedTypeGuid) ?? emptyGuid" :label="label" :help="help" @save="selectNewValue" @cancel="hideAddForm" />
    </template>

    <template v-else>
        <BaseAsyncPicker v-model="internalValue" v-bind="standardProps" :items="itemsSource" :disabled="disabled">
            <template #inputGroupAppend v-if="allowAdd">
                <span class="input-group-btn">
                    <RockButton @click="showAddForm" :btnType="BtnType.Default" aria-label="Add Item"><i class="fa fa-plus" aria-hidden></i></RockButton>
                </span>
            </template>
            <template #append="{ isInputGroupSupported }" v-if="allowAdd">
                <RockButton v-if="!isInputGroupSupported" @click="showAddForm" :btnType="BtnType.Link">Add Item</RockButton>
            </template>
        </BaseAsyncPicker>
    </template>
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { useSecurityGrantToken } from "@Obsidian/Utility/block";
    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { useHttp } from "@Obsidian/Utility/http";
    import { DefinedValuePickerGetDefinedValuesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/definedValuePickerGetDefinedValuesOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, ref, watch } from "vue";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";
    import RockButton from "./rockButton.obs";
    import DefinedValueEditor from "./Internal/definedValueEditor.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        definedTypeGuid: {
            type: String as PropType<Guid>,
            required: true
        },

        allowAdd: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", _value: ListItemBag | ListItemBag[] | null): void
    }>();

    const http = useHttp();

    // #region Picker

    const standardProps = useStandardAsyncPickerProps(props);
    const securityGrantToken = useSecurityGrantToken();
    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const itemsSource = ref<(() => Promise<ListItemBag[]>) | null>(null);

    async function loadItems(): Promise<ListItemBag[]> {
        const options: DefinedValuePickerGetDefinedValuesOptionsBag = {
            definedTypeGuid: toGuidOrNull(props.definedTypeGuid) ?? emptyGuid,
            securityGrantToken: securityGrantToken.value,
            includeInactive: false,
        };
        const url = "/api/v2/Controls/DefinedValuePickerGetDefinedValues";
        const result = await http.post<ListItemBag[]>(url, undefined, options);

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            return [];
        }
    }

    function fetchValues(): void {
        itemsSource.value = () => loadItems();
    }

    watch(() => props.definedTypeGuid, fetchValues);

    fetchValues();

    // #endregion

    // #region Add Value

    const isShowingAddForm = ref(false);

    function showAddForm(): void {
        if (!props.allowAdd) {
            return;
        }

        isShowingAddForm.value = true;
    }

    function hideAddForm(): void {
        isShowingAddForm.value = false;
    }

    function selectNewValue(newValue: ListItemBag | null): void {
        if (!newValue) {
            return;
        }

        if (props.multiple) {
            if (Array.isArray(internalValue.value)) {
                internalValue.value.push(newValue);
            }
            else {
                internalValue.value = [newValue];
            }
        }
        else {
            internalValue.value = newValue;
        }

        hideAddForm();
    }

    // #endregion
</script>
