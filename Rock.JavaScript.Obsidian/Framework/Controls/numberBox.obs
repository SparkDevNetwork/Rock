<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField
                   :modelValue="internalValue"
                   formGroupClasses="rock-number-box"
                   name="numberbox"
                   :validationTitle="validationTitle"
                   :rules="computedRules">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <slot name="prepend" />
                <div :class="controlContainerClass">
                    <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                    <input
                           :value="internalValue"
                           :id="uniqueId"
                           type="text"
                           class="form-control"
                           :class="inputClasses"
                           v-bind="field"
                           inputmode="decimal"
                           :placeholder="placeholder"
                           :step="internalStep"
                           :min="minimumValue"
                           :max="maximumValue"
                           @input="onInput"
                           @change="onChange"
                           @blur="formatInternalValue" />
                    <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                </div>
                <slot name="append" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, useSlots, watch } from "vue";
    import { normalizeRules, rulesPropType, ValidationRule } from "@Obsidian/ValidationRules";
    import { asFormattedString, toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import RockFormField from "./rockFormField.obs";

    const props = defineProps({
        modelValue: {
            type: Number as PropType<number | null>,
            default: null
        },
        /** Internal use to track what modifier flags were applied to modelValue. */
        modelModifiers: {
            type: Object as PropType<Record<string, boolean>>,
            default: () => ({})
        },
        placeholder: {
            type: String as PropType<string>,
            default: ""
        },
        /** The minimum allowed value to be entered. */
        minimumValue: {
            type: Number as PropType<number | null>
        },
        maximumValue: {
            type: Number as PropType<number | null>
        },
        /** The number of decimal places allowed. */
        decimalCount: {
            type: Number as PropType<number | null>,
            default: null
        },
        inputClasses: {
            type: String as PropType<string>,
            default: ""
        },
        inputGroupClasses: {
            type: String as PropType<string>,
            default: ""
        },
        validationTitle: {
            type: String as PropType<string>,
            default: ""
        },
        rules: rulesPropType
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: number | null): void;
    }>();

    const slots = useSlots();
    const internalValue = ref(formatNumber(props.modelValue));

    const internalNumberValue = computed((): number | null => {
        return toNumberOrNull(internalValue.value);
    });

    const internalStep = computed((): string => {
        return props.decimalCount === null ? "any" : (1 / Math.pow(10, props.decimalCount)).toString();
    });

    const isInputGroup = computed((): boolean => {
        return !!slots.inputGroupPrepend || !!slots.inputGroupAppend;
    });

    const controlContainerClass = computed((): string => {
        return isInputGroup.value ? `input-group ${props.inputGroupClasses}` : "";
    });

    const computedRules = computed((): ValidationRule[] => {
        const rules = normalizeRules(props.rules);

        rules.push("number");

        if (props.maximumValue != null) {
            rules.push(`lte:${props.maximumValue}`);
        }

        if (props.minimumValue != null) {
            rules.push(`gte:${props.minimumValue}`);
        }

        return rules;
    });

    function formatNumber(num: number | null): string {
        return asFormattedString(num, props.decimalCount ?? undefined, { useGrouping: false });
    }

    function formatInternalValue(): void {
        if (internalNumberValue.value !== null) {
            internalValue.value = formatNumber(internalNumberValue.value);
        }
    }

    /**
     * Event handler for the input field having any modification to the value
     * happen. This is basically called on every key press.
     *
     * @param e The object that describes the event.
     */
    function onInput(e: Event): void {
        if (e.target instanceof HTMLInputElement) {
            internalValue.value = e.target.value;
        }

        // Lazy models do not get every single key press.
        if (!props.modelModifiers.lazy) {
            emit("update:modelValue", internalNumberValue.value);
        }
    }

    /**
     * Event handler for the input field when the changed value is "committed".
     * This is basically called when the focus leaves the input field.
     *
     * @param e The object that describes the event.
     */
    function onChange(e: Event): void {
        if (e.target instanceof HTMLInputElement) {
            internalValue.value = e.target.value;
        }

        formatInternalValue();

        // Only send the update if we didn't send it in the onInput handler.
        if (props.modelModifiers.lazy) {
            emit("update:modelValue", internalNumberValue.value);
        }
    }

    watch(() => props.modelValue, () => {
        if (props.modelValue !== internalNumberValue.value) {
            internalValue.value = formatNumber(props.modelValue);
        }
    });

    watch(() => props.decimalCount, () => {
        formatInternalValue();
    });
</script>
