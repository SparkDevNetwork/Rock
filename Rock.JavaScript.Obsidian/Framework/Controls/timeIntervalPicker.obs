<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-bind="standardFieldProps" name="maxAge" :modelValue="internalValue">
        <div class="input-group d-flex">
            <NumberBox v-model="value" inputClasses="input-width-md min-w-0 border-right-0 rounded-left" />
            <DropDownList v-model="unit" :items="options" inputClasses="rounded-0 rounded-right input-width-sm" :showBlankItem="false" />
        </div>
    </RockFormField>
</template>

<script setup lang="ts">
    import { PropType, computed } from "vue";
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { toNumber } from "@Obsidian/Utility/numberUtils";
    import { TimeIntervalBag } from "@Obsidian/ViewModels/Utility/timeIntervalBag";
    import { TimeIntervalUnit } from "@Obsidian/Enums/Core/timeIntervalUnit";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<TimeIntervalBag>,
            required: true
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", _value: TimeIntervalBag): void
    }>();

    const internalValue = computed<TimeIntervalBag>({
        get() {
            return props.modelValue;
        },
        set(newValue) {
            emit("update:modelValue", newValue);
        }
    });

    const value = computed<TimeIntervalBag["value"]>({
        get() {
            return internalValue.value.value;
        },
        set(newValue) {
            internalValue.value = {
                unit: internalValue.value.unit,
                value: newValue
            };
        }
    });

    const unit = computed<`${TimeIntervalBag["unit"]}`>({
        get() {
            return `${internalValue.value.unit ?? TimeIntervalUnit.Minutes}`;
        },
        set(newValue) {
            internalValue.value = {
                unit: toNumber(newValue) as TimeIntervalUnit,
                value: internalValue.value.value
            };
        }
    });

    const options: ListItemBag[] = [
        { text: "Secs", value: TimeIntervalUnit.Seconds.toString() },
        { text: "Mins", value: TimeIntervalUnit.Minutes.toString() },
        { text: "Hours", value: TimeIntervalUnit.Hours.toString() },
        { text: "Days", value: TimeIntervalUnit.Days.toString() },
    ];

    const standardFieldProps = useStandardRockFormFieldProps(props);
</script>
