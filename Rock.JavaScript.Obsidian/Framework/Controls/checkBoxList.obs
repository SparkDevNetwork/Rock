<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="internalValue"
                   v-bind="standardProps"
                   formGroupClasses="check-box-list"
                   name="check-box-list">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <slot name="prepend" :isInputGroupSupported="false" />
                <div class="controls rockcheckboxlist" :class="containerClasses">
                    <template v-if="horizontal">
                        <label v-for="item in items" class="checkbox-inline" :for="uniqueIdForItem(uniqueId, item)">
                            <input v-bind="field" :disabled="disabled" :id="uniqueIdForItem(uniqueId, item)" :name="uniqueId" type="checkbox" :value="valueForItem(item)" v-model="internalValue" />
                            <span class="label-text">{{ textForItem(item) }}</span>
                        </label>
                    </template>
                    <template v-else>
                        <div v-for="item in items" class="checkbox">
                            <label :for="uniqueIdForItem(uniqueId, item)" :class="labelClasses(item)">
                                <input v-bind="field" :disabled="disabled" :id="uniqueIdForItem(uniqueId, item)" :name="uniqueId" type="checkbox" :value="valueForItem(item)" v-model="internalValue" />
                                <span class="label-text">{{ textForItem(item) }}</span>
                            </label>
                        </div>
                    </template>
                </div>
                <slot name="append" :isInputGroupSupported="false" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { computed, PropType, ref, watch } from "vue";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import RockFormField from "./rockFormField.obs";
    import { defaultControlCompareValue } from "@Obsidian/Utility/stringUtils";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";

    const props = defineProps({
        modelValue: {
            type: Array as PropType<string[]>,
            default: []
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            required: false,
            default: false
        },

        items: {
            type: Array as PropType<Array<ListItemBag>>,
            required: true
        },

        repeatColumns: {
            type: Number as PropType<number>,
            default: 0
        },

        horizontal: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        displayAsCheckList: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        compareValue: {
            type: Function as PropType<((value: string, itemValue: string) => boolean)>,
            default: defaultControlCompareValue
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string[]): void;
    }>();

    const internalValue = ref([...props.modelValue]);

    const standardProps = useStandardRockFormFieldProps(props);

    const valueForItem = (item: ListItemBag): string => item.value ?? "";
    const textForItem = (item: ListItemBag): string => item.text ?? "";

    const uniqueIdForItem = (uniqueId: Guid, item: ListItemBag): string => `${uniqueId}-${(item.value ?? "").replace(" ", "-")}`;

    const containerClasses = computed(() => {
        const classes: string[] = [];

        if (props.repeatColumns > 0) {
            classes.push(`in-columns in-columns-${props.repeatColumns}`);
        }

        return classes.join(" ");
    });

    const labelClasses = (item: ListItemBag): string => {
        const classes: string[] = [];
        if (props.displayAsCheckList && internalValue.value.includes(item.value ?? "")) {
            classes.push("text-linethrough");
        }

        return classes.join(" ");
    };

    const syncInternalValue = (): void => {
        let value = [...props.modelValue];

        // Ensure they are all valid values and make sure they are the
        // correct matching value from the item rather than what was
        // originally provided.
        value = props.items
            .filter(o => value.some(v => props.compareValue(v, o.value ?? "")))
            .map(o => o.value ?? "");

        updateRefValue(internalValue, value);
    };

    watch([() => props.modelValue, () => props.items], () => {
        syncInternalValue();
    });

    watch(internalValue, () => {
        emit("update:modelValue", internalValue.value);
    });

    syncInternalValue();
</script>
