<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <teleport to="body" v-if="showOverlay">
        <div class="modal-backdrop fade" style="z-index: 1060;"></div>

        <div @click="maybeClose('click')" @keydown.esc="maybeClose('key')" class="modal-scrollable" style="z-index: 1060;">
            <div @click.stop ref="modalDiv" class="modal fade" :class="{ 'animated shake': doShake, 'in': fadeIn }" tabindex="-1" role="dialog" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div v-if="hasHeader" class="modal-header">
                            <button v-if="dismissible" @click="close" type="button" class="close" style="margin-top: -10px;">×</button>
                            <slot name="header" />
                        </div>
                        <div class="modal-body">
                            <button v-if="!hasHeader && dismissible" @click="close" type="button" class="close" style="margin-top: -10px;">×</button>
                            <slot />
                        </div>
                        <div v-if="$slots.footer" class="modal-footer">
                            <slot name="footer" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </teleport>
</template>

<script setup lang="ts">
    import { computed, nextTick, PropType, ref, useSlots, watch } from "vue";
    import { trackModalState } from "@Obsidian/Utility/page";

    const props = defineProps({
        modelValue: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        dismissible: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        enableOuterDismiss: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: boolean): void;
    }>();

    const slots = useSlots();
    const showOverlay = ref(props.modelValue);
    const doShake = ref(false);
    const modalDiv = ref<HTMLElement | null>(null);

    const hasHeader = computed(() => !!slots.header);
    const fadeIn = ref(props.modelValue);

    const close = (): void => {
        emit("update:modelValue", false);
    };

    const shake = (): void => {
        if (!doShake.value) {
            doShake.value = true;
            setTimeout(() => doShake.value = false, 1000);
        }
    };

    const maybeClose = (event: "key" | "click"): void => {
        if (props.enableOuterDismiss) {
            return close();
        }

        if (event === "click") {
            shake();
        }
    };

    const animateIn = (): void => {
        showOverlay.value = true;

        nextTick(() => {
            fadeIn.value = true;

            if (!modalDiv.value) {
                return;
            }

            const height = modalDiv.value.offsetHeight;
            const bodyHeight = document.body.offsetHeight;

            // Pin it to the top if the modal is taller than the body so we don't end up making it impossible to see
            // the top of it because of too large of a negative margin.
            if (bodyHeight < height) {
                modalDiv.value.style.marginTop = "0";
                modalDiv.value.style.top = "0";
            }
            else {
                modalDiv.value.style.marginTop = `-${height / 2}px`;
            }
        });
    };

    const animateOut = (): void => {
        fadeIn.value = false;

        if (!modalDiv.value) {
            showOverlay.value = false;
            return;
        }

        // Wait for the animation to finish before removing the modal
        setTimeout(() => showOverlay.value = false, 300);
    };

    if (props.modelValue) {
        trackModalState(true);
    }

    watch(() => props.modelValue, () => {
        trackModalState(props.modelValue);

        if (props.modelValue) {
            animateIn();
        }
        else {
            animateOut();
        }
    });
</script>
