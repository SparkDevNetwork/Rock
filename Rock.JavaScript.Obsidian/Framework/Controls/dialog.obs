<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <teleport to="body" v-if="modelValue">
        <div class="modal-backdrop fade in" style="z-index: 1060;"></div>

        <div @click="shake" class="modal-scrollable" style="z-index: 1060;">
            <div @click.stop ref="modalDiv" class="modal fade in" :class="{ 'animated shake': doShake }" tabindex="-1" role="dialog" style="display: block;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div v-if="hasHeader" class="modal-header">
                            <button v-if="dismissible" @click="close" type="button" class="close" style="margin-top: -10px;">×</button>
                            <slot name="header" />
                        </div>
                        <div class="modal-body">
                            <button v-if="!hasHeader && dismissible" @click="close" type="button" class="close" style="margin-top: -10px;">×</button>
                            <slot />
                        </div>
                        <div v-if="$slots.footer" class="modal-footer">
                            <slot name="footer" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </teleport>
</template>

<script setup lang="ts">
    import { computed, nextTick, PropType, ref, useSlots, watch } from "vue";
    import { trackModalState } from "@Obsidian/Utility/page";

    const props = defineProps({
        modelValue: {
            type: Boolean as PropType<boolean>,
            required: true
        },

        dismissible: {
            type: Boolean as PropType<boolean>,
            default: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: boolean): void;
    }>();

    const slots = useSlots();
    const doShake = ref(false);
    const modalDiv = ref<HTMLElement | null>(null);

    const hasHeader = computed(() => !!slots.header);

    const close = (): void => {
        emit("update:modelValue", false);
    };

    const shake = (): void => {
        if (!doShake.value) {
            doShake.value = true;
            setTimeout(() => doShake.value = false, 1000);
        }
    };

    const centerOnScreen = (): void => {
        nextTick(() => {
            if (!modalDiv.value) {
                return;
            }

            const height = modalDiv.value.offsetHeight;
            const margin = height / 2;
            modalDiv.value.style.marginTop = `-${margin}px`;
        });
    };

    if (props.modelValue) {
        trackModalState(true);
    }

    watch(() => props.modelValue, () => {
        trackModalState(props.modelValue);
        if (props.modelValue) {
            centerOnScreen();
        }
    });
</script>
