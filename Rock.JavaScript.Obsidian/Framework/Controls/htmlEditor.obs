<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-model="internalValue"
                   :formGroupClasses="`html-editor ${formGroupClasses}`"
                   name="html-editor">
        <template #default="{ uniqueId, field }">
            <NotificationBox v-if="isCodeEditorWarningShown && !isCodeEditorWarningDismissed"
                             alertType="warning"
                             :dismissible="true"
                             @dismiss="isCodeEditorWarningDismissed = true">
                The markup contains content that may not be compatible with the visual editor.
            </NotificationBox>

            <div class="control-wrapper">
                <div class="note-editor-container">
                    <div class="note-editor note-frame panel panel-default">
                        <div :id="assignToolbarId(uniqueId)"
                             class="panel-heading note-toolbar"
                             ref="toolbarElement"></div>

                        <div class="note-editing-area">
                            <EditSourceCodePlugin v-model="internalValue"
                                                  :disabled="disabled"
                                                  :editorHeight="editorHeight + yOffset"
                                                  :mergeFields="mergeFields"
                                                  ref="editSourceCodePlugin"
                                                  :startInCodeEditorMode="startInCodeEditorMode"
                                                  :isTogglableCodeEditorForced="isTogglableCodeEditorForced"
                                                  @preventToggleOff="onPreventCodeEditorToggleOff">
                                <template #default="{ isEditorShown }">
                                    <div v-show="!updateIsEditorShown(isEditorShown)"
                                         class="note-editable"
                                         :id="assignEditorId(uniqueId)"
                                         ref="editorElement"></div>
                                </template>
                            </EditSourceCodePlugin>
                        </div>

                        <div class="note-statusbar" ref="resizerElement" role="status">
                            <div aria-label="Resize" class="note-resizebar">
                                <div class="note-icon-bar"></div>
                                <div class="note-icon-bar"></div>
                                <div class="note-icon-bar"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <ParagraphPlugin ref="paragraphPlugin" />

            <PasteAsPlainTextPlugin ref="pasteAsPlainTextPlugin" />

            <MergeFieldPlugin :mergeFields="mergeFields" ref="mergeFieldPlugin" />

            <ImageBrowserPlugin ref="imageBrowserPlugin"
                                :encryptedRootFolder="encryptedImageRootFolder"
                                :userSpecificRoot="userSpecificRoot" />

            <FileBrowserPlugin ref="fileBrowserPlugin"
                               :encryptedRootFolder="encryptedDocumentRootFolder"
                               :userSpecificRoot="userSpecificRoot" />

            <AssetManagerPlugin ref="assetManagerPlugin" />

            <StylesheetsPlugin htmlCssReplacementSelector=".note-editor" bodyCssReplacementSelector=".note-editing-area" />

            <MetaTagsPlugin />

            <LavaLanguagePlugin />
        </template>
    </RockFormField>
</template>

<style scoped>
:deep(.tox.tox-tinymce-inline .tox-editor-header) {
    border: none;
}

.note-editable {
    height: v-bind(editorHeightCss);
}

.note-editor-container {
    position: relative;
}

.note-editor .note-toolbar {
    padding: 0;
}

:deep(.codeeditor-header) {
    display: none;
}
</style>

<script setup lang="ts">
    import { PropType, computed, onMounted, onUnmounted, ref, watch, watchEffect } from "vue";
    import NotificationBox from "./notificationBox.obs";
    import RockFormField from "./rockFormField.obs";
    import AssetManagerPlugin from "./NoteEditor/assetManagerPlugin.partial.obs";
    import EditSourceCodePlugin from "./NoteEditor/editSourceCodePlugin.partial.obs";
    import FileBrowserPlugin from "./NoteEditor/fileBrowserPlugin.partial.obs";
    import ImageBrowserPlugin from "./NoteEditor/imageBrowserPlugin.partial.obs";
    import LavaLanguagePlugin from "./NoteEditor/lavaLanguagePlugin.partial.obs";
    import MergeFieldPlugin from "./NoteEditor/mergeFieldPlugin.partial.obs";
    import MetaTagsPlugin from "./NoteEditor/metaTagsPlugin.partial.obs";
    import ParagraphPlugin from "./NoteEditor/paragraphPlugin.partial.obs";
    import PasteAsPlainTextPlugin from "./NoteEditor/pasteAsPlainTextPlugin.partial.obs";
    import StylesheetsPlugin from "./NoteEditor/stylesheetsPlugin.partial.obs";
    import { providePluginsFeature } from "./NoteEditor/utils.partial";
    import { tinymce, Editor, EditorEvent, Events, RawEditorOptions } from "@Obsidian/Libs/tinymce";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";

    type ToolbarConfig = "light" | "full";

    const props = defineProps({
        /** The HTML value. */
        modelValue: {
            type: String as PropType<string>,
            required: true
        },

        /**
         * One-way v-model for whether or not the editor is in code editor mode (vs Rich Text mode).
         * Value will be emitted, but values passed in will be ignored.
         */
        isInCodeEditorMode: {
            type: Boolean,
            default: false
        },

        /** Custom classes to add to the form group. */
        formGroupClasses: {
            type: String as PropType<string>,
            default: ""
        },

        /** Whether or not to disable the control. */
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Merge fields available for selection.
         * This should include either a list of entity type names (full name), or other non-object string values.
         *
         * Format for each string should be one of the following:
         * @example
         * "FieldName" // Label will be a case-delimited version of FieldName (i.e. "Field Name")
         * "FieldName|Label" // Same as previous but with a custom label.
         * "FieldName^EntityType" // Will evaluate the entity type and add a navigable tree for the object's properties and attributes. Label will be a case delimited version of FieldName (i.e. "Field Name").
         * "FieldName^EntityType|Label" // Same as previous but with a custom label.
         */
        mergeFields: {
            type: Array as PropType<string[] | undefined>,
            required: false
        },

        /** Editor height in pixels (not including toolbar). */
        editorHeight: {
            type: Number as PropType<number>,
            default: 600
        },

        /** When set to `true`, the code editor will be shown instead on initialization. */
        startInCodeEditorMode: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * The toolbar mode.
         * When set to "light", the toolbar will be a lighter more airy view.
         * When set to "full", the toolbar will display the full monty.
         */
        toolbar: {
            type: String as PropType<ToolbarConfig>,
            default: "light"
        },

        /**
         * The encrypted root folder path used for the file browser
         */
        encryptedDocumentRootFolder: {
            type: String,
            default: ""
        },

        /**
         * The encrypted root folder path used for the image browser
         */
        encryptedImageRootFolder: {
            type: String,
            // ~/Content
            default: ""
        },

        /**
         * If set to true, instead of using the given root directly, the root folder shown will be a
         * folder under the given root that is named after the current person's username. If the folder
         * does not exist, it will be created.
         */
        userSpecificRoot: {
            type: Boolean,
            default: false
        },

        /**
         * When set to true, the code editor allows toggling even if the content includes Lava commands,
         * bypassing any usual restrictions related to such content.
         */
        isTogglableCodeEditorForced: {
            type: Boolean,
            default: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void;
        (e: "update:isInCodeEditorMode", value: boolean): void;
    }>();

    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const editorId = ref<string | undefined>();
    const editorElement = ref<HTMLElement | undefined>();
    const toolbarId = ref<string | undefined>();
    const tinyMceInstance = ref<Editor | undefined>();
    const toolbarElement = ref<HTMLElement | undefined>();
    const isCodeEditorWarningDismissed = ref<boolean>(false);
    const isCodeEditorWarningShown = ref<boolean>(false);

    // Keep track of the TinyMCE value to compare with the modelValue.
    const tinyMceValue = ref<string | undefined>();
    const resizerElement = ref<HTMLElement | undefined>();
    const yOffset = ref<number>(0);
    const isEditorShown = ref<boolean>(false);

    // Plugins
    const pasteAsPlainTextPlugin = ref<InstanceType<typeof PasteAsPlainTextPlugin> | undefined>();
    const mergeFieldPlugin = ref<InstanceType<typeof MergeFieldPlugin> | undefined>();
    const paragraphPlugin = ref<InstanceType<typeof ParagraphPlugin> | undefined>();
    const editSourceCodePlugin = ref<InstanceType<typeof EditSourceCodePlugin> | undefined>();
    const imageBrowserPlugin = ref<InstanceType<typeof ImageBrowserPlugin> | undefined>();
    const fileBrowserPlugin = ref<InstanceType<typeof FileBrowserPlugin> | undefined>();
    const assetManagerPlugin = ref<InstanceType<typeof AssetManagerPlugin> | undefined>();

    // Provide helpers to plugins.
    const pluginManager = providePluginsFeature({
        editorInstance: computed(() => tinyMceInstance.value),
        toolbarElement: computed(() => toolbarElement.value)
    });

    //#endregion

    // #region Computed Values

    const editorHeightCss = computed<string>(() => {
        return `${props.editorHeight + yOffset.value}px`;
    });

    // #endregion

    // #region Functions

    /** Returns the ID assigned to the editor HTML element. */
    function assignEditorId(uniquePart: string): string {
        editorId.value = `html-editor-container-${uniquePart}`;
        return editorId.value;
    }

    /** Returns the ID assigned to the editor toolbar HTML element. */
    function assignToolbarId(uniquePart: string): string {
        toolbarId.value = `html-editor-toolbar-container-${uniquePart}`;
        return toolbarId.value;
    }

    /** Updates and returns the isEditorShown value. */
    function updateIsEditorShown(isShown: boolean): boolean {
        isEditorShown.value = isShown;
        emit("update:isInCodeEditorMode", isShown);
        return isEditorShown.value;
    }

    // #endregion

    // #region Event Handlers

    /** Event handler for the mouse being pressed while the pointer is inside the resize element. This starts the resize behavior. */
    function onResizeStart(_event: MouseEvent): void {
        document.addEventListener("mousemove", onResize);
        document.addEventListener("mouseup", onResizeEnd, { once: true });
    }

    /** Event handler for the mouse being moved while the resizer is being dragged. This resizes the editor. */
    function onResize(event: MouseEvent): void {
        yOffset.value += event.movementY;
    }

    /** Event handler for the mouse being released while the resizer is being dragged. This ends the resize behavior. */
    function onResizeEnd(_event: MouseEvent): void {
        document.removeEventListener("mousemove", onResize);
        resizerElement.value?.addEventListener("mousedown", onResizeStart, { once: true });
    }

    /** Event handler for the code editor toggle off being prevented. */
    function onPreventCodeEditorToggleOff(event: { isPrevented: boolean }): void {
        isCodeEditorWarningDismissed.value = false;
        isCodeEditorWarningShown.value = event.isPrevented;
    }

    // #endregion

    // #region Watchers

    // Update the editor content when the model value changes externally.
    watchEffect(() => {
        if (tinyMceInstance.value && !isEditorShown.value && tinyMceValue.value !== internalValue.value) {
            tinyMceInstance.value.setContent(internalValue.value);

            // Get the new content from the editor after setting it
            // just in case it gets manipulated by plugins.
            tinyMceValue.value = tinyMceInstance.value.getContent();
        }
    }, {
        // "post" will cause the effect to initially execute after the DOM is updated (after the editor is initialized).
        flush: "post"
    });

    // Clear the resize offset when the `editorHeight` prop changes.
    watch(() => props.editorHeight, () => {
        yOffset.value = 0;
    });

    // Disable the editor when the `disabled` prop changes.
    watch(() => props.disabled, () => {
        setEnabled(!props.disabled);
    }, {
        // "post" will cause the effect to initially execute after the DOM is updated (after the editor is initialized).
        flush: "post"
    });

    /** Sets the enabled state of the editor. */
    function setEnabled(isEnabled: boolean): void {
        if (tinyMceInstance.value && !isEditorShown.value) {
            // Enable/disable the toolbar and border.
            tinyMceInstance.value.ui?.setEnabled(isEnabled);

            // Enable/disable the content.
            const editorBody = tinyMceInstance.value.getBody();
            if (editorBody) {
                editorBody.setAttribute("contenteditable", `${isEnabled}`);
            }
        }
    }

    // Initialize the editor.
    // This gets called after the plugins have been mounted.
    onMounted(() => {
        if (editorId.value && toolbarId.value) {
            // Define the toolbar buttons depending on the toolbar config (light or full).
            // They are displayed in the order in which they are defined
            // and grouped using pipe (|) characters; e.g.,
            // {
            //   "ToolbarConfig": "spaceDelimitedButtonsInGroup1 | spaceDelimitedButtonsInGroup2 | ... | spaceDelimitedButtonsInGroupN"
            // }
            // FYI: Pasting from Word directly in the content area formats correctly,
            // so no need to create a rockpastefromword plugin at this point.
            // https://www.tiny.cloud/docs/tinymce/6/available-toolbar-buttons/
            const toolbarConfigs: Record<ToolbarConfig, string> = {
                "light": `${editSourceCodePlugin.value?.id} | bold italic strikethrough link forecolor backcolor styles numlist bullist | removeformat | ${paragraphPlugin.value?.id} | ${mergeFieldPlugin.value?.id} | ${imageBrowserPlugin.value?.id} ${fileBrowserPlugin.value?.id} ${assetManagerPlugin.value?.id} | ${pasteAsPlainTextPlugin.value?.id} | undo redo`,
                "full": `${editSourceCodePlugin.value?.id} | bold italic underline strikethrough numlist bullist link | undo redo | removeformat | styles forecolor backcolor | fontfamily fontsize superscript subscript table hr | ${paragraphPlugin.value?.id} | ${mergeFieldPlugin.value?.id} | ${imageBrowserPlugin.value?.id} ${fileBrowserPlugin.value?.id} ${assetManagerPlugin.value?.id} | ${pasteAsPlainTextPlugin.value?.id} | help`,
            };

            // Get the default system font.
            // This will add the "Default" option to the Font Family toolbar button.
            let defaultSystemFont: string = "";
            if (editorElement.value) {
                try {
                    defaultSystemFont = getComputedStyle(editorElement.value)?.fontFamily ?? "";
                }
                catch {
                    // Ignore error if unable to retrieve the default system font.
                }
            }

            let editorOptions: RawEditorOptions = {
                // Add the editor directly to the target element (instead of in an iframe)
                // by configuring an inline editor with a fixed toolbar.
                // An inline editor is preferred so the editor will inherit the Rock styles
                // and have access to the same APIs loaded in the page.
                // https://www.tiny.cloud/docs/tinymce/6/toolbar-configuration-options/#persistent-inline-editor-toolbar-options
                selector: `#${editorId.value}`,
                inline: true,
                fixed_toolbar_container: `#${toolbarId.value}`,
                toolbar_persist: true,
                toolbar_mode: "wrap",

                // The default skin CSS is loaded manually as an import in
                // @Obsidian/Libs/tinymce.ts, so no need to specify one here.
                skin: false,

                // Content CSS is not needed since TinyMCE is loaded inline (instead of in an iframe)
                // and will inherit global Rock styles.
                content_css: false,

                // Hide the header menu bar and the footer status bar (which includes the TinyMCE attribution).
                menubar: false,
                statusbar: false,

                // Allow the editor to be resizable: true - vertical, false - none, 'both' - horizontal & vertical
                resize: "both",

                // Only include the plugins that are needed to keep TinyMCE leaner.
                plugins: "image link lists media searchreplace table help",

                // Set the toolbar buttons.
                toolbar: toolbarConfigs[props.toolbar],

                // Define the options for the `fontfamily` toolbar button.
                // https://www.tiny.cloud/docs/tinymce/latest/user-formatting-options/#font_family_formats
                font_family_formats: `Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde; Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier;${defaultSystemFont ? ` Default=${defaultSystemFont};` : ""} Helvetica=helvetica; Impact=impact,chicago; Tahoma=tahoma,arial,helvetica,sans-serif; Times New Roman=times new roman,times; Verdana=verdana,geneva;`,

                // Define the options for the `fontsize` toolbar button.
                // https://www.tiny.cloud/docs/tinymce/latest/user-formatting-options/#font_size_formats
                font_size_formats: "8px 9px 10px 11px 12px 14px 16px 18px 24px 36px",

                // Define the options for the `styles` toolbar button.
                // This were chosen to match the previous HTML Editor control.
                // https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#style_formats
                style_formats: [
                    { title: "Normal", format: "p" },
                    { title: "Quote", block: "blockquote" },
                    { title: "Code", format: "pre" },
                    { title: "Heading 1", format: "h1" },
                    { title: "Heading 2", format: "h2" },
                    { title: "Heading 3", format: "h3" },
                    { title: "Heading 4", format: "h4" },
                    { title: "Heading 5", format: "h5" },
                    { title: "Heading 6", format: "h6" }
                ],

                // Define the options for the `forecolor` and `backcolor` toolbar buttons.
                // https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#text-color-options
                color_map: [
                    "#000000", "Black",
                    "#424242", "Tundora",
                    "#636363", "Dove Gray",
                    "#9C9C94", "Star Dust",
                    "#CEC6CE", "Pale Slate",
                    "#EFEFEF", "Gallery",
                    "#F7F7F7", "Alabaster",
                    "#FFFFFF", "White",

                    "#FF0000", "Red",
                    "#FF9C00", "Orange Peel",
                    "#FFFF00", "Yellow",
                    "#00FF00", "Green",
                    "#00FFFF", "Cyan",
                    "#0000FF", "Blue",
                    "#9C00FF", "Electric Violet",
                    "#FF00FF", "Magenta",

                    "#F7C6CE", "Azalea",
                    "#FFE7CE", "Karry",
                    "#FFEFC6", "Egg White",
                    "#D6EFD6", "Zanah",
                    "#CEDEE7", "Botticelli",
                    "#CEE7F7", "Tropical Blue",
                    "#D6D6E7", "Mischka",
                    "#E7D6DE", "Twilight",

                    "#E79C9C", "Tonys Pink",
                    "#FFC69C", "Peach Orange",
                    "#FFE79C", "Cream Brulee",
                    "#B5D6A5", "Sprout",
                    "#A5C6CE", "Casper",
                    "#9CC6EF", "Perano",
                    "#B5A5D6", "Cold Purple",
                    "#D6A5BD", "Careys Pink",

                    "#E76363", "Mandy",
                    "#F7AD6B", "Rajah",
                    "#FFD663", "Dandelion",
                    "#94BD7B", "Olivine",
                    "#73A5AD", "Gulf Stream",
                    "#6BADDE", "Viking",
                    "#8C7BC6", "Blue Marguerite",
                    "#C67BA5", "Puce",

                    "#CE0000", "Guardsman Red",
                    "#E79439", "Fire Bush",
                    "#EFC631", "Golden Dream",
                    "#6BA54A", "Chelsea Cucumber",
                    "#4A7B8C", "Smalt Blue",
                    "#3984C6", "Boston Blue",
                    "#634AA5", "Butterfly Bush",
                    "#A54A7B", "Cadillac",

                    "#9C0000", "Sangria",
                    "#B56308", "Mai Tai",
                    "#BD9400", "Buddha Gold",
                    "#397B21", "Forest Green",
                    "#104A5A", "Eden",
                    "#085294", "Venice Blue",
                    "#311873", "Meteorite",
                    "#731842", "Claret",

                    "#630000", "Rosewood",
                    "#7B3900", "Cinnamon",
                    "#846300", "Olive",
                    "#295218", "Parsley",
                    "#083139", "Tiber",
                    "#003163", "Midnight Blue",
                    "#21104A", "Valentino",
                    "#4A1031", "Loulou"
                ],
                color_default_background: "#FFFF00",
                color_default_foreground: "#000000",

                // Define the options for the `link` toolbar button.
                // https://www.tiny.cloud/docs/plugins/opensource/link/
                link_context_toolbar: true,
                link_assume_external_targets: "https",
                link_title: false,
                default_link_target: "_blank",
                target_list: [
                    { title: "New window", value: "_blank" },
                    { title: "Current window", value: "" },
                ],

                // Use original URL values instead of converting to local URLs.
                // https://www.tiny.cloud/docs/tinymce/latest/url-handling/#convert_urls
                convert_urls: false,

                // relative_urls is only used when convert_urls=true; however,
                // set relative_urls=false now to ensure convert_urls converts to absolute URLs if it is ever enabled.
                // https://www.tiny.cloud/docs/tinymce/latest/url-handling/#relative_urls
                relative_urls: false,

                // The callback that is executed when the editor is initialized.
                setup: (editor): void => {
                    // Keep track of the editor instance.
                    tinyMceInstance.value = editor;

                    // Add shortcuts that were available with the previous editor library.
                    // Adding all valid shortcut combinations so we can overwrite shortcuts
                    // that may have been assigned by other plugins.
                    // https://www.tiny.cloud/docs/tinymce/6/shortcuts/
                    // https://www.tiny.cloud/docs/tinymce/6/keyboard-shortcuts/

                    // Insert list shortcuts.
                    // https://www.tiny.cloud/docs/tinymce/6/lists/#commands
                    editor.addShortcut("access+8,shift+alt+8,alt+shift+8", "Inserts an ordered list into the editor.", (): void => {
                        editor.execCommand("InsertOrderedList", false, {
                            "list-style-type": "decimal"
                        });
                    });
                    editor.addShortcut("access+9,shift+alt+9,alt+shift+9", "Inserts an unordered list into the editor.", (): void => {
                        editor.execCommand("InsertUnorderedList", false, {
                            "list-style-type": "disc"
                        });
                    });

                    // Handle behavior that should occur after the editor is initialized.
                    editor.on("init", () => {
                        if (tinyMceInstance.value) {
                            // Set the initial value.
                            if (tinyMceValue.value !== internalValue.value) {
                                tinyMceInstance.value.setContent(internalValue.value);

                                // Get the new content from the editor after setting it
                                // just in case it gets manipulated by plugins.
                                tinyMceValue.value = tinyMceInstance.value.getContent();
                            }

                            // Set initial enabled state.
                            setEnabled(!props.disabled);
                        }
                    });

                    // Emit model updates when the editor content changes.
                    // https://www.tiny.cloud/docs/tinymce/6/events/
                    editor.on("change redo undo", (_e: EditorEvent<Events.ChangeEvent>): void => {
                        const newValue = editor.getContent();

                        if (tinyMceValue.value !== newValue) {
                            tinyMceValue.value = newValue;
                            internalValue.value = newValue;
                        }
                    });
                }
            };

            // Initialize Tiny MCE.
            tinymce.init(pluginManager.configureEditorOptions(editorOptions));
        }

        // Add vertical resizing.
        resizerElement.value?.addEventListener("mousedown", onResizeStart, { once: true });
    });

    // #endregion

    onUnmounted(() => {
        if (tinyMceInstance.value) {
            tinyMceInstance.value.destroy();
        }
    });
</script>