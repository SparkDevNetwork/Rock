<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <BaseAsyncPicker v-model="internalValue"
                     v-bind="standardProps"
                     grouped
                     :items="actualItems" />
</template>

<script setup lang="ts">
    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { Guid } from "@Obsidian/Types";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import { useHttp } from "@Obsidian/Utility/http";
    import { EntityTypePickerGetEntityTypesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/entityTypePickerGetEntityTypesOptionsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { computed, PropType, ref } from "vue";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        includeGlobalOption: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        entityTypeGuids: {
            type: Array as PropType<Guid[]>,
            default: []
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag | ListItemBag[] | null): void;
    }>();

    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const standardProps = useStandardAsyncPickerProps(props);
    const http = useHttp();
    const loadedItems = ref<ListItemBag[] | null>(null);

    // #endregion

    // #region Computed Values

    /**
     * The actual items to make available to the picker. This allows us to do any
     * post-processing, such as adding additional items, and still be lazy loaded as well.
     */
    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {
        return loadedItems.value ? postProcessItems(loadedItems.value) : loadOptions;
    });

    // #endregion

    // #region Functions

    /**
     * Perform additional processing on the items based on our property
     * settings.
     *
     * @param items The items to be processed.
     *
     * @returns A new array of items that have been processed.
     */
    const postProcessItems = (items: ListItemBag[]): ListItemBag[] => {
        const processedItems = [...items];

        if (props.includeGlobalOption) {
            processedItems.splice(0, 0, {
                value: emptyGuid,
                text: "None (Global Attributes)"
            });
        }

        return processedItems;
    };

    /**
     * Loads the items from the server.
     */
    const loadOptions = async (): Promise<ListItemBag[]> => {
        const options: Partial<EntityTypePickerGetEntityTypesOptionsBag> = {
            entityTypeGuids: props.entityTypeGuids
        };
        const result = await http.post<ListItemBag[]>("/api/v2/Controls/EntityTypePickerGetEntityTypes", undefined, options);

        if (result.isSuccess && result.data) {
            loadedItems.value = result.data;
            return postProcessItems(result.data);
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            loadedItems.value = [];
            return [];
        }
    };

    // #endregion
</script>
