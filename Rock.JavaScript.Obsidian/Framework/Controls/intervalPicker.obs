<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-bind="standardFieldProps" name="maxAge" :modelValue="internalValue">
        <div class="form-group range-slider">
            <RangeSlider v-model="value" :max="maxValue" showValueBar :step="1" />
        </div>
        <div class="text-right margin-b-md">
            <ButtonGroup v-model="unit" :items="options" :btnSize="BtnSize.ExtraSmall" :unselectedBtnType="unselectedBtnType" :selectedBtnType="selectedBtnType" />
        </div>
    </RockFormField>
</template>

<script setup lang="ts">
    import { PropType, computed, watch } from "vue";
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import RangeSlider from "@Obsidian/Controls/rangeSlider.obs";
    import ButtonGroup from "@Obsidian/Controls/buttonGroup.obs";
    import { toNumber } from "@Obsidian/Utility/numberUtils";
    import { TimeIntervalBag } from "@Obsidian/ViewModels/Utility/timeIntervalBag";
    import { TimeIntervalUnit } from "@Obsidian/Enums/Core/timeIntervalUnit";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import { LiteralUnion } from "@Obsidian/Types/Utility/support";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<TimeIntervalBag | null>,
            required: true
        },

        unselectedBtnType: {
            type: String as PropType<LiteralUnion<BtnType>>,
            default: BtnType.Default
        },

        selectedBtnType: {
            type: String as PropType<LiteralUnion<BtnType>>,
            default: BtnType.Primary
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", _value: TimeIntervalBag): void
    }>();

    function defaultValue(): TimeIntervalBag {
        return { unit: TimeIntervalUnit.Minutes, value: 1 };
    }

    const internalValue = computed<TimeIntervalBag>({
        get() {
            return props.modelValue ?? defaultValue();
        },
        set(newValue) {
            emit("update:modelValue", newValue);
        }
    });

    if (props.modelValue == null) {
        internalValue.value = defaultValue();
    }

    const value = computed<NonNullable<TimeIntervalBag["value"]>>({
        get() {
            return internalValue.value.value ?? 1;
        },
        set(newValue) {
            internalValue.value = {
                unit: internalValue.value.unit,
                value: newValue ?? 1
            };
        }
    });

    const unit = computed<`${TimeIntervalBag["unit"]}`>({
        get() {
            return `${internalValue.value.unit ?? TimeIntervalUnit.Minutes}`;
        },
        set(newValue) {
            internalValue.value = {
                unit: toNumber(newValue) as TimeIntervalUnit,
                value: internalValue.value.value
            };
        }
    });

    const options = [
        { text: "Mins", value: TimeIntervalUnit.Minutes.toString() },
        { text: "Hours", value: TimeIntervalUnit.Hours.toString() },
        { text: "Days", value: TimeIntervalUnit.Days.toString() },
    ];

    const maxValue = computed(() => {
        if (unit.value == TimeIntervalUnit.Minutes.toString()) {
            return 59;
        }
        if (unit.value == TimeIntervalUnit.Hours.toString()) {
            return 23;
        }

        return 31;
    });

    watch(maxValue, () => {
        if (value.value > maxValue.value) {
            value.value = maxValue.value;
        }
    });

    const standardFieldProps = useStandardRockFormFieldProps(props);
</script>
