<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockSuspense>
        <template #default>
            <div v-if="displayWithinExistingRow" :class="columnClass" v-for="a in validAttributes" :key="a.attributeGuid!">
                <RockField
                           :isEditMode="isEditMode"
                           :attribute="a"
                           :modelValue="values[a.key!]"
                           @update:modelValue="onUpdateValue(a.key!, $event)"
                           :showEmptyValue="showEmptyValues"
                           :showAbbreviatedName="showAbbreviatedName" />
            </div>

            <TabbedContent v-else-if="actuallyDisplayAsTabs" :tabs="attributeCategoryNames">
                <template #tabpane="{ item }">
                    <div v-for="a in getCategoryAttributes(item)" :key="a.attributeGuid!">
                        <RockField
                                   :isEditMode="isEditMode"
                                   :attribute="a"
                                   :modelValue="values[a.key!]"
                                   @update:modelValue="onUpdateValue(a.key!, $event)"
                                   :showEmptyValue="showEmptyValues"
                                   :showAbbreviatedName="showAbbreviatedName" />
                    </div>
                </template>
            </TabbedContent>

            <template v-else>
                <div v-for="cat in attributeCategories" key="cat.guid">
                    <h4 v-if="showCategoryLabel && cat.guid == emptyGuid && !isEditMode">{{ defaultCategoryHeading }}</h4>
                    <h4 v-else-if="showCategoryLabel && cat.guid != emptyGuid">{{ cat.name }}</h4>

                    <div :class="{ 'attribute-value-container-display': true, 'row': numberOfColumns > 1 }">
                        <ItemsWithPreAndPostHtml :items="prePostHtmlItems[cat.guid!]" v-if="isEditMode && showPrePostHtml">
                            <template v-slot:[a.attributeGuid!] v-for="a in cat.attributes" :key="a.attributeGuid ?? ''">
                                <RockField
                                           :isEditMode="isEditMode"
                                           :attribute="a"
                                           :modelValue="values[a.key!]"
                                           @update:modelValue="onUpdateValue(a.key!, $event)"
                                           :showEmptyValue="showEmptyValues"
                                           :showAbbreviatedName="showAbbreviatedName" />
                            </template>
                        </ItemsWithPreAndPostHtml>

                        <div v-else :class="columnClass" v-for="a in cat.attributes" :key="a.attributeGuid!">
                            <RockField
                                       :isEditMode="isEditMode"
                                       :attribute="a"
                                       :modelValue="values[a.key!]"
                                       @update:modelValue="onUpdateValue(a.key!, $event)"
                                       :showEmptyValue="showEmptyValues"
                                       :showAbbreviatedName="showAbbreviatedName" />
                        </div>
                    </div>
                </div>
            </template>
        </template>
        <template #loading>
            <LoadingIndicator />
        </template>
    </RockSuspense>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import RockSuspense from "./rockSuspense.obs";
    import LoadingIndicator from "./loadingIndicator.obs";
    import { List } from "@Obsidian/Utility/linq";
    import TabbedContent from "./tabbedContent.obs";
    import RockField from "./rockField.obs";
    import { PublicAttributeCategoryBag } from "@Obsidian/ViewModels/Utility/publicAttributeCategoryBag";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import ItemsWithPreAndPostHtml from "./itemsWithPreAndPostHtml.obs";
    import { ItemWithPreAndPostHtml } from "@Obsidian/Types/Controls/itemsWithPreAndPostHtml";
    import { Guid } from "@Obsidian/Types";

    type CategorizedAttributes = PublicAttributeCategoryBag & {
        attributes: PublicAttributeBag[]
    };

    const props = defineProps({
        modelValue: {
            type: Object as PropType<Record<string, string>>,
            required: true
        },
        isEditMode: {
            type: Boolean,
            default: false
        },
        attributes: {
            type: Object as PropType<Record<string, PublicAttributeBag>>,
            required: true
        },
        /*  09/24/2023 - KA
            Set default value to false to mimic Webforms AttributeValueContainer which does
            no have configurable value for showEmptyValues and thus defaults to not showing
            empty values in view mode.
        */
        showEmptyValues: {
            type: Boolean,
            default: false
        },
        showAbbreviatedName: {
            type: Boolean,
            default: false
        },
        displayWithinExistingRow: {
            type: Boolean,
            default: false
        },
        displayAsTabs: {
            type: Boolean,
            default: false
        },
        showCategoryLabel: {
            type: Boolean,
            default: true
        },
        showPrePostHtml: {
            type: Boolean,
            default: true
        },

        /**
         * The total number of columns in this container.
         *
         * An attribute will be added in each column.
         */
        numberOfColumns: {
            type: Number,
            default: 1
        },
        entityTypeName: {
            type: String,
            default: ""
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * The breakpoint to use for each column.
         */
        columnBreakpoint: {
            type: String as PropType<"xs" | "sm" | "md" | "lg">,
            default: "md"
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: Record<string, string>): void;
    }>();

    const validAttributes = computed((): PublicAttributeBag[] => {
        return new List(Object.values(props.attributes))
            .orderBy(a => a.order)
            .toArray();
    });

    const values = ref({ ...props.modelValue });

    const attributeCategories = computed(() => {
        // Initialize the category list with a "default" category
        const categoryList: CategorizedAttributes[] = [{
            guid: emptyGuid,
            name: "Attributes",
            order: 0,
            attributes: []
        }];

        validAttributes.value.forEach(attr => {
            // Skip empty attributes if we are not set to display empty values or we're not editing values
            if (!props.showEmptyValues && !props.isEditMode && attr.key && (props.modelValue[attr.key] ?? "") == "") {
                return;
            }

            if (attr.categories && attr.categories.length > 0) {
                const categories = [...attr.categories] as PublicAttributeCategoryBag[]; // copy, so sort doesn't cause updates

                categories.sort((a, b) => a.order - b.order).forEach((cat, i) => {
                    const newCat: CategorizedAttributes = { attributes: [], ...cat }; // copy and convert to CategorizedAttributes

                    // Make sure we only have 1 copy of any category in the list
                    if (!categoryList.some(oldCat => oldCat.guid == newCat.guid)) {
                        categoryList.push(newCat);
                    }

                    // Add this attribute to the first (in order) category it is in
                    if (i == 0) {
                        categoryList.find(cat => cat.guid == newCat.guid)?.attributes.push(attr);
                    }
                });
            }
            else {
                // Put in "default" category
                categoryList[0].attributes.push(attr);
            }
        });

        // Clear out any categories that don't have any attributes assigned to them, then sort the list by category order
        return categoryList.filter(cat => cat.attributes.length > 0).sort((a, b) => a.order - b.order);
    });

    const actuallyDisplayAsTabs = computed<boolean>(() => {
        if (attributeCategories.value.length === 0) {
            return false;
        }

        const hasCategories = attributeCategories.value.length > 1 || attributeCategories.value[0].guid !== emptyGuid;

        return hasCategories && props.displayAsTabs && !props.isEditMode;
    });

    const defaultCategoryHeading = computed<string>(() => {
        if (actuallyDisplayAsTabs.value || !props.entityTypeName) {
            return "Attributes";
        }

        return `${props.entityTypeName} Attributes`;
    });

    const attributeCategoryNames = computed((): string[] => {
        return attributeCategories.value.map(a => a.name ?? "");
    });

    const columnClass = computed(() => {
        let numColumns = props.numberOfColumns;

        // Need to make the columns divisible by 12
        if (numColumns < 1) {
            numColumns = 1;
        }
        else if (numColumns == 5) {
            numColumns = 4;
        }
        else if (numColumns > 6 && numColumns < 12) {
            numColumns = 6;
        }
        else if (numColumns > 12) {
            numColumns = 12;
        }

        return `col-${props.columnBreakpoint}-${12 / numColumns}`;
    });

    function getCategoryAttributes(categoryName: string): PublicAttributeBag[] {
        return attributeCategories.value
            .find(c => c.name === categoryName)
            ?.attributes ?? [];
    }

    const onUpdateValue = (key: string, value: string): void => {
        values.value[key] = value;

        emit("update:modelValue", values.value);
    };

    const prePostHtmlItems = computed<Record<Guid, ItemWithPreAndPostHtml[]>>(() => {
        const items: Record<Guid, ItemWithPreAndPostHtml[]> = {};

        attributeCategories.value.forEach((ac) => {
            items[ac.guid ?? emptyGuid] = items[ac.guid ?? emptyGuid] || [];

            ac.attributes.forEach(attr => {
                let preHtml = attr.preHtml ?? "";
                let postHtml = attr.postHtml ?? "";

                if (props.numberOfColumns > 1) {
                    preHtml = `<div class="${columnClass.value}">` + preHtml;
                    postHtml += "</div>";
                }

                items[ac.guid ?? emptyGuid].push({
                    slotName: attr.attributeGuid ?? "",
                    preHtml,
                    postHtml
                });
            });
        });

        return items;
    });

    watch(() => props.modelValue, () => {
        values.value = { ...props.modelValue };
    });
</script>
