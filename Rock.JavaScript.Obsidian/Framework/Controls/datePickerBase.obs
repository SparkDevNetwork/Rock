<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="input-group input-width-md js-date-picker date">
        <!-- Switch between Bootstrap and Native Date Picker depending on screen size for better mobile experience -->
        <input v-show="!isNative"
               ref="inputEl"
               type="text"
               :id="computedId"
               class="form-control"
               v-model.lazy="internalValue"
               :disabled="disabled" />
        <span v-show="!isNative" class="input-group-addon">
            <i class="fa fa-calendar"></i>
        </span>
        <input v-if="isNative"
               type="date"
               class="form-control native-date-picker"
               v-model="nativeDatePickerValue"
               @change="onDateInputChange"
               :disabled="disabled"
               :min="dateLimiterOptions.startDate?.toISOString().substring(0, 10)"
               :max="dateLimiterOptions.endDate?.toISOString().substring(0, 10)" />
    </div>
</template>

<style>
.input-group .native-date-picker.form-control {
    max-width: 150px;
    border-radius: 4px;
    padding-left: 5px;
    padding-right: 5px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
}
</style>

<script setup lang="ts">
    import { computed, onMounted, PropType, watch, ref, nextTick } from "vue";
    import { newGuid } from "@Obsidian/Utility/guid";
    import { useScreenSize } from "@Obsidian/Utility/screenSize";
    import { LocaleDateFormatter } from "@Obsidian/Utility/localeDateFormatter";
    import { DateTime } from "luxon";

    type DatePickerActions = {
        onSetLocalDate: ((localDate: Date | undefined) => void) | null;
    };

    const props = defineProps({
        modelValue: {
            type: String as PropType<string | null>,
            default: null
        },

        id: {
            type: String as PropType<string>,
            default: ""
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Whether to parse the entered value and reformat it to match the set format */
        disableForceParse: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** If set to true, only clicking on the calendar icon will open the calendar widget */
        disableShowOnFocus: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Whether or not to highlight the current day on the calendar */
        disableHighlightToday: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Whether or not the user should be able to select dates in the future */
        disallowFutureDateSelection: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Whether or not the user should be able to select dates in the past */
        disallowPastDateSelection: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Which view do we open the calendar widget on? 0 = Month, 1 = Year, 2 = Decade */
        startView: {
            type: Number as PropType<0 | 1 | 2>,
            default: 0
        },

        /**
         * The container to attach the popup to, if not specified it will
         * default to the document body.
         */
        container: {
            type: HTMLElement as PropType<HTMLElement | null>,
            required: false
        },

        /**
         * The horizontal orientation of the popup. Left will attempt to keep
         * the left edge aligned with the control and right will attempt to
         * keep the right edge aligned with the control.
         */
        horizontalOrientation: {
            type: String as PropType<"left" | "right">,
            required: false
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", val: string | null): void
    }>();

    /** Actions to which the datepicker can handle. */
    const actions: DatePickerActions = {
        onSetLocalDate: null
    };

    const currentLocaleDateFormatter = LocaleDateFormatter.fromCurrent();

    // #region Values

    const internalValue = ref<string | null>(null);
    const nativeDatePickerValue = ref("");
    const defaultId = `datepicker-${newGuid()}`;
    const inputEl = ref<HTMLInputElement | null>(null);
    const { isMobile: isNative } = useScreenSize();

    // #endregion

    // #region Computed Values

    const computedId = computed(() => {
        return props.id || defaultId;
    });

    const asRockDateOrNull = computed(() => {
        let date: DateTime | undefined = undefined;

        if (internalValue.value) {
            date = DateTime.fromFormat(internalValue.value, currentLocaleDateFormatter.aspDateFormat);
        }

        if (date?.isValid) {
            return date.toISODate();
        }
        else {
            return null;
        }
    });

    const dateLimiterOptions = computed(() => {
        const options: Record<string, Date> = {};
        if (props.disallowFutureDateSelection) {
            options.endDate = new Date();
        }
        if (props.disallowPastDateSelection) {
            options.startDate = new Date();
        }

        return options;
    });

    // #endregion

    // #region Functions

    function initializePopup(): void {
        const input = inputEl.value;
        if (!input) {
            return;
        }

        window.Rock.controls.datePicker.initialize({
            ...(dateLimiterOptions.value),
            id: input.id,
            startView: props.startView,
            showOnFocus: !props.disableShowOnFocus,
            format: currentLocaleDateFormatter.datePickerFormat,
            todayHighlight: !props.disableHighlightToday,
            forceParse: !props.disableForceParse,
            onChangeScript: () => {
                // We need to wait for the next tick because if internalValue is set manually,
                // `input.value` will not have been updated.
                nextTick(() => {
                    internalValue.value = input.value;
                });
            },
            container: props.container ?? "body",
            orientation: props.horizontalOrientation || "auto",
            actions
        });
    }

    // #endregion

    // #region Event Handlers

    function onDateInputChange(e: Event): void {
        const newVal = DateTime.fromISO((e.target as HTMLInputElement)?.value ?? "")
            ?.toFormat(currentLocaleDateFormatter.aspDateFormat);

        internalValue.value = newVal;
    }

    // #endregion

    // #region Watchers

    watch(() => props.modelValue, () => {
        let date: DateTime | undefined = undefined;
        if (props.modelValue) {
            date = DateTime.fromISO(props.modelValue);
        }

        // Update the underlying datepicker when the props.modelValue changes.
        if (actions.onSetLocalDate) {
            actions.onSetLocalDate(date?.isValid ? date.toJSDate() : undefined);
        }

        if (date?.isValid) {
            internalValue.value = date.toFormat(currentLocaleDateFormatter.aspDateFormat);
        }
        else {
            internalValue.value = null;
        }
    }, { immediate: true });

    watch(asRockDateOrNull, () => {
        nativeDatePickerValue.value = asRockDateOrNull.value ?? "";
        emit("update:modelValue", asRockDateOrNull.value);
    });

    // #endregion

    // #region Lifecycle

    onMounted(() => {
        // Bit of a back to make sure all our props are set correctly.
        nextTick(() => {
            initializePopup();
        });
    });

    // #endregion
</script>
