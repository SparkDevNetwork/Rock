<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <BaseAsyncPicker v-model="internalValue"
                     v-bind="standardProps"
                     :label="fullLabel"
                     :displayStyle="displayStyle"
                     :items="actualItems" />
</template>

<script setup lang="ts">
    import { standardAsyncPickerProps, useStandardAsyncPickerProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { useHttp } from "@Obsidian/Utility/http";
    import { RacePickerGetRacesResultsBag } from "@Obsidian/ViewModels/Rest/Controls/racePickerGetRacesResultsBag";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, computed, ref } from "vue";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";

    const props = defineProps({
        /** The currently selected campus value(s). */
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        labelPrefix: {
            type: String,
            required: false
        },

        labelSuffix: {
            type: String,
            required: false
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag | ListItemBag[] | null): void
    }>();

    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const standardProps = useStandardAsyncPickerProps(props);
    const http = useHttp();
    const loadedItems = ref<ListItemBag[] | null>(null);
    const label = ref<string>("Race");

    // #endregion

    // #region Computed Values

    /**
     * The actual items to make available to the picker. This allows us to do any
     * post-processing, such as adding additional items, and still be lazy loaded as well.
     */
    const actualItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {
        return loadedItems.value || loadOptions;
    });

    const fullLabel = computed((): string => {
        return `${props.labelPrefix ? props.labelPrefix + " " : ""}${label.value}${props.labelSuffix ? " " + props.labelSuffix : ""}`;
    });

    // #endregion

    // #region Functions

    /**
     * Loads the items from the server.
     */
    async function loadOptions(): Promise<ListItemBag[]> {
        const result = await http.post<RacePickerGetRacesResultsBag>("/api/v2/Controls/RacePickerGetRaces");

        if (result.isSuccess && result.data) {
            loadedItems.value = result.data.races ?? null;
            label.value = result.data.label ?? "Race";

            return loadedItems.value ?? [];
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            loadedItems.value = [];
            return [];
        }
    }

    // #endregion

    // Initialize
    loadOptions();
</script>
