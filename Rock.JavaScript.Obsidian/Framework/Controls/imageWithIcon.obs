<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div ref="container" class="image-with-icon-container" :style="backgroundImagePath">
        <div class="icon-stack-container" v-if="hasIcon" :style="stackColorStyle">
            <i :style="highlightColorStyle" :class="iconCssClasses"></i>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { RockColor } from "@Obsidian/Core/Utilities/rockColor";
import { Guid } from "@Obsidian/Types";
    import { isValidGuid, emptyGuid } from "@Obsidian/Utility/guid";
    import { PropType, computed, ref } from "vue";

    const props = defineProps({

        /**
         * Whether to automatically lighten the circular background badge (stacked) icon.
         * Defaults to true.
         */
        autoLightenStackColor: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        /** The color for the icon. */
        highlightColor: {
            type: String as PropType<string>,
            default: ""
        },

        /** The font-awesome icon CSS class to use. */
        iconCssClass: {
            type: String as PropType<string>,
            default: ""
        },

        /** The Guid of the Image file to show. */
        imageFileGuid: {
            type: String as PropType<Guid>,
            default: ""
        },

        /**
         * An optional color to use for the the circular background badge.
         * If set this takes precedence over the lightenStackColor prop.
         */
        stackColor: {
            type: String as PropType<string>,
            required: false
        },

    });

    // #region Values

    const imageFileGuid = ref<string>(props?.imageFileGuid?.toString() ?? "");
    const iconCssClass = ref<string>(props?.iconCssClass ?? "");
    const highlightColor = ref<string>(props?.highlightColor ?? "");
    const stackColor = ref<string>(props.stackColor ?? "");

    // The containing element for getting the image with the proper width.
    const container = ref<HTMLElement | null>();

    // #endregion

    // #region Computed Values
    const guidIsValid = computed(() => imageFileGuid.value.length > 0 && isValidGuid(imageFileGuid.value) && imageFileGuid.value !== emptyGuid);

    // The color style attribute value for the highlight color.
    const highlightColorStyle = computed(() => `color: ${highlightColor.value};`);

    const hasIcon = computed(() => iconCssClass.value.length > 0);

    const iconCssClasses = computed(() => [iconCssClass.value, "fa-fw"]);

    // The color style attribute value for the stack color.
    const stackColorStyle = computed(() => {
        // If the caller provided a stackColor then use that.
        if (stackColor.value.length > 0) {
            return `background-color: ${stackColor.value}`;
        }

        // If the autoLightenStackColor is true lighten based on the highlight color;
        // otherwise return undefined for no attribute.
        if (props.autoLightenStackColor) {
            const pair = RockColor.calculateColorPair(new RockColor(highlightColor.value));
            return `background-color: ${pair.backgroundColor.toRgba()}`;
        }
        else {
            return undefined;
        }
    });

    // Get the background image to display
    const backgroundImagePath = computed(() => {

        if (guidIsValid.value === true){
            return { backgroundImage: `url('/GetImage.ashx?guid=${imageFileGuid.value}&width=${container.value?.clientWidth}')`};
        }

        return { backgroundImage: "url('/Assets/Images/no-picture.svg')"};

    });

    // #endregion



</script>
