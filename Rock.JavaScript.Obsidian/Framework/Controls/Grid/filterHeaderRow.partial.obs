<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="grid-title-heading">
        <div class="grid-title">
            {{ props.grid.itemTerm }} List
        </div>

        <div class="grid-quick-filter grid-actions" :class="{ 'active': isSearchVisible }">
            <button type="button" class="btn btn-grid-action" title="Search" @click.stop.prevent="onSearchClick">
                <i class="fa fa-search fa-fw"></i>
            </button>

            <div ref="quickFilterContainerElement" class="grid-quick-filter-search" :class="{ 'open': isSearchVisible }">
                <TextBox v-model="quickFilterValue" placeholder="Search" />
            </div>
        </div>

        <ActionGroup :gridActions="primaryGridActions"
                        :grid="grid" />

                        <PopupActionGroup v-if="hasSecondaryActions"
                            :gridActions="secondaryGridActions"
                            :grid="grid" />
    </div>
</template>

<script setup lang="ts">
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import TextBox from "@Obsidian/Controls/textBox";
    import { PropType, computed, nextTick, ref } from "vue";
    import ActionGroup from "./actionGroup.partial.obs";
    import PopupActionGroup from "./popupActionGroup.partial.obs";
    import { GridAction, IGridState } from "@Obsidian/Types/Controls/grid";

    const props = defineProps({
        /** The current text being used for the quick filter feature. */
        quickFilterValue: {
            type: String as PropType<string>,
            default: ""
        },

        /** The array of grid actions that will be displayed. */
        gridActions: {
            type: Array as PropType<(GridAction & { isPrimary?: boolean })[]>,
            default: []
        },

        /** The state object for the entire grid. */
        grid: {
            type: Object as PropType<IGridState>,
            required: true
        },

        /**
         * The number of columns currently visible in the grid. This is used
         * as the colspan for this row so that we span the entire grid width.
         */
        visibleColumnCount: {
            type: Number as PropType<number>,
            default: 0
        }
    });

    const emit = defineEmits<{
        (event: "update:quickFilterValue", value: string): void
    }>();

    // #region Values

    const quickFilterContainerElement = ref<HTMLElement>();
    const isSearchVisible = ref(false);
    const quickFilterValue = useVModelPassthrough(props, "quickFilterValue", emit);

    // #endregion

    // #region Computed Values

    const primaryGridActions = computed((): GridAction[] => {
        return props.gridActions.filter(a => a.isPrimary === true);
    });

    const secondaryGridActions = computed((): GridAction[] => {
        return props.gridActions.filter(a => a.isPrimary !== true);
    });

    const hasSecondaryActions = computed((): boolean => {
        return secondaryGridActions.value.length > 0;
    });

    // #endregion

    // #region Functions

    /**
     * Called when the quick filter search button is clicked. Toggle the
     * visible state of the search box.
     */
    function onSearchClick(): void {
        isSearchVisible.value = !isSearchVisible.value;

        // Focus the search box if it is visible.
        if (isSearchVisible.value) {
            nextTick(() => {
                const searchBox = quickFilterContainerElement.value?.querySelector(".grid-quick-filter-search input") as HTMLInputElement | null;
                searchBox?.focus();
            });
        }
    }

    // #endregion
</script>
