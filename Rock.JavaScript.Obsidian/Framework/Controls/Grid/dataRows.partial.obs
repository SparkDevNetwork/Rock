<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="grid-body" ref="element" v-dragSource="dragOptions" v-dragTarget="dragOptions">
        <DataRow v-if="hasRows"
                 v-for="(row, index) in props.rows"
                 :key="props.grid.getRowKey(row)"
                 :columns="props.columns"
                 :row="row"
                 :grid="props.grid"
                 :tooltipField="props.tooltipField"
                 :isSelectable="isSelectable"
                 :isEven="(index + 1) % 2 === 0"
                 :markInactiveRows="markInactiveRows"
                 :class="getRowClass(row)"
                 @click="onRowClick" />

        <div class="grid-row" v-else-if="emptyDataText">
            <div class="grid-cell table-empty">
                {{ emptyDataText }}
            </div>
        </div>

        <div class="grid-row" v-else>
            <div class="grid-cell table-empty">
                No {{ pluralItemTerm }} Found
            </div>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { PropType, computed, onBeforeUnmount, onMounted, ref } from "vue";
    import DataRow from "./dataRow.partial.obs";
    import { ColumnDefinition, IGridState } from "@Obsidian/Types/Controls/grid";
    import { pluralize } from "@Obsidian/Utility/stringUtils";
    import { DragSource as vDragSource, DragTarget as vDragTarget, IDragSourceOptions } from "@Obsidian/Directives/dragDrop";

    const element = ref<HTMLElement>();

    const props = defineProps({
        /**
         * The array of columns that should be displayed in the data rows.
         * This may be different than the columns defined in the grid but
         * must be a subset of them.
         */
        columns: {
            type: Array as PropType<ReadonlyArray<ColumnDefinition>>,
            required: true
        },

        dragOptions: {
            type: Object as PropType<IDragSourceOptions>,
            required: false
        },

        /** The rows that contain the data to be displayed. */
        rows: {
            type: Array as PropType<Record<string, unknown>[]>,
            required: true
        },

        /** The grid that contains all the state information. */
        grid: {
            type: Object as PropType<IGridState>,
            required: true
        },

        /** The field that will be used to display per-row tooltips. */
        tooltipField: {
            type: String as PropType<string>,
            required: false
        },

        /** True if any data row is selectable. */
        isSelectable: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** The term that identifies individual rows in the grid. */
        itemTerm: {
            type: String as PropType<string>,
            default: "item"
        },

        /**
         * If set to true, each row with an `isActive` property set to false
         * will be visually distinct
         */
        markInactiveRows: {
            type: Boolean,
            default: false
        },

        /**
         * A CSS class that will be applied to each row. If you supply a string,
         * will apply that directly. You can also use a function that takes the
         * row object and returns a string, which allows you to apply different
         * classes to different rows depending on the row data.
         */
        rowClass: {
            type: [String, Function] as PropType<string | ((row: Record<string, unknown>) => string)>,
            default: undefined
        },

        /**
         * The text to display in the empty data row. The default is an empty string (""), which indicates that this property is not set.
         */
        emptyDataText: {
            type: String,
            default: "",
            required: false,
        }
    });

    const emit = defineEmits<{
        (e: "click", key: string): void
        (e: "width", width: { offsetWidth: number, scrollWidth: number }): void
    }>();

    /** Whether or not there are any rows given */
    const hasRows = computed(() => {
        return props.rows.length > 0;
    });

    /** Plural form of the itemTerm prop. */
    const pluralItemTerm = computed(() => {
        return pluralize(props.itemTerm);
    });

    /**
     * Called when a single row has been clicked.
     *
     * @param key The key of the row that was clicked.
     */
    function onRowClick(key: string): void {
        emit("click", key);
    }

    /**
     * Determine the class to apply to each row
     */
    function getRowClass(row: Record<string, unknown>): string | undefined {
        if (typeof props.rowClass === "string") {
            return props.rowClass;
        }

        if (typeof props.rowClass === "function") {
            return props.rowClass(row);
        }

        return undefined;
    }

    let resizeObserver: ResizeObserver | undefined;

    onMounted(() => {

        if (typeof ResizeObserver !== "undefined" && element.value) {

            resizeObserver = new ResizeObserver(() => {
                const payload = { offsetWidth: element.value?.offsetWidth ?? 0, scrollWidth: element.value?.scrollWidth ?? 0 };
                emit("width", payload);
            });

            resizeObserver.observe(element.value);
        }
    });

    onBeforeUnmount(() => {
        if (resizeObserver) {
            resizeObserver.disconnect();
            resizeObserver = undefined;
        }
    });

</script>
