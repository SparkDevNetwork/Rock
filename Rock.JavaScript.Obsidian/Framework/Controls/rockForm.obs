<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <form @submit.prevent.stop="onInternalSubmit()">
        <RockValidation v-if="!hideErrors" :errors="visibleErrors" />
        <slot />
    </form>
</template>

<script setup lang="ts">
    import { PropType, reactive, ref, watch } from "vue";
    import { FormError, FormState, provideFormState } from "@Obsidian/Utility/form";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import RockValidation from "./rockValidation.obs";

    const props = defineProps({
        /** True if the form should attempt to submit. */
        submit: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** True if the validation errors should not be displayed. */
        hideErrors: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * This value can be used to reset the form to it's initial state.
         * Any time this value changes the submission count and error list
         * will be reset. This does not effect the values in the form controls.
         */
        formResetKey: {
            type: String as PropType<string>,
            default: ""
        }
    });

    const emit = defineEmits<{
        (e: "submit"): void;
        // This contains all active errors even if the UI is not in sync.
        (e: "validationChanged", errors: FormError[]): void;
        // This contains just the errors that should be currently displayed in the UI.
        (e: "visibleValidationChanged", errors: FormError[]): void;
        (e: "update:submit", value: boolean): void;
    }>();

    const visibleErrors = ref<FormError[]>([]);
    const errorValues = ref<FormError[]>([]);
    const errors = ref<Record<string, FormError>>({});
    const submit = ref(props.submit);

    const onInternalSubmit = (): void => {
        submit.value = true;
    };

    // Construct the form state.
    const formState = reactive<FormState>({
        submitCount: 0,
        setError: (id: string, name: string, error: string): void => {
            const newErrors = {
                ...errors.value
            };

            // If this identifier has an error, then set the error.
            // Otherwise clear the error.
            if (error) {
                newErrors[id] = {
                    name,
                    text: error
                };
            }
            else {
                delete newErrors[id];
            }

            updateRefValue(errors, newErrors);
        }
    });

    provideFormState(formState);

    // Watch for requests to submit from the parent component.
    watch(() => props.submit, () => {
        if (submit.value !== props.submit) {
            submit.value = props.submit;
        }
    });

    // Watch for any submit actions and check the validation.
    watch(submit, () => {
        if (submit.value) {
            formState.submitCount++;

            // Update the visible errors.
            visibleErrors.value = errorValues.value;
            emit("visibleValidationChanged", visibleErrors.value);

            if (Object.keys(errors.value).length === 0) {
                emit("submit");
            }

            submit.value = false;
        }

        emit("update:submit", submit.value);
    });

    // If any errors change then update the list of errors.
    watch(errors, () => {
        const values: FormError[] = [];

        for (const key in errors.value) {
            values.push(errors.value[key]);
        }

        errorValues.value = values;
        emit("validationChanged", errorValues.value);
    });

    watch(() => props.formResetKey, () => {
        formState.submitCount = 0;
        updateRefValue(errors, {});
        updateRefValue(visibleErrors, []);
        emit("visibleValidationChanged", visibleErrors.value);
    });
</script>
