<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <form ref="formElement" @submit.prevent.stop="onInternalSubmit()">
        <RockValidation v-if="!hideErrors"
                        :errors="visibleErrors" />
        <slot />
    </form>
</template>

<script setup lang="ts">
    import { nextTick, PropType, reactive, ref, watch, onBeforeUnmount } from "vue";
    import { FormError, FormState, provideFormState } from "@Obsidian/Utility/form";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import RockValidation from "./rockValidation.obs";
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { scrollElementStartToTop } from "@Obsidian/Utility/dom";

    const props = defineProps({
        /** True if the form should attempt to submit. */
        submit: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** True if the validation errors should not be displayed. */
        hideErrors: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * This value can be used to reset the form to it's initial state.
         * Any time this value changes the submission count and error list
         * will be reset. This does not effect the values in the form controls.
         */
        formResetKey: {
            type: String as PropType<string>,
            default: ""
        },

        onSubmit: {
            type: Function as PropType<(() => void | PromiseLike<void>)>,
            required: false
        },
    });

    const emit = defineEmits<{
        // This contains all active errors even if the UI is not in sync.
        (e: "validationChanged", errors: FormError[]): void;
        // This contains just the errors that should be currently displayed in the UI.
        (e: "visibleValidationChanged", errors: FormError[]): void;
        (e: "update:submit", value: boolean): void;
    }>();

    defineExpose({
        submitForm
    });

    // #region Values

    const visibleErrors = ref<FormError[]>([]);
    const errorValues = ref<FormError[]>([]);
    const errors = ref<Record<string, FormError>>({});
    const submit = ref(props.submit);
    const formElement = ref<HTMLElement | undefined>();

    // #endregion Values

    // Construct the form state.
    const formState = reactive<FormState>({
        submitCount: 0,
        setError: (id: string, name: string, error: string): void => {
            const newErrors = {
                ...errors.value
            };

            // If this identifier has an error, then set the error.
            // Otherwise clear the error.
            if (error) {
                newErrors[id] = {
                    name,
                    text: error
                };
            }
            else {
                delete newErrors[id];
            }

            updateRefValue(errors, newErrors);
        }
    });

    // #region Functions

    function onInternalSubmit(): void {
        submitForm();
    }

    /**
     * Submits the form and waits until both validation and the onSubmit
     * callback have completed before returning.
     */
    async function submitForm(): Promise<void> {
        // Prevent double submits.
        if (submit.value) {
            return;
        }

        submit.value = true;

        try {
            formState.submitCount++;

            // Update the visible errors.
            visibleErrors.value = errorValues.value;
            emit("visibleValidationChanged", visibleErrors.value);

            if (Object.keys(errors.value).length === 0) {
                const submitHandler = props.onSubmit;

                if (submitHandler) {
                    const result = submitHandler();

                    if (isPromise(result)) {
                        await result;
                    }
                }
            }
        }
        finally {
            // When there are errors, everything is synchronous, so the watchers aren't able to fire
            // before we change `submit` again, so let them fire.
            await nextTick();
            submit.value = false;
        }
    }

    // #endregion Functions

    // #region Watchers

    // Watch for requests to submit from the parent component.
    watch(() => props.submit, () => {
        // submitForm() will bail if we are already submitting.
        if (props.submit) {
            submitForm();
        }
    });

    // Watch for any submit state changes and emit new value.
    watch(submit, () => {
        emit("update:submit", submit.value);
    });

    // If any errors change then update the list of errors.
    watch(errors, () => {
        const values: FormError[] = [];

        for (const key in errors.value) {
            values.push(errors.value[key]);
        }

        errorValues.value = values;
        emit("validationChanged", errorValues.value);
    });

    watch(() => props.formResetKey, () => {
        formState.submitCount = 0;
        updateRefValue(errors, {});
        updateRefValue(visibleErrors, []);
        emit("visibleValidationChanged", visibleErrors.value);
    });

    watch(visibleErrors, (errors) => {
        if (errors.length && formElement.value) {
            // Wait until the errors are rendered to scroll to them.
            const element = formElement.value;
            scrollElementStartToTop(element);
        }
    });

    // #endregion Watchers

    /**
     * If the component is unmounted while a submit is in progress (e.g., modal is closed mid-submit),
     * the form's internal `submit.value` may still be true. In that case, emit `update:submit = false`
     * so the parent-side v-model is properly reset. Otherwise, the parent stays stuck at true,
     * and future submits won't be triggered due to no observable change.
     */
    onBeforeUnmount(() => {
        if (submit.value) {
            emit("update:submit", false);
        }
    });

    provideFormState(formState);
</script>
