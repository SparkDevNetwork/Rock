<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <button :class="cssClass" :disabled="isButtonDisabled" @click="onButtonClick" :type="type">
        <template v-if="isButtonLoading">
            {{ loadingText }}
        </template>
        <slot v-else />
    </button>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { LiteralUnion } from "@Obsidian/Types/Utility/support";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";

    const props = defineProps({
        isLoading: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        loadingText: {
            type: String as PropType<string>,
            default: "Loading..."
        },
        type: {
            type: String as PropType<"button" | "submit" | "reset">,
            default: "button"
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        btnType: {
            type: String as PropType<LiteralUnion<BtnType>>,
            default: BtnType.Default
        },
        btnSize: {
            type: String as PropType<BtnSize>,
            default: BtnSize.Default
        },
        autoLoading: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Automatically disables the button when it is in a loading state or
         * the click handler is processing. This can prevent duplicate clicks.
         */
        autoDisable: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        onClick: {
            type: Function as PropType<((event: MouseEvent) => void | PromiseLike<void>)>,
            required: false
        },

        /** Change button proportions to make it a square. Used for buttons with only an icon. */
        isSquare: {
            type: Boolean as PropType<boolean>,
            default: false
        }
    });

    const isProcessing = ref(false);

    const isButtonDisabled = computed((): boolean => {
        return props.disabled || (props.autoDisable && isProcessing.value) || props.isLoading;
    });

    const isButtonLoading = computed((): boolean => {
        return props.isLoading || (props.autoLoading && isProcessing.value);
    });

    const typeClass = computed((): string => {
        return `btn-${props.btnType}`;
    });

    const sizeClass = computed((): string => {
        if (!props.btnSize) {
            return "";
        }

        return `btn-${props.btnSize}`;
    });

    const cssClass = computed((): string => {
        return `btn ${typeClass.value} ${sizeClass.value} ${props.isSquare ? "btn-square" : ""}`;
    });

    const onButtonClick = async (event: MouseEvent): Promise<void> => {
        if (isButtonDisabled.value || isButtonLoading.value) {
            return;
        }

        isProcessing.value = true;

        try {
            const clickHandler = props.onClick;

            if (clickHandler) {
                const result = clickHandler(event);

                if (isPromise(result)) {
                    await result;
                }
            }
        }
        finally {
            isProcessing.value = false;
        }
    };
</script>
