<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-model="internalValue"
                   name="textbox"
                   v-bind="fieldProps"
                   :rules="augmentedRules"
                   :formGroupClasses="'rock-text-box ' + formGroupClasses">
        <template #pre>
            <em v-if="showCountDown" class="pull-right badge" :class="countdownClass">
                {{ charsRemaining }}
            </em>
        </template>
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <slot name="prepend" :isInputGroupSupported="true" />
                <div :class="controlContainerClass">
                    <template v-if="isTextarea">
                        <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                        <textarea :value="internalValue"
                              :rows="rows"
                              cols="20"
                              :maxlength="maxLength"
                              :id="uniqueId"
                              class="form-control"
                              v-bind="field"
                              @input="onInput"
                              @change="onChange"></textarea>
                        <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                    </template>
                    <template v-else-if="isClearable">
                        <template v-if="$slots.inputGroupPrepend || $slots.inputGroupAppend">
                            <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                            <input :value="internalValue"
                               :id="uniqueId"
                               :type="type"
                               class="form-control"
                               :class="formControlClass"
                               style="display: table-cell;"
                               v-bind="field"
                               :maxlength="maxLength"
                               :placeholder="placeholder"
                               @input="onInput"
                               @change="onChange" />
                            <i class="fa fa-times text-muted clear-icon clear-position-with-slots" @click="onClear"></i>
                            <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                        </template>
                        <template v-else>
                            <div class="input-container">
                                <input :value="internalValue"
                                   :id="uniqueId"
                                   :type="type"
                                   :class="formControlClass"
                                   v-bind="field"
                                   :maxlength="maxLength"
                                   :placeholder="placeholder"
                                   @input="onInput"
                                   @change="onChange" />
                                <i class="fa fa-times text-muted clear-icon" @click="onClear"></i>
                            </div>
                        </template>
                    </template>
                    <template v-else>
                        <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                        <input :value="internalValue"
                           :id="uniqueId"
                           :type="type"
                           :class="formControlClass"
                           v-bind="field"
                           :maxlength="maxLength"
                           :placeholder="placeholder"
                           @input="onInput"
                           @change="onChange" />
                        <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                    </template>
                </div>
                <slot name="append" :isInputGroupSupported="true" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { computed, ref, useSlots, watch } from "vue";
    import { PropType } from "vue";
    import RockFormField from "./rockFormField.obs";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import type { ValidationRule } from "@Obsidian/Types/validationRules";
    import { normalizeRules } from "@Obsidian/ValidationRules";

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },
        /** Internal use to track what modifier flags were applied to modelValue. */
        modelModifiers: {
            type: Object as PropType<Record<string, boolean>>,
            default: () => ({})
        },
        type: {
            type: String as PropType<string>,
            default: "text"
        },
        maxLength: {
            type: Number as PropType<number>,
            default: 524288
        },
        showCountDown: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        disableAutocomplete: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        placeholder: {
            type: String as PropType<string>,
            default: null
        },
        inputClasses: {
            type: String as PropType<string>,
            default: ""
        },
        rows: {
            type: Number as PropType<number>,
            default: 3
        },
        textMode: {
            type: String as PropType<string>,
            default: ""
        },
        size: {
            type: String as PropType<"small" | "medium" | "large">,
            default: "medium"
        },
        allowHtml: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        isClearable: {
            type: Boolean as PropType<boolean>,
            default: false,
        },
        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void;
    }>();

    const slots = useSlots();

    const internalValue = ref(props.modelValue);
    const fieldProps = useStandardRockFormFieldProps(props);

    const isTextarea = computed((): boolean => {
        return props.textMode?.toLowerCase() === "multiline";
    });

    const charsRemaining = computed((): number => {
        return props.maxLength - internalValue.value.length;
    });

    const countdownClass = computed((): string => {
        if (charsRemaining.value >= 10) {
            return "badge-default";
        }

        if (charsRemaining.value >= 0) {
            return "badge-warning";
        }

        return "badge-danger";
    });

    const isInputGroup = computed((): boolean => {
        return !!slots.inputGroupPrepend || !!slots.inputGroupAppend;
    });

    const controlContainerClass = computed((): Record<string, boolean> => {
        return {
            "input-group col-xs-12": isInputGroup.value,
            "input-group-sm": isInputGroup.value && props.size == "small",
            "input-group-lg": isInputGroup.value && props.size == "large"
        };
    });

    const formControlClass = computed((): Record<string, boolean> => {
        return {
            "form-control": true,
            [props.inputClasses]: true,
            "input-sm": props.size == "small",
            "input-lg": props.size == "large"
        };
    });

    const augmentedRules = computed((): ValidationRule[] => {
        const rules = normalizeRules(props.rules);

        if (!props.allowHtml) {
            rules.push("nohtml");
        }

        return rules;
    });

    /**
     * Event handler for the input field having any modification to the value
     * happen. This is basically called on every key press.
     *
     * @param e The object that describes the event.
     */
    function onInput(e: Event): void {
        if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
            internalValue.value = e.target.value;
        }

        // Lazy models do not get every single key press.
        if (!props.modelModifiers.lazy) {
            emit("update:modelValue", internalValue.value);
        }
    }

    /**
     * Event handler for the input field when the changed value is "committed".
     * This is basically called when the focus leaves the input field.
     *
     * @param e The object that describes the event.
     */
    function onChange(e: Event): void {
        if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
            internalValue.value = e.target.value;
        }

        // Only send the update if we didn't send it in the onInput handler.
        if (props.modelModifiers.lazy) {
            emit("update:modelValue", internalValue.value);
        }
    }

    function onClear(): void {
        internalValue.value = "";
        emit("update:modelValue", internalValue.value);
    }

    watch(() => props.modelValue, () => {
        internalValue.value = props.modelValue;
    });
</script>

<style scoped>

.input-container {
    display: flex;
    align-items: center;
}

.clear-icon {
    margin-left: -34px;
    cursor: pointer;
    padding: 10px;
}

.clear-position-with-slots {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 3;
}

</style>