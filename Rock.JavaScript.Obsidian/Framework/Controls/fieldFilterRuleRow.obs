<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="filter-rule">
        <div class="filter-rule-fields row form-row">
            <div class="filter-rule-comparefield col-xs-12 col-md-4">
                <DropDownList :items="attributeList" v-model="attributeGuid" :show-blank-item="false" />
            </div>
            <div class="filter-rule-fieldfilter col-xs-12 col-md-8">
                <RockAttributeFilter :attribute="currentAttribute" v-model="comparisonValue" :filter-mode="1" required />
            </div>
        </div>
        <div class="filter-rule-remove">
            <button class="btn btn-danger btn-square" @click.prevent="onRemoveRuleClick"><i class="fa fa-times"></i></button>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import DropDownList from "./dropDownList.obs";
    import { ComparisonValue } from "@Obsidian/Types/Reporting/comparisonValue";
    import { areEqual } from "@Obsidian/Utility/guid";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { FieldFilterRuleBag } from "@Obsidian/ViewModels/Reporting/fieldFilterRuleBag";
    import { FieldFilterSourceBag } from "@Obsidian/ViewModels/Reporting/fieldFilterSourceBag";
    import RockAttributeFilter from "./rockAttributeFilter.obs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FieldFilterRuleBag>,
            required: true
        },
        sources: {
            type: Array as PropType<FieldFilterSourceBag[]>,
            required: true
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FieldFilterRuleBag): void;
        (e: "removeRule", value: FieldFilterRuleBag): void;
    }>();

    let internalUpdate = false;

    const attributeGuid = ref(props.modelValue.attributeGuid ?? "");
    const comparisonValue = ref<ComparisonValue>({
        comparisonType: props.modelValue.comparisonType,
        value: props.modelValue.value ?? ""
    });

    // Current Selected Attribute/Property
    const currentAttribute = computed<PublicAttributeBag>(() => {
        const source = props.sources.find(source => {
            return areEqual(attributeGuid.value, source.attribute?.attributeGuid ?? "");
        }) || props.sources[0];

        return source.attribute as PublicAttributeBag;
    });

    // Convert the list of sources into the options you can choose from the
    const attributeList = computed<ListItemBag[]>(() => {
        return props.sources.map(source => {
            return {
                text: source.attribute?.name as string,
                value: source.attribute?.attributeGuid as string
            };
        });
    });

    function onRemoveRuleClick(): void {
        emit("removeRule", props.modelValue);
    }

    // Watch for changes to the model value and update our internal values.
    watch(() => props.modelValue, () => {
        // Prevent a value reset.
        internalUpdate = true;

        updateRefValue(attributeGuid, props.modelValue.attributeGuid ?? "");
        updateRefValue(comparisonValue, {
            comparisonType: props.modelValue.comparisonType,
            value: props.modelValue.value ?? ""
        });

        internalUpdate = false;
    });

    // Watch for changes to our internal values and update the model value.
    watch([attributeGuid, comparisonValue], () => {
        const newValue: FieldFilterRuleBag = {
            ...props.modelValue,
            attributeGuid: attributeGuid.value,
            comparisonType: comparisonValue.value.comparisonType ?? 0,
            value: comparisonValue.value.value
        };

        emit("update:modelValue", newValue);
    });

    // Reset the rule after a new attribute is chosen
    watch(currentAttribute, () => {
        if (!internalUpdate) {
            comparisonValue.value = {
                comparisonType: 0,
                value: ""
            };
            attributeGuid.value = currentAttribute.value.attributeGuid ?? "";
        }
    });
</script>
