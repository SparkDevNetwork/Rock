<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="filter-rule">
        <div class="filter-rule-fields row form-row">
            <div class="filter-rule-comparefield col-xs-12 col-md-4">
                <DropDownList v-model="selectedFieldKey"
                              :items="fieldList"
                              :grouped="groupSources"
                              :showBlankItem="false"
                              :enhanceForLongLists="enhanceForLongSourceLists" />
            </div>
            <div class="filter-rule-fieldfilter col-xs-12 col-md-8">
                <RockAttributeFilter v-if="currentAttribute"
                                     v-model="comparisonValue"
                                     :attribute="currentAttribute"
                                     :filterMode="FilterMode.Advanced"
                                     required />

                <component v-if="currentProperty"
                           :is="fieldComponent"
                           v-model="comparisonValue"
                           :configurationValues="currentProperty.configurationValues ?? {}"
                           :filterMode="FilterMode.Advanced"
                           required />
            </div>
        </div>
        <div class="filter-rule-remove">
            <button class="btn btn-danger btn-square" @click.prevent="onRemoveRuleClick">
                <i class="fa fa-times"></i>
            </button>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { Component as VueComponent, computed, PropType, ref, watch } from "vue";
    import DropDownList from "./dropDownList.obs";
    import { ComparisonValue } from "@Obsidian/Types/Reporting/comparisonValue";
    import { areEqual, emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { updateRefValue } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    import { FieldFilterRuleBag } from "@Obsidian/ViewModels/Reporting/fieldFilterRuleBag";
    import { FieldFilterSourceBag } from "@Obsidian/ViewModels/Reporting/fieldFilterSourceBag";
    import RockAttributeFilter from "./rockAttributeFilter.obs";
    import { FieldFilterSourceType } from "@Obsidian/Enums/Reporting/fieldFilterSourceType";
    import { FieldFilterPublicPropertyBag } from "@Obsidian/ViewModels/Reporting/fieldFilterPublicPropertyBag";
    import { FilterMode } from "@Obsidian/Core/Reporting/filterMode";
    import { getFieldType } from "@Obsidian/Utility/fieldTypes";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<FieldFilterRuleBag>,
            required: true
        },
        sources: {
            type: Array as PropType<FieldFilterSourceBag[]>,
            required: true
        },

        /** Enables grouping of the field sources picker. */
        groupSources: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Uses an enhanced picker that allows searching in the source list. */
        enhanceForLongSourceLists: {
            type: Boolean as PropType<boolean>,
            default: false
        },
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: FieldFilterRuleBag): void;
        (e: "removeRule", value: FieldFilterRuleBag): void;
    }>();

    let internalUpdate = false;

    const selectedFieldKey = ref(`${props.modelValue.path ?? ""}::${props.modelValue.attributeGuid ?? props.modelValue.propertyName ?? ""}`);
    const comparisonValue = ref<ComparisonValue>({
        comparisonType: props.modelValue.comparisonType,
        value: props.modelValue.value ?? ""
    });

    /** The currently selected source property or undefined. */
    const currentPropertySource = computed((): FieldFilterSourceBag | undefined => {
        if (!selectedFieldKey.value.includes("::")) {
            return undefined;
        }

        const key = selectedFieldKey.value.split("::")[1];
        const path = selectedFieldKey.value.split("::")[0];

        const source = props.sources.find(source => {
            return key === source.property?.name
                && isPathEqual(path, source.path);
        });

        if (!source || source.type !== FieldFilterSourceType.Property || !source.property) {
            return undefined;
        }

        return source;
    });

    /** The currently selected source attribute or undefined. */
    const currentAttributeSource = computed((): FieldFilterSourceBag | undefined => {
        if (!selectedFieldKey.value.includes("::")) {
            return undefined;
        }

        const path = selectedFieldKey.value.split("::")[0];
        const key = selectedFieldKey.value.split("::")[1];

        const source = props.sources.find(source => {
            return areEqual(key, source.attribute?.attributeGuid ?? "")
                && isPathEqual(path, source.path);
        });

        if (!source || source.type !== FieldFilterSourceType.Attribute || !source.attribute) {
            return undefined;
        }

        return source;
    });

    /** The currently selected attribute, if any. */
    const currentAttribute = computed((): PublicAttributeBag | undefined => {
        return currentAttributeSource.value?.attribute ?? undefined;
    });

    /** The currently selected property, if any. */
    const currentProperty = computed((): FieldFilterPublicPropertyBag | undefined => {
        return currentPropertySource.value?.property ?? undefined;
    });

    /** The filter component to use to display and edit the property value. */
    const fieldComponent = computed((): VueComponent | null | undefined => {
        if (!currentProperty.value) {
            return undefined;
        }

        const field = getFieldType(toGuidOrNull(currentProperty.value.fieldTypeGuid) ?? emptyGuid);

        return field?.getFilterComponent(currentProperty.value?.configurationValues ?? {});
    });

    // Convert the list of sources into the options you can choose from the
    const fieldList = computed((): ListItemBag[] => {
        return props.sources.map(source => {
            const nameOrGuid = source.attribute?.attributeGuid ?? source.property?.name;
            return {
                text: source.attribute?.name ?? source.property?.title,
                value: `${source.path ?? ""}::${nameOrGuid}`,
                category: source.category
            };
        });
    });

    /**
     * Determines if the two path values are the same. Equality is determined
     * by either both being "falsy" (that is, null, undefined or empty string)
     * or by both being exactly the same value.
     *
     * @param a The first path value.
     * @param b The second path value.
     *
     * @returns `true` if the paths are considered equal; otherwise `false`.
     */
    function isPathEqual(a: string | undefined | null, b: string | undefined | null): boolean {
        if (!a && !b) {
            return true;
        }

        return a === b;
    }

    function onRemoveRuleClick(): void {
        emit("removeRule", props.modelValue);
    }

    // Watch for changes to the model value and update our internal values.
    watch(() => props.modelValue, () => {
        // Prevent a value reset.
        internalUpdate = true;

        updateRefValue(selectedFieldKey, `${props.modelValue.path ?? ""}::${props.modelValue.attributeGuid ?? props.modelValue.propertyName ?? ""}`);
        updateRefValue(comparisonValue, {
            comparisonType: props.modelValue.comparisonType,
            value: props.modelValue.value ?? ""
        });

        internalUpdate = false;
    });

    // Watch for changes to our internal values and update the model value.
    watch([selectedFieldKey, comparisonValue], () => {
        const isAttribute = !!currentAttributeSource.value;
        let key: string;
        let path: string;

        if (!selectedFieldKey.value.includes("::")) {
            path = "";
            key = "";
        }
        else {
            path = selectedFieldKey.value.split("::")[0];
            key = selectedFieldKey.value.split("::")[1];
        }

        const newValue: FieldFilterRuleBag = {
            ...props.modelValue,
            attributeGuid: isAttribute ? toGuidOrNull(key) : null,
            propertyName: !isAttribute ? key : null,
            sourceType: isAttribute ? FieldFilterSourceType.Attribute : FieldFilterSourceType.Property,
            path: path,
            comparisonType: comparisonValue.value.comparisonType ?? 0,
            value: comparisonValue.value.value
        };

        emit("update:modelValue", newValue);
    });

    // Reset the rule after a new attribute is chosen
    watch(selectedFieldKey, () => {
        if (!internalUpdate) {
            comparisonValue.value = {
                comparisonType: 0,
                value: ""
            };
        }
    });
</script>
