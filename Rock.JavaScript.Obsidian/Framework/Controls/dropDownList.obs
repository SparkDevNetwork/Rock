<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-bind="standardFieldProps"
                   :modelValue="internalValue"
                   :formGroupClasses="'rock-drop-down-list ' + formGroupClasses"
                   name="dropdownlist">
        <template #default="{ uniqueId, field }">
            <div ref="controlWrapper" class="control-wrapper">
                <slot name="prepend" :isInputGroupSupported="true" />
                <div :class="{ 'input-group': $slots.inputGroupPrepend || $slots.inputGroupAppend }">
                    <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                    <AntSelect
                               v-model:value="internalValue"
                               v-bind="field"
                               class="form-control"
                               :class="inputClasses"
                               :allowClear="isClearable"
                               :loading="computedLoading"
                               :disabled="isDisabled"
                               :options="computedOptions"
                               :showSearch="enhanceForLongLists"
                               :filterOption="filterItem"
                               :mode="mode"
                               :getPopupContainer="getPopupContainer"
                               showArrow
                               @dropdownVisibleChange="onDropdownVisibleChange">
                        <template #clearIcon>
                            <i class="fa fa-times"></i>
                        </template>

                        <template #suffixIcon>
                            <i v-if="!computedLoading" class="fa fa-caret-down"></i>
                            <i v-else class="fa fa-spinner fa-spin"></i>
                        </template>

                        <template #notFoundContent>
                            <div style="color:#999">
                                <slot name="empty">No Data</slot>
                            </div>
                        </template>

                        <template #dropdownRender="{ menuNode: menu }">
                            <div v-if="computedLoading" class="text-center"><i class="fa fa-spinner fa-spin"></i> Data is loading...</div>
                            <v-nodes v-else :vnodes="menu" />
                        </template>
                    </AntSelect>
                    <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                </div>
                <slot name="append" :isInputGroupSupported="true" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import { Select as AntSelect } from "ant-design-vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import RockFormField from "./rockFormField.obs";
    import { deepEqual } from "@Obsidian/Utility/util";
    import { standardRockFormFieldProps, updateRefValue, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import { defaultControlCompareValue } from "@Obsidian/Utility/stringUtils";

    /** The type definition for a select option, since the ones from the library are wrong. */
    type SelectOption = {
        value?: string;
        label: string;
        disabled?: boolean;
        options?: SelectOption[];
    };

    const vNodes = (_: unknown, { attrs }): unknown => {
        return attrs.vnodes;
    };

    const props = defineProps({
        modelValue: {
            type: Object as PropType<string | string[]>,
            required: true
        },

        items: {
            type: Array as PropType<ListItemBag[]>,
            default: []
        },

        showBlankItem: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        blankValue: {
            type: String as PropType<string>,
            default: ""
        },

        multiple: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** No longer used. */
        formControlClasses: {
            type: String as PropType<string>,
            default: ""
        },

        inputClasses: {
            type: String as PropType<string>,
            default: ""
        },

        enhanceForLongLists: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        grouped: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        loading: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        compareValue: {
            type: Function as PropType<((value: string, itemValue: string) => boolean)>,
            default: defaultControlCompareValue
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "open"): void;
        (e: "update:modelValue", value: string | string[]): void;
    }>();

    // #region Values

    const internalValue = ref(props.modelValue ? props.modelValue : null);
    const controlWrapper = ref<HTMLElement | null>(null);
    const standardFieldProps = useStandardRockFormFieldProps(props);

    // #endregion

    // #region Computed Values

    /** Determines if the blank item should be used. */
    const computedShowBlankItem = computed((): boolean => {
        // Only show the blank item if requested and we are not in multiple
        // selection mode.
        return !props.multiple && props.showBlankItem;
    });

    /** The options to be used by the Ant Select box. */
    const computedOptions = computed((): SelectOption[] => {
        // If we are not showing grouped items then simply map our item bags
        // into a format that can be used by the picker.
        if (!props.grouped) {
            return props.items.map((o): SelectOption => {
                return {
                    value: o.value ?? "",
                    label: o.text ?? "",
                    disabled: o.disabled ?? false
                };
            });
        }

        const groupedOptions: SelectOption[] = [];

        // Loop through all the options and group everything that has a
        // category together.
        for (const o of props.items) {
            // If no category then just include it as a regular item.
            if (!o.category) {
                groupedOptions.push({
                    value: o.value ?? "",
                    label: o.text ?? "",
                    disabled: o.disabled ?? false
                });
                continue;
            }

            const matchedGroups = groupedOptions.filter(g => g.label === o.category && !!g.options);

            // If we found an existing group then just add this item to
            // that group. Otherwise create a new group for this item.
            if (matchedGroups.length >= 1 && !!matchedGroups[0].options) {
                matchedGroups[0].options.push({
                    value: o.value ?? "",
                    label: o.text ?? "",
                    disabled: o.disabled ?? false
                });
            }
            else {
                groupedOptions.push({
                    label: o.category,
                    options: [{
                        value: o.value ?? "",
                        label: o.text ?? "",
                        disabled: o.disabled ?? false
                    }]
                });
            }
        }

        return groupedOptions;
    });

    /** Determines if the control is currently in a loading state. */
    const computedLoading = computed((): boolean => {
        return props.loading;
    });

    /** The mode for the Ant Select control to operate in. */
    const mode = computed((): "multiple" | undefined => {
        return props.multiple ? "multiple" : undefined;
    });

    /** Determines if we have any selected values. */
    const hasValue = computed((): boolean => {
        if (Array.isArray(internalValue.value)) {
            return internalValue.value.length > 0;
        }
        else {
            return internalValue.value !== "";
        }
    });

    /** Determines if the clear icon should be visible. */
    const isClearable = computed((): boolean => {
        return computedShowBlankItem.value && !computedLoading.value && hasValue.value && internalValue.value !== props.blankValue;
    });

    /** Determines if the control should be in a disabled state. */
    const isDisabled = computed((): boolean => {
        return props.disabled;
    });

    // #endregion

    // #region Functions

    /**
     * Synchronizes our internal value with the modelValue and current
     * component property values.
     */
    const syncInternalValue = (): void => {
        let value: string | string[] | null = props.modelValue;

        if (props.multiple) {
            // We are in multiple mode, if our value is a single value then
            // convert it to an array of the one value.
            if (!Array.isArray(value)) {
                value = value === "" ? [] : [value];
            }

            // Ensure they are all valid values and make sure they are the
            // correct matching value from the item rather than what was
            // originally provided.
            value = props.items
                .filter(o => (value as string[]).some(v => props.compareValue(v, o.value ?? "")))
                .map(o => o.value ?? "");
        }
        else {
            // We are in single mode, if our value is an array of values then
            // convert it to a single value by taking the first value.
            if (Array.isArray(value)) {
                value = value.length === 0 ? null : value[0];
            }

            // If no value is selected, then take either the blank value
            // or the first value in the list.
            if (value === null) {
                value = computedShowBlankItem.value
                    ? props.blankValue
                    : (props.items[0]?.value || props.blankValue);
            }

            // Ensure it is a valid value, if not then set it to either the
            // blank value or the first value in the list.
            const selectedOption = props.items.find(o => props.compareValue(value as string, o.value ?? "")) || null;

            if (!selectedOption) {
                value = computedShowBlankItem.value
                    ? props.blankValue
                    : (props.items[0]?.value || props.blankValue);
            }
            else {
                value = selectedOption.value ?? "";
            }
        }

        updateRefValue(internalValue, value);
    };

    /**
     * Determines if a single option should be included during a search
     * operation.
     *
     * @param input The search string typed by the individual.
     * @param option The option to be filtered.
     *
     * @returns true if the option should be included in the list, otherwise false.
     */
    const filterItem = (input: string, option: SelectOption): boolean => {
        return (option.label || "").toLocaleLowerCase().indexOf(input.toLocaleLowerCase()) >= 0;
    };

    /**
     * Gets the element that will contain the popup. By default this is the
     * document body, but that breaks if the user is viewing the page
     * fullscreen via one of the panel fullscreen buttons.
     *
     * @returns The HTML element to place the popup into.
     */
    const getPopupContainer = (): HTMLElement => {
        return controlWrapper.value ?? document.body;
    };

    // #endregion

    // #region Event Handlers

    const onDropdownVisibleChange = (open: boolean): void => {
        if (open) {
            emit("open");
        }
    };

    // #endregion

    watch([() => props.modelValue, computedShowBlankItem, () => props.multiple, () => props.items], () => {
        syncInternalValue();
    });

    // Watch for changes to the selection made in the UI and then make
    // make sure its in the right format and valid.
    watch(internalValue, () => {
        let newValue = internalValue.value;

        if (props.multiple) {
            // We are in multiple select mode, but if we have a non-array
            // value then convert it to an array.
            if (!Array.isArray(newValue)) {
                newValue = newValue === null ? [] : [newValue];
            }
        }
        else {
            // We are in single select mode, but if we have an array
            // value then convert it to a single item.
            if (Array.isArray(newValue)) {
                newValue = newValue.length === 0 ? null : newValue[0];
            }

            // Ensure that single item is valid.
            if (newValue === null) {
                newValue = computedShowBlankItem.value
                    ? props.blankValue
                    : (props.items[0]?.value || props.blankValue);
            }
        }

        // If the value hasn't changed, then emit the new value. Normally
        // we wouldn't have to do this check, but when emitting complex
        // things like an array it can sometimes cause unwanted loops if
        // we don't.
        if (!deepEqual(props.modelValue, newValue, true)) {
            emit("update:modelValue", newValue);
        }
    });

    syncInternalValue();
</script>
