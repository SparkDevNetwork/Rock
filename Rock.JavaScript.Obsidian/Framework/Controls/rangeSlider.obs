<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField
                   :modelValue="internalValue"
                   v-bind="fieldProps"
                   :formGroupClasses="'rock-range-slider ' + fieldProps.formGroupClasses"
                   name="range-slider">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <InlineRangeSlider v-model="internalValue" :uniqueId="uniqueId" v-bind="field" :step="step" :min="min" :max="max" :showValueBar="showValueBar" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { PropType } from "vue";
    import { useVModelPassthrough, standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import InlineRangeSlider from "./inlineRangeSlider.obs";
    import RockFormField from "./rockFormField.obs";

    const props = defineProps({
        modelValue: {
            type: Number,
            required: true
        },

        step: {
            type: Number,
            default: 1
        },

        min: {
            type: Number as PropType<number>,
            default: 0
        },

        max: {
            type: Number as PropType<number>,
            default: 100
        },

        showValueBar: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", v: number): void
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const fieldProps = useStandardRockFormFieldProps(props);
</script>