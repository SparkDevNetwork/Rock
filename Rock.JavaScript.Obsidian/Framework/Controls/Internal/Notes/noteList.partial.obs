<template>
    <ul class="note-list list-unstyled" :class="additionalListClasses">
        <component v-for="note in notes"
                   :key="note.idKey!"
                   :is="noteComponent"
                   :note="note"
                   :depth="depth"
                   @delete="onDeleteNote"
                   @edited="onEditedNote">
        </component>
    </ul>
</template>

<script setup lang="ts">
    import { Component, computed, PropType } from "vue";
    import { ExpandedNoteBag } from "./types.partial";
    import { sortNotes, useNoteOptions } from "./utils.partial";
    import { alert, confirmDelete } from "@Obsidian/Utility/dialogs";

    const props = defineProps({
        notes: {
            type: Array as PropType<ExpandedNoteBag[]>,
            required: true
        },

        depth: {
            type: Number as PropType<number>,
            default: 0
        }
    });

    // #region Values

    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const noteOptions = useNoteOptions();

    // #endregion

    // #region Computed Values

    /**
     * Contains the additional CSS classes that will be applied to the `ul`
     * element.
     */
    const additionalListClasses = computed((): string => {
        return props.depth > 0 ? "note-list-nested" : "note-view-list";
    });

    const noteComponent = computed((): Component => {
        return noteOptions.value.noteComponent;
    });

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when it has been requsted that a direct child note
     * be deleted from the server.
     *
     * @param note The note that has been deleted.
     */
    async function onDeleteNote(note: ExpandedNoteBag): Promise<void> {
        if (!note.idKey || !noteOptions.value.deleteNote) {
            return;
        }
        if (!await confirmDelete("Note")) {
            return;
        }

        try {
            await noteOptions.value.deleteNote(note.idKey);
        }
        catch (e) {
            await alert(e instanceof Error ? e.message : "Unable to delete note.");
            return;
        }

        const index = props.notes.findIndex(n => n.idKey === note.idKey);

        if (index >= 0) {
            props.notes.splice(index, 1);
        }
    }

    /**
     * Event handler for when a direct child note has been edited. The passed
     * note is the new object data that should replace the old data.
     *
     * @param note The new note that was edited.
     */
    function onEditedNote(note: ExpandedNoteBag): void {
        const index = props.notes.findIndex(n => n.idKey === note.idKey);

        if (index < 0) {
            return;
        }

        const oldNote = props.notes[index];
        const reorder = oldNote.isAlert !== note.isAlert
            || oldNote.isPinned !== note.isPinned;

        props.notes.splice(index, 1, note);

        if (reorder) {
            sortNotes(props.notes, noteOptions.value.isDescending);
        }
    }

    // #endregion
</script>
