<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div :class="['accordion', `accordion-${accordionType}`, { 'accordion-pb-0': removeBottomPadding, 'accordion-pt-0': removeTopPadding, 'disabled': disabled }]">
        <Panel v-model="isExpanded"
               :hasCollapse="true"
               :panelBodyCssClass="isPaddingRemoved ? 'p-0' : ''">
            <template #title>
                <h6>{{ title }}</h6>
            </template>
            <slot></slot>
        </Panel>
    </div>
</template>

<style scoped>
.accordion.disabled {
    pointer-events: none;
}

.accordion.disabled :deep(.panel-title),
.accordion.disabled :deep(.panel-header-actions > .action) {
    color: var(--theme-medium);
}

.accordion-link :deep(.panel > .panel-heading) {
    background-color: transparent;
    border-bottom: none;
    color: var(--color-info-strong);
    min-height: unset;
}

.accordion-link :deep(.panel .panel-title) {
    flex-grow: 0;
    padding-right: var(--spacing-xsmall);
    padding-left: var(--panel-body-padding);
}

.accordion-link :deep(.panel .panel-title h6) {
    margin: var(--spacing-small) 0;
}

.accordion-link :deep(.panel .panel-header-actions > .action) {
    flex-grow: 0;
    color: var(--color-info-strong);
}
</style>

<script setup lang="ts">
    import { PropType, ref } from "vue";
    import { useAccordionGroup } from "./utils.partial";
    import Panel from "@Obsidian/Controls/panel.obs";

    defineProps({
        title: {
            type: String as PropType<string | undefined>,
            required: false
        },

        removeBottomPadding: {
            type: Boolean as PropType<boolean | undefined>
        },

        removeTopPadding: {
            type: Boolean as PropType<boolean | undefined>
        },

        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        isPaddingRemoved: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        accordionType: {
            type: String as PropType<"default" | "link">,
            default: "default"
        }
    });

    // #region Values

    const isExpanded = ref<boolean>(false);

    // #endregion

    useAccordionGroup(isExpanded);
</script>