<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <HtmlEditor v-if="mode === 'html'"
                v-model="innerHtml"
                :autocommitDelayMs="0"
                :editorHeight="380"
                :mergeFields="mergeFields ?? []"
                :shortLinkCheckToken="shortLinkCheckToken"
                :shortLinkGetPageId="shortLinkGetPageId"
                :shortLinkSites="shortLinkSites"
                :shortLinkTokenMinLength="shortLinkTokenMinLength"
                toolbar="light-compact" />

    <CodeEditor v-else-if="mode === 'code'"
                v-model="innerHtml" />
</template>

<script setup lang="ts">
    import { onUnmounted, PropType, ref, watch } from "vue";
    import { RockCssClassContentEditable } from "../utils.partial";
    import CodeEditor from "@Obsidian/Controls/codeEditor.obs";
    import HtmlEditor from "@Obsidian/Controls/htmlEditor.obs";
    import { Guid } from "@Obsidian/Types";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        element: {
            type: Object as PropType<HTMLElement>,
            required: true
        },

        mode: {
            type: String as PropType<"html" | "code">,
            default: "html" as const
        },

        mergeFields: {
            type: Object as PropType<string[] | null | undefined>,
            required: false
        },

        shortLinkCheckToken: {
            type: Object as PropType<((token: string, siteId: number) => Promise<string>) | null | undefined>
        },

        shortLinkGetPageId: {
            type: Object as PropType<((pageGuid: Guid) => Promise<number | null | undefined>) | null | undefined>
        },

        shortLinkSites: {
            type: Object as PropType<ListItemBag[] | null | undefined>
        },

        shortLinkTokenMinLength: {
            type: Number as PropType<number | null | undefined>
        },
    });

    const emit = defineEmits<{
        (e: "change", value: string): void;
    }>();

    // #region Values

    // Initialized in the immediate watcher below.
    const innerHtml = ref<string>(props.element.innerHTML ?? "");

    // #endregion

    // #region Event Handlers

    function onInput(): void {
        if (innerHtml.value !== props.element.innerHTML) {
            innerHtml.value = props.element.innerHTML;
        }
    }

    // #endregion

    // #region Watchers

    watch(innerHtml, (value: string) => {
        if (value !== props.element.innerHTML) {
            props.element.innerHTML = value;

            emit("change", value);
        }
    });

    watch(() => props.element, (newValue, oldValue) => {
        innerHtml.value = props.element.innerHTML;

        if (oldValue) {
            oldValue.removeEventListener("input", onInput);
        }

        const component = newValue.closest(".component[data-state='component']");
        if (component?.parentElement && component.parentElement.querySelectorAll(`[contenteditable="true"],.${RockCssClassContentEditable}`).length) {
            newValue.addEventListener("input", onInput);
        }
    }, {
        immediate: true
    });

    // #endregion

    // #region Hooks

    onUnmounted(() => {
        props.element.removeEventListener("input", onInput);
    });

    // #endregion
</script>