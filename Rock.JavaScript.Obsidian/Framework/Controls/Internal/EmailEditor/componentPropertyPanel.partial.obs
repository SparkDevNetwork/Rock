<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TitleComponentPropertyPanel v-if="componentTypeName === 'title'"
                                 :componentElement="componentElement"
                                 :hasScrollableBody="true"
                                 @clone="$emit('clone')"
                                 @complete="$emit('complete')"
                                 @delete="$emit('delete')" />

    <VideoComponentPropertyPanel v-else-if="componentTypeName === 'video'"
                                 :componentElement="componentElement"
                                 :hasScrollableBody="true"
                                 :videoProviderNames="videoProviderNames"
                                 @clone="$emit('clone')"
                                 @complete="$emit('complete')"
                                 @delete="$emit('delete')" />

    <ButtonComponentPropertyPanel v-else-if="componentTypeName === 'button'"
                                  :componentElement="componentElement"
                                  :hasScrollableBody="true"
                                  @clone="$emit('clone')"
                                  @complete="$emit('complete')"
                                  @delete="$emit('delete')" />

    <TextComponentPropertyPanel v-else-if="componentTypeName === 'text'"
                                :componentElement="componentElement"
                                :hasScrollableBody="true"
                                :mergeFields="mergeFields"
                                @clone="$emit('clone')"
                                @complete="$emit('complete')"
                                @delete="$emit('delete')" />

    <DividerComponentPropertyPanel v-else-if="componentTypeName === 'divider'"
                                   :componentElement="componentElement"
                                   :hasScrollableBody="true"
                                   @clone="$emit('clone')"
                                   @complete="$emit('complete')"
                                   @delete="$emit('delete')" />

    <AdaptiveMessageComponentPropertyPanel v-else-if="componentTypeName === 'message'"
                                           :componentElement="componentElement"
                                           :hasScrollableBody="true"
                                           @clone="$emit('clone')"
                                           @complete="$emit('complete')"
                                           @delete="$emit('delete')" />

    <ImageComponentPropertyPanel v-else-if="componentTypeName === 'image'"
                                 :componentElement="componentElement"
                                 :hasScrollableBody="true"
                                 :imageComponentBinaryFileTypeGuid="imageComponentBinaryFileTypeGuid"
                                 @clone="$emit('clone')"
                                 @complete="$emit('complete')"
                                 @delete="$emit('delete')" />

    <CodeComponentPropertyPanel v-else-if="componentTypeName === 'code'"
                                :componentElement="componentElement"
                                :hasScrollableBody="true"
                                :mergeFields="mergeFields"
                                @clone="$emit('clone')"
                                @complete="$emit('complete')"
                                @delete="$emit('delete')" />

    <RsvpComponentPropertyPanel v-else-if="componentTypeName === 'rsvp'"
                                :componentElement="componentElement"
                                :hasScrollableBody="true"
                                :recipientPersonIds="recipientPersonIds"
                                @clone="$emit('clone')"
                                @complete="$emit('complete')"
                                @delete="$emit('delete')" />

    <SectionComponentPropertyPanel v-else-if="componentTypeName === 'section'"
                                   :componentElement="componentElement"
                                   :hasScrollableBody="true"
                                   :isCloneDisabled="isRootSectionComponent && !parentStructureDropzone"
                                   @clone="$emit('clone')"
                                   @complete="$emit('complete')"
                                   @delete="$emit('delete')"
                                   @emailSectionSaved="$emit('emailSectionSaved', $event)" />

    <RowComponentPropertyPanel v-else-if="componentTypeName === 'row'"
                               :componentElement="componentElement"
                               :hasScrollableBody="true"
                               @clone="$emit('clone')"
                               @complete="$emit('complete')"
                               @delete="$emit('delete')" />

    <div v-else>Unknown component type: {{ componentTypeName }}.</div>
</template>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import AdaptiveMessageComponentPropertyPanel from "./propertyPanels/adaptiveMessageComponentPropertyPanel.partial.obs";
    import ButtonComponentPropertyPanel from "./propertyPanels/buttonComponentPropertyPanel.partial.obs";
    import CodeComponentPropertyPanel from "./propertyPanels/codeComponentPropertyPanel.partial.obs";
    import DividerComponentPropertyPanel from "./propertyPanels/dividerComponentPropertyPanel.partial.obs";
    import ImageComponentPropertyPanel from "./propertyPanels/imageComponentPropertyPanel.partial.obs";
    import RowComponentPropertyPanel from "./propertyPanels/rowComponentPropertyPanel.partial.obs";
    import RsvpComponentPropertyPanel from "./propertyPanels/rsvpComponentPropertyPanel.partial.obs";
    import SectionComponentPropertyPanel from "./propertyPanels/sectionComponentPropertyPanel.partial.obs";
    import TextComponentPropertyPanel from "./propertyPanels/textComponentPropertyPanel.partial.obs";
    import TitleComponentPropertyPanel from "./propertyPanels/titleComponentPropertyPanel.partial.obs";
    import VideoComponentPropertyPanel from "./propertyPanels/videoComponentPropertyPanel.partial.obs";
    import { EditorComponentTypeName } from "./types.partial";
    import { getComponentTypeName } from "./utils.partial";
    import { Guid } from "@Obsidian/Types";
    import { isHTMLElement } from "@Obsidian/Utility/dom";
    import { EmailEditorEmailSectionBag } from "@Obsidian/ViewModels/Rest/Controls/emailEditorEmailSectionBag";

    const props = defineProps({
        componentElement: {
            type: Object as PropType<HTMLElement>,
            required: true
        },

        imageComponentBinaryFileTypeGuid: {
            type: String as PropType<Guid>,
            required: true
        },

        mergeFields: {
            type: Object as PropType<string[] | null | undefined>,
            required: false
        },

        recipientPersonIds: {
            type: Object as PropType<number[] | null | undefined>,
            required: true
        },

        videoProviderNames: {
            type: Object as PropType<string[] | null | undefined>,
            required: true
        }
    });

    defineEmits<{
        (e: "clone"): void;
        (e: "complete"): void;
        (e: "delete"): void;
        (e: "emailSectionSaved", value: EmailEditorEmailSectionBag): void;
    }>();

    // #region Computed Values

    const componentTypeName = computed<EditorComponentTypeName>(() => {
        return getComponentTypeName(props.componentElement);
    });

    const isRootSectionComponent = computed<boolean>(() => {
        return !!props.componentElement.matches(".component-section") &&
            !props.componentElement.closest(".dropzone");
    });

    const parentStructureDropzone = computed<HTMLElement | null>(() => {
        const structureDropzoneElement = props.componentElement.parentElement?.closest(".structure-dropzone");

        if (isHTMLElement(structureDropzoneElement)) {
            return structureDropzoneElement;
        }
        else {
            return null;
        }
    });

    // #endregion Computed Values
</script>