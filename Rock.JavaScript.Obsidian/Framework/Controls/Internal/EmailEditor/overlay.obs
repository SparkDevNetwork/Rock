<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div v-if="internalIsVisible"
         :style="overlayStyles"
         class="overlay">
        <slot></slot>
    </div>
</template>

<style scoped>
.overlay {
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: v-bind(zIndex);

    pointer-events: auto;
    background-color: v-bind(backgroundColor);
}
</style>

<script setup lang="ts">
    import { onMounted, onUnmounted, PropType, ref, watch } from "vue";

    const props = defineProps({
        targetSelector: {
            type: String as PropType<string>,
            required: true,
        },

        isVisible: {
            type: Boolean as PropType<boolean>,
            default: false,
            required: true
        },

        displayDelayMs: {
            type: Number as PropType<number>,
            default: 0
        },

        zIndex: {
            type: Object as PropType<"auto" | "inherit" | number>,
            default: "auto" as const
        },

        isAbsolute: {
            type: Boolean as PropType<boolean>,
            default: true
        },

        backgroundColor: {
            type: String as PropType<string>,
            default: "var(--modal-backdrop-background)"
        }
    });

    // eslint-disable-next-line no-undef
    let timeoutId: NodeJS.Timeout | null | undefined;

    // #region Values

    const internalIsVisible = ref<boolean>(props.isVisible);
    const overlayStyles = ref<Record<string, string>>({});

    // #endregion Values

    // #region Computed Values


    function updateOverlayStyles(): void {
        const target = document.querySelector(props.targetSelector) as HTMLElement;

        if (!target) {
            overlayStyles.value = {};
            return;
        }

        if (!props.isAbsolute) {
            const rect = target.getBoundingClientRect();
            overlayStyles.value = {
                position: "fixed", // Use fixed positioning
                top: `${rect.top}px`,
                left: `${rect.left}px`,
                width: `${rect.width}px`,
                height: `${rect.height}px`
            };
        }
        else {
            // Ensure the target has relative positioning.
            const targetPosition = target.ownerDocument.defaultView?.getComputedStyle(target).position;
            if (!targetPosition || ["relative", "absolute", "fixed"].includes(targetPosition)) {
                target.style.position = "relative";
            }

            overlayStyles.value = {
                position: "absolute",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%"
            };
        }
    }

    // #endregion Computed Values

    // #region Watchers

    watch(() => props.isVisible, isVisible => {
        if (isVisible) {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            updateOverlayStyles();

            timeoutId = setTimeout(() => {
                internalIsVisible.value = true;
            }, props.displayDelayMs);
        }
        else {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            internalIsVisible.value = false;
        }
    });

    // #endregion Watchers

    // #region Hooks

    onMounted(() => {
        updateOverlayStyles();
        window.addEventListener("scroll", updateOverlayStyles);
        window.addEventListener("resize", updateOverlayStyles);
    });

    onUnmounted(() => {
        window.removeEventListener("scroll", updateOverlayStyles);
        window.removeEventListener("resize", updateOverlayStyles);
    });

    // #endregion Hooks
</script>
