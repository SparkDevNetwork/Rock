<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div v-if="message" class="email-body">
        <iframe ref="iframeElement" :srcdoc="message"></iframe>
    </div>
</template>

<style scoped>
.email-body {
    display: flex;
}

.email-body iframe {
    width: 100%;
}
</style>

<script setup lang="ts">
    import { computed, nextTick, onBeforeUnmount, PropType, ref, watch } from "vue";

    const defaultMinimumPixelHeight = 450;

    const props = defineProps({
        message: {
            type: String as PropType<string>,
            required: true
        },

        minimumPixelHeight: {
            type: Number as PropType<number>,
            default: 450
        }
    });

    // #region Values

    const iframeElement = ref<HTMLIFrameElement | undefined>();

    let loadHandler: (() => void) | null = null;
    let resizeObserver: ResizeObserver | null = null;

    // #endregion Values

    const minimumPixelHeight = computed((): number => {
        return props.minimumPixelHeight > 0
            ? props.minimumPixelHeight
            : defaultMinimumPixelHeight;
    });

    // #region Watchers

    watch(iframeElement, (newIframe, oldIFrame) => {
        resizeObserver?.disconnect();
        resizeObserver = null;

        if (oldIFrame && loadHandler) {
            oldIFrame.removeEventListener("load", loadHandler);
        }

        if (!newIframe) {
            return;
        }

        const updateHeight = (): void => {
            nextTick(() => {
                const contentHeight = newIframe.contentWindow
                    ?.document.body.scrollHeight
                    ?? minimumPixelHeight.value;

                newIframe.style.height = `${contentHeight}px`;
                newIframe.style.minHeight = `${minimumPixelHeight.value}px`;
            });
        };

        if (window.ResizeObserver) {
            resizeObserver = new ResizeObserver(() => {
                updateHeight();
            });
        }

        loadHandler = () => {
            updateHeight();

            // Fallback: ensure height settles even if late layout changes occur.
            setTimeout(() => updateHeight(), 100);

            const doc = newIframe.contentDocument || newIframe.contentWindow?.document;
            if (doc?.body && resizeObserver) {
                resizeObserver.observe(doc.body);
            }
        };

        newIframe.addEventListener("load", loadHandler);
    });

    // #endregion Watchers

    // #region Lifecycle Hooks

    onBeforeUnmount(() => {
        resizeObserver?.disconnect();
    });

    // #endregion Lifecycle Hooks
</script>
