<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div :class="containerClasses">
        <div v-if="screenToShow === ComponentScreen.Configuration">
            <div class="assessment-item-short-answer-configuration-container">
                <div class="configuration-field-question">
                    <TextBox v-model="question"
                             :disabled="disabled"
                             label="Question"
                             rules="required" />
                </div>
                <div class="configuration-field-help-text">
                    <TextBox v-model="helpText"
                             :disabled="disabled"
                             textMode="multiline"
                             label="Help Text" />

                </div>
                <div class="configuration-field-question-weight">
                    <NumberBox v-model="questionWeight"
                               :key="weightsValidationKey"
                               :disabled="disabled"
                               label="Question Weight"
                               :rules="allAssessmentWeightsSumTo100"
                               :help="configurationWeightHelpText"
                               inputGroupClasses="input-width-md">
                        <template #inputGroupAppend>
                            <span class="input-group-addon">%</span>
                        </template>
                    </NumberBox>
                </div>
                <div class="configuration-field-answer-box-rows">
                    <NumberBox v-model="answerBoxRows"
                               :disabled="disabled"
                               label="Answer Box Rows"
                               help="Determines the height of the answer box that is shown for this answer." />

                </div>
                <div class="configuration-field-max-character-count">
                    <NumberBox v-model="maxCharacterCount"
                               :disabled="disabled"
                               label="Max Character Count"
                               help="Optionally limits the number of characters that can be provided in the answer." />
                </div>
            </div>
        </div>

        <div v-if="screenToShow === ComponentScreen.Completion">
            <TextBox v-model="response"
                     :help="helpText"
                     :label="question"
                     textMode="multiline"
                     :rows="answerBoxRows"
                     :maxLength="maxCharacterCount > 0 ? maxCharacterCount : undefined"
                     :showCountDown="maxCharacterCount > 0"
                     rules="required"
                     inputClasses="form-control" />
        </div>

        <template v-if="screenToShow === ComponentScreen.Scoring">
            <div class="scoring-screen-question-header question-header d-flex flex-fill">
                <div>
                    <span class="question-section">{{ question }}</span>
                    <div class="answer-section text-muted">
                        {{ response }}
                    </div>
                </div>

                <NumberBox v-model="pointsEarned"
                           label="Score"
                           :min="0"
                           :max="pointsPossible"
                           :rules="'lte:' + pointsPossible"
                           inputGroupClasses="input-width-lg">
                    <template #inputGroupAppend>
                        <span class="input-group-addon">out of {{ pointsPossible }}</span>
                    </template>
                </NumberBox>
            </div>

        </template>

        <div v-if="screenToShow === ComponentScreen.Summary">
            <div class="summary-screen-question-header question-header">
                <span class="short-answer-item-question question-section summary-screen">{{ question }}</span>
                <span class="badge badge-default points-label">{{ pointsEarned }}/{{ pointsPossible }}</span>
            </div>
            <div class="short-answer-item-response summary-screen">
                {{ response }}
            </div>
        </div>
    </div>
</template>

<style>
.question-header {
    display: flex;
    justify-content: space-between;
}

.summary-screen-question-header {
    margin-bottom: 16px;
}

.assessment-item-short-answer-configuration-container {
    display: grid;
    column-gap: 8px;
    grid-template-columns: repeat(2, 1fr);
}

.configuration-field-question {
    grid-column: 1 / 3;
    grid-row: 1;
}

.configuration-field-help-text {
    grid-column: 1 / 3;
    grid-row: 2;
}

.configuration-field-question-weight {
    grid-column: 1 / 2;
    grid-row: 3;
}

.configuration-field-answer-box-rows {
    grid-column: 1 / 2;
    grid-row: 4;
}

.configuration-field-max-character-count {
    grid-column: 2 / 3;
    grid-row: 4;
}

.question-section {
    font-weight: bold;
}
</style>

<script setup lang="ts">
    import { PropType, computed, ref, toValue, watch } from "vue";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import { ComponentScreen } from "./learningActivity";
    import { AssessmentItem, ShortAnswerItem, WeightsValidationFunction } from "./assessmentLearningActivity.partial";
    import { newGuid } from "@Obsidian/Utility/guid";

    const props = defineProps({
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** Whether the activity has been graded yet. If not then the default pointsEarned will be empty. */
        hasBeenGraded: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** The assessment item's configuration. */
        modelValue: {
            type: Object as PropType<ShortAnswerItem | AssessmentItem>,
            required: true
        },

        screenToShow: {
            type: Object as PropType<ComponentScreen>,
            required: true
        },

        allAssessmentWeightsSumTo100: {
            type: Function as PropType<WeightsValidationFunction>,
        },

        weightsValidationKey: {
            type: String as PropType<string>,
            default: ""
        },

        totalActivityPoints: {
            type: Number as PropType<number>,
            default: 0
        }
    });

    const emit = defineEmits<{
        (event: "update:modelValue", value: ShortAnswerItem): void,
        (event: "update:weightsValidationKey", value: string): void
    }>();

    const defaultAnswerBoxRows = 3;
    const internalModelValue = ref(props.modelValue as ShortAnswerItem);

    const question = ref(internalModelValue.value.question ?? "");
    const helpText = ref(internalModelValue.value.helpText ?? "");
    const questionWeight = ref(internalModelValue.value.questionWeight);
    const answerBoxRows = ref(internalModelValue.value.answerBoxRows ?? defaultAnswerBoxRows);
    const maxCharacterCount = ref(internalModelValue.value.maxCharacterCount ?? 0);
    const response = ref(internalModelValue.value.response ?? "");
    const pointsEarned = ref<number | null>(props.hasBeenGraded ? internalModelValue.value.pointsEarned : null);

    // If the completion record contains pointsPossible values then use those;
    // otherwise calculate based on current total activity points and question weight.
    // This logic is to maintain the state of the response based on configuration at a point-in-time.
    const pointsPossible = computed(() => internalModelValue.value.pointsPossible ?? (props.totalActivityPoints * questionWeight.value / 100));

    const configurationWeightHelpText = `
        Enter the percentage weight for this question.
        This value will determine how much this one question will contribute to the overall score of the test.
        For example, if you set this to 40% then 40% of the individual's total test score will be based on their response to this one question.
        Ensure that the combined weights of all sections add up to 100%.`;

    function emitNewModel(): void {
        const newModelValue = {
            answerBoxRows: toValue(answerBoxRows),
            helpText: toValue(helpText),
            maxCharacterCount: toValue(maxCharacterCount),
            pointsEarned: toValue(pointsEarned),
            pointsPossible: toValue(pointsPossible),
            question: toValue(question),
            questionWeight: toValue(questionWeight),
            response: response.value,
            typeName: internalModelValue.value.typeName,
            uniqueId: internalModelValue.value.uniqueId
        } as ShortAnswerItem;

        emit("update:modelValue", newModelValue);
    }

    watch(questionWeight, () => {
        // Because the parent component owns a control whose
        // validity is tied to the value of this control
        // we need to alert them when it's value changes.
        emit("update:weightsValidationKey", newGuid());
        emitNewModel();
    });

    watch([question, helpText, answerBoxRows, maxCharacterCount, response, pointsEarned], () => {
        emitNewModel();
    });

    /** CSS classes for the panel. */
    const containerClasses = computed((): string[] => {
        const screenName = toValue(props.screenToShow);
        return [
            "lms-assessment-item-container",
            `lms-assessment-item-${screenName.toLowerCase()}-container`,
            `lms-assessment-item-short-answer-container`
        ];
    });

</script>