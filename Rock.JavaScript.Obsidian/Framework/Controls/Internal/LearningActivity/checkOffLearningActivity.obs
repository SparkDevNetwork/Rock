<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel v-if="[ComponentScreen.Configuration, ComponentScreen.Summary].includes(screenToShow)" :title="panelTitle" :hasFullscreen="false" :class="containerClasses">
        <div v-if="screenToShow === ComponentScreen.Configuration">
            <div class="header-content-section">
                <StructuredContentEditor label="Content" v-model="content" :disabled="disabled" />
            </div>
            <div class="is-required-section">
                <CheckBox v-model="isConfirmationRequired" label="Confirmation Required" :disabled="disabled" />
            </div>

            <div class="footer-content-section">
                <TextBox v-model="confirmationText"
                         :disabled="disabled"
                         label="Confirmation Text"
                         textMode="multiline"
                         help="Enter a brief statement individuals will agree to by checking off." />
            </div>
        </div>
        <div v-if="screenToShow === ComponentScreen.Summary">
            <NotificationBox v-if="dateConfirmed" alertType="success">
                {{ assignee?.name ?? defaultAssigneeDescription }} checked off that they completed this activity at {{ dateConfirmed }}.
            </NotificationBox>
            <NotificationBox v-if="!dateConfirmed" alertType="warning">
                {{ assignee?.name ?? defaultAssigneeDescription }} has not checked off this activity.
            </NotificationBox>
        </div>
    </Panel>

    <div v-if="screenToShow === ComponentScreen.Completion" :class="containerClasses">
        <fieldset>
            <div class="header-content-section">
                <StructuredContentEditor :disabled="true"
                                         v-model="content" />
            </div>
            <div class="is-required-section" v-if="isConfirmationRequired">
                <CheckBox v-model="isConfirmed" label="" :disabled="completionBag.isStudentCompleted" :text="confirmationText" />
            </div>

            <div class="footer-content-section">
                <RockButton :btnType="BtnType.Primary" :disabled="!isConfirmed || completionBag.isStudentCompleted" @click="emits('completed', true)">
                    Complete
                </RockButton>
            </div>
        </fieldset>
    </div>
</template>

<script setup lang="ts">
    import { ref, toRef, toValue, watch, } from "vue";
    import { debounce } from "@Obsidian/Utility/util";
    import Panel from "@Obsidian/Controls/panel.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import StructuredContentEditor from "@Obsidian/Controls/structuredContentEditor.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { LearningActivityCompletionBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityCompletionDetail/learningActivityCompletionBag";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { learningActivityEmits, learningActivityProps, ComponentScreen, useLearningComponent } from "./learningActivity";
    import { CheckOffActivityCompletion, CheckOffActivityConfiguration, CheckOffActivityDefaults } from "./checkOffLearningActivity.partial";

    // Get the required props and emits for learning activity components.
    const props = defineProps({ ...learningActivityProps });
    const emits = defineEmits({ ...learningActivityEmits });

    const disabled = ref(props.disabled ?? false);

    // Get the bags directly from the props when needed (to support the useLearningComponent computedRefs).
    const activityBag = toRef(() => props.activityBag);
    const completionBag = toRef(() => props.completionBag ?? {} as LearningActivityCompletionBag);
    const screenToShow = toRef(() => props.screenToShow ?? ComponentScreen.Summary);

    /** Initialize the base component and destructure the refs we need for use in this component. */
    const {
        assignee,
        confirmationText,
        containerClasses,
        content,
        dateConfirmed,
        defaultAssigneeDescription,
        isConfirmed,
        isConfirmationRequired,
        panelTitle
    } = useLearningComponent<CheckOffActivityConfiguration, CheckOffActivityCompletion>(
        activityBag,
        completionBag,
        screenToShow,
        new CheckOffActivityDefaults()
    );

    /** Watch for modified component settings. */
    const debouncedActivityBagEmits = debounce(() => {
        const updatedActivityBag = {
            ...toValue(activityBag)
        } as LearningActivityBag;

        updatedActivityBag.activityComponentSettingsJson = JSON.stringify({
            content: content.value,
            confirmationText: confirmationText.value,
            isConfirmationRequired: isConfirmationRequired.value
        }) ?? "{}";

        emits("update:activityBag", updatedActivityBag);
    });
    watch([content, confirmationText, isConfirmationRequired], () => {
        debouncedActivityBagEmits();
    }, { deep: true });

    /** Watch for modified component completion. */
    const debouncedCompletionBagEmits = debounce(() => {
        const updatedCompletionBag = {
            ...toValue(completionBag)
        } as LearningActivityCompletionBag;

        updatedCompletionBag.activityComponentCompletionJson = JSON.stringify({
            isConfirmed: isConfirmed.value,
            dateConfirmed: dateConfirmed.value
        }) ?? "{}";
        emits("update:completionBag", updatedCompletionBag);
    });
    watch([isConfirmed, dateConfirmed], () => {
        debouncedCompletionBagEmits();
    }, { deep: true });
</script>