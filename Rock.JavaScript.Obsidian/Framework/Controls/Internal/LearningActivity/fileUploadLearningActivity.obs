<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel :title="panelTitle" :class="containerClasses" v-if="screenToShow !== ComponentScreen.Completion">
        <div v-if="screenToShow === ComponentScreen.Configuration" class="configuration-container">
            <div class="instructions-section">
                <StructuredContentEditor label="Instructions" v-model="instructions" :disabled="disabled" />
            </div>
            <div class="rubric-section">
                <StructuredContentEditor label="Grading Rubric" v-model="rubric" :disabled="disabled" />
            </div>
            <div class="row">
                <div class="show-rubric-on-upload-section col-md-6">
                    <CheckBox v-model="showRubricOnUpload" label="Show Rubric on Upload" :disabled="disabled" />
                </div>
                <div class="show-rubric-on-scoring-section col-md-6">
                    <CheckBox v-model="showRubricOnScoring" label="Show Rubric on Scoring" :disabled="disabled" />
                </div>
            </div>
        </div>

        <div v-if="screenToShow === ComponentScreen.Scoring">
            <fieldset>
                <div class="instructions-section">
                    <StructuredContentEditor :disabled="true" label="Instructions" v-model="instructions" />
                </div>
                <div class="rubric-section" v-if="showRubricOnScoring">
                    <StructuredContentEditor :disabled="true" label="Grading Rubric" v-model="rubric" />
                </div>

                <div class="grading-section">
                    <div class="file-section d-flex flex-column">
                        <RockLabel>File</RockLabel>
                        <a v-if="fileUrl" :href="fileUrl" target="_blank">{{ binaryFile?.text }}</a>
                    </div>
                </div>
            </fieldset>
        </div>

        <div v-if="screenToShow === ComponentScreen.Summary">
            <NotificationBox v-if="binaryFile" alertType="success">
                {{ assignee?.name ?? defaultAssigneeDescription }} uploaded the following file:
                <a v-if="fileUrl" :href="fileUrl" target="_blank">{{ binaryFile.text }}</a>.
            </NotificationBox>
            <NotificationBox v-if="!binaryFile" alertType="warning">
                {{ assignee?.name ?? defaultAssigneeDescription }} has not uploaded a file.
            </NotificationBox>
        </div>
    </Panel>

    <div v-if="screenToShow === ComponentScreen.Completion" :class="containerClasses">

        <div class="instructions-section">
            <StructuredContentEditor
                                     :disabled="true"
                                     label="Instructions"
                                     v-model="instructions"
                                     help="The content to show to the individual above the file upload. This is used to describe the paper or file that is to be provided." />
        </div>
        <div class="rubric-section" v-if="showRubricOnUpload">
            <StructuredContentEditor
                                     :disabled="true"
                                     label="Grading Rubric"
                                     v-model="rubric"
                                     help="The content to show the facilitator who is grading the file uploaded. This can be configured below to be shown to the individual when uploading and/or the facilitator when grading." />
        </div>

        <div class="file-upload-section">
            <FileUploader v-model="binaryFile"
                          label="Upload File"
                          rules="required"
                          :binaryFileTypeGuid="BinaryFiletype.LearningManagementSystem"
                          uploadButtonText="Upload"
                          :disabled="hasBeenGraded"
                          :showDeleteButton="true" />
        </div>
        <div class="footer-button-section">
            <RockButton :btnType="BtnType.Primary"
                        :disabled="!binaryFile || completeClicked"
                        :autoDisable="true"
                        @click="onCompletedAndClosed">
                {{ completeButtonText }}
            </RockButton>
        </div>

    </div>

</template>

<script setup lang="ts">
    import { computed, ref, toValue, watch, } from "vue";
    import { debounce } from "@Obsidian/Utility/util";
    import Panel from "@Obsidian/Controls/panel.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import StructuredContentEditor from "@Obsidian/Controls/structuredContentEditor.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import FileUploader from "@Obsidian/Controls/fileUploader.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BinaryFiletype } from "@Obsidian/SystemGuids/binaryFiletype";
    import { LearningActivityCompletionBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityCompletionDetail/learningActivityCompletionBag";
    import { LearningActivityBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningActivityDetail/learningActivityBag";
    import { learningActivityEmits, learningActivityProps, ComponentScreen, useLearningComponent } from "./learningActivity";
    import { FileUploadActivityCompletion, FileUploadActivityConfiguration, FileUploadActivityDefaults } from "./fileUploadLearningActivity.partial";

    // Get the required props and emits for learning activity components.
    const props = defineProps({ ...learningActivityProps });
    const emits = defineEmits({ ...learningActivityEmits });

    const disabled = ref(props.disabled ?? false);
    const completeClicked = ref(false);

    // Get the bags directly from the props when needed (to support the useLearningComponent computedRefs).
    const activityBag = computed(() => props.activityBag);
    const completionBag = computed(() => props.completionBag ?? {} as LearningActivityCompletionBag);
    const screenToShow = computed(() => props.screenToShow ?? ComponentScreen.Summary);

    /** Initialize the base component and destructure the refs we need for use in this component. */
    const {
        assignee,
        binaryFile,
        containerClasses,
        defaultAssigneeDescription,
        fileUrl,
        hasBeenGraded,
        instructions,
        isCompleted,
        panelTitle,
        pointsPossibleAtCompletion,
        rubric,
        showRubricOnScoring,
        showRubricOnUpload,
    } = useLearningComponent<FileUploadActivityConfiguration, FileUploadActivityCompletion>(
        activityBag,
        completionBag,
        screenToShow,
        new FileUploadActivityDefaults()
    );

    const pointsEarned = ref(completionBag.value.pointsEarned);
    const pointsPossible = computed(() => Number(pointsPossibleAtCompletion?.value ?? activityBag.value.points));

    function onCompletedAndClosed(): void {
        if (isCompleted.value === false) {
            emits("completed", true);
            completeClicked.value = true;
        }

        emits("closed");
    }

    const completeButtonText = computed(() => isCompleted.value === true ? "Continue" : "Complete");

    /** Watch for modified component settings. */
    const debouncedActivityBagEmits = debounce(() => {
        const updatedActivityBag = {
            ...toValue(activityBag)
        } as LearningActivityBag;

        updatedActivityBag.activityComponentSettingsJson = JSON.stringify({
            instructions: instructions.value,
            rubric: rubric.value,
            showRubricOnScoring: showRubricOnScoring.value,
            showRubricOnUpload: showRubricOnUpload.value
        }) ?? "{}";

        emits("update:activityBag", updatedActivityBag);
    });
    watch([instructions, rubric, showRubricOnScoring, showRubricOnUpload], () => {
        debouncedActivityBagEmits();
    }, { deep: true });

    /** Watch for modified component completion. */
    const debouncedCompletionBagEmits = debounce(() => {
        const updatedCompletionBag = {
            ...toValue(completionBag)
        } as LearningActivityCompletionBag;

        updatedCompletionBag.pointsEarned = pointsEarned.value;

        // Update the binaryFile for the completion activity in addition to the completion JSON.
        updatedCompletionBag.binaryFile = binaryFile.value;

        updatedCompletionBag.activityComponentCompletionJson = JSON.stringify({
            binaryFile: binaryFile.value,
            pointsPossibleAtCompletion: pointsPossible.value > 0 ? pointsPossible.value : undefined
        }) ?? "{}";
        emits("update:completionBag", updatedCompletionBag);
    });
    watch([binaryFile, pointsEarned], () => {
        debouncedCompletionBagEmits();
    }, { deep: true });
</script>