<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel v-if="screenToShow === ComponentScreen.Configuration"
           :title="panelTitle"
           :class="containerClasses"
           :hasFullscreen="false">
        <div class="learning-activity-video-file-configuration-container">
            <div>
                <RockLabel>Header Content</RockLabel>
                <StructuredContentEditor v-model="headerContent" :disabled="disabled" />
            </div>

            <div class="video-file-media-section">
                <div class="media-account-field">
                    <MediaElementPicker v-model="video"
                                        label="Video File"
                                        media-element-label="Video"
                                        rules="required"
                                        :disabled="disabled" />
                </div>

                <div class="completion-threshold-field">
                    <NumberBox v-model="completionThresholdForConfigure"
                               :disabled="disabled"
                               :decimalCount="0"
                               :minimumValue="0"
                               :maximumValue="100"
                               label="Completion Threshold"
                               help="Set the minimum percentage of the video that must be watched to count as viewed."
                               inputGroupClasses="input-width-md">
                        <template #inputGroupAppend>
                            <span class="input-group-addon">%</span>
                        </template>
                    </NumberBox>
                </div>
            </div>

            <div class="footer-content-section">
                <RockLabel>Footer Content</RockLabel>
                <StructuredContentEditor v-model="footerContent" :disabled="disabled" />
            </div>
        </div>
    </Panel>

    <Panel v-if="screenToShow === ComponentScreen.Summary"
           :title="panelTitle"
           :class="containerClasses"
           :hasFullscreen="false">
        <div v-if="screenToShow === ComponentScreen.Summary">
            <NotificationBox :alertType="notificationAlertType">
                {{ assignee?.name ?? defaultAssigneeDescription }} watched {{ formattedWatchedPercentage }}% of this video.
            </NotificationBox>
        </div>
    </Panel>

    <div v-if="screenToShow === ComponentScreen.Completion" :class="containerClasses">

        <div class="header-section">
            <div v-if="headerContent" v-html="headerContent"></div>
        </div>

        <div class="video-section">
            <MediaPlayer v-model:watchedPercentage="watchedPercentage"
                         :mediaElementGuid="video?.value ?? ''"
                         :autoResumeInDays="60"
                         :combinePlayStatisticsInDays="60" />
        </div>

        <div class="footer-section">
            <div v-if="footerContent" v-html="footerContent"></div>

            <div v-if="showStudentComment" class="optional-comments-container">
                <TextBox v-model="studentComment" label="Optional Comments" textMode="multiline" :rows="4" />
            </div>

        </div>
        <div class="footer-button-section">
            <RockButton :btnType="BtnType.Primary"
                        :disabled="!hasPassedThreshold"
                        @click="onCompletedAndClosed">
                {{ completeButtonText }}
            </RockButton>
        </div>

    </div>
</template>
<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import { debounce } from "@Obsidian/Utility/util";
    import Panel from "@Obsidian/Controls/panel.obs";
    import RockLabel from "@Obsidian/Controls/rockLabel.obs";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import MediaElementPicker from "@Obsidian/Controls/mediaElementPicker.obs";
    import MediaPlayer from "@Obsidian/Controls/mediaPlayer.obs";
    import StructuredContentEditor from "@Obsidian/Controls/structuredContentEditor.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { LearningClassActivityCompletionBag } from "@Obsidian/ViewModels/Blocks/Lms/LearningClassActivityCompletionDetail/learningClassActivityCompletionBag";
    import { learningActivityEmits, learningActivityProps, ComponentScreen, useLearningComponent } from "./learningActivity";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { updateRefValue } from "@Obsidian/Utility/component";

    const enum SettingKey {
        CompletionThreshold = "completionThreshold",
        FooterContent = "footerContent",
        HeaderContent = "headerContent",
        Video = "video"
    }

    const enum CompletionKey {
        WatchedPercentage = "watchedPercentage",
        PointsAvailableAtCompletion = "pointsAvailableAtCompletion"
    }

    // Get the required props and emits for learning activity components.
    const props = defineProps({ ...learningActivityProps });
    const emits = defineEmits({ ...learningActivityEmits });

    const disabled = ref(props.disabled ?? false);
    const completeClicked = ref(false);

    // Get the bags directly from the props when needed (to support the useLearningComponent computedRefs).
    const activityBag = computed(() => props.activityBag);
    const completionBag = computed(() => props.completionBag ?? {} as LearningClassActivityCompletionBag);
    const screenToShow = computed(() => props.screenToShow ?? ComponentScreen.Summary);
    const showStudentComment = ref(activityBag.value?.isStudentCommentingEnabled);
    const studentComment = ref(completionBag.value.studentComment ?? "");

    /** Initialize the base component and destructure the refs we need for use in this component. */
    const {
        assignee,
        containerClasses,
        defaultAssigneeDescription,
        isCompleted,
        panelTitle,
    } = useLearningComponent(activityBag, completionBag, screenToShow);

    const completionThreshold = ref(0);
    const footerContent = ref("");
    const headerContent = ref("");
    const video = ref<ListItemBag | null>(null);
    const watchedPercentage = ref(0);
    const pointsPossibleAtCompletion = ref<number>();

    // #region Computed Values

    const hasPassedThreshold = computed(() => watchedPercentage.value >= completionThreshold.value);
    const notificationAlertType = computed(() => hasPassedThreshold ? "success" : "warning");
    const formattedWatchedPercentage = computed(() => (watchedPercentage.value * 100).toFixed());

    const completeButtonText = computed(() => isCompleted.value === true ? "Continue" : "Complete");

    const completionThresholdForConfigure = computed({
        get: () => completionThreshold.value * 100,
        set: (value: number) => completionThreshold.value = value / 100
    });

    // #endregion

    // #region Functions

    function parseSafe<T>(json: string | null | undefined): T | undefined {
        if (!json) {
            return undefined;
        }

        try {
            return JSON.parse(json) as T;
        }
        catch {
            return undefined;
        }
    }

    function updateLocalValues(): void {
        if (props.screenToShow === ComponentScreen.Configuration) {
            completionThreshold.value = toNumberOrNull(props.activityBag.componentSettings?.[SettingKey.CompletionThreshold]) ?? 0;
            footerContent.value = props.activityBag.componentSettings?.[SettingKey.FooterContent] ?? "";
            headerContent.value = props.activityBag.componentSettings?.[SettingKey.HeaderContent] ?? "";
            updateRefValue(video, parseSafe(props.activityBag.componentSettings?.[SettingKey.Video]) ?? null);
        }
        else {
            completionThreshold.value = toNumberOrNull(props.activityBag.activityComponent?.componentConfiguration?.[SettingKey.CompletionThreshold]) ?? 0;
            footerContent.value = props.activityBag.activityComponent?.componentConfiguration?.[SettingKey.FooterContent] ?? "";
            headerContent.value = props.activityBag.activityComponent?.componentConfiguration?.[SettingKey.HeaderContent] ?? "";
            updateRefValue(video, parseSafe(props.activityBag.activityComponent?.componentConfiguration?.[SettingKey.Video]) ?? null);

            watchedPercentage.value = toNumberOrNull(props.completionBag?.completionValues?.[CompletionKey.WatchedPercentage]) ?? 0;
            pointsPossibleAtCompletion.value = toNumberOrNull(props.completionBag?.completionValues?.[CompletionKey.PointsAvailableAtCompletion]) ?? undefined;

            studentComment.value = props.completionBag?.studentComment ?? "";
        }
    }

    // #endregion

    // #region Event Handlers

    function onCompletedAndClosed(): void {
        if (isCompleted.value === false) {
            emits("completed", true);
            completeClicked.value = true;
        }

        emits("closed");
    }

    // #endregion

    /** Watch for modified component settings. */
    const debouncedActivityBagEmits = debounce(() => {
        const newValues = {
            ...props.activityBag.componentSettings
        };

        newValues[SettingKey.CompletionThreshold] = completionThreshold.value.toString();
        newValues[SettingKey.FooterContent] = footerContent.value;
        newValues[SettingKey.HeaderContent] = headerContent.value;
        newValues[SettingKey.Video] = JSON.stringify(video.value);

        emits("activitySettingsChanged", newValues);
    });
    watch([completionThreshold, footerContent, headerContent, video], () => {
        debouncedActivityBagEmits();
    }, { deep: true });

    /** Watch for modified component completion. */
    watch([watchedPercentage, pointsPossibleAtCompletion], () => {
        const newValues = {
            ...props.completionBag?.completionValues
        };

        const pointsPossible = pointsPossibleAtCompletion.value ?? props.activityBag.points;

        newValues[CompletionKey.WatchedPercentage] = watchedPercentage.value.toString();
        newValues[CompletionKey.PointsAvailableAtCompletion] = pointsPossible > 0
            ? pointsPossible.toString()
            : "";

        emits("completionValuesChanged", newValues);
    }, { deep: true });

    watch(studentComment, () => {
        emits("commentChanged", studentComment.value);
    });

    watch(() => [props.activityBag, props.completionBag], () => {
        updateLocalValues();
    });

    updateLocalValues();
</script>