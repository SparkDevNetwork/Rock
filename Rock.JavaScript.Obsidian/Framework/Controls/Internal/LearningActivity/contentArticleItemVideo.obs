<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div v-if="[ComponentScreen.Configuration, ComponentScreen.Completion].includes(screenToShow)" :class="containerClasses">
        <div v-if="screenToShow === ComponentScreen.Configuration">
            <MediaElementPicker v-model="video"
                                label="Video File"
                                media-element-label="Video"
                                :disabled="disabled" />
        </div>

        <div v-if="screenToShow === ComponentScreen.Completion">
            <div class="video-section">
                <MediaPlayer :mediaElementGuid="video?.value ?? ''"
                             :autoResumeInDays="60"
                             :combinePlayStatisticsInDays="60" />
            </div>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { PropType, computed, ref, toValue, watch } from "vue";
    import MediaElementPicker from "@Obsidian/Controls/mediaElementPicker.obs";
    import MediaPlayer from "@Obsidian/Controls/mediaPlayer.obs";
    import { ComponentScreen } from "./learningActivity";
    import { ContentArticleItem } from "./contentArticleLearningActivity.partial";

    const props = defineProps({
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /** The assessment item's configuration. */
        modelValue: {
            type: Object as PropType<ContentArticleItem>,
            required: true
        },

        screenToShow: {
            type: Object as PropType<ComponentScreen>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "update:modelValue", value: ContentArticleItem): void
    }>();

    const video = ref(props.modelValue.video ?? {});

    watch(video, () => {
        const newModelValue = {
            ...props.modelValue,
            video: video.value
        };

        emit("update:modelValue", newModelValue);
    });

    /** CSS classes for the panel. */
    const containerClasses = computed((): string[] => {
        const screenName = toValue(props.screenToShow);
        return [
            "lms-assessment-item-container",
            `lms-assessment-item-${screenName.toLowerCase()}-container`,
            `lms-assessment-item-section-container`
        ];
    });

</script>