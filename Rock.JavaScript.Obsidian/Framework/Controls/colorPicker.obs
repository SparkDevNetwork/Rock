<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-model="internalValue"
                   formGroupClasses="rock-color-picker"
                   name="colorpicker">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <slot name="prepend" :isInputGroupSupported="true" />

                <div ref="colorPicker" class="input-group input-width-lg">
                    <slot name="inputGroupPrepend" :isInputGroupSupported="true" />

                    <input v-model="internalValue" :id="uniqueId" type="text" class="form-control" v-bind="field" :placeholder="placeholder" />
                    <span class="input-group-addon">
                        <i></i>
                    </span>

                    <slot name="inputGroupAppend" :isInputGroupSupported="true" />
                </div>

                <slot name="append" :isInputGroupSupported="true" />
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { onMounted, PropType, ref, watch } from "vue";
    import RockFormField from "./rockFormField.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DefinedValuePickerGetDefinedValuesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/definedValuePickerGetDefinedValuesOptionsBag";
    import { emptyGuid, toGuidOrNull } from "@Obsidian/Utility/guid";
    import { useHttp } from "@Obsidian/Utility/http";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";

    // TODO: This should be replaced with a version that does not require jQuery.

    const http = useHttp();

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },
        placeholder: {
            type: String as PropType<string>,
            default: ""
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void;
    }>();

    const internalValue = ref(props.modelValue);
    const colorPicker = ref<HTMLElement>();

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let $colorPicker: any;

    watch(() => props.modelValue, () => {
        if (props.modelValue) {
            if (props.modelValue !== internalValue.value) {
                $colorPicker?.colorpicker("setValue", props.modelValue);
            }
        }
        else if ($colorPicker) {
            // When we try to call setValue with an emptys tring it freaks out
            // and puts "#aN" in the text box.
            const c = $colorPicker?.data("colorpicker").createColor("");
            $colorPicker.data("colorpicker").color = c;
            $colorPicker?.data("colorpicker").updateComponent("transparent");
        }

        internalValue.value = props.modelValue;
    });

    /**
     * Load color swatch defined type from server to display at the bottom of the picker.
     */
    async function loadColorSwatches(): Promise<ListItemBag[]> {
        const options: DefinedValuePickerGetDefinedValuesOptionsBag = {
            definedTypeGuid: toGuidOrNull(DefinedType.ColorPickerSwatches) ?? emptyGuid,
            includeInactive: false,
        };
        const url = "/api/v2/Controls/DefinedValuePickerGetDefinedValues";
        const result = await http.post<ListItemBag[]>(url, undefined, options);

        if (result.isSuccess && result.data) {
            return result.data;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            return [];
        }
    }

    onMounted(async () => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        $colorPicker = (<any>window[<any>"$"])(colorPicker.value);
        const colorSwatches = await loadColorSwatches();

        $colorPicker.colorpicker({
            colorSelectors: colorSwatches.map(c => c.text)
        });

        // Vue will not detect the change if it happens from jQuery, so we need
        // to detect the change and make sure Vue knows.
        $colorPicker.on("changeColor", () => {
            const newValue = <string>$colorPicker.find("> input").val();
            if (internalValue.value !== newValue) {
                internalValue.value = newValue;
                emit("update:modelValue", newValue);
            }
        });
    });
</script>
