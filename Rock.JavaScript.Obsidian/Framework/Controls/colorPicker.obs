<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-model="internalValue"
                   formGroupClasses="rock-color-picker"
                   name="colorpicker">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <div ref="colorPicker" class="input-group input-width-lg">
                    <input v-model="internalValue" :id="uniqueId" type="text" class="form-control" v-bind="field" :placeholder="placeholder" />
                    <span class="input-group-addon">
                        <i></i>
                    </span>
                </div>
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { onMounted, PropType, ref } from "vue";
    import RockFormField from "./rockFormField.obs";

    // TODO: This should be replaced with a version that does not require jQuery.

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },
        placeholder: {
            type: String as PropType<string>,
            default: ""
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void;
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const colorPicker = ref<HTMLElement>();

    onMounted(() => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const $colorPicker = (<any>window[<any>"$"])(colorPicker.value);

        $colorPicker.colorpicker();

        // Vue will not detect the change if it happens from jQuery, so we need
        // to detect the change and make sure Vue knows.
        $colorPicker.find("> input").on("change", () => {
            internalValue.value = <string>$colorPicker.find("> input").val();
        });
    });
</script>
