<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <transition
                enter-active-class="vertical-collapse-enter-active"
                leave-active-class="vertical-collapse-leave-active"
                @enter="enter"
                @after-enter="afterEnter"
                @leave="leave"
                @after-leave="afterLeave">
        <slot />
    </transition>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";

    type CachedStyles = {
        height: string;
        paddingTop: string;
        paddingBottom: string;
    };

    const props = defineProps({
        speed: {
            type: String as PropType<"normal" | "fast" | "slow">,
            default: "normal"
        }
    });

    // These transition speeds come from jQuery's hide/show "fast" and "slow" options.
    const speed = computed<string>(() => {
        switch (props.speed) {
            case "fast":
                return "0.2s";
            case "slow":
                return "0.6s";
            default:
                return "0.35s";
        }
    });
    const cachedStyles = ref<CachedStyles>();

    /**
     * Called when the element has entered the DOM.
     *
     * @param element The element that has entered the DOM.
     */
    function enter(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }
        // Because width and height may be 'auto',
        // first detect and cache the dimensions
        detectAndCacheDimensions(element);

        // The order of applying styles is important:
        // - 1. Set styles for state before transition
        // - 2. Force repaint
        // - 3. Add transition style
        // - 4. Set styles for state after transition
        // If the order is not right and you open any 2nd level submenu
        // for the first time, the transition will not work.
        setClosedDimensions(element);
        hideOverflow(element);
        forceRepaint(element);
        setTransitionStyles(element);
        setOpenedDimensions(element);
    }

    /**
     * Called after the element has entered the DOM and the animation has completed.
     *
     * @param element The element that entered the DOM.
     */
    function afterEnter(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Clean up inline styles
        unsetOverflow(element);
        unsetTransitionStyles(element);
        unsetDimensions(element);
        cachedStyles.value = undefined;
    }

    /**
     * Called when the element should begin animation for leaving the DOM.
     *
     * @param element The element that is leaving the DOM.
     */
    function leave(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // For some reason, @leave triggered when starting
        // from open state on page load. So for safety,
        // check if the dimensions have been cached.
        detectAndCacheDimensions(element);

        // The order of applying styles is less important
        // than in the enter phase, as long as we repaint
        // before setting the closed dimensions.
        // But it is probably best to use the same
        // order as the enter phase.
        setOpenedDimensions(element);
        hideOverflow(element);
        forceRepaint(element);
        setTransitionStyles(element);
        setClosedDimensions(element);
    }

    /**
     * Called after the element has left the DOM and the animation has completed.
     *
     * @param element The element that left the DOM.
     */
    function afterLeave(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Clean up inline styles
        unsetOverflow(element);
        unsetTransitionStyles(element);
        unsetDimensions(element);
        cachedStyles.value = undefined;
    }

    function detectAndCacheDimensions(el): void {
        // Cache actual dimensions
        // only once to void invalid values when
        // triggering during a transition
        if (cachedStyles.value) return;

        const visibility = el.style.visibility;
        const display = el.style.display;

        // Trick to get the width and
        // height of a hidden element
        el.style.visibility = "hidden";
        el.style.display = "";

        cachedStyles.value = detectRelevantDimensions(el);

        // Restore any original styling
        el.style.visibility = visibility;
        el.style.display = display;
    }

    function detectRelevantDimensions(el): CachedStyles {
        // These properties will be transitioned
        return {
            height: el.offsetHeight + "px",
            paddingTop: el.style.paddingTop || getComputedStyle(el, null).getPropertyValue("padding-top"),
            paddingBottom: el.style.paddingBottom || getComputedStyle(el, null).getPropertyValue("padding-bottom"),
        };
    }

    function setClosedDimensions(el): void {
        if (!cachedStyles.value) return;
        Object.keys(cachedStyles.value).forEach(key => {
            el.style[key] = "0";
        });
    }

    function setOpenedDimensions(el): void {
        if (!cachedStyles.value) return;
        Object.keys(cachedStyles.value).forEach((key) => {
            el.style[key] = cachedStyles.value![key];
        });
    }

    function unsetDimensions(el): void {
        if (!cachedStyles.value) return;
        Object.keys(cachedStyles.value).forEach((key) => {
            el.style[key] = "";
        });
    }

    function forceRepaint(el): void {
        // Force repaint to make sure the animation is triggered correctly.
        // Thanks: https://markus.oberlehner.net/blog/transition-to-height-auto-with-vue/
        getComputedStyle(el).height;
    }

    function setTransitionStyles(el): void {
        el.style.transition = `height ${speed.value} ease-in-out, padding-top ${speed.value} ease-in-out, padding-bottom ${speed.value} ease-in-out`;
    }

    function unsetTransitionStyles(el): void {
        el.style.transition = "";
    }

    function hideOverflow(el): void {
        el.style.overflow = "hidden";
    }

    function unsetOverflow(el): void {
        el.style.overflow = "";
    }

</script>
