<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <transition
                enter-active-class="vertical-collapse-enter-active"
                leave-active-class="vertical-collapse-leave-active"
                @before-enter="beforeEnter"
                @enter="enter"
                @after-enter="afterEnter"
                @before-leave="beforeLeave"
                @leave="leave"
                @after-leave="afterLeave">
        <slot />
    </transition>
</template>

<style scoped>
.vertical-collapse-enter-active,
.vertical-collapse-leave-active {
    overflow: hidden;
    transition-property: height, padding-top, padding-bottom;
    transition-duration: var(--transition-speed);
    transition-timing-function: ease-in-out;
}
</style>

<script setup lang="ts">
    import { computed, PropType } from "vue";

    type CollapseState = {
        display: string;
        computedPaddingTop: string;
        computedPaddingBottom: string;
    };

    const props = defineProps({
        speed: {
            type: String as PropType<"normal" | "fast" | "slow">,
            default: "normal"
        }
    });

    /**
     * Called before the element begins to enter the DOM.
     *
     * @param element The element that will be entering the DOM.
     */
    function beforeEnter(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Save any values that will be used during the animation.
        const state: CollapseState = {
            display: element.style.display,
            computedPaddingTop: getComputedStyle(element).paddingTop,
            computedPaddingBottom: getComputedStyle(element).paddingBottom
        };

        element.dataset.transitionCollapseState = JSON.stringify(state);

        // Reset all the styles we will be transitioning unless they already
        // have values (which probably means we are aborting an expand).
        if (!element.style.height) {
            element.style.height = "0px";
        }

        if (!element.style.paddingTop) {
            element.style.paddingTop = "0px";
        }

        if (!element.style.paddingBottom) {
            element.style.paddingBottom = "0px";
        }

        element.style.display = "";
        element.style.setProperty("--transition-speed", speed.value);
    }

    /**
     * Called when the element has entered the DOM.
     *
     * @param element The element that has entered the DOM.
     */
    function enter(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Set values that will cause the vertical space to expand.
        requestAnimationFrame(() => {
            const state = JSON.parse(element.dataset.transitionCollapseState ?? "") as CollapseState;
            const verticalPadding = (parseInt(state.computedPaddingTop) || 0) + (parseInt(state.computedPaddingBottom) || 0);

            element.style.height = `${element.scrollHeight + verticalPadding}px`;
            element.style.paddingTop = state.computedPaddingTop;
            element.style.paddingBottom = state.computedPaddingBottom;
        });
    }

    /**
     * Called after the element has entered the DOM and the animation has completed.
     *
     * @param element The element that entered the DOM.
     */
    function afterEnter(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        const state = JSON.parse(element.dataset.transitionCollapseState ?? "") as CollapseState;

        // Reset all the explicit styles so they go back to implicit values.
        element.style.height = "";
        element.style.paddingTop = "";
        element.style.paddingBottom = "";
        element.style.display = state.display !== "none" ? state.display : "";
        element.style.removeProperty("--transition-speed");

        delete element.dataset.transitionCollapseState;
    }

    /**
     * Called before the element begins to leave the DOM.
     *
     * @param element The element that will be leaving the DOM.
     */
    function beforeLeave(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Set the height explicitely so the CSS animation will trigger.
        element.style.height = `${element.offsetHeight}px`;
        element.style.setProperty("--transition-speed", speed.value);
    }

    /**
     * Called when the element should begin animation for leaving the DOM.
     *
     * @param element The element that is leaving the DOM.
     */
    function leave(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Set values that will cause the vertical space to collapse.
        requestAnimationFrame(() => {
            element.style.height = "0px";
            element.style.paddingTop = "0px";
            element.style.paddingBottom = "0px";
        });
    }

    /**
     * Called after the element has left the DOM and the animation has completed.
     *
     * @param element The element that left the DOM.
     */
    function afterLeave(element: Element): void {
        if (!(element instanceof HTMLElement)) {
            return;
        }

        // Reset all the explicit styles so they go back to implicit values.
        element.style.height = "";
        element.style.paddingTop = "";
        element.style.paddingBottom = "";
        element.style.removeProperty("--transition-speed");
    }

    // These transition speeds come from jQuery's hide/show "fast" and "slow" options.
    const speed = computed<string>(() => props.speed == "fast" ? "0.2s" : props.speed == "slow" ? "0.6s" : "0.35s");
</script>
