<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField v-model="internalValue"
                   v-bind="formFieldProps"
                   @change="onChange"
                   formGroupClasses="rock-phonenumber-box"
                   :rules="rules"
                   name="phonenumberbox">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <div class="input-group phone-number-box" :class="inputGroupClasses">
                    <span v-if="availableCountryCodeOptions.length < 2" class="input-group-addon">
                        <i class="fa fa-phone-square"></i>
                    </span>
                    <InputGroupDropDown v-else :items="availableCountryCodeOptions" v-model="countryCode" inputGroupClasses="input-group-addon" />
                    <input v-model="internalValue" :id="uniqueId" type="text" class="form-control" v-bind="field" />
                </div>
            </div>
        </template>
    </RockFormField>
</template>

<script lang="ts" setup>
    import { computed, PropType, ref, watch } from "vue";
    import RockFormField from "./rockFormField.obs";
    import { PhoneNumberBoxGetConfigurationResultsBag } from "@Obsidian/ViewModels/Rest/Controls/phoneNumberBoxGetConfigurationResultsBag";
    import { PhoneNumberCountryCodeRulesConfigurationBag } from "@Obsidian/ViewModels/Rest/Controls/phoneNumberCountryCodeRulesConfigurationBag";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { normalizeRules } from "@Obsidian/ValidationRules";
    import { getPhoneNumberConfiguration, formatPhoneNumber, stripPhoneNumber } from "@Obsidian/Utility/phone";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import InputGroupDropDown from "./inputGroupDropDown.obs";

    const props = defineProps({
        /** v-model of Phone Number */
        modelValue: {
            type: String as PropType<string>,
            default: ""
        },

        /** v-model of Country Code */
        countryCode: {
            type: String as PropType<string>,
            default: ""
        },

        inputGroupClasses: {
            type: String as PropType<string>,
            default: ""
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void
        (e: "update:countryCode", value: string): void
    }>();


    // #region Values

    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const countryCode = useVModelPassthrough(props, "countryCode", emit);
    const formFieldProps = useStandardRockFormFieldProps(props);
    const configuration = ref<PhoneNumberBoxGetConfigurationResultsBag | null>(null);

    // #endregion

    // #region Computed Values

    const strippedValue = computed((): string => {
        return stripPhoneNumber(internalValue.value);
    });

    const formattedValue = computed((): string => {
        return formatPhoneNumber(strippedValue.value, getConfiguredRules());
    });

    const rules = computed(() => {
        const rules = normalizeRules(props.rules);
        rules.push(validatePhoneNumber);
        return rules;
    });

    const availableCountryCodes = computed<string[]>(() => {
        return Object.keys(configuration.value?.rules ?? {});
    });

    const availableCountryCodeOptions = computed<ListItemBag[]>(() => {
        if (availableCountryCodes.value.length == 0) {
            return [{ value: "1", text: "1" }];
        }

        return availableCountryCodes.value.map((val) => ({ value: val, text: val }));
    });

    // #endregion

    // #region Functions

    /** Uses the configuration we received from the server to determine whether the entered number is valid */
    function validatePhoneNumber(value: unknown): string | boolean {
        const rules = getConfiguredRules();

        if (!value) {
            return true;
        }

        if (rules.length == 0) {
            return true;
        }

        for (let rule of rules) {
            const regex = new RegExp(rule.match ?? "");

            if (regex.test(strippedValue.value)) {
                return true;
            }
        }

        return `The phone number '${value}' is not a valid phone number.`;
    }

    /** Retrieve the country code data, validation data, and formatting data from the server */
    async function loadConfiguration(): Promise<void> {
        try {
            const result = await getPhoneNumberConfiguration();

            if (result) {
                configuration.value = result;
            }
            else {
                console.error("Unknown error while loading phone number configuration.");
            }
        }
        catch (e) {
            console.error(e ?? "Unknown error while loading phone number configuration.");
        }
    }

    /** Get the rules for the selected countryCode */
    function getConfiguredRules(): PhoneNumberCountryCodeRulesConfigurationBag[] {
        return configuration.value?.rules?.[countryCode.value] ?? [];
    }

    // #endregion

    // #region Event Handlers

    function onChange(): void {
        internalValue.value = formattedValue.value;
    }

    // #endregion

    // #region Watchers

    watch(formattedValue, (): void => {
        // The value that should be stored for phone number attribute values is the formatted version.
        // This seems backwards, but actually keeps parity with the web forms functionality.
        emit("update:modelValue", formattedValue.value);
    }, { immediate: true });

    watch(() => props.modelValue, (): void => {
        internalValue.value = formattedValue.value;
    }, {
        immediate: true
    });

    watch([configuration, availableCountryCodes], (): void => {
        // If we don't have any country codes from the server, ignore
        if (configuration.value == null || availableCountryCodes.value.length == 0) return;

        // If no country code set or the set country code isn't in the list of available codes, then change it to the default
        if (countryCode.value == null || !availableCountryCodes.value.includes(countryCode.value)) {
            countryCode.value = availableCountryCodes.value[0];
        }
    });

    // #endregion

    loadConfiguration();

</script>