<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TreeItemPicker v-model="internalValue"
                    v-bind="standardProps"
                    formGroupClasses="category-picker"
                    iconCssClass="fa fa-filter"
                    :provider="itemProvider"
                    :multiple="multiple"
                    disableFolderSelection />
</template>

<script setup lang="ts">
    import { Guid } from "@Obsidian/Types";
    import { useSecurityGrantToken } from "@Obsidian/Utility/block";
    import { standardAsyncPickerProps, updateRefValue, useStandardAsyncPickerProps } from "@Obsidian/Utility/component";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { PropType, ref, watch } from "vue";
    import { DataViewTreeItemProvider } from "@Obsidian/Utility/treeItemProviders";
    import TreeItemPicker from "./treeItemPicker.obs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag | ListItemBag[] | null>,
            required: false
        },

        entityTypeGuid: {
            type: String as PropType<Guid>,
            required: false
        },

        displayPersistedOnly: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardAsyncPickerProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag | ListItemBag[] | null): void;
    }>();

    // #region Values

    const internalValue = ref(props.modelValue ?? null);
    const securityGrantToken = useSecurityGrantToken();
    const standardProps = useStandardAsyncPickerProps(props);

    const itemProvider = ref(new DataViewTreeItemProvider());
    itemProvider.value.entityTypeGuid = props.entityTypeGuid;
    itemProvider.value.securityGrantToken = securityGrantToken.value;
    itemProvider.value.displayPersistedOnly = props.displayPersistedOnly;

    // #endregion

    // #region Watchers

    // Keep security token up to date, but don't need refetch data
    watch(securityGrantToken, () => {
        itemProvider.value.securityGrantToken = securityGrantToken.value;
    });

    // When this changes, we need to refetch the data, so reset the whole itemProvider
    watch([() => props.entityTypeGuid, () => props.displayPersistedOnly], () => {
        const oldProvider = itemProvider.value;
        const newProvider = new DataViewTreeItemProvider();

        // copy old provider's properties
        newProvider.securityGrantToken = oldProvider.securityGrantToken;
        // Use new value
        newProvider.entityTypeGuid = props.entityTypeGuid;
        newProvider.displayPersistedOnly = props.displayPersistedOnly;

        // Set the provider to the new one
        itemProvider.value = newProvider;
    });

    watch(internalValue, () => {
        emit("update:modelValue", internalValue.value);
    });

    watch(() => props.modelValue, () => {
        updateRefValue(internalValue, props.modelValue ?? null);
    });

    // #endregion
</script>
