<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="modelValue" v-bind="formFieldProps" :name="'picker' + id">
        <template #default="{ uniqueId, field }">
            <div class="control-wrapper">
                <slot name="prepend" :isInputGroupSupported="true" />
                <div :class="{ 'input-group': $slots.inputGroupPrepend || $slots.inputGroupAppend }">
                    <slot name="inputGroupPrepend" :isInputGroupSupported="true" />
                    <div class="picker picker-obsidian picker-select rollover-container" :class="additionalPickerClass">
                        <a class="picker-label form-control" href="#" @click.prevent.stop="togglePickerMenu" :class="{ 'has-ig-prepend': $slots.inputGroupPrepend, 'text-gray-400': disabled }" v-bind="disabledBinding">
                            <i :class="pickerIconClass"></i>
                            <slot name="innerLabel"><span class="selected-names">{{ innerLabel }}</span></slot>
                            <button type="button" role="button" aria-label="Clear selection" class="btn picker-select-none" v-if="showClear && !disabled" @click.prevent.stop="onAction('clear')">
                                <i class="fa fa-times"></i>
                            </button>
                            <b class="fa fa-caret-down"></b>
                        </a>

                        <Fullscreen v-show="internalShowPopup" v-if="internalShowPopup || !forceContentReloadOnOpen" v-model="internalIsFullscreen" class="picker-menu" :class="internalIsFullscreen ? 'is-fullscreen' : 'dropdown-menu'" :style="pickerMenuStyles">
                            <!-- Optional "super header" area for things such as a means to switch between picker types -->
                            <div class="picker-mode-options" v-if="$slots.pickerContentSuperHeader">
                                <slot name="pickerContentSuperHeader"></slot>
                            </div>

                            <!-- Optional header area for picker header content. If you provide content for the header or enable showing the fullscreen button, this will show -->
                            <div class="picker-search-header picker-header" v-if="$slots.pickerContentHeader || $slots.pickerContentHeading || pickerContentHeadingText || showFullscreenButton">
                                <!-- Override entire header area with `pickerContentHeader` slot -->
                                <slot name="pickerContentHeader">
                                    <!-- Override heading, but keep fullscreen button intact with this `pickerContentHeading` slot, or specify heading text with `pickerContentHeadingText` prop -->
                                    <slot name="pickerContentHeading">
                                        <h4>{{ pickerContentHeadingText }}</h4>
                                    </slot>
                                    <!-- Show this fullscreen button in the header if enabled -->
                                    <RockButton
                                                v-if="showFullscreenButton"
                                                @click="internalIsFullscreen = !internalIsFullscreen"
                                                :btnType="fullscreenButtonType"
                                                class="ml-auto w-auto"
                                                title="Toggle Fullscreen"
                                                aria-label="Toggle Fullscreen"><i class="fa fa-expand"></i></RockButton>
                                </slot>
                            </div>

                            <!-- Main Picker Content via default slot -->
                            <div class="scrollbar-thin picker-body" :style="pickerMenuInnerStyles">
                                <slot />
                            </div>

                            <!-- Actions Buttons -->
                            <div class="picker-actions">
                                <!-- Main Action Buttons: Overridable via `mainPickerActions` slot, or just configure with props -->
                                <slot name="mainPickerActions" v-if="!hideMainActionButtons">
                                    <RockButton :btnSize="selectButton.size" :btnType="selectButton.type" class="picker-btn" @click.prevent.stop="onAction('primary')">
                                        <slot name="primaryButtonLabel">{{ primaryButtonLabel }}</slot>
                                    </RockButton>
                                    <RockButton :btnSize="cancelButton.size" :btnType="cancelButton.type" class="picker-cancel" @click.prevent.stop="onAction('secondary')">
                                        <slot name="secondaryButtonLabel">{{ secondaryButtonLabel }}</slot>
                                    </RockButton>
                                </slot>
                                <!-- Custom Action Buttons: `customPickerActions` slot allows you to add additional buttons to the right -->
                                <div v-if="$slots.customPickerActions" class="ml-auto d-flex align-items-center">
                                    <slot name="customPickerActions" />
                                </div>
                            </div>
                        </Fullscreen>
                    </div>
                </div>
                <slot name="append" :isInputGroupSupported="true" />
            </div>
        </template>
    </RockFormField>
</template>

<style scoped>
.scrollbar-thin {
    scrollbar-width: thin;
}

.scrollbar-thin::-webkit-scrollbar {
    width: 8px;
    border-radius: 4px;
}

.scrollbar-thin::-webkit-scrollbar-button {
    display: none;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: #858585;
    border-radius: 4px;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background-color: #6b6b6b;
}

.scrollbar-thin::-webkit-scrollbar-track {
    background-color: #f0f0f0;
    border-radius: 4px;
}

.picker-menu {
    --body-background: var(--panel-bg);
    overflow-y: visible;
}

.picker-menu.is-fullscreen {
    display: flex !important;
    flex-direction: column;
}

.picker-header {
    flex: 0;
    width: 100%;
}

.picker-header,
.picker-actions {
    flex: 0;
}

.picker-body {
    flex: 1;
}

.has-ig-prepend {
    border-bottom-left-radius: 0;
    border-top-left-radius: 0;
}
</style>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import RockButton from "./rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import RockFormField from "./rockFormField.obs";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { newGuid } from "@Obsidian/Utility/guid";
    import Fullscreen from "@Obsidian/Controls/fullscreen.obs";

    const props = defineProps({
        /**
         * Value of the control. Merely passed to the Rock Form Field for validation purposes.
         */
        modelValue: {
            required: false
        },

        ...standardRockFormFieldProps,

        /**
         * Text or HTML to show inside the closed picker's box, usually listing selected values.
         */
        innerLabel: {
            type: String as PropType<string>,
            default: ""
        },

        /**
         * Text or HTML string for the label of the select button
         */
        primaryButtonLabel: {
            type: String as PropType<string>,
            default: "Select"
        },

        /**
         * Text or HTML string for the label of the cancel button
         */
        secondaryButtonLabel: {
            type: String as PropType<string>,
            default: "Cancel"
        },

        /**
         * Allow a picker to go without the main buttons if they want to.
         */
        hideMainActionButtons: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Whether the "X" button should appear next to the box to clear the value
         */
        showClear: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * V-Model to allow external control of whether the popup area is opened. Can also just be
         * used as a means of tracking the open state rather than controlling it. Generally should
         * be ignored, but there are certain use cases that it could be useful for.
         */
        showPopup: {
            type: Boolean as PropType<boolean>,
            default: null
        },

        /**
         * V-Model to control whether the popup contents are shown in fullscreen.
         * If you want to have an always-fullscreen picker, watch `isFullscreen` to always reset it to true immediately
         * if it gets changed to false. If you never want it to go fullscreen, you can just ignore this and make sure
         * you don't enable the fullscreen button in the header, but for a bit more security, you can pass `false` to
         * this prop and not listen for the `update:isFullscreen`.
         */
        isFullscreen: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Icon to show on the left side of the picker box
         */
        iconCssClass: {
            type: String as PropType<string>,
            default: "fa fa-folder-open"
        },

        /**
         * CSS length value for defining how tall the picker content box is. 200px by default.
         */
        pickerContentBoxHeight: {
            type: String as PropType<string>,
            default: "200px"
        },

        /**
         * CSS length value for defining how wide the picker content box is. By default, the theme CSS sets this width.
         */
        pickerContentBoxWidth: {
            type: String as PropType<string>,
            default: null
        },

        /**
         * By default, the picker content box is scrollable to allow long lists of options. To Remove the scroll bar,
         * set this to true.
         */
        disablePickerContentBoxScroll: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Class(es) applied to to the picker element specifying type of picker
         */
        pickerClass: {
            type: String as PropType<string>,
            default: null
        },

        /**
         * There are some cases where we don't want to auto-close the popup when the primary
         * button is clicked (e.g. to validate a form). Set this to false to prevent it from
         * auto-closing.
         */
        disableAutoCloseOnPrimaryAction: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * If you have a header for your component, you can specify the text here, or you can use the
         * `pickerContentHeading` to override the HTML used for the heading, or use the `pickerContentHeader` slot to
         * completely override the entire header's HTML.
         */
        pickerContentHeadingText: {
            type: String as PropType<string>,
            default: ""
        },

        /**
         * If you want to enable expanding the picker to fullscreen, you can set this to true to show a button in the
         * header for toggling fullscreen, or you can use your own means of controlling it and use the `isFullscreen`
         * v-model prop.
         */
        showFullscreenButton: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Force the dropdown content to completely reload each time it's opened, rather than just hiding it
         */
        forceContentReloadOnOpen: {
            type: Boolean,
            default: false
        },

        /**
         * When true the picker will take the full width available rather than
         * limiting itself to a standard width.
         */
        fullWidth: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Disable use of the picker
         */
        disabled: {
            type: Boolean,
            default: false
        },
    });

    const emit = defineEmits<{
        (e: "primaryButtonClicked" | "secondaryButtonClicked" | "clearButtonClicked"): void,
        (e: "update:showPopup", v: boolean): void,
        (e: "update:isFullscreen", v: boolean): void,
    }>();

    // #region Values

    const fullscreenButtonType = BtnType.Link;
    const selectButton = {
        size: BtnSize.ExtraSmall,
        type: BtnType.Primary
    };
    const cancelButton = {
        size: BtnSize.ExtraSmall,
        type: BtnType.Link
    };
    const id = newGuid();

    const formFieldProps = useStandardRockFormFieldProps(props);
    const internalIsFullscreen = useVModelPassthrough(props, "isFullscreen", emit);

    const internalShowPopup = ref(false);

    // #endregion

    // #region Computed Values

    /** The CSS class to use for the picker icon. */
    const pickerIconClass = computed((): string => `${props.iconCssClass} fa-fw`);

    const additionalPickerClass = computed((): string => {
        let classes = props.pickerClass ? props.pickerClass : "";

        if (internalShowPopup.value) {
            classes += " open";
        }

        if (props.showClear) {
            classes += " picker-show-clear";
        }

        if (props.fullWidth) {
            classes += " picker-full-width";
        }

        return classes;
    });

    // Style up the picker content box
    const pickerMenuInnerStyles = computed<string>(() => {
        let height = internalIsFullscreen.value ? "100%" : props.pickerContentBoxHeight;

        return `height: ${height}; overflow-x: visible; overflow-y: ${props.disablePickerContentBoxScroll ? "visible" : "auto"};`;
    });

    const pickerMenuStyles = computed<string>(() => {
        // Width is already specified in the stylesheet for .picker-menu, so only set it if we have an override
        if (props.pickerContentBoxWidth) {
            return `width: ${props.pickerContentBoxWidth};`;
        }

        return "";
    });

    // Attributes to add to the picker label when this is disabled.
    const disabledBinding = computed(() => {
        return props.disabled ? {
            disabled: true,
            tabindex: -1,
            onMousedown: e => e.preventDefault()
        } : {};
    });

    // #endregion

    // #region Watchers

    /**
     * If the showPopup prop is null, that means no v-model is being used, so we ignore the prop's value
     * and just treat internalShowPopup like a normal value
     */
    watch(() => props.showPopup, () => {
        if (props.showPopup != null) {
            internalShowPopup.value = props.showPopup;
        }
    }, { immediate: true });

    watch(internalShowPopup, () => emit("update:showPopup", internalShowPopup.value));

    /** Hide the popup if this becomes disabled while it's open */
    watch(() => props.disabled, () => {
        if (props.disabled) {
            internalShowPopup.value = false;
        }
    });

    // #endregion

    // #region Event Handlers

    /**
     * Event handler for when the user clicks on the picker. Show/hide the popup.
     */
    function togglePickerMenu(): void {
        if (props.disabled) {
            internalShowPopup.value = false;
            return;
        }
        internalShowPopup.value = !internalShowPopup.value;
    }

    /**
     * Event handler for when the user clicks an action button. Hides the popup (unless
     * disabled for primary button) as well as firing an event on the component.
     */
    function onAction(type: "primary" | "secondary" | "clear"): void {
        if (type !== "primary" || !props.disableAutoCloseOnPrimaryAction) {
            // Primary button shouldn't auto-close if auto-close disabled
            internalShowPopup.value = false;
        }
        emit(`${type}ButtonClicked`);
    }

        // #endregion

</script>