<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="internalValue" formGroupClasses="slidingdaterange" name="slidingdaterange">
        <template #besideLabel v-if="previewLocation == 'Top' && isTimeUnit">
            <div class="label label-info js-slidingdaterange-info slidingdaterange-info">{{ dateRangeText }}</div>
        </template>
        <template #default="{ uniqueId }">
            <div :id="uniqueId" class="form-control-group">
                <DropDownList v-model="rangeType" :items="computedRangeTypeOptions" showBlankItem class="input-width-md slidingdaterange-select" />

                <input v-if="isNumberVisible" v-model="timeValue" class="form-control input-width-sm slidingdaterange-number" type="text" pattern="[0-9]*" inputmode="numeric" />

                <template v-if="isTimeUnit">
                    <DropDownList v-model="timeUnit" :items="computedTimeUnitOptions" class="form-control input-width-md slidingdaterange-timeunits-plural" :showBlankItem="false" />

                    <div v-if="previewLocation == 'Right'" class="label label-info js-slidingdaterange-info slidingdaterange-info">{{ dateRangeText }}</div>
                </template>

                <div v-if="isDateRange" class="picker-daterange slidingdaterange-daterange pull-left">
                    <div class="input-group input-group-lower input-width-md date">
                        <DatePicker v-model="lowDate" />
                    </div>

                    <div class="input-group form-control-static">to</div>

                    <div class="input-group input-group-lower input-width-md date">
                        <DatePicker v-model="highDate" />
                    </div>
                </div>
            </div>
        </template>
    </RockFormField>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch } from "vue";
    import RockFormField from "./rockFormField.obs";
    import DropDownList from "./dropDownList.obs";
    import DatePicker from "./datePicker.obs";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { toNumber, toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { useHttp } from "@Obsidian/Utility/http";
    import { SlidingDateRange, rangeTypeOptions, timeUnitOptions, TimeUnit, RangeType } from "@Obsidian/Utility/slidingDateRange";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<SlidingDateRange | null>,
            required: true
        },

        enabledSlidingDateRangeUnits: {
            type: Array as PropType<RangeType[] | null>,
            default: null
        },

        enabledTimeUnits: {
            type: Array as PropType<TimeUnit[] | null>,
            default: null
        },

        previewLocation: {
            type: String as PropType<"Right" | "Top" | "None">,
            default: "Right"
        }
    });

    const emit = defineEmits<{
        (e: "update:modelValue", v: SlidingDateRange | null): void
    }>();

    const internalValue = ref(props.modelValue);
    const http = useHttp();

    const rangeType = ref(internalValue.value?.rangeType?.toString() ?? "");
    const timeValue = ref(internalValue.value?.timeValue?.toString() ?? "");
    const timeUnit = ref(internalValue.value?.timeUnit?.toString() ?? "0");
    const lowDate = ref(internalValue.value?.lowerDate ?? "");
    const highDate = ref(internalValue.value?.upperDate ?? "");

    /** Contains the text that describes the currently selected range. */
    const dateRangeText = ref("");

    /** True if the selected range type is two dates that make up the range. */
    const isDateRange = computed((): boolean => {
        return rangeType.value === "2";
    });

    /** True if the selected range type is one based on time units. */
    const isTimeUnit = computed((): boolean => {
        return rangeType.value === "0" || rangeType.value === "1" || rangeType.value === "4" || rangeType.value === "8" || rangeType.value === "16";
    });

    /** True if the selected range type is one that takes a numerical value. */
    const isNumberVisible = computed((): boolean => {
        return rangeType.value === "0" || rangeType.value === "4" || rangeType.value === "8" || rangeType.value === "16";
    });

    /** The time unit options that will be made available to the user. */
    const computedTimeUnitOptions = computed((): ListItemBag[] => {
        const units = timeUnitOptions
            .filter(tu => !props.enabledTimeUnits || props.enabledTimeUnits.includes(toNumber(tu.value) as TimeUnit));

        if (!isNumberVisible.value || toNumber(timeValue.value) === 1) {
            return units;
        }

        // Pluralize the time unit options if the time value isn't singular.
        return units.map(o => {
            return {
                value: o.value,
                text: `${o.text}s`
            };
        });
    });

    /** Convert the enabledSlidingDateRangeUnits props to strings for simpler comparison */
    const enabledSlidingDateRangeUnits = computed(() => props.enabledSlidingDateRangeUnits?.map(v => v.toString()));

    /** The range type options that will be made available to the user */
    const computedRangeTypeOptions = computed((): ListItemBag[] => {
        if (!props.enabledSlidingDateRangeUnits || props.enabledSlidingDateRangeUnits.length < 1) {
            return rangeTypeOptions;
        }

        return rangeTypeOptions.filter((rt) => enabledSlidingDateRangeUnits.value?.includes(rt.value as string));
    });

    /**
     * Updates the dateRangeText value to reflect the current selections
     * made by the user.
     */
    const updateDateRangeText = async (): Promise<void> => {
        const parameters: Record<string, string> = {
            slidingDateRangeType: rangeType.value || "0",
            timeUnitType: timeUnit.value || "0",
            number: timeValue.value || "1"
        };

        if (lowDate.value && highDate.value) {
            parameters["startDate"] = lowDate.value;
            parameters["endDate"] = highDate.value;
        }

        const result = await http.get<string>("/api/Utility/CalculateSlidingDateRange", parameters);

        if (result.isSuccess && result.data) {
            dateRangeText.value = result.data;
        }
        else {
            dateRangeText.value = "";
        }
    };

    watch(rangeType, () => {
        if (["0", "1", "4", "8", "16"].includes(rangeType.value)) {
            timeUnit.value = (toNumberOrNull(timeUnit.value) as TimeUnit ?? 0).toString();
        }

        if (["0", "4", "8", "16"].includes(rangeType.value) && internalValue.value) {
            timeValue.value = toNumberOrNull(timeValue.value)?.toString() ?? "1";
        }
    });

    // Watch for changes in our user interface values and update our internal
    // value with the computed information.
    watch([rangeType, timeUnit, timeValue, lowDate, highDate], () => {
        updateDateRangeText();

        const internalRangeType = toNumberOrNull(rangeType.value);

        if (internalRangeType === null) {
            internalValue.value = null;
            return;
        }

        const newValue: SlidingDateRange = {
            rangeType: internalRangeType
        };

        // These two checks could probably use isTimeUnit and isNumberVisible,
        // but I'm not sure if watch() runs before or after computed().
        if (["0", "1", "4", "8", "16"].includes(rangeType.value)) {
            newValue.timeUnit = toNumberOrNull(timeUnit.value) as TimeUnit ?? undefined;
        }

        if (["0", "4", "8", "16"].includes(rangeType.value)) {
            newValue.timeValue = toNumberOrNull(timeValue.value) ?? undefined;
        }

        if (rangeType.value == "2") {
            newValue.lowerDate = lowDate.value;
            newValue.upperDate = highDate.value;
        }

        internalValue.value = newValue;
    });

    // Watch for changes in the model value and update our internal values.
    watch(() => props.modelValue, () => {
        internalValue.value = props.modelValue;
        rangeType.value = internalValue.value?.rangeType?.toString() ?? "";
        timeValue.value = internalValue.value?.timeValue?.toString() ?? "";
        timeUnit.value = internalValue.value?.timeUnit?.toString() ?? "";
        lowDate.value = internalValue.value?.lowerDate ?? "";
        highDate.value = internalValue.value?.upperDate ?? "";
    });

    // Watch for changes in our internal value and update the model value.
    watch(internalValue, () => {
        emit("update:modelValue", internalValue.value);
    });

    // Set the initial date range text on load.
    updateDateRangeText();
</script>