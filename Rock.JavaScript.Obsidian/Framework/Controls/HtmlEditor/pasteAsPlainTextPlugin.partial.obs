<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isShown"
           title="Paste as Plain Text"
           cancelText=""
           saveText="Insert"
           :onSave="onPlainTextInserted">
        <TextBox v-model="pasteAsPlainTextValue"
                 label="Paste the content below, then press the Insert button to insert the content as plain text."
                 textMode="multiline"
                 :rows="10" />
    </Modal>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { getToolbarButton } from "./utils.partial";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";

    const props = defineProps({
        tinyMceInstance: {
            type: Object as PropType<Editor | undefined>,
            required: true
        },
        toolbarElement: {
            type: Object as PropType<HTMLElement | undefined>,
            required: true
        }
    });

    const id = "rockpasteasplaintext" as const;
    const tooltip = "Paste Text" as const;

    defineExpose({
        id
    });

    //#region Values

    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const isShown = ref<boolean>(false);
    const pasteAsPlainTextValue = ref<string>("");

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        editor.ui.registry.addToggleButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "paste-text",
            tooltip: tooltip,
            onAction: (_api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): void => {
                isShown.value = true;
            },
            onSetup: (_api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(tooltip, props.toolbarElement) ?? undefined;

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    /** Event handler for the plain text being inserted. */
    function onPlainTextInserted(): void {
        if (props.tinyMceInstance) {
            // Create a temporary div element that will be used to get the text content of the pasted value.
            const temporaryDiv = document.createElement("div");
            temporaryDiv.innerHTML = pasteAsPlainTextValue.value;

            // Paste the content into the editor at the current position.
            props.tinyMceInstance.insertContent(temporaryDiv.textContent ?? "");
        }

        // Clear the pasted value and close the modal.
        pasteAsPlainTextValue.value = "";
        isShown.value = false;
    }

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(() => props.tinyMceInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (props.tinyMceInstance) {
            init(props.tinyMceInstance);
        }
    });

    //#endregion
</script>