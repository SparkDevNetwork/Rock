<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template></template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { getToolbarButton } from "./utils.partial";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";

    const props = defineProps({
        tinyMceInstance: {
            type: Object as PropType<Editor | undefined>,
            required: true
        },
        toolbarElement: {
            type: Object as PropType<HTMLElement | undefined>,
            required: true
        }
    });

    const id = "rockparagraph" as const;
    const tooltip = "Paragraph" as const;

    defineExpose({
        id
    });

    /** Paragraph button definition. */
    type ParagraphButton = {
        /** The text that will be displayed on the menu item. */
        text: string;
        /** The menu item icon. */
        icon: string;
        /** The TinyMCE magic format string. */
        format: string;
        /** The shortcut (displayed as a label and adds shortcut functionality). */
        shortcut: string;
        /** The shortcut description. */
        shortcutDescription: string;
        /** The command to execute when clicked. */
        command: string;
        /** The initialized button instance. */
        button?: Ui.Menu.NestedMenuItemContents | undefined;
        /** Cleans up resources used by the button. */
        destroy?: () => void;
    };

    /** Paragraph button definitions. */
    const paragraphButtons: {
        [key: string]: ParagraphButton
    } = {
        "left": {
            text: "Align left",
            format: "alignleft",
            icon: "align-left",
            shortcut: "Meta+Shift+L",
            shortcutDescription: "Left aligns the current text block/image.",
            command: "JustifyLeft"
        },
        "center": {
            text: "Align center",
            format: "aligncenter",
            icon: "align-center",
            shortcut: "Meta+Shift+E",
            shortcutDescription: "Center aligns the current text block/image.",
            command: "JustifyCenter"
        },
        "right": {
            text: "Align right",
            format: "alignright",
            icon: "align-right",
            shortcut: "Meta+Shift+R",
            shortcutDescription: "Right aligns the current text block/image.",
            command: "JustifyRight"
        },
        "justify": {
            text: "Justify full",
            format: "alignjustify",
            icon: "align-justify",
            shortcut: "Meta+Shift+J",
            shortcutDescription: "Full aligns the current text block/image.",
            command: "JustifyFull"
        },
        "outdent": {
            text: "Outdent",
            format: "outdent",
            icon: "outdent",
            shortcut: "Meta+Shift+O",
            shortcutDescription: "Outdents the current selection.",
            command: "Outdent"
        },
        "indent": {
            text: "Indent",
            format: "indent",
            icon: "indent",
            shortcut: "Meta+Shift+I",
            shortcutDescription: "Indents the current selection.",
            command: "Indent"
        },
    } as const;

    //#region Values

    const toolbarButtonElement = ref<HTMLElement | undefined>();

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Helper function that creates a toggle menu item button. */
    function createToggleMenuItem(editor: Editor, paragraphApi, paragraphButton: ParagraphButton): Ui.Menu.NestedMenuItemContents {
        // Only create the button once to avoid multiple event registrations.
        if (!paragraphButton.button) {
            let formatChangedHandle: undefined | {
                unbind(): void;
            };

            paragraphButton.button = {
                type: "togglemenuitem",
                text: paragraphButton.text,
                icon: paragraphButton.icon,
                // Shortcut label (does not add a shortcut).
                shortcut: paragraphButton.shortcut,
                onAction: (_api: Ui.Menu.ToggleMenuItemInstanceApi): void => {
                    editor.formatter.apply(paragraphButton.format);
                },
                // https://www.tiny.cloud/docs/tinymce/6/custom-toggle-toolbar-button/#using-onsetup
                onSetup: (api: Ui.Menu.ToggleMenuItemInstanceApi): void => {
                    // Only allow this callback to run once.
                    // The formatChanged event registration causes console warning if this is run multiple times.
                    if (!paragraphButton.button) {
                        // Check if the icon should be changed once the `rockparagraph` toolbar button is clicked.
                        const isActive = editor.formatter.match(paragraphButton.format);
                        api.setActive(isActive);
                        if (isActive) {
                            paragraphApi.setIcon(paragraphButton.icon);
                        }

                        // When the format changes, set the toolbar button as active
                        // and update the icon to show the selected format.
                        formatChangedHandle = editor.formatter.formatChanged(paragraphButton.format, (state) => {
                            api.setActive(state);
                            if (state) {
                                paragraphApi.setIcon(paragraphButton.icon);
                            }
                        });
                    }
                }
            };

            paragraphButton.destroy = () => {
                // Unregister event handlers and remove the button.
                formatChangedHandle?.unbind();
                paragraphButton.button = undefined;
            };
        }

        return paragraphButton.button;
    }

    /** Helper function that creates a plain menu item button. */
    function createMenuItem(editor: Editor, paragraphButton: ParagraphButton): Ui.Menu.NestedMenuItemContents {
        // Only create the button once to avoid multiple event registrations.
        if (!paragraphButton.button) {
            paragraphButton.button = {
                type: "menuitem",
                text: paragraphButton.text,
                icon: paragraphButton.icon,
                // Shortcut label (does not add a shortcut).
                shortcut: paragraphButton.shortcut,
                onAction: (_api: Ui.Menu.MenuItemInstanceApi): void => {
                    editor.execCommand(paragraphButton.command);
                }
            } as Ui.Menu.MenuItemSpec;
            paragraphButton.destroy = () => {
                // Unregister event handlers and remove the button.
                paragraphButton.button = undefined;
            };
        }
        return paragraphButton.button;
    }

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        paragraphButtons.left.destroy?.();
        paragraphButtons.center.destroy?.();
        paragraphButtons.right.destroy?.();
        paragraphButtons.justify.destroy?.();
        paragraphButtons.outdent.destroy?.();
        paragraphButtons.indent.destroy?.();
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        // This combines the functionality of the built-in `align` toolbar button
        // and the `indent` toolbar button. It also updates the toolbar icon to
        // reflect the alignment of the selected node.
        editor.ui.registry.addMenuButton(id, {
            icon: "align-left",
            tooltip: tooltip,
            onSetup: (api: Ui.Toolbar.ToolbarMenuButtonInstanceApi) => {
                toolbarButtonElement.value = getToolbarButton(tooltip, props.toolbarElement) ?? undefined;

                const paragraphItems: Record<string, string> = {
                    "alignleft": "align-left",
                    "alignright": "align-right",
                    "aligncenter": "align-center",
                    "alignjustify": "align-justify"
                };

                // Watch for node change events.
                const eventDispatcher = editor.on("NodeChange", () => {
                    const keys = Object.keys(paragraphItems);
                    for (const key of keys) {
                        // https://www.tiny.cloud/docs/tinymce/6/content-formatting/#built-in-formats
                        if (editor.formatter.match(key)) {
                            api.setIcon(paragraphItems[key]);
                            api.setActive(true);
                            return;
                        }
                    }

                    // No alignment formats are active,
                    // so reset the icon and the active state of the toolbar button.
                    api.setIcon("align-left");
                    api.setActive(false);
                });

                // Return the dispose callback.
                return (_api: Ui.Toolbar.ToolbarMenuButtonInstanceApi): void => {
                    // Unregister event handlers and destroy buttons.
                    eventDispatcher.off();
                    disposeTooltipButton();
                };
            },
            fetch: (callback, _, paragraphApi) => {
                // This hook will return the menu items for the toolbar button.

                // Pass the menu item button config to the callback to create the toolbar children buttons.
                callback([
                    createToggleMenuItem(editor, paragraphApi, paragraphButtons.left),
                    createToggleMenuItem(editor, paragraphApi, paragraphButtons.center),
                    createToggleMenuItem(editor, paragraphApi, paragraphButtons.right),
                    createToggleMenuItem(editor, paragraphApi, paragraphButtons.justify),
                    createMenuItem(editor, paragraphButtons.outdent),
                    createMenuItem(editor, paragraphButtons.indent)
                ]);
            }
        });

        // Register shortcuts.
        registerShortcut(editor, paragraphButtons.left);
        registerShortcut(editor, paragraphButtons.center);
        registerShortcut(editor, paragraphButtons.right);
        registerShortcut(editor, paragraphButtons.justify);
        registerShortcut(editor, paragraphButtons.outdent);
        registerShortcut(editor, paragraphButtons.indent);
    }


    /** Helper function that registers a paragraph button shortcut. */
    function registerShortcut(editor: Editor, paragraphButton: ParagraphButton): void {
        if (editor) {
            editor.addShortcut(paragraphButton.shortcut, paragraphButton.shortcutDescription, () => {
                editor.execCommand(paragraphButton.command);
            });
        }
    }

    //#endregion

    //#region Event Handlers

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(() => props.tinyMceInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (props.tinyMceInstance) {
            init(props.tinyMceInstance);
        }
    });

    //#endregion
</script>