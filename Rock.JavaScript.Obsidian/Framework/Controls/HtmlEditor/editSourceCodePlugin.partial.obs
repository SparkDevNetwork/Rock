<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <slot v-bind="{ isEditorShown: internalIsShown }"></slot>
    <KeepAlive>
        <CodeEditor v-if="internalIsShown"
                    v-model="internalValue"
                    :disabled="disabled"
                    :editorHeight="editorHeight"
                    :mergeFields="mergeFields"
                    mode="lava" />
    </KeepAlive>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { getToolbarButton, setEditorEnabled } from "./utils.partial";
    import CodeEditor from "@Obsidian/Controls/codeEditor.obs";
    import { RockColor } from "@Obsidian/Core/Utilities/rockColor";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { hasLavaCommandFields } from "@Obsidian/Utility/lava";

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },
        disabled: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        editorHeight: {
            type: Number as PropType<number>,
            default: 600
        },
        isShown: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        mergeFields: {
            type: Array as PropType<string[] | undefined>,
            default: undefined
        },
        startInCodeEditorMode: {
            type: Boolean as PropType<boolean>,
            default: false
        },
        tinyMceInstance: {
            type: Object as PropType<Editor | undefined>,
            required: true
        },
        toolbarElement: {
            type: Object as PropType<HTMLElement | undefined>,
            required: true
        },
    });

    const id = "rockeditsourcecode" as const;
    const tooltip = "Code Editor" as const;

    defineExpose({
        id
    });

    const emit = defineEmits<{
        (e: "update:isShown", value: boolean): void,
        (e: "update:modelValue", value: string): void,
    }>();

    //#region Values

    const internalIsShown = useVModelPassthrough(props, "isShown", emit);
    const internalValue = useVModelPassthrough(props, "modelValue", emit);
    const toolbarButtonApi = ref<Ui.Toolbar.ToolbarToggleButtonInstanceApi | undefined>();
    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const toolbarButtonIconElement = ref<SVGSVGElement | undefined>();
    const originalIconFill = ref<string>("");

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Performs an action if enabled. */
    function doIfEnabled(action: () => void): void {
        if (!props.disabled) {
            action();
        }
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        editor.ui.registry.addToggleButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "sourcecode",
            enabled: true,
            tooltip: tooltip,
            onAction: (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): void => {
                doIfEnabled(() => {
                    // Make sure the value is up-to-date before showing the code editor.
                    // internalIsShown.value is the old value before the toolbar button is clicked.
                    const isAboutToShowEditor = !internalIsShown.value;

                    if (isAboutToShowEditor) {
                        const editorContent = editor.getContent();
                        if (editorContent !== internalValue.value) {
                            internalValue.value = editorContent;
                        }
                    }

                    // Show/hide the editor.
                    internalIsShown.value = !internalIsShown.value;
                    api.setActive(internalIsShown.value);
                });
            },
            onSetup: (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi) => void => {
                toolbarButtonApi.value = api;
                toolbarButtonElement.value = getToolbarButton(tooltip, props.toolbarElement) ?? undefined;

                toolbarButtonIconElement.value = toolbarButtonElement.value?.querySelector("svg") ?? undefined;
                if (toolbarButtonIconElement.value) {
                    const color = new RockColor(getComputedStyle(toolbarButtonIconElement.value).fill);
                    color.alpha = 1;
                    originalIconFill.value = color.toRgba();
                }

                // Start in code editor mode based on the supplied prop
                // or if the text has lava commands on initialization.
                const shouldStartInCodeEditorMode = props.startInCodeEditorMode || hasLavaCommandFields(internalValue.value);
                if (shouldStartInCodeEditorMode) {
                    internalIsShown.value = true;
                }

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(() => props.tinyMceInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (props.tinyMceInstance) {
            init(props.tinyMceInstance);
        }
    });

    watch([() => props.disabled, () => toolbarButtonElement.value], () => {
        if (toolbarButtonApi.value) {
            toolbarButtonApi.value.setEnabled(!props.disabled);
        }

        if (toolbarButtonElement.value) {
            // Prevent the not-allowed cursor from being displayed when the
            // toolbar is disabled unless the entire plugin is disabled.
            toolbarButtonElement.value.style.cursor = props.disabled ? "" : "pointer";
        }

        if (toolbarButtonIconElement.value) {
            // Prevent the edit source code button icon from looking disabled
            // unless the entire plugin is disabled.
            toolbarButtonIconElement.value.style.fill = props.disabled ? "" : originalIconFill.value;
        }
    });

    // Disable the editor toolbar when the source code is being edited.
    watch(internalIsShown, () => {
        if (props.tinyMceInstance) {
            // Clear the TinyMCE selection before enabling/disabling, otherwise
            // some of the disabled toolbar buttons can still be clicked.
            props.tinyMceInstance.selection?.collapse();

            if (internalIsShown.value) {
                // Disable the toolbar but keep the edit source code toolbar button enabled.
                setEditorEnabled(props.tinyMceInstance, false);

                // Enable the toolbar button as long as the plugin isn't disabled.
                if (!props.disabled) {
                    toolbarButtonApi.value?.setEnabled(true);
                }
            }
            else {
                // Disable the toolbar but keep the edit source code toolbar button enabled.
                setEditorEnabled(props.tinyMceInstance, true);
            }

            // Always update the button UI based on whether the editor is shown.
            toolbarButtonApi.value?.setActive(internalIsShown.value);
        }
    }, {
        // "post" will cause the effect to initially execute after the DOM is updated (after the editor is initialized).
        flush: "post"
    });

    //#endregion
</script>