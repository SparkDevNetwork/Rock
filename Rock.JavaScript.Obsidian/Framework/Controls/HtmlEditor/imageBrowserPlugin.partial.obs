<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isShown"
           title="Select Image"
           cancelText="Cancel"
           saveText="OK"
           :onSave="onOkClicked">
        TODO: Add Image Browser
    </Modal>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { getToolbarButton } from "./utils.partial";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        tinyMceInstance: {
            type: Object as PropType<Editor | undefined>,
            required: true
        },
        toolbarElement: {
            type: Object as PropType<HTMLElement | undefined>,
            required: true
        }
    });

    const id = "rockimagebrowser" as const;
    const tooltip = "Image Browser" as const;

    defineExpose({
        id
    });

    //#region Values

    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const isShown = ref<boolean>(false);
    const image = ref<ListItemBag | undefined>();

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        // Open the modal when the toolbar button is clicked.
        editor.ui.registry.addToggleButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "image",
            tooltip: "Image Browser",
            onAction: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): void => {
                isShown.value = true;
            },
            onSetup: (_api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(tooltip, props.toolbarElement) ?? undefined;

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    /** Event handler for the OK button being clicked. */
    function onOkClicked(): void {
        const editor = props.tinyMceInstance;

        if (editor && image.value?.value) {
            // TODO: Add the image to the editor assuming image.value is the image path.
            // https://www.tiny.cloud/docs/tinymce/latest/editor-command-identifiers/#link:~:text=cursor%20or%20selection.-,InsertImage,-Adds%20an%20image
            editor.execCommand("InsertImage", false, image.value.value);
        }

        // Clear the selected image and close the modal.
        image.value = undefined;
        isShown.value = false;
    }

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(() => props.tinyMceInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (props.tinyMceInstance) {
            init(props.tinyMceInstance);
        }
    });

    //#endregion
</script>