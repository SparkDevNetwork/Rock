<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isShown"
           cancelText="Cancel"
           saveText="OK"
           title="Select Merge Field"
           :onSave="onMergeFieldPicked">
        <MergeFieldPicker v-model="mergeFieldValue"
                          :additionalFields="mergeFields ? mergeFields.join(',') : ''"
                          :multiple="false"
                          placeholder="Add Merge Field" />
    </Modal>
</template>

<script setup lang="ts">
    import { PropType, ref, watch } from "vue";
    import { getToolbarButton } from "./utils.partial";
    import MergeFieldPicker from "@Obsidian/Controls/mergeFieldPicker.obs";
    import Modal from "@Obsidian/Controls/modal.obs";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { formatValue } from "@Obsidian/Utility/mergeField";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

    const props = defineProps({
        mergeFields: {
            type: Array as PropType<string[] | undefined>,
            required: false
        },
        tinyMceInstance: {
            type: Object as PropType<Editor | undefined>,
            required: true
        },
        toolbarElement: {
            type: Object as PropType<HTMLElement | undefined>,
            required: true
        }
    });

    const id = "rockmergefield" as const;
    const tooltip = "Merge Field" as const;

    defineExpose({
        id
    });

    //#region Values

    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const mergeFieldValue = ref<ListItemBag | undefined>();
    const isShown = ref<boolean>(false);

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Shows or hides the toolbar button based */
    function showOrHideToolbarButton(): void {
        if (toolbarButtonElement.value) {
            // Set the CSS display value depending on whether there is a value.
            const display = props.mergeFields?.length ? "" : "none";
            toolbarButtonElement.value.style.display = display;

            // Also update the display of the toolbar button group if this is the only button in the button group.
            const parentElement = toolbarButtonElement.value.parentElement;
            if (parentElement?.classList.contains("tox-toolbar__group") && parentElement.children.length === 1) {
                parentElement.style.display = display;
            }
        }
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        editor.ui.registry.addButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "code-sample",
            tooltip: tooltip,
            onAction: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): void => {
                isShown.value = true;
            },
            onSetup: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): (api: Ui.Toolbar.ToolbarButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(tooltip, props.toolbarElement) ?? undefined;

                showOrHideToolbarButton();

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    /** Event handler for a merge field being picked. */
    async function onMergeFieldPicked(): Promise<void> {
        if (props.tinyMceInstance) {
            const mergeField = mergeFieldValue.value;

            if (mergeField?.value) {
                const formattedValue = await formatValue(mergeField.value);

                // Insert the merge field value into the editor at the current position.
                props.tinyMceInstance.insertContent(formattedValue);
            }
        }

        // Clear the merge field and close the modal.
        mergeFieldValue.value = undefined;
        isShown.value = false;
    }

    //#endregion

    //#region Watchers

    // Hide or show the toolbar button when the mergeFields change.
    watch(() => props.mergeFields, () => {
        showOrHideToolbarButton();
    });

    // Register the plugin whenever the bound Editor changes.
    watch(() => props.tinyMceInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (props.tinyMceInstance) {
            init(props.tinyMceInstance);
        }
    });

    //#endregion
</script>