<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <TreeItemPicker
                    v-bind="standardFieldProps"
                    :modelValue="(pagePickerValue as ListItemBag[])"
                    @update:modelValue="updatePage"
                    formGroupClasses="location-item-picker"
                    iconCssClass="fa fa-file"
                    :provider="itemProvider"
                    :multiple="multiple"
                    :autoExpand="true">

        <template #customPickerActions v-if="showSelectCurrentPage">
            <RockButton @click="selectCurrentPage" :btnSize="BtnSize.ExtraSmall" :btnType="BtnType.Link" title="Select Current Page"><i class="fa fa-file-o"></i></RockButton>
        </template>

        <template #append>
            <div class="input-max-w-xl" v-if="isRoutePickerVisible" v-show="routeItemsCount > 0">
                <span class="d-block small mt-1 mb-2">{{ routeCountText }}</span>
                <BaseAsyncPicker
                                 :modelValue="internalRouteValue"
                                 @update:modelValue="updateRoute"
                                 showBlankItem
                                 :lazyMode="isLazy"
                                 :displayStyle="routePickerDisplayStyle"
                                 :items="actualRouteItems" />
            </div>
        </template>
    </TreeItemPicker>
</template>

<script setup lang="ts">
    import { computed, nextTick, PropType, ref, watch } from "vue";
    import { PageTreeItemProvider } from "@Obsidian/Utility/treeItemProviders";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import TreeItemPicker from "./treeItemPicker.obs";
    import RockButton from "./rockButton.obs";
    import { BtnType } from "@Obsidian/Enums/Controls/btnType";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { useStore } from "@Obsidian/PageState";
    import { Guid } from "@Obsidian/Types";
    import { PagePickerGetPageNameOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/pagePickerGetPageNameOptionsBag";
    import { PagePickerGetPageRoutesOptionsBag } from "@Obsidian/ViewModels/Rest/Controls/pagePickerGetPageRoutesOptionsBag";
    import { PageRouteValueBag } from "@Obsidian/ViewModels/Rest/Controls/pageRouteValueBag";
    import BaseAsyncPicker from "./baseAsyncPicker.obs";
    import { useHttp } from "@Obsidian/Utility/http";
    import { PickerDisplayStyle } from "@Obsidian/Enums/Controls/pickerDisplayStyle";
    import { ControlLazyMode } from "@Obsidian/Enums/Controls/controlLazyMode";
    import { emptyGuid } from "@Obsidian/Utility/guid";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps } from "@Obsidian/Utility/component";
    import * as Dialogs from "@Obsidian/Utility/dialogs";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<PageRouteValueBag | PageRouteValueBag[] | null>,
            required: false
        },

        securityGrantToken: {
            type: String as PropType<string | null>,
            required: false
        },

        /**
         * Whether or not to show a button on the drop-down that sets the value to the current page
         */
        showSelectCurrentPage: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * List of GUIDs of pages to hide from the list
         */
        hidePageGuids: {
            type: Array as PropType<Guid[]>,
            required: false
        },

        /**
         * Whether or not to prompt for a route for pages that have at least one
         */
        promptForPageRoute: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Whether to allow multi-select or single-select
         */
        multiple: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: PageRouteValueBag | PageRouteValueBag[] | null): void
    }>();

    const http = useHttp();
    const standardFieldProps = useStandardRockFormFieldProps(props);

    // #region Page

    // Extract the page value(s) from the the PageRouteValueBag(s) so they can be used with the tree picker
    const internalPageValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {
        if (!props.modelValue) {
            return null;
        }
        if (Array.isArray(props.modelValue)) {
            if (props.multiple) {
                return props.modelValue.map(item => item.page);
            }
            emit("update:modelValue", { page: props.modelValue[0].page });
            return props.modelValue[0].page;
        }

        return props.modelValue.page;
    });

    // This value is used for TreePicker to show the route in parentheses if a route is chosen
    const pagePickerValue = computed<ListItemBag | (ListItemBag | null | undefined)[] | null | undefined>(() => {
        if (internalRouteValue.value) {
            const route = internalRouteValue.value as ListItemBag;
            const page = internalPageValue.value as ListItemBag;

            return {
                value: page.value,
                text: `${page.text} (${route.text})`
            };
        }

        return internalPageValue.value;
    });

    // Set the page value
    function updatePage(pages: ListItemBag | ListItemBag[] | null): void {
        if (!pages) {
            if (props.multiple) {
                emit("update:modelValue", []);
            }
            else {
                emit("update:modelValue", null);
            }
        }
        else if (props.multiple) {
            // When `multiple`, we can assume we're receiving an array
            emit("update:modelValue", (pages as ListItemBag[]).map(page => ({ page })));
        }
        else if ((pages as ListItemBag).value == (internalPageValue.value as ListItemBag)?.value) {
            // In this case, the user hit "select" without choosing a different option, so reset the value to the current page (no route)
            emit("update:modelValue", { page: internalPageValue.value as ListItemBag });
        }
        else {
            // When page is updated, no route will be picked, so just use the page property
            emit("update:modelValue", { page: pages as ListItemBag });
        }
    }

    // Use the Page State store to get the GUID of the current page
    const pageStore = useStore();
    const pageGuid = pageStore.state.pageGuid;
    let currentPage: ListItemBag | undefined;

    // Using the GUID we have of the current page, fetch the page name and assign the current page as the picker's value
    async function selectCurrentPage(): Promise<void> {
        // If cached, don't re-fetch
        if (currentPage) {
            updatePage(props.multiple ? [currentPage] : currentPage);
            refreshProvider();
            return;
        }

        const options: PagePickerGetPageNameOptionsBag = { pageGuid, securityGrantToken: props.securityGrantToken };
        const response = await http.post<string>("/api/v2/Controls/PagePickerGetPageName", {}, options);

        if (response.isSuccess && response.data) {
            currentPage = {
                text: response.data,
                value: pageGuid
            };
            updatePage(props.multiple ? [currentPage] : currentPage);
        }
        else if (response.statusCode == 401) {
            Dialogs.alert("Could not determine current page");
            return;
        }
        else {
            console.error("Error", response.errorMessage);
            updatePage(props.multiple ? [{ value: pageGuid }] : { value: pageGuid });
        }
        // Wait until internalPageValue is updated before retrieving the tree again.
        await nextTick();

        refreshProvider();
    }

    // Configure the item provider with our settings.
    const itemProvider = ref<PageTreeItemProvider>(new PageTreeItemProvider());
    refreshProvider();

    // (Re)Initialize the PageTreeItemProvider to pull in the right tree of options for the picker
    function refreshProvider(): void {
        const prov = new PageTreeItemProvider();
        prov.securityGrantToken = props.securityGrantToken;
        prov.hidePageGuids = props.hidePageGuids;

        if (internalPageValue.value) {
            if (Array.isArray(internalPageValue.value)) {
                prov.selectedPageGuids = internalPageValue.value.map(p => p?.value ?? emptyGuid);
            }
            else {
                prov.selectedPageGuids = [internalPageValue.value.value ?? emptyGuid];
            }
        }

        itemProvider.value = prov;
    }

    // #endregion

    // #region Route

    // Enable route picker only if prop is set to true AND we're only selecting one value
    const shouldPromptForRoute = computed(() => !props.multiple && props.promptForPageRoute);

    // Extract the route so it can be controlled by its own picker (if route picking enabled)
    const internalRouteValue = computed<ListItemBag | null | undefined>(() => {
        if (!props.modelValue || Array.isArray(props.modelValue) || !shouldPromptForRoute.value) {
            return null;
        }

        return props.modelValue.route;
    });

    // Initialize to true if we have a page value but no route value and the props indicate we should ask for a route
    const isRoutePickerVisible = computed(() => {
        return shouldPromptForRoute.value && !internalRouteValue.value && !!internalPageValue.value;
    });

    function updateRoute(route: ListItemBag | ListItemBag[] | null): void {
        if (Array.isArray(route)) {
            route = route[0];
        }

        // This is only called if route selection is enabled, and a page is selected, so we can assume
        // internalPageValue is a single ListItemBag
        emit("update:modelValue", {
            page: internalPageValue.value as ListItemBag,
            route
        });
    }

    /*
     * Route Async Picker Information
     */
    const loadedItems = ref<ListItemBag[] | null>(null);
    const actualRouteItems = computed((): ListItemBag[] | (() => Promise<ListItemBag[]>) => {
        return loadedItems.value || loadOptions;
    });
    const routeItemsCount = computed<number>(() => {
        if (Array.isArray(actualRouteItems.value)) {
            return actualRouteItems.value.length;
        }

        return 0;
    });
    const routeCountText = computed<string>(() => {
        if (routeItemsCount.value == 1) {
            return "( 1 route exists )";
        }

        return `( ${routeItemsCount.value} routes exist )`;
    });

    // Loads the items from the server.
    const loadOptions = async (): Promise<ListItemBag[]> => {
        if (Array.isArray(internalPageValue.value)) {
            return [];
        }

        const options: PagePickerGetPageRoutesOptionsBag = {
            pageGuid: (internalPageValue.value as ListItemBag).value
        };
        const result = await http.post<ListItemBag[]>("/api/v2/Controls/PagePickerGetPageRoutes", undefined, options);

        if (result.isSuccess && result.data) {
            loadedItems.value = result.data;
            return result.data;
        }
        else {
            console.error(result.errorMessage ?? "Unknown error while loading data.");
            loadedItems.value = [];
            return [];
        }
    };

    // When new page is selected, reload route picker options
    watch(internalPageValue, () => {
        loadedItems.value = null;
    });

    const routePickerDisplayStyle = PickerDisplayStyle.Condensed;
    const isLazy = ControlLazyMode.Eager;
</script>
