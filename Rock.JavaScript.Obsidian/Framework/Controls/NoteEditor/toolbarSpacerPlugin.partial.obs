<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<script setup lang="ts">
    /**
     * ToolbarSpacerPlugin - Adds a spacer to a note editor toolbar that
     * pushes buttons to its left and its right to fill the width of the toolbar.
     *
     * @example
     * <!--
     *      someEditorHost.obs - This example shows just enough code to wire up the plugin.
     *      FYI, the Vue - Official extension complains if template and script tags are used in comments,
     *      so using (template) and (script) for now.
     * -->
     * (template)
     *   <div id="uniqueEditorId">
     *     <ToolbarSpacerPlugin ref="toolbarSpacerPlugin" />
     *   </div>
     * (/template)
     *
     * (script setup lang="ts")
     *   import ToolbarSpacerPlugin from "./NoteEditor/toolbarSpacerPlugin.partial.obs";
     *   ...
     *
     *   const toolbarSpacerPlugin = ref<InstanceType<typeof ToolbarSpacerPlugin> | undefined>();
     *   ...
     *
     *   // The host must provide the plugins feature.
     *   const pluginManager = providePluginsFeature({
     *       editorInstance: computed(() => tinyMceInstance.value),
     *       toolbarElement: computed(() => toolbarElement.value)
     *   });
     *   ...
     *
     *   // Initialize the editor.
     *   onMounted(() => {
     *     ...
     *
     *     tinymce.init({
     *       // The toolbar spacer can be placed anywhere in this configuration string.
     *       // Here, the toolbar will display
     *       // the undo button on the left, a large blank space,
     *       // then the redo button on the right.
     *       // Reference: https://www.tiny.cloud/docs/tinymce/6/toolbar-configuration-options/#example-grouped-toolbar
     *       toolbar: `undo ${toolbarSpacerPlugin.value?.id} redo`
     *     });
     *
     *     ...
     *   });
     *   ...
     * (/script)
     */
    import { ref, watch } from "vue";
    import { getToolbarButton, usePluginHelper } from "./utils.partial";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { newGuid } from "@Obsidian/Utility/guid";

    const id = `note-toolbar-spacer-${newGuid()}` as const;

    defineExpose({
        id
    });

    //#region Values

    const { editorInstance, toolbarElement } = usePluginHelper();
    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const mutationObserver = new MutationObserver(removedWidthIfSet);

    //#endregion

    //#region Computed Values

    //#endregion

    //#region Functions

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        // This combines the functionality of the built-in `align` toolbar button
        // and the `indent` toolbar button. It also updates the toolbar icon to
        // reflect the alignment of the selected node.
        editor.ui.registry.addButton(id, {
            // Temporarily setting the tooltip to the plugin id to help find the button in `onSetup`.
            tooltip: id,
            onAction: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): void => {
                // Nothing to do.
            },
            onSetup: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): (api: Ui.Toolbar.ToolbarButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(id, toolbarElement.value) ?? undefined;

                const tb = toolbarButtonElement.value;

                if (tb) {
                    // Remove the temporary title used to find the element.
                    tb.removeAttribute("title");

                    // Remove the "button" styles from the label.
                    tb.style.pointerEvents = "none";

                    // Add styles to space the control out.
                    tb.style.flexGrow = "1";
                    const parent = tb.parentElement;
                    while (parent) {
                        if (parent.role === "toolbar") {
                            parent.style.width = "100%";
                            break;
                        }
                    }

                    // Add custom CSS class(es) if specified.
                    tb.classList.add("note-toolbar-spacer", id);

                    mutationObserver.disconnect();
                    mutationObserver.observe(tb, { attributes: true, attributeFilter: ["style"] });
                }

                // Return a dispose callback.
                return dispose;
            },
        });
    }

    function removedWidthIfSet(mutations: MutationRecord[], _observer: MutationObserver): void {
        mutations.forEach((mutationRecord: MutationRecord): void => {
            const el = <HTMLElement>mutationRecord.target;
            if (mutationRecord.attributeName === "style" && el.style.width) {
                // Prevent inline width styles from being added to the spacer element
                // so it can grow dynamically with screen resizes.
                el.style.width = "";
            }
        });
    }

    /** Disposes the plugin. */
    function dispose(): void {
        mutationObserver.disconnect();
    }

    //#endregion

    //#region Event Handlers

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(editorInstance, () => {
        // Dispose the previous tooltip button if set.
        dispose();

        if (editorInstance.value) {
            init(editorInstance.value);
        }
    });

    //#endregion
</script>