<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isShown"
           title="Select Image"
           cancelText="Cancel"
           saveText="OK"
           :onSave="onOkClicked"
           :isSaveButtonDisabled="isOkButtonDisabled">
        <FileManager v-model="image" :encryptedRootFolder="encryptedRootFolder" enableFileManager browseMode="image" :userSpecificRoot="userSpecificRoot" />
    </Modal>
</template>

<script setup lang="ts">
    /**
     * ImageBrowserPlugin - Adds a toolbar button for adding an image.
     *
     * @example
     * <!--
     *      someEditorHost.obs - This example shows just enough code to wire up the plugin.
     *      FYI, the Vue - Official extension complains if template and script tags are used in comments,
     *      so using (template) and (script) for now.
     * -->
     * (template)
     *   <div id="uniqueEditorId">
     *     <ImageBrowserPlugin ref="imageBrowserPlugin" />
     *   </div>
     * (/template)
     *
     * (script setup lang="ts")
     *   import ImageBrowserPlugin from "./NoteEditor/imageBrowserPlugin.partial.obs";
     *   ...
     *
     *   const imageBrowserPlugin = ref<InstanceType<typeof ImageBrowserPlugin> | undefined>();
     *   ...
     *
     *   // The host must provide the plugins feature.
     *   const pluginManager = providePluginsFeature({
     *       editorInstance: computed(() => tinyMceInstance.value),
     *       toolbarElement: computed(() => toolbarElement.value)
     *   });
     *   ...
     *
     *   // Initialize the editor.
     *   onMounted(() => {
     *     ...
     *
     *     tinymce.init({
     *       // The image browser button can be placed anywhere in this configuration string.
     *       // Here, the toolbar will display
     *       // the image browser button, followed by a separator character,
     *       // then the undo and redo buttons.
     *       // Reference: https://www.tiny.cloud/docs/tinymce/6/toolbar-configuration-options/#example-grouped-toolbar
     *       toolbar: `${imageBrowserPlugin.value?.id} | undo redo`
     *     });
     *
     *     ...
     *   });
     * (/script)
     */
    import { computed, ref, watch } from "vue";
    import { getToolbarButton, usePluginHelper } from "./utils.partial";
    import Modal from "@Obsidian/Controls/modal.obs";
    import FileManager from "@Obsidian/Controls/fileAssetManager.obs";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { FileAsset } from "@Obsidian/ViewModels/Controls/fileAsset";

    defineProps({
        /** The encrypted root folder path used for the local file browser */
        encryptedRootFolder: {
            type: String,
            default: ""
        },

        /**
         * If set to true, instead of using the given root directly, the root folder shown will be a
         * folder under the given root that is named after the current person's username. If the folder
         * does not exist, it will be created.
         */
        userSpecificRoot: {
            type: Boolean,
            default: false
        }
    });

    const id = "rockimagebrowser" as const;
    const tooltip = "Image Browser" as const;

    defineExpose({
        id
    });

    //#region Values

    const { editorInstance, toolbarElement } = usePluginHelper();
    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const isShown = ref<boolean>(false);
    const image = ref<FileAsset[]>([]);

    //#endregion

    //#region Computed Values

    const isOkButtonDisabled = computed<boolean>(() => {
        return image.value.length !== 1;
    });

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        // Register toolbar buttons.
        // Open the modal when the toolbar button is clicked.
        editor.ui.registry.addToggleButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "image",
            tooltip: "Image Browser",
            onAction: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): void => {
                isShown.value = true;
            },
            onSetup: (_api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(tooltip, toolbarElement.value) ?? undefined;

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    /** Event handler for the OK button being clicked. */
    function onOkClicked(): void {
        const editor = editorInstance.value;

        if (editor && image.value?.length == 1) {
            // Possible commands: https://www.tiny.cloud/docs/tinymce/latest/editor-command-identifiers/
            editor.execCommand("InsertHTML", false, `<img style="width:25%" src="${image.value[0].uri}" alt="${image.value[0].name}" />`);
        }

        // Clear the selected image and close the modal.
        image.value = [];
        isShown.value = false;
    }

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(editorInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (editorInstance.value) {
            init(editorInstance.value);
        }
    });

    //#endregion
</script>