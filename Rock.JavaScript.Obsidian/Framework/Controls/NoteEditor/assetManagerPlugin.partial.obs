<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Modal v-model="isShown"
           title="Select Asset"
           cancelText="Cancel"
           saveText="OK"
           :onSave="onOkClicked"
           :isSaveButtonDisabled="isOkButtonDisabled">
        <AssetManager v-model="asset" enableAssetManager />
    </Modal>
</template>

<script setup lang="ts">
    /**
     * AssetManagerPlugin - Adds a toolbar button for attaching an asset.
     *
     * @example
     * <!--
     *      someEditorHost.obs - This example shows just enough code to wire up the plugin.
     *      FYI, the Vue - Official extension complains if template and script tags are used in comments,
     *      so using (template) and (script) for now.
     * -->
     * (template)
     *   <div id="uniqueEditorId">
     *     <AssetManagerPlugin ref="assetManagerPlugin" />
     *   </div>
     * (/template)
     *
     * (script setup lang="ts")
     *   import AssetManagerPlugin from "./NoteEditor/assetManagerPlugin.partial.obs";
     *   ...
     *
     *   const assetManagerPlugin = ref<InstanceType<typeof AssetManagerPlugin> | undefined>();
     *   ...
     *
     *   // The host must provide the plugins feature.
     *   const pluginManager = providePluginsFeature({
     *       editorInstance: computed(() => tinyMceInstance.value),
     *       toolbarElement: computed(() => toolbarElement.value)
     *   });
     *   ...
     *
     *   // Initialize the editor.
     *   onMounted(() => {
     *     ...
     *
     *     tinymce.init({
     *       // The asset manager button can be placed anywhere in this configuration string.
     *       // Here, the toolbar will display
     *       // the asset manager button, followed by a separator character,
     *       // then the undo and redo buttons.
     *       // Reference: https://www.tiny.cloud/docs/tinymce/6/toolbar-configuration-options/#example-grouped-toolbar
     *       toolbar: `${assetManagerPlugin.value?.id} | undo redo`
     *     });
     *
     *     ...
     *   });
     * (/script)
     */
    import { computed, ref, watch } from "vue";
    import { getToolbarButton, usePluginHelper } from "./utils.partial";
    import Modal from "@Obsidian/Controls/modal.obs";
    import AssetManager from "@Obsidian/Controls/fileAssetManager.obs";
    import { Editor, Ui } from "@Obsidian/Libs/tinymce";
    import { FileAsset } from "@Obsidian/ViewModels/Controls/fileAsset";
    import { isImage } from "@Obsidian/Utility/file";

    const id = "rockassetmanager" as const;
    const tooltip = "Asset Manager" as const;

    defineExpose({
        id
    });

    //#region Values

    const { editorInstance, toolbarElement } = usePluginHelper();
    const toolbarButtonElement = ref<HTMLElement | undefined>();
    const isShown = ref<boolean>(false);
    const asset = ref<FileAsset[]>([]);

    //#endregion

    //#region Computed Values

    const isOkButtonDisabled = computed<boolean>(() => {
        return asset.value.length !== 1;
    });

    //#endregion

    //#region Functions

    /** Disposes the tooltip button. */
    function disposeTooltipButton(): void {
        // Nothing to dispose.
    }

    /** Initializes the plugin. */
    function init(editor: Editor): void {
        editor.ui.registry.addIcon("asset-manager", '<svg xmlns="http://www.w3.org/2000/svg" height=18 width=18 viewBox="0 0 576 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M572.7 292.1L500.3 416.2A64 64 0 0 1 445 448H45c-18.5 0-30.1-20.1-20.7-36.1l72.4-124.2A64 64 0 0 1 152 256h400c18.5 0 30.1 20.1 20.7 36.1zM152 224h328v-48c0-26.5-21.5-48-48-48H272l-64-64H48C21.5 64 0 85.5 0 112v278l69.1-118.4C86.2 242.3 118 224 152 224z"/></svg>');
        // Register toolbar buttons.
        // Open the modal when the toolbar button is clicked.
        editor.ui.registry.addToggleButton(id, {
            // https://www.tiny.cloud/docs/tinymce/latest/editor-icon-identifiers/
            icon: "asset-manager",
            // icon: "browse",
            tooltip: tooltip,
            onAction: (_api: Ui.Toolbar.ToolbarButtonInstanceApi): void => {
                isShown.value = true;
            },
            onSetup: (_api: Ui.Toolbar.ToolbarToggleButtonInstanceApi): (api: Ui.Toolbar.ToolbarToggleButtonInstanceApi) => void => {
                toolbarButtonElement.value = getToolbarButton(tooltip, toolbarElement.value) ?? undefined;

                // Return a dispose callback.
                return disposeTooltipButton;
            },
        });
    }

    //#endregion

    //#region Event Handlers

    /** Event handler for the OK button being clicked. */
    async function onOkClicked(): Promise<void> {
        const editor = editorInstance.value;

        if (editor && asset.value?.length > 0) {
            if (await isImage(asset.value[0].uri)) {
                // Possible commands: https://www.tiny.cloud/docs/tinymce/latest/editor-command-identifiers/
                editor.execCommand("InsertHTML", false, `<img style="width:25%" src="${asset.value[0].uri}" alt="${asset.value[0].name}" />`);
            }
            else {
                // Possible commands: https://www.tiny.cloud/docs/tinymce/latest/editor-command-identifiers/
                editor.execCommand("InsertHTML", false, `<a href="${asset.value[0].uri}">${asset.value[0].name}</a>`);
            }
        }

        // Clear the asset value and close the modal.
        asset.value = [];
        isShown.value = false;
    }

    //#endregion

    //#region Watchers

    // Register the plugin whenever the bound Editor changes.
    watch(editorInstance, () => {
        // Dispose the previous tooltip button if set.
        disposeTooltipButton();

        if (editorInstance.value) {
            init(editorInstance.value);
        }
    });

    //#endregion
</script>