//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";

/** Block View Model */
export type BlockBag = {
    /** Gets or sets the additional settings. */
    additionalSettings?: string | null;

    /** Gets or sets the Id of the Rock.Model.BlockType that this Block is implementing. This property is required. */
    blockTypeId: number;

    /** Gets or sets an optional CSS class to include when the block's parent container is rendered */
    cssClass?: string | null;

    /** Gets or sets a flag indicating if this Block was created by and is a part of the Rock core system/framework. This property is required. */
    isSystem: boolean;

    /**
     * Gets or sets the Id of the Rock.Model.Layout that this Block is implemented on. This property will only be populated
     * if the Block is implemented on a Rock.Model.Layout.
     * Blocks that have a specific LayoutId will be shown on all pages on a site that have the specified LayoutId
     */
    layoutId?: number | null;

    /** Gets or sets a user defined name of the block implementation. This property is required. */
    name?: string | null;

    /**
     * Gets or sets the order that this Block appears in the Rock.Model.Block.Page/Layout zone that the Block is implemented in.  Blocks are 
     * displayed/rendered in Ascending (1,2,3,...) order. The lower the number the higher in the Zone the Block will appear.  Rock.Model.Page Blocks have
     * priority over layout Blocks, so they will appear higher in the Zone than Rock.Model.Site/Layout Blocks. This property is required
     */
    order: number;

    /** Gets or sets the length of time (in minutes) that the Block's data is cached. This property is required. */
    outputCacheDuration: number;

    /**
     * Gets or sets the Id of the Rock.Model.Page that this Block is implemented on. This property will only be populated
     * if the Block is implemented on a Rock.Model.Page.
     * Blocks that have a specific PageId will only be shown in the specified Page
     */
    pageId?: number | null;

    /** Gets or sets any HTML to be rendered after the block */
    postHtml?: string | null;

    /** Gets or sets any HTML to be rendered before the block */
    preHtml?: string | null;

    /**
     * Gets or sets the Id of the Rock.Model.Site that this Block is implemented on. This property will only be populated
     * if the Block is implemented on a Rock.Model.Site.
     * Blocks that have a specific SiteId will be shown on all pages on a site
     */
    siteId?: number | null;

    /** Gets or sets the name of the layout zone/section that this Block is being implemented on. This property is required. */
    zone?: string | null;

    /** Gets or sets the created date time. */
    createdDateTime?: string | null;

    /** Gets or sets the modified date time. */
    modifiedDateTime?: string | null;

    /** Gets or sets the created by person alias identifier. */
    createdByPersonAliasId?: number | null;

    /** Gets or sets the modified by person alias identifier. */
    modifiedByPersonAliasId?: number | null;

    /** Gets or sets the identifier key of this entity. */
    idKey?: string | null;

    /** Gets or sets the attributes. */
    attributes?: Record<string, PublicAttributeBag> | null;

    /** Gets or sets the attribute values. */
    attributeValues?: Record<string, string> | null;
};
