//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { LabelFieldType } from "@Obsidian/Enums/CheckIn/Labels/labelFieldType";
import { Guid } from "@Obsidian/Types";
import { FieldFilterGroupBag } from "@Obsidian/ViewModels/Reporting/fieldFilterGroupBag";

/**
 * Represents a single field on a check-in label. This contains all the
 * information required to edit and render this field on the label. All
 * details regarding the conditions required to display the field are
 * also included.
 */
export type LabelFieldBag = {
    /**
     * An optional filter that controls the visibility of this field on
     * the label.
     */
    conditionalVisibility?: FieldFilterGroupBag | null;

    /**
     * The dictionary of configuration values. This represents the actual
     * settings of the field type, such as color or border width.
     */
    configurationValues?: Record<string, string> | null;

    /**
     * The custom data value used by the field source when rendering
     * the field.
     */
    customData?: Record<string, string> | null;

    /**
     * The field sub type. This is specific to each label field type.
     * 
     * For example a text field uses this to identify which field data
     * source objects are available to be selected in the editor.
     */
    fieldSubType: number;

    /**
     * The type of field. This indicates what process is used to render
     * this specific field.
     */
    fieldType: LabelFieldType;

    /**
     * The unique identifier of this field, this is generated automatically
     * when adding a field to a label.
     */
    guid: Guid;

    /**
     * The height of the field in inches. This represents the unrotated
     * height.
     */
    height: number;

    /**
     * A value indicating whether the item is included on the generated
     * preview image that will be stored with the label.
     */
    isIncludedOnPreview: boolean;

    /** The position in inches of the top left corner of the field. */
    left: number;

    /** Gets or sets the rotation angle between 0 and 360 degrees. */
    rotationAngle: number;

    /** The position in inches of the top left corner of the field. */
    top: number;

    /**
     * The width of the field in inches. This represents the unrotated
     * width.
     */
    width: number;
};
