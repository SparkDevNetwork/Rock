//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { Guid } from "@Obsidian/Types";
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

/**
 * Describes the data sent to and from remote systems to allow editing
 * of attributes (not values, the attributes themselves).
 */
export type PublicEditableAttributeBag = {
    /** Gets or sets the abbreviated name of the attribute. */
    abbreviatedName?: string | null;

    /** Gets or sets the categories the attribute is associated with. */
    categories?: ListItemBag[] | null;

    /** Gets or sets the configuration values for the attribute. */
    configurationValues?: Record<string, string> | null;

    /** Gets or sets the default value of the attribute. */
    defaultValue?: string | null;

    /**
     * Gets or sets the description of the attribute. This is usually used
     * in the help bubble when the edit control is rendered.
     */
    description?: string | null;

    /**
     * Gets or sets the field type unique identifier that defines the behavior
     * of the attribute. A value of null is only valid when transmitted
     * from the server to remote systems so that it can provide default values
     * in other properties.
     */
    fieldTypeGuid?: Guid | null;

    /**
     * Gets or sets the unique identifier of the existing attribute. If
     * this is a new attribute the value should be null.
     */
    guid?: Guid | null;

    /** Gets or sets a value indicating whether the attribute is active. */
    isActive: boolean;

    /**
     * Gets or sets a value indicating whether this attribute should be made available
     * when performing searches.
     */
    isAllowSearch: boolean;

    /** Gets or sets a value indicating whether this attribute is used for analytics. */
    isAnalytic: boolean;

    /** Gets or sets a value indicating whether this attribute records analytic history. */
    isAnalyticHistory: boolean;

    /**
     * Gets or sets a value indicating whether changes to this attribute's values should
     * be saved for historical purposes.
     */
    isEnableHistory: boolean;

    /** Gets or sets a value indicating whether this attribute is indexed by universal search. */
    isIndexEnabled: boolean;

    /** Gets or sets a value indicating whether the attribute is publically visible. */
    isPublic: boolean;

    /**
     * Gets or sets a value indicating whether the attribute is required
     * to be filled in when the edit control is rendered on a page.
     */
    isRequired: boolean;

    /** Gets or sets a value indicating whether the attribute is shown on grids. */
    isShowInGrid: boolean;

    /**
     * Gets or sets a value indicating whether the attribute is shown on
     * bulk update screens.
     */
    isShowOnBulk: boolean;

    /**
     * Gets or sets a value indicating whether this attribute is a system
     * attribute, which implies limited editing ability.
     */
    isSystem: boolean;

    /** Gets or sets the key that identifies the attribute. */
    key?: string | null;

    /** Gets or sets the name of the attribute. */
    name?: string | null;

    /** Gets or sets any HTML to be rendered after the attribute's edit control. */
    postHtml?: string | null;

    /** Gets or sets any HTML to be rendered before the attribute's edit control. */
    preHtml?: string | null;
};
