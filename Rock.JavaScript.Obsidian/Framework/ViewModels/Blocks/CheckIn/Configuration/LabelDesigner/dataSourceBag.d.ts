//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { TextFieldSubType } from "@Obsidian/Enums/CheckIn/Labels/textFieldSubType";
import { CustomFieldInputBag } from "@Obsidian/ViewModels/CheckIn/Labels/customFieldInputBag";
import { DataFormatterOptionBag } from "@Obsidian/ViewModels/CheckIn/Labels/dataFormatterOptionBag";

/** A data source that can be selected on the text fields. */
export type DataSourceBag = {
    /**
     * A string that identifies the category to use in the drop down UI
     * when designing the label.
     */
    category?: string | null;

    /** The custom fields to display when this source is selected. */
    customFields?: CustomFieldInputBag[] | null;

    /**
     * The custom formatter options that should be displayed and selected
     * from.
     */
    formatterOptions?: DataFormatterOptionBag[] | null;

    /**
     * Indicates if this data source represents a value that is a collection
     * of multiple values.
     */
    isCollection: boolean;

    /**
     * The unique key that identifies this data source.
     * 
     * Properties should use a lowercase key that corresponds to the
     * property path represented by the source such as `person.id`.
     * 
     * Attributes should use a lowercase key that contains the unique
     * identifier of the attribute prefixed with `attribute:`.
     */
    key?: string | null;

    /**
     * The friendly name that describes the value that will be retrieved
     * with this data source.
     */
    name?: string | null;

    /**
     * The text field sub-type that this data source is associated with.
     * This is used to filter the available data sources depending on
     * which text field is selected.
     */
    textSubType: TextFieldSubType;
};
