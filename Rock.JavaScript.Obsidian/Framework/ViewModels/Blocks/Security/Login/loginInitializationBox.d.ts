//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { LoginMethod } from "@Obsidian/Enums/Blocks/Security/Login/loginMethod";
import { ExternalAuthenticationButtonBag } from "@Obsidian/ViewModels/Blocks/Security/Login/externalAuthenticationButtonBag";
import { PasswordlessLoginAutoVerifyOptionsBag } from "@Obsidian/ViewModels/Blocks/Security/Login/passwordlessLoginAutoVerifyOptionsBag";

/**
 * A box that contains the required information to render a login block.
 * Implements the Rock.ViewModels.Blocks.BlockBox
 */
export type LoginInitializationBox = {
    /** The configuration errors. */
    configurationErrors?: string[] | null;

    /** Gets or sets the content text. */
    contentText?: string | null;

    /** The default login method when the block is loaded. */
    defaultLoginMethod: LoginMethod;

    /**
     * Gets or sets the error message. A non-empty value indicates that
     * an error is preventing the block from being displayed.
     */
    errorMessage?: string | null;

    /** Gets or sets the external authentication buttons. */
    externalAuthProviderButtons?: ExternalAuthenticationButtonBag[] | null;

    /** Gets or sets the help page URL. */
    helpPageUrl?: string | null;

    /** Gets or sets a value indicating whether to hide the new account option. */
    hideNewAccountOption: boolean;

    /** Gets or sets a value indicating whether two-factor authentication is not supported for the selected authentication factor. */
    is2FANotSupportedForAuthenticationFactor?: boolean | null;

    /** Indicates whether internal database login is supported. */
    isInternalDatabaseLoginSupported: boolean;

    /** Indicates whether passwordless login is supported. */
    isPasswordlessLoginSupported: boolean;

    /** Gets or sets the navigation urls. */
    navigationUrls?: Record<string, string> | null;

    /** Gets or sets the new account button text. */
    newAccountButtonText?: string | null;

    /** Gets or sets the new account page URL. */
    newAccountPageUrl?: string | null;

    /** The passwordless login auto verify options bag. */
    passwordlessAutoVerifyOptions?: PasswordlessLoginAutoVerifyOptionsBag | null;

    /** Gets or sets the prompt message. */
    promptMessage?: string | null;

    /**
     * Page to redirect user to upon successful log in.
     * The 'returnurl' query string will always override this setting for database authenticated logins.
     * Redirect Page Setting will override third-party authentication 'returnurl'.
     */
    redirectUrl?: string | null;

    /** Optional text (HTML) to display above remote authorization options. */
    remoteAuthorizationPromptMessage?: string | null;

    /** Gets or sets the security grant token. */
    securityGrantToken?: string | null;

    /** Gets or sets a value indicating whether the client should redirect to the Rock.ViewModels.Blocks.Security.Login.LoginInitializationBox.RedirectUrl. */
    shouldRedirect: boolean;

    /** Gets or sets the two-factor email phone not available message. */
    twoFactorEmailPhoneNotAvailableMessage?: string | null;

    /** Gets or sets the two-factor email phone required message. */
    twoFactorEmailPhoneRequiredMessage?: string | null;

    /** Gets or sets the two-factor login not available message. */
    twoFactorLoginNotAvailableMessage?: string | null;

    /** Gets or sets the two-factor login required message. */
    twoFactorLoginRequiredMessage?: string | null;

    /** Gets or sets the two-factor not supported by authentication method message. */
    twoFactorNotSupportedByAuthenticationMethodMessage?: string | null;

    /** Gets or sets the username field label. */
    usernameFieldLabel?: string | null;
};
