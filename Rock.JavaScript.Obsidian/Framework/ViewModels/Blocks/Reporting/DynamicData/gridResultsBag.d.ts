//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { GridDefinitionBag } from "@Obsidian/ViewModels/Core/Grid/gridDefinitionBag";

/**
 * A bag that contains the grid results for the dynamic data block.
 * 
 * This will contain the grid definition and information about enabled grid features, but will not
 * contain grid data rows; that data should instead be loaded on demand by the Obsidian grid client.
 */
export type GridResultsBag = {
    /** Gets or sets the column name(s) that should be available to use as merge fields for the communication. */
    communicationMergeFields?: string[] | null;

    /**
     * Gets or sets the fields that contain a person key to use as the recipient for a communication.
     * 
     * These may be simple field names (i.e. "id") or dot-separated paths to the
     * key values within each particular field's object (i.e. "person.idKey").
     */
    communicationRecipientFields?: string[] | null;

    /** Gets or sets whether to disable paging on the grid. */
    disablePaging: boolean;

    /** Gets or sets whether to show 'Bulk Update' button in the grid. */
    enableBulkUpdate: boolean;

    /** Gets or sets whether to show 'Communicate' button in the grid. */
    enableCommunications: boolean;

    /** Gets or sets whether to show 'Export to Excel' and 'Export to CSV' buttons in the grid. */
    enableExport: boolean;

    /** Get or sets whether to show 'Launch Workflow' button in the grid. */
    enableLaunchWorkflow: boolean;

    /** Gets or sets whether to show 'Merge Template' button in the grid. */
    enableMergeTemplate: boolean;

    /** Gets or sets whether to show 'Merge Person Records' button in the grid. */
    enablePersonMerge: boolean;

    /** Gets or sets whether the header on the grid will be sticky at the top of the page. */
    enableStickyHeader: boolean;

    /** Gets or sets the grid definition. */
    gridDefinition?: GridDefinitionBag | null;

    /** Gets or set the Lava template to be rendered below the grid. */
    gridFooterHtml?: string | null;

    /** Gets or sets the Lava template to be rendered above the grid. */
    gridHeaderHtml?: string | null;

    /** Gets or sets whether the query returns a list of people. */
    isPersonReport: boolean;

    /**
     * Gets or sets the field that will be used to uniquely identify each row.
     * 
     * This may be a simple field name (i.e. "id") or a dot-separated path to the
     * key value within a particular field's object (i.e. "person.idKey").
     */
    keyField?: string | null;

    /**
     * Gets or sets the field that will contain the person key.
     * 
     * This may be a simple field name (i.e. "id") or a dot-separated path to the
     * key value within a particular field's object (i.e. "person.idKey").
     */
    personKeyField?: string | null;

    /** Gets or sets whether to show the checkbox select column on the grid as the first column. */
    showCheckboxSelectionColumn: boolean;

    /** Gets or sets the grid's title. */
    title?: string | null;
};
