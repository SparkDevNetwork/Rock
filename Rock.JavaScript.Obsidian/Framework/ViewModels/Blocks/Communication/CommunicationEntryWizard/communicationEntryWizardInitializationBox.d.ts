//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { Guid } from "@Obsidian/Types";
import { CommunicationEntryWizardCommunicationBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntryWizard/communicationEntryWizardCommunicationBag";
import { CommunicationEntryWizardCommunicationTemplateDetailBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntryWizard/communicationEntryWizardCommunicationTemplateDetailBag";
import { CommunicationEntryWizardCommunicationTemplateListItemBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntryWizard/communicationEntryWizardCommunicationTemplateListItemBag";
import { CommunicationEntryWizardRecipientBag } from "@Obsidian/ViewModels/Blocks/Communication/CommunicationEntryWizard/communicationEntryWizardRecipientBag";
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";

/** Box containing initialization information for the Communication Entry Wizard block. */
export type CommunicationEntryWizardInitializationBox = {
    /** Gets or sets a value indicating whether navigation shortcuts are disabled. */
    areNavigationShortcutsDisabled: boolean;

    /** Gets or sets the file type to use for communication attachments. */
    attachmentBinaryFileTypeGuid: Guid;

    /** The recipient count threshold that, when exceeded, will automatically mark a new communication as bulk. */
    bulkEmailThreshold?: number | null;

    /** Gets or sets the communication details being created/edited. */
    communication?: CommunicationEntryWizardCommunicationBag | null;

    communicationListGroups?: ListItemBag[] | null;

    /** Gets or sets the initial communication template detail. */
    communicationTemplateDetail?: CommunicationEntryWizardCommunicationTemplateDetailBag | null;

    /** Gets or sets the communication topic values. */
    communicationTopicValues?: ListItemBag[] | null;

    /**
     * Gets or sets the error message. A non-empty value indicates that
     * an error is preventing the block from being displayed.
     */
    errorMessage?: string | null;

    /** Gets or sets a value determining whether this page has a communication detail block. */
    hasDetailBlockOnCurrentPage: boolean;

    /** Gets or sets the binary file type unique identifier to use for images that are added to the email using the image component. */
    imageComponentBinaryFileTypeGuid: Guid;

    /** Gets or sets a value indicating whether adding individuals to recipient lists is disabled. */
    isAddingIndividualsToRecipientListsDisabled: boolean;

    isDuplicatePreventionOptionShown: boolean;

    /** Gets or sets whether the communication wizard block should be hidden. */
    isHidden: boolean;

    /** Gets or sets a value indicating whether the push medium is configured to use the Rock Mobile Push transport. */
    isUsingRockMobilePushTransport: boolean;

    /**
     * The maximum width (in pixels) of an image attached to a mobile communication.
     * If its width is over the max, Rock will automatically resize image to the max width.
     */
    maxSmsImageWidth: number;

    /** Gets or sets the communication mediums. */
    mediums?: ListItemBag[] | null;

    mergeFields?: string[] | null;

    /** Gets or sets the minimum number of characters for short link tokens. */
    minimumShortLinkTokenLength: number;

    /** Gets or sets the navigation urls. */
    navigationUrls?: Record<string, string> | null;

    /** Gets or sets the personalization segments. */
    personalizationSegments?: ListItemBag[] | null;

    /** Gets or sets the applications that support push notifications. */
    pushApplications?: ListItemBag[] | null;

    recipients?: CommunicationEntryWizardRecipientBag[] | null;

    /** Gets or sets the security grant token. */
    securityGrantToken?: string | null;

    /** Gets or sets the sites enabled for shortening. */
    shortLinkSites?: ListItemBag[] | null;

    /** Gets or sets the SMS accepted MIME types. */
    smsAcceptedMimeTypes?: string[] | null;

    smsFromNumbers?: ListItemBag[] | null;

    /** Gets or sets the SMS media size limit in bytes. */
    smsMediaSizeLimitBytes: number;

    /** Gets or sets the SMS supported MIME types. */
    smsSupportedMimeTypes?: string[] | null;

    /** Gets or sets the communication templates. */
    templates?: CommunicationEntryWizardCommunicationTemplateListItemBag[] | null;

    /** Gets or sets the video provider names. */
    videoProviderNames?: string[] | null;
};
