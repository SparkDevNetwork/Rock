//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { DynamicComponentDefinitionBag } from "@Obsidian/ViewModels/Controls/dynamicComponentDefinitionBag";
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";

/** The item details for the Automation Event. */
export type AutomationEventBag = {
    /** Gets or sets the attributes. */
    attributes?: Record<string, PublicAttributeBag> | null;

    /** Gets or sets the attribute values. */
    attributeValues?: Record<string, string> | null;

    /** The configuration settings for the event component. */
    componentConfiguration?: Record<string, string> | null;

    /**
     * The definition of the initial component to render based on the
     * current selection. This is read-only.
     */
    componentDefinition?: DynamicComponentDefinitionBag | null;

    /**
     * The description of the event. This is calculated by the component
     * so it is considered read-only.
     */
    description?: string | null;

    /**
     * The type of event component that will be used to process this
     * event.
     */
    eventType?: ListItemBag | null;

    /** The component icon class for this event. This is read-only. */
    iconCssClass?: string | null;

    /** Gets or sets the identifier key of this entity. */
    idKey?: string | null;

    /**
     * Indicates if this event is active. If this is set to false
     * then the event will not be executed.
     */
    isActive: boolean;

    /**
     * The description of the event. This is calculated by the component
     * so it is considered read-only.
     */
    name?: string | null;
};
