//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { AutomationEventBag } from "@Obsidian/ViewModels/Blocks/Core/AutomationTriggerDetail/automationEventBag";
import { DynamicComponentDefinitionBag } from "@Obsidian/ViewModels/Controls/dynamicComponentDefinitionBag";
import { AutomationValueDefinitionBag } from "@Obsidian/ViewModels/Core/Automation/automationValueDefinitionBag";
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";

/** The item details for the Automation Trigger Detail block. */
export type AutomationTriggerBag = {
    /** Gets or sets the attributes. */
    attributes?: Record<string, PublicAttributeBag> | null;

    /** Gets or sets the attribute values. */
    attributeValues?: Record<string, string> | null;

    /** The configuration settings for the trigger component. */
    componentConfiguration?: Record<string, string> | null;

    /**
     * The definition of the initial component to render based on the
     * current selection. This is read-only.
     */
    componentDefinition?: DynamicComponentDefinitionBag | null;

    /**
     * The configuration details that will be displayed in the UI when
     * in view mode. These provide additional context about how the component
     * is configured. This is read-only.
     */
    configurationDetails?: ListItemBag[] | null;

    /**
     * The description of the trigger. This is used to provide additional
     * details about when the trigger will execute the events and describe
     * the purpose the trigger serves.
     */
    description?: string | null;

    /** The events that have been created and attached to this trigger. */
    events?: AutomationEventBag[] | null;

    /** Gets or sets the identifier key of this entity. */
    idKey?: string | null;

    /**
     * Indicates if this trigger is active. If this is set to false
     * then the trigger will not be initialized and no events will execute.
     */
    isActive: boolean;

    /**
     * The name of the trigger. This is used to identify the trigger in the
     * user interface and logs. It should be short, but descriptive.
     */
    name?: string | null;

    /**
     * The type of trigger component that will be used to process this
     * trigger.
     */
    triggerType?: ListItemBag | null;

    /**
     * The definitions for what values are available on events executed by
     * this trigger. This is only valid in view mode and is read-only.
     */
    valueDefinitions?: AutomationValueDefinitionBag[] | null;
};
