//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

import { Guid } from "@Obsidian/Types";

/**
 * The options that can be passed to the ChildTreeItems API action of
 * the CategoryPicker control.
 */
export type CategoryPickerChildTreeItemsOptionsBag = {
    /**
     * Gets or sets the default icon CSS class to use for items that do not
     * specify their own IconCssClass value.
     */
    defaultIconCssClass?: string | null;

    /**
     * Gets or sets the entity type unique identifier to limit the
     * results to.
     */
    entityTypeGuid?: Guid | null;

    /**
     * Gets or sets the entity qualifier that is used to filter category
     * results. If not blank, then the category EntityTypeQualifierColumn
     * property must match this value.
     */
    entityTypeQualifierColumn?: string | null;

    /**
     * Gets or sets the entity qualifier value that is used to filter
     * category results. If both this and Rock.ViewModels.Rest.Controls.CategoryPickerChildTreeItemsOptionsBag.EntityTypeQualifierColumn
     * are not blank, then the category EntityTypeQualifierValue property
     * must match this value.
     */
    entityTypeQualifierValue?: string | null;

    /**
     * Gets or sets a value indicating whether items should be loaded
     * or only categories.
     */
    getCategorizedItems: boolean;

    /**
     * Gets or sets a value indicating whether categories that have no
     * child categories and no items should be included.
     */
    includeCategoriesWithoutChildren: boolean;

    /**
     * Gets or sets a value indicating whether inactive items should be
     * included in the results. If the entity type does not support the
     * IsActive property then this value will be ignored.
     */
    includeInactiveItems: boolean;

    /**
     * Gets or sets a value indicating whether entity items without a name
     * should be included in the results. Only applies if
     * Rock.ViewModels.Rest.Controls.CategoryPickerChildTreeItemsOptionsBag.GetCategorizedItems is true.
     */
    includeUnnamedEntityItems: boolean;

    /**
     * Gets or sets the name of the item property to use for comparison
     * with Rock.ViewModels.Rest.Controls.CategoryPickerChildTreeItemsOptionsBag.ItemFilterPropertyValue. When set the item query
     * will attempt to filter on this property name. If it does not exist
     * then an exception will be thrown.
     */
    itemFilterPropertyName?: string | null;

    /**
     * Gets or sets the item property value to compare against. This should
     * be either an integer-string, Guid-string or plain string for
     * comparison. And must match the database property type.
     */
    itemFilterPropertyValue?: string | null;

    /**
     * Gets or sets a value indicating whether child categories and items
     * are loaded automatically. If true then all descendant categories
     * will be loaded along with the items if Rock.ViewModels.Rest.Controls.CategoryPickerChildTreeItemsOptionsBag.GetCategorizedItems
     * is also true. This results in the Children property of the results
     * being null to indicate they must be loaded on demand.
     */
    lazyLoad: boolean;

    /**
     * Gets or sets the parent unique identifier whose children are to
     * be retrieved. If null then the root items are being requested.
     */
    parentGuid?: Guid | null;

    /**
     * Gets or sets the security grant token to use when performing
     * authorization checks.
     */
    securityGrantToken?: string | null;
};
