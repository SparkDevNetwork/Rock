//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

/** The type of rule used to determine if a chat message should trigger an automation event. */
export const ChatMessageCriteriaRuleType = {
    /** The message was sent within a channel of a specified type. */
    ChannelType: 0,

    /** The message was sent within a specified channel. */
    Channel: 1,

    /** The message contains a simple, case-insensitive string value. */
    MessageContains: 2,

    /** The message matches a Regex pattern. */
    MessagePattern: 3
} as const;

/** The type of rule used to determine if a chat message should trigger an automation event. */
export const ChatMessageCriteriaRuleTypeDescription: Record<number, string> = {
    0: "Channel Type",

    1: "Channel",

    2: "Message Contains",

    3: "Message Pattern"
};

/** The type of rule used to determine if a chat message should trigger an automation event. */
export type ChatMessageCriteriaRuleType = typeof ChatMessageCriteriaRuleType[keyof typeof ChatMessageCriteriaRuleType];
