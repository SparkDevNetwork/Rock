//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

/**
 * Determines how the Grade and Age matching logic will work in check-in.
 * This only affects the Grade Range, Age Range and Birthdate Range values
 * for groups. Other filtering options are not affected.
 */
export const GradeAndAgeMatchingMode = {
    /**
     * The grade and age must both match (assuming both are specified on
     * the group).
     * 
     * If a group has a Grade Range, Age Range and Birthdate Range then
     * the logic is: Grade must match and one of age or birthdate must
     * match. Basically, the Grade filter runs, and then after it finishes
     * the Age filter runs (which checks both age and birthdate).
     */
    GradeAndAgeMustMatch: 0,

    /**
     * If a Grade Range is specified on the group and the person has a
     * matching Grade, then that will be considered sufficient and neither
     * Age Range nor Birthdate Range will be checked even if they are
     * specified.
     * 
     * If a Grade Range is not specified but Age Range or Birthdate Range
     * are specified, then one of either Age Range or Birthdate Range must
     * match the person's age.
     */
    AgeMatchNotRequired: 1,

    /**
     * The same per-group filtering logic as Rock.Enums.CheckIn.GradeAndAgeMatchingMode.AgeMatchNotRequired
     * is performed. After all groups have been filtered, if any of those
     * matching groups were matched by Grade Range then they will take
     * priority over all other matching groups. The other groups that
     * did not match by grade will then be removed from the opportunity
     * list.
     */
    PrioritizeGradeOverAge: 2
} as const;

/**
 * Determines how the Grade and Age matching logic will work in check-in.
 * This only affects the Grade Range, Age Range and Birthdate Range values
 * for groups. Other filtering options are not affected.
 */
export const GradeAndAgeMatchingModeDescription: Record<number, string> = {
    0: "Grade And Age Must Match",

    1: "Age Match Not Required",

    2: "Prioritize Grade Over Age"
};

/**
 * Determines how the Grade and Age matching logic will work in check-in.
 * This only affects the Grade Range, Age Range and Birthdate Range values
 * for groups. Other filtering options are not affected.
 */
export type GradeAndAgeMatchingMode = typeof GradeAndAgeMatchingMode[keyof typeof GradeAndAgeMatchingMode];
