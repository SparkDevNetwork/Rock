//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using Rock;
using Rock.Model;
using Rock.Rest.Filters;

namespace Rock.Rest.Controllers
{
    /// <summary>
    /// Additional methods for the FinancialPaymentDetails REST API
    /// </summary>
    public partial class FinancialScheduledTransactionsController
    {
        /// <summary>
        /// Gets Scheduled Transactions that have a Credit Card that is going to expire in the next X days (or has expired already)
        /// </summary>
        /// <param name="numberOfDays">The number of days from now</param>
        /// <param name="daysBack">The number of days ago. For example, if you don't want to include ones that have already expired, set daysBack=0.</param>
        /// <returns></returns>
        [Authenticate, Secured]
        [System.Web.Http.Route( "api/FinancialScheduledTransactions/GetExpiring" )]
        public List<FinancialScheduledTransaction> GetExpiring( int numberOfDays, int? daysBack = null )
        {
            // qry all ScheduledTransactions that have a FinancialPaymentDetail with an ExpirationMonth and Year
            var qry = this.Service.Queryable().Include( a => a.FinancialPaymentDetail ).Where( a => a.FinancialPaymentDetail.ExpirationMonthEncrypted != null && a.FinancialPaymentDetail.ExpirationYearEncrypted != null );

            //  fetch all the ScheduleTransactions into a list since ExpirationYear and ExpirationMonth are the decrypted from ExpirationMonthEncrypted and ExpirationYearEncrypted in C#
            var resultList = qry.ToList();

            var currentDate = RockDateTime.Now.Date;

            var expirationEndCutoff = currentDate.AddDays( numberOfDays );
            var expirationStartCutoff = daysBack.HasValue ? currentDate.AddDays( -daysBack.Value ) : DateTime.MinValue;
            var resultListWithExpiration = resultList.Select( a => new
            {
                a.FinancialPaymentDetail.ExpirationMonth,
                a.FinancialPaymentDetail.ExpirationYear,
                ExpirationDateTime = new DateTime( a.FinancialPaymentDetail.ExpirationYear.Value, a.FinancialPaymentDetail.ExpirationMonth.Value, 1 ).AddMonths( 1 ),
                FinancialScheduledTransaction = a,
            } );

            resultListWithExpiration = resultListWithExpiration.OrderBy( a => a.ExpirationDateTime );

            resultList = resultListWithExpiration
                .Where( a => a.ExpirationDateTime < expirationEndCutoff && a.ExpirationDateTime > expirationStartCutoff )
                .Select( a => a.FinancialScheduledTransaction ).ToList();

            return resultList;
        }
    }
}
