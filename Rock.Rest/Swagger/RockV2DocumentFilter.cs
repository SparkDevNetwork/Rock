// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System.Linq;
using System.Web.Http.Description;

using Swashbuckle.Swagger;

namespace Rock.Rest.Swagger
{
    /// <summary>
    /// Filters the final document generated by Swagger.
    /// </summary>
    internal class RockV2DocumentFilter : IDocumentFilter
    {
        /// <summary>
        /// Applies any custom changes to the specified swagger document.
        /// </summary>
        /// <param name="swaggerDoc">The swagger document.</param>
        /// <param name="schemaRegistry">The schema registry.</param>
        /// <param name="apiExplorer">The API explorer.</param>
        public void Apply( SwaggerDocument swaggerDoc, SchemaRegistry schemaRegistry, IApiExplorer apiExplorer )
        {
            var pathsToRemove = swaggerDoc.paths
                .Where( pathItem => !pathItem.Key.StartsWith( "/api/v2/" ) )
                .ToList();

            foreach ( var item in pathsToRemove )
            {
                swaggerDoc.paths.Remove( item.Key );
            }

            // Convert the XML formatted comments in the <remarks> tags to
            // a format that is closer to the markdown that Swagger UI expects.
            foreach ( var path in swaggerDoc.paths )
            {
                var operations = new Operation[]
                {
                    path.Value.delete,
                    path.Value.get,
                    path.Value.head,
                    path.Value.options,
                    path.Value.patch,
                    path.Value.post,
                    path.Value.put
                };

                foreach ( var operation in operations )
                {
                    if ( operation != null && operation.description != null )
                    {
                        operation.description = RockV2XmlCommentsTextHelper.Humanize( operation.description );
                    }
                }
            }
        }
    }
}
