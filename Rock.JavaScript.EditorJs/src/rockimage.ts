import EditorImage, { ImageConfig, ImageData, ImageUpload } from "@editorjs/image"
import { API, BlockToolConstructorOptions } from "@editorjs/editorjs";

/**
 * The save data for the RockImage block.
 */
interface RockImageData extends ImageData {
    /** This is the legacy URL used by the previous simple image tool. */
    url?: string;

    file?: {
        /** The URL used to display the image. */
        url: string,

        /** The identifier of the image if it was uploaded into Rock. */
        fileId?: number;
    }
}

/**
 * The configuration options for the RockImage block.
 */
interface RockImageConfig extends ImageConfig {
    /** The binary file type unique identifier to use when uploading. */
    binaryFileType?: string;
};

/**
 * Upload a file to Rock and return the link to view it with.
 * 
 * @param file The file to be uploaded.
 */
async function uploadByFile(file: File, fileTypeGuid: string): Promise<ImageUpload> {
    const data = new FormData();

    data.append("file", file);

    return await $.ajax({
        url: `/FileUploader.ashx?isBinaryFile=1&fileTypeGuid=${fileTypeGuid}`,
        type: 'POST',
        contentType: false,
        data: data,
        processData: false,
        cache: false,
        dataType: 'json'
    }).then(function (uploadedFile) {
        if (uploadedFile.Id && uploadedFile.FileName) {
            return {
                success: true,
                file: {
                    url: `/GetImage.ashx?Id=${uploadedFile.Id}`,
                    fileId: uploadedFile.Id
                }
            }
        }
        else {
            return {
                success: false,
                file: {
                    url: ""
                }
            };
        }
    });
}

/**
 * Upload by URL. In this case we just return the URL itself.
 * 
 * @param url The URL of the image.
 */
function uploadByUrl(url: string): Promise<ImageUpload> {
    return new Promise((resolve, reject) => {
        resolve({
            success: true,
            file: {
                url: url
            }
        });
    });
}


/**
 * Extended implementation of the standard EditorJS image tool. This is updated
 * to work specifically with Rock.
 */
export class RockImage extends EditorImage {
    /**
     * Creates a new instance of the RockImage block tool.
     * 
     * @param config The initialization data.
     */
    constructor(config: BlockToolConstructorOptions<RockImageData, RockImageConfig>) {
        /* Use unsecured file type unless the user specifies one. */
        const binaryFileType = config.config?.binaryFileType || "C1142570-8CD6-4A20-83B1-ACB47C1CD377";

        config.config = config.config || {};

        /* Override the uploader to use our custom Rock uploader. */
        config.config.uploader = {
            uploadByUrl: uploadByUrl,
            uploadByFile: function (file: File) { return uploadByFile(file, binaryFileType); }
        };

        config.data = config.data || {};

        /* Convert legacy URL. */
        if (config.data.url !== undefined && config.data.file === undefined) {
            config.data.file = {
                url: config.data.url
            };

            delete config.data.url;
        }

        super(config);
    }

    /**
     * Render the settings tune that lets the user configure the block.
     * 
     * @returns The HTML element that contains our actions.
     */
    public renderSettings() {
        let settings = super.renderSettings();

        if (!Array.isArray(settings)) {
            settings = [settings];
        }

        /* Remove the withBorder and withBackground actions. They don't make
         * sense in our use case. */
        for (let i = 0; i < settings.length; ) {
            const child = settings[i];

            if (child.name === "withBorder" || child.name === "withBackground") {
                settings.splice(i, 1);
            }
            else {
                i++;
            }
        }

        return settings;
    }

    /**
     * Get the save data for the block.
     * 
     * @param blockWrapper The HTML element that contains all our content.
     * @returns Our save data.
     */
    public save(blockWrapper: HTMLDivElement) {
        const data = <RockImageData>super.save(blockWrapper);

        /* Ensure we have an empty url string if no upload performed. */
        data.file = data.file || { url: "" };
        data.file.url = data.file.url ?? "";

        /* Remove values we don't use. */
        delete data.withBackground;
        delete data.withBorder;

        return data;
    }

    /**
     * Checks if the data that describes this block's contents should be
     * included in the editor's save data.
     * 
     * @param savedData The data generated by the save method.
     * @returns true if this block should be included in the editor's save data; false otherwise.
     */
    public validate(savedData: RockImageData) {
        return savedData.file!.url !== "";
    }
}
