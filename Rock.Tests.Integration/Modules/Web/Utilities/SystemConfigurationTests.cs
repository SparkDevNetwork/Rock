// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using Rock.Data;
using Rock.Tests.Shared;
using Rock.Tests.Shared.TestFramework;

namespace Rock.Tests.Integration.Modules.Web.Utilities
{
    [TestClass]
    [TestCategory( "Rock.Web.SystemConfiguration" )]
    public class SystemConfigurationTests : DatabaseTestsBase
    {
        private const string RockGetDateFunctionName = "ROCKGETDATE";

        [TestMethod]
        public void OrgTimeZone_SetNewValueWithNoExistingConfiguration_AddsUserFunction()
        {
            // Remove the RockGetDate function if it exists.
            var result = DbService.ExecuteCommand( $"DROP FUNCTION IF EXISTS [{RockGetDateFunctionName}]" );
            Assert.That.AreEqual( -1, result );
            RockDateTimeHelper.SetOrgTimeZoneForCurrentDatabase( null );

            RockDateTimeHelper.SynchronizeTimeZoneConfiguration( RockDateTime.OrgTimeZoneInfo.Id );

            // Get the date generated by the function and confirm that it is set to the specified organization timezone.
            var newDateTime = DbService.ExecuteScalar( $"SELECT [dbo].[{RockGetDateFunctionName}]() AS [RockDate]" ) as DateTime?;

            Assert.That.AreProximate( RockDateTime.Now, newDateTime, new TimeSpan( 0, 1, 0 ) );
        }

        [TestMethod]
        public void OrgTimeZone_ChangeConfigurationForExistingFunction_ReconfiguresUserFunction()
        {
            // Set initial time zone for testing.
            var tz0 = TimeZoneInfo.FindSystemTimeZoneById( "Eastern Standard Time" );

            RockDateTimeHelper.SynchronizeTimeZoneConfiguration( tz0.Id );

            // Configure the user function for an alternate timezone and confirm that it produces a datetime
            // with an offset for that timezone.
            var tz1 = TimeZoneInfo.FindSystemTimeZoneById( "Pacific Standard Time" );

            RockDateTimeHelper.SynchronizeTimeZoneConfiguration( tz1.Id );

            AssertRockDateTimeFunctionOffset( tz1.GetUtcOffset( DateTime.Now ).TotalHours );

            // Restore the original timezone setting, and confirm the expected function result.
            RockDateTimeHelper.SynchronizeTimeZoneConfiguration( tz0.Id );

            AssertRockDateTimeFunctionOffset( tz0.GetUtcOffset( DateTime.Now ).TotalHours );
        }

        private static void AssertRockDateTimeFunctionOffset( double expectedOffsetInHours )
        {
            var offset = DbService.ExecuteScalar( $"SELECT DATEDIFF( hour, GETUTCDATE(), [dbo].[{RockGetDateFunctionName}]() )" );

            Assert.That.AreEqual( expectedOffsetInHours, Convert.ToDouble( offset ) );
        }

        [TestMethod]
        public void OrgTimeZone_SetInvalidValue_FailsWithError()
        {
            try
            {
                RockDateTimeHelper.SynchronizeTimeZoneConfiguration( "invalid_timezone" );

                Assert.That.Fail( "Expected exception not thrown." );
            }
            catch ( Exception ex )
            {
                // Verify that the error message includes the name of the invalid timezone.
                Assert.That.Contains( ex.Message, "invalid_timezone" );
            }
        }
    }
}
